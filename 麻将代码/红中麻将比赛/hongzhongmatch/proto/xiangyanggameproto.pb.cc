// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xiangyanggameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xiangyanggameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace xiangyangmj {

namespace {

const ::google::protobuf::Descriptor* FixedCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPreGangs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPreGangs_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagShowCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagShowCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPiaoScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPiaoScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPiaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPiaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGameScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGameScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagXYGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagXYGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xiangyanggameproto_2eproto() {
  protobuf_AddDesc_xiangyanggameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xiangyanggameproto.proto");
  GOOGLE_CHECK(file != NULL);
  FixedCard_descriptor_ = file->message_type(0);
  static const int FixedCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, chairid_),
  };
  FixedCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedCard_descriptor_,
      FixedCard::default_instance_,
      FixedCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedCard));
  HandCards_descriptor_ = file->message_type(1);
  static const int HandCards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, fixedcardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, stfixedcards_),
  };
  HandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandCards_descriptor_,
      HandCards::default_instance_,
      HandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandCards));
  tagHuInfo_descriptor_ = file->message_type(2);
  static const int tagHuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, hufannum_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  tagListenInfo_descriptor_ = file->message_type(3);
  static const int tagListenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, huinfo_),
  };
  tagListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagListenInfo_descriptor_,
      tagListenInfo::default_instance_,
      tagListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagListenInfo));
  tagPreGangs_descriptor_ = file->message_type(4);
  static const int tagPreGangs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, ganginfo_),
  };
  tagPreGangs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPreGangs_descriptor_,
      tagPreGangs::default_instance_,
      tagPreGangs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPreGangs));
  tagShowCards_descriptor_ = file->message_type(5);
  static const int tagShowCards_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, show_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, show_card_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, xy_pregang_),
  };
  tagShowCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagShowCards_descriptor_,
      tagShowCards::default_instance_,
      tagShowCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagShowCards));
  tagPiaoScore_descriptor_ = file->message_type(6);
  static const int tagPiaoScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoScore, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoScore, piao_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoScore, already_piao_),
  };
  tagPiaoScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPiaoScore_descriptor_,
      tagPiaoScore::default_instance_,
      tagPiaoScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPiaoScore));
  tagPiaoInfo_descriptor_ = file->message_type(7);
  static const int tagPiaoInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoInfo, is_piao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoInfo, can_piao_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoInfo, piao_scores_),
  };
  tagPiaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPiaoInfo_descriptor_,
      tagPiaoInfo::default_instance_,
      tagPiaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPiaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPiaoInfo));
  tagGameScene_descriptor_ = file->message_type(8);
  static const int tagGameScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, showcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, piao_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, room_user_id_),
  };
  tagGameScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGameScene_descriptor_,
      tagGameScene::default_instance_,
      tagGameScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGameScene));
  tagEndInfo_descriptor_ = file->message_type(9);
  static const int tagEndInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, piao_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, piao_totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, hu_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, show_card_),
  };
  tagEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndInfo_descriptor_,
      tagEndInfo::default_instance_,
      tagEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndInfo));
  tagXYGameEnd_descriptor_ = file->message_type(10);
  static const int tagXYGameEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagXYGameEnd, endinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagXYGameEnd, is_piao_),
  };
  tagXYGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagXYGameEnd_descriptor_,
      tagXYGameEnd::default_instance_,
      tagXYGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagXYGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagXYGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagXYGameEnd));
  ReqChoosePiao_descriptor_ = file->message_type(11);
  static const int ReqChoosePiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, isgouxuan_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  AckStartPiao_descriptor_ = file->message_type(12);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  AckBroadPiao_descriptor_ = file->message_type(13);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, userpiao_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xiangyanggameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedCard_descriptor_, &FixedCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandCards_descriptor_, &HandCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagListenInfo_descriptor_, &tagListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPreGangs_descriptor_, &tagPreGangs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagShowCards_descriptor_, &tagShowCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPiaoScore_descriptor_, &tagPiaoScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPiaoInfo_descriptor_, &tagPiaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGameScene_descriptor_, &tagGameScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndInfo_descriptor_, &tagEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagXYGameEnd_descriptor_, &tagXYGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xiangyanggameproto_2eproto() {
  delete FixedCard::default_instance_;
  delete FixedCard_reflection_;
  delete HandCards::default_instance_;
  delete HandCards_reflection_;
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete tagListenInfo::default_instance_;
  delete tagListenInfo_reflection_;
  delete tagPreGangs::default_instance_;
  delete tagPreGangs_reflection_;
  delete tagShowCards::default_instance_;
  delete tagShowCards_reflection_;
  delete tagPiaoScore::default_instance_;
  delete tagPiaoScore_reflection_;
  delete tagPiaoInfo::default_instance_;
  delete tagPiaoInfo_reflection_;
  delete tagGameScene::default_instance_;
  delete tagGameScene_reflection_;
  delete tagEndInfo::default_instance_;
  delete tagEndInfo_reflection_;
  delete tagXYGameEnd::default_instance_;
  delete tagXYGameEnd_reflection_;
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
}

void protobuf_AddDesc_xiangyanggameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030xiangyanggameproto.proto\022\026proto.game.x"
    "iangyangmj\"=\n\tFixedCard\022\020\n\010CardData\030\001 \002("
    "\005\022\r\n\005state\030\002 \001(\005\022\017\n\007chairID\030\003 \001(\005\"\220\001\n\tHa"
    "ndCards\022\032\n\022ChangeableCardsLen\030\001 \002(\005\022\027\n\017C"
    "hangeableCards\030\002 \003(\005\022\025\n\rFixedCardsLen\030\003 "
    "\001(\005\0227\n\014stFixedCards\030\004 \003(\0132!.proto.game.x"
    "iangyangmj.FixedCard\"<\n\ttagHuInfo\022\014\n\004Car"
    "d\030\001 \002(\005\022\017\n\007LeftNum\030\002 \001(\005\022\020\n\010HuFanNum\030\003 \001"
    "(\005\"S\n\rtagListenInfo\022\017\n\007OutCard\030\001 \002(\005\0221\n\006"
    "HuInfo\030\002 \003(\0132!.proto.game.xiangyangmj.ta"
    "gHuInfo\"0\n\013tagPreGangs\022\017\n\007OutCard\030\001 \002(\005\022"
    "\020\n\010GangInfo\030\002 \003(\005\"\360\001\n\014tagShowCards\022\021\n\tsh"
    "ow_card\030\001 \001(\010\0223\n\010UserCard\030\002 \001(\0132!.proto."
    "game.xiangyangmj.HandCards\022\016\n\006seatid\030\003 \001"
    "(\005\022\024\n\014show_card_op\030\004 \001(\010\0229\n\nListenInfo\030\005"
    " \003(\0132%.proto.game.xiangyangmj.tagListenI"
    "nfo\0227\n\nxy_pregang\030\006 \003(\0132#.proto.game.xia"
    "ngyangmj.tagPreGangs\"H\n\014tagPiaoScore\022\016\n\006"
    "seatid\030\001 \001(\005\022\022\n\npiao_score\030\002 \001(\005\022\024\n\014alre"
    "ady_piao\030\003 \001(\010\"r\n\013tagPiaoInfo\022\017\n\007is_piao"
    "\030\001 \001(\010\022\027\n\017can_piao_scores\030\002 \003(\005\0229\n\013piao_"
    "scores\030\003 \003(\0132$.proto.game.xiangyangmj.ta"
    "gPiaoScore\"\225\001\n\014tagGameScene\0227\n\tShowCards"
    "\030\001 \003(\0132$.proto.game.xiangyangmj.tagShowC"
    "ards\0226\n\tpiao_info\030\002 \001(\0132#.proto.game.xia"
    "ngyangmj.tagPiaoInfo\022\024\n\014room_user_id\030\003 \001"
    "(\005\"n\n\ntagEndInfo\022\016\n\006seatid\030\001 \001(\005\022\022\n\npiao"
    "_score\030\002 \001(\005\022\027\n\017piao_totalscore\030\003 \001(\005\022\020\n"
    "\010hu_score\030\004 \001(\005\022\021\n\tshow_card\030\005 \001(\010\"T\n\014ta"
    "gXYGameEnd\0223\n\007endinfo\030\001 \003(\0132\".proto.game"
    ".xiangyangmj.tagEndInfo\022\017\n\007is_piao\030\002 \001(\010"
    "\"3\n\rReqChoosePiao\022\017\n\007PiaoNum\030\001 \001(\005\022\021\n\tIs"
    "Gouxuan\030\002 \001(\005\"\037\n\014AckStartPiao\022\017\n\007piaoNum"
    "\030\001 \003(\005\"1\n\014AckBroadPiao\022\017\n\007chariid\030\001 \001(\005\022"
    "\020\n\010UserPiao\030\002 \001(\005", 1377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xiangyanggameproto.proto", &protobuf_RegisterTypes);
  FixedCard::default_instance_ = new FixedCard();
  HandCards::default_instance_ = new HandCards();
  tagHuInfo::default_instance_ = new tagHuInfo();
  tagListenInfo::default_instance_ = new tagListenInfo();
  tagPreGangs::default_instance_ = new tagPreGangs();
  tagShowCards::default_instance_ = new tagShowCards();
  tagPiaoScore::default_instance_ = new tagPiaoScore();
  tagPiaoInfo::default_instance_ = new tagPiaoInfo();
  tagGameScene::default_instance_ = new tagGameScene();
  tagEndInfo::default_instance_ = new tagEndInfo();
  tagXYGameEnd::default_instance_ = new tagXYGameEnd();
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  AckStartPiao::default_instance_ = new AckStartPiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  FixedCard::default_instance_->InitAsDefaultInstance();
  HandCards::default_instance_->InitAsDefaultInstance();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  tagListenInfo::default_instance_->InitAsDefaultInstance();
  tagPreGangs::default_instance_->InitAsDefaultInstance();
  tagShowCards::default_instance_->InitAsDefaultInstance();
  tagPiaoScore::default_instance_->InitAsDefaultInstance();
  tagPiaoInfo::default_instance_->InitAsDefaultInstance();
  tagGameScene::default_instance_->InitAsDefaultInstance();
  tagEndInfo::default_instance_->InitAsDefaultInstance();
  tagXYGameEnd::default_instance_->InitAsDefaultInstance();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xiangyanggameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xiangyanggameproto_2eproto {
  StaticDescriptorInitializer_xiangyanggameproto_2eproto() {
    protobuf_AddDesc_xiangyanggameproto_2eproto();
  }
} static_descriptor_initializer_xiangyanggameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FixedCard::kCardDataFieldNumber;
const int FixedCard::kStateFieldNumber;
const int FixedCard::kChairIDFieldNumber;
#endif  // !_MSC_VER

FixedCard::FixedCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixedCard::InitAsDefaultInstance() {
}

FixedCard::FixedCard(const FixedCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixedCard::SharedCtor() {
  _cached_size_ = 0;
  carddata_ = 0;
  state_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedCard::~FixedCard() {
  SharedDtor();
}

void FixedCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixedCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedCard_descriptor_;
}

const FixedCard& FixedCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

FixedCard* FixedCard::default_instance_ = NULL;

FixedCard* FixedCard::New() const {
  return new FixedCard;
}

void FixedCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carddata_ = 0;
    state_ = 0;
    chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carddata_)));
          set_has_carddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chairID;
        break;
      }

      // optional int32 chairID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CardData = 1;
  if (has_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carddata(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixedCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CardData = 1;
  if (has_carddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carddata(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixedCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardData = 1;
    if (has_carddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carddata());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 chairID = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedCard::MergeFrom(const FixedCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carddata()) {
      set_carddata(from.carddata());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedCard::CopyFrom(const FixedCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FixedCard::Swap(FixedCard* other) {
  if (other != this) {
    std::swap(carddata_, other->carddata_);
    std::swap(state_, other->state_);
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedCard_descriptor_;
  metadata.reflection = FixedCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandCards::kChangeableCardsLenFieldNumber;
const int HandCards::kChangeableCardsFieldNumber;
const int HandCards::kFixedCardsLenFieldNumber;
const int HandCards::kStFixedCardsFieldNumber;
#endif  // !_MSC_VER

HandCards::HandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandCards::InitAsDefaultInstance() {
}

HandCards::HandCards(const HandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandCards::SharedCtor() {
  _cached_size_ = 0;
  changeablecardslen_ = 0;
  fixedcardslen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCards::~HandCards() {
  SharedDtor();
}

void HandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCards_descriptor_;
}

const HandCards& HandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

HandCards* HandCards::default_instance_ = NULL;

HandCards* HandCards::New() const {
  return new HandCards;
}

void HandCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    changeablecardslen_ = 0;
    fixedcardslen_ = 0;
  }
  changeablecards_.Clear();
  stfixedcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChangeableCardsLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeablecardslen_)));
          set_has_changeablecardslen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        if (input->ExpectTag(24)) goto parse_FixedCardsLen;
        break;
      }

      // optional int32 FixedCardsLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FixedCardsLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixedcardslen_)));
          set_has_fixedcardslen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        break;
      }

      // repeated .proto.game.xiangyangmj.FixedCard stFixedCards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFixedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stfixedcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changeablecardslen(), output);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->changeablecards(i), output);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixedcardslen(), output);
  }

  // repeated .proto.game.xiangyangmj.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stfixedcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changeablecardslen(), target);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->changeablecards(i), target);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixedcardslen(), target);
  }

  // repeated .proto.game.xiangyangmj.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stfixedcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChangeableCardsLen = 1;
    if (has_changeablecardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeablecardslen());
    }

    // optional int32 FixedCardsLen = 3;
    if (has_fixedcardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixedcardslen());
    }

  }
  // repeated int32 ChangeableCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  // repeated .proto.game.xiangyangmj.FixedCard stFixedCards = 4;
  total_size += 1 * this->stfixedcards_size();
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stfixedcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCards::MergeFrom(const HandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  stfixedcards_.MergeFrom(from.stfixedcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeablecardslen()) {
      set_changeablecardslen(from.changeablecardslen());
    }
    if (from.has_fixedcardslen()) {
      set_fixedcardslen(from.fixedcardslen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCards::CopyFrom(const HandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < stfixedcards_size(); i++) {
    if (!this->stfixedcards(i).IsInitialized()) return false;
  }
  return true;
}

void HandCards::Swap(HandCards* other) {
  if (other != this) {
    std::swap(changeablecardslen_, other->changeablecardslen_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(fixedcardslen_, other->fixedcardslen_);
    stfixedcards_.Swap(&other->stfixedcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCards_descriptor_;
  metadata.reflection = HandCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kCardFieldNumber;
const int tagHuInfo::kLeftNumFieldNumber;
const int tagHuInfo::kHuFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  leftnum_ = 0;
  hufannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    leftnum_ = 0;
    hufannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftNum;
        break;
      }

      // optional int32 LeftNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnum_)));
          set_has_leftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuFanNum;
        break;
      }

      // optional int32 HuFanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufannum_)));
          set_has_hufannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftnum(), output);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hufannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftnum(), target);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hufannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 LeftNum = 2;
    if (has_leftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnum());
    }

    // optional int32 HuFanNum = 3;
    if (has_hufannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_leftnum()) {
      set_leftnum(from.leftnum());
    }
    if (from.has_hufannum()) {
      set_hufannum(from.hufannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(leftnum_, other->leftnum_);
    std::swap(hufannum_, other->hufannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagListenInfo::kOutCardFieldNumber;
const int tagListenInfo::kHuInfoFieldNumber;
#endif  // !_MSC_VER

tagListenInfo::tagListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagListenInfo::InitAsDefaultInstance() {
}

tagListenInfo::tagListenInfo(const tagListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagListenInfo::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagListenInfo::~tagListenInfo() {
  SharedDtor();
}

void tagListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagListenInfo_descriptor_;
}

const tagListenInfo& tagListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagListenInfo* tagListenInfo::default_instance_ = NULL;

tagListenInfo* tagListenInfo::New() const {
  return new tagListenInfo;
}

void tagListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcard_ = 0;
  }
  huinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.xiangyangmj.tagHuInfo HuInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated .proto.game.xiangyangmj.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated .proto.game.xiangyangmj.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated .proto.game.xiangyangmj.tagHuInfo HuInfo = 2;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagListenInfo::MergeFrom(const tagListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huinfo_.MergeFrom(from.huinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagListenInfo::CopyFrom(const tagListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagListenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < huinfo_size(); i++) {
    if (!this->huinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagListenInfo::Swap(tagListenInfo* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagListenInfo_descriptor_;
  metadata.reflection = tagListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPreGangs::kOutCardFieldNumber;
const int tagPreGangs::kGangInfoFieldNumber;
#endif  // !_MSC_VER

tagPreGangs::tagPreGangs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPreGangs::InitAsDefaultInstance() {
}

tagPreGangs::tagPreGangs(const tagPreGangs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPreGangs::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPreGangs::~tagPreGangs() {
  SharedDtor();
}

void tagPreGangs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagPreGangs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPreGangs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPreGangs_descriptor_;
}

const tagPreGangs& tagPreGangs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagPreGangs* tagPreGangs::default_instance_ = NULL;

tagPreGangs* tagPreGangs::New() const {
  return new tagPreGangs;
}

void tagPreGangs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcard_ = 0;
  }
  ganginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPreGangs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangInfo;
        break;
      }

      // repeated int32 GangInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ganginfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ganginfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPreGangs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated int32 GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ganginfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPreGangs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated int32 GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ganginfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPreGangs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated int32 GangInfo = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ganginfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ganginfo(i));
    }
    total_size += 1 * this->ganginfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPreGangs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPreGangs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPreGangs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPreGangs::MergeFrom(const tagPreGangs& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo_.MergeFrom(from.ganginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPreGangs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPreGangs::CopyFrom(const tagPreGangs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPreGangs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagPreGangs::Swap(tagPreGangs* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    ganginfo_.Swap(&other->ganginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPreGangs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPreGangs_descriptor_;
  metadata.reflection = tagPreGangs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagShowCards::kShowCardFieldNumber;
const int tagShowCards::kUserCardFieldNumber;
const int tagShowCards::kSeatidFieldNumber;
const int tagShowCards::kShowCardOpFieldNumber;
const int tagShowCards::kListenInfoFieldNumber;
const int tagShowCards::kXyPregangFieldNumber;
#endif  // !_MSC_VER

tagShowCards::tagShowCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagShowCards::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::xiangyangmj::HandCards*>(&::proto::game::xiangyangmj::HandCards::default_instance());
}

tagShowCards::tagShowCards(const tagShowCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagShowCards::SharedCtor() {
  _cached_size_ = 0;
  show_card_ = false;
  usercard_ = NULL;
  seatid_ = 0;
  show_card_op_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagShowCards::~tagShowCards() {
  SharedDtor();
}

void tagShowCards::SharedDtor() {
  if (this != default_instance_) {
    delete usercard_;
  }
}

void tagShowCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagShowCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagShowCards_descriptor_;
}

const tagShowCards& tagShowCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagShowCards* tagShowCards::default_instance_ = NULL;

tagShowCards* tagShowCards::New() const {
  return new tagShowCards;
}

void tagShowCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_card_ = false;
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::xiangyangmj::HandCards::Clear();
    }
    seatid_ = 0;
    show_card_op_ = false;
  }
  listeninfo_.Clear();
  xy_pregang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagShowCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_card_)));
          set_has_show_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserCard;
        break;
      }

      // optional .proto.game.xiangyangmj.HandCards UserCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_card_op;
        break;
      }

      // optional bool show_card_op = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_card_op_)));
          set_has_show_card_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.xiangyangmj.tagListenInfo ListenInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ListenInfo;
        if (input->ExpectTag(50)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.xiangyangmj.tagPreGangs xy_pregang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_xy_pregang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagShowCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool show_card = 1;
  if (has_show_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_card(), output);
  }

  // optional .proto.game.xiangyangmj.HandCards UserCard = 2;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usercard(), output);
  }

  // optional int32 seatid = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // optional bool show_card_op = 4;
  if (has_show_card_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_card_op(), output);
  }

  // repeated .proto.game.xiangyangmj.tagListenInfo ListenInfo = 5;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->listeninfo(i), output);
  }

  // repeated .proto.game.xiangyangmj.tagPreGangs xy_pregang = 6;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xy_pregang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagShowCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool show_card = 1;
  if (has_show_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_card(), target);
  }

  // optional .proto.game.xiangyangmj.HandCards UserCard = 2;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usercard(), target);
  }

  // optional int32 seatid = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // optional bool show_card_op = 4;
  if (has_show_card_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_card_op(), target);
  }

  // repeated .proto.game.xiangyangmj.tagListenInfo ListenInfo = 5;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->listeninfo(i), target);
  }

  // repeated .proto.game.xiangyangmj.tagPreGangs xy_pregang = 6;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->xy_pregang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagShowCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool show_card = 1;
    if (has_show_card()) {
      total_size += 1 + 1;
    }

    // optional .proto.game.xiangyangmj.HandCards UserCard = 2;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 seatid = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bool show_card_op = 4;
    if (has_show_card_op()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.game.xiangyangmj.tagListenInfo ListenInfo = 5;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.xiangyangmj.tagPreGangs xy_pregang = 6;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagShowCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagShowCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagShowCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagShowCards::MergeFrom(const tagShowCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  listeninfo_.MergeFrom(from.listeninfo_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_card()) {
      set_show_card(from.show_card());
    }
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::xiangyangmj::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_show_card_op()) {
      set_show_card_op(from.show_card_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagShowCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagShowCards::CopyFrom(const tagShowCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagShowCards::IsInitialized() const {

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < xy_pregang_size(); i++) {
    if (!this->xy_pregang(i).IsInitialized()) return false;
  }
  return true;
}

void tagShowCards::Swap(tagShowCards* other) {
  if (other != this) {
    std::swap(show_card_, other->show_card_);
    std::swap(usercard_, other->usercard_);
    std::swap(seatid_, other->seatid_);
    std::swap(show_card_op_, other->show_card_op_);
    listeninfo_.Swap(&other->listeninfo_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagShowCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagShowCards_descriptor_;
  metadata.reflection = tagShowCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPiaoScore::kSeatidFieldNumber;
const int tagPiaoScore::kPiaoScoreFieldNumber;
const int tagPiaoScore::kAlreadyPiaoFieldNumber;
#endif  // !_MSC_VER

tagPiaoScore::tagPiaoScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPiaoScore::InitAsDefaultInstance() {
}

tagPiaoScore::tagPiaoScore(const tagPiaoScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPiaoScore::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  piao_score_ = 0;
  already_piao_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPiaoScore::~tagPiaoScore() {
  SharedDtor();
}

void tagPiaoScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagPiaoScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPiaoScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPiaoScore_descriptor_;
}

const tagPiaoScore& tagPiaoScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagPiaoScore* tagPiaoScore::default_instance_ = NULL;

tagPiaoScore* tagPiaoScore::New() const {
  return new tagPiaoScore;
}

void tagPiaoScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    piao_score_ = 0;
    already_piao_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPiaoScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piao_score;
        break;
      }

      // optional int32 piao_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_score_)));
          set_has_piao_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_already_piao;
        break;
      }

      // optional bool already_piao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &already_piao_)));
          set_has_already_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPiaoScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 piao_score = 2;
  if (has_piao_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piao_score(), output);
  }

  // optional bool already_piao = 3;
  if (has_already_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->already_piao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPiaoScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 piao_score = 2;
  if (has_piao_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piao_score(), target);
  }

  // optional bool already_piao = 3;
  if (has_already_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->already_piao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPiaoScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 piao_score = 2;
    if (has_piao_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao_score());
    }

    // optional bool already_piao = 3;
    if (has_already_piao()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPiaoScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPiaoScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPiaoScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPiaoScore::MergeFrom(const tagPiaoScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_piao_score()) {
      set_piao_score(from.piao_score());
    }
    if (from.has_already_piao()) {
      set_already_piao(from.already_piao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPiaoScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPiaoScore::CopyFrom(const tagPiaoScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPiaoScore::IsInitialized() const {

  return true;
}

void tagPiaoScore::Swap(tagPiaoScore* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(piao_score_, other->piao_score_);
    std::swap(already_piao_, other->already_piao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPiaoScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPiaoScore_descriptor_;
  metadata.reflection = tagPiaoScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPiaoInfo::kIsPiaoFieldNumber;
const int tagPiaoInfo::kCanPiaoScoresFieldNumber;
const int tagPiaoInfo::kPiaoScoresFieldNumber;
#endif  // !_MSC_VER

tagPiaoInfo::tagPiaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPiaoInfo::InitAsDefaultInstance() {
}

tagPiaoInfo::tagPiaoInfo(const tagPiaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPiaoInfo::SharedCtor() {
  _cached_size_ = 0;
  is_piao_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPiaoInfo::~tagPiaoInfo() {
  SharedDtor();
}

void tagPiaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagPiaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPiaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPiaoInfo_descriptor_;
}

const tagPiaoInfo& tagPiaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagPiaoInfo* tagPiaoInfo::default_instance_ = NULL;

tagPiaoInfo* tagPiaoInfo::New() const {
  return new tagPiaoInfo;
}

void tagPiaoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_piao_ = false;
  }
  can_piao_scores_.Clear();
  piao_scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPiaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_piao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_piao_)));
          set_has_is_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_piao_scores;
        break;
      }

      // repeated int32 can_piao_scores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_piao_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_can_piao_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_can_piao_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_piao_scores;
        if (input->ExpectTag(26)) goto parse_piao_scores;
        break;
      }

      // repeated .proto.game.xiangyangmj.tagPiaoScore piao_scores = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_piao_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_piao_scores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_piao_scores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPiaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_piao = 1;
  if (has_is_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_piao(), output);
  }

  // repeated int32 can_piao_scores = 2;
  for (int i = 0; i < this->can_piao_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->can_piao_scores(i), output);
  }

  // repeated .proto.game.xiangyangmj.tagPiaoScore piao_scores = 3;
  for (int i = 0; i < this->piao_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->piao_scores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPiaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_piao = 1;
  if (has_is_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_piao(), target);
  }

  // repeated int32 can_piao_scores = 2;
  for (int i = 0; i < this->can_piao_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->can_piao_scores(i), target);
  }

  // repeated .proto.game.xiangyangmj.tagPiaoScore piao_scores = 3;
  for (int i = 0; i < this->piao_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->piao_scores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPiaoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_piao = 1;
    if (has_is_piao()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 can_piao_scores = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_piao_scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->can_piao_scores(i));
    }
    total_size += 1 * this->can_piao_scores_size() + data_size;
  }

  // repeated .proto.game.xiangyangmj.tagPiaoScore piao_scores = 3;
  total_size += 1 * this->piao_scores_size();
  for (int i = 0; i < this->piao_scores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->piao_scores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPiaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPiaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPiaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPiaoInfo::MergeFrom(const tagPiaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_piao_scores_.MergeFrom(from.can_piao_scores_);
  piao_scores_.MergeFrom(from.piao_scores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_piao()) {
      set_is_piao(from.is_piao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPiaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPiaoInfo::CopyFrom(const tagPiaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPiaoInfo::IsInitialized() const {

  return true;
}

void tagPiaoInfo::Swap(tagPiaoInfo* other) {
  if (other != this) {
    std::swap(is_piao_, other->is_piao_);
    can_piao_scores_.Swap(&other->can_piao_scores_);
    piao_scores_.Swap(&other->piao_scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPiaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPiaoInfo_descriptor_;
  metadata.reflection = tagPiaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGameScene::kShowCardsFieldNumber;
const int tagGameScene::kPiaoInfoFieldNumber;
const int tagGameScene::kRoomUserIdFieldNumber;
#endif  // !_MSC_VER

tagGameScene::tagGameScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGameScene::InitAsDefaultInstance() {
  piao_info_ = const_cast< ::proto::game::xiangyangmj::tagPiaoInfo*>(&::proto::game::xiangyangmj::tagPiaoInfo::default_instance());
}

tagGameScene::tagGameScene(const tagGameScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGameScene::SharedCtor() {
  _cached_size_ = 0;
  piao_info_ = NULL;
  room_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGameScene::~tagGameScene() {
  SharedDtor();
}

void tagGameScene::SharedDtor() {
  if (this != default_instance_) {
    delete piao_info_;
  }
}

void tagGameScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGameScene_descriptor_;
}

const tagGameScene& tagGameScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagGameScene* tagGameScene::default_instance_ = NULL;

tagGameScene* tagGameScene::New() const {
  return new tagGameScene;
}

void tagGameScene::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_piao_info()) {
      if (piao_info_ != NULL) piao_info_->::proto::game::xiangyangmj::tagPiaoInfo::Clear();
    }
    room_user_id_ = 0;
  }
  showcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGameScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.xiangyangmj.tagShowCards ShowCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ShowCards;
        if (input->ExpectTag(18)) goto parse_piao_info;
        break;
      }

      // optional .proto.game.xiangyangmj.tagPiaoInfo piao_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_piao_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_piao_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_user_id;
        break;
      }

      // optional int32 room_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_user_id_)));
          set_has_room_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGameScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.xiangyangmj.tagShowCards ShowCards = 1;
  for (int i = 0; i < this->showcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showcards(i), output);
  }

  // optional .proto.game.xiangyangmj.tagPiaoInfo piao_info = 2;
  if (has_piao_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->piao_info(), output);
  }

  // optional int32 room_user_id = 3;
  if (has_room_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGameScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.xiangyangmj.tagShowCards ShowCards = 1;
  for (int i = 0; i < this->showcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showcards(i), target);
  }

  // optional .proto.game.xiangyangmj.tagPiaoInfo piao_info = 2;
  if (has_piao_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->piao_info(), target);
  }

  // optional int32 room_user_id = 3;
  if (has_room_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGameScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto.game.xiangyangmj.tagPiaoInfo piao_info = 2;
    if (has_piao_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->piao_info());
    }

    // optional int32 room_user_id = 3;
    if (has_room_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_user_id());
    }

  }
  // repeated .proto.game.xiangyangmj.tagShowCards ShowCards = 1;
  total_size += 1 * this->showcards_size();
  for (int i = 0; i < this->showcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGameScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGameScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGameScene::MergeFrom(const tagGameScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcards_.MergeFrom(from.showcards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_piao_info()) {
      mutable_piao_info()->::proto::game::xiangyangmj::tagPiaoInfo::MergeFrom(from.piao_info());
    }
    if (from.has_room_user_id()) {
      set_room_user_id(from.room_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGameScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameScene::CopyFrom(const tagGameScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameScene::IsInitialized() const {

  for (int i = 0; i < showcards_size(); i++) {
    if (!this->showcards(i).IsInitialized()) return false;
  }
  return true;
}

void tagGameScene::Swap(tagGameScene* other) {
  if (other != this) {
    showcards_.Swap(&other->showcards_);
    std::swap(piao_info_, other->piao_info_);
    std::swap(room_user_id_, other->room_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGameScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGameScene_descriptor_;
  metadata.reflection = tagGameScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndInfo::kSeatidFieldNumber;
const int tagEndInfo::kPiaoScoreFieldNumber;
const int tagEndInfo::kPiaoTotalscoreFieldNumber;
const int tagEndInfo::kHuScoreFieldNumber;
const int tagEndInfo::kShowCardFieldNumber;
#endif  // !_MSC_VER

tagEndInfo::tagEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagEndInfo::InitAsDefaultInstance() {
}

tagEndInfo::tagEndInfo(const tagEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagEndInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  piao_score_ = 0;
  piao_totalscore_ = 0;
  hu_score_ = 0;
  show_card_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndInfo::~tagEndInfo() {
  SharedDtor();
}

void tagEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndInfo_descriptor_;
}

const tagEndInfo& tagEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagEndInfo* tagEndInfo::default_instance_ = NULL;

tagEndInfo* tagEndInfo::New() const {
  return new tagEndInfo;
}

void tagEndInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    piao_score_ = 0;
    piao_totalscore_ = 0;
    hu_score_ = 0;
    show_card_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piao_score;
        break;
      }

      // optional int32 piao_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_score_)));
          set_has_piao_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piao_totalscore;
        break;
      }

      // optional int32 piao_totalscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_totalscore_)));
          set_has_piao_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hu_score;
        break;
      }

      // optional int32 hu_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_score_)));
          set_has_hu_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_card;
        break;
      }

      // optional bool show_card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_card_)));
          set_has_show_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 piao_score = 2;
  if (has_piao_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piao_score(), output);
  }

  // optional int32 piao_totalscore = 3;
  if (has_piao_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piao_totalscore(), output);
  }

  // optional int32 hu_score = 4;
  if (has_hu_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hu_score(), output);
  }

  // optional bool show_card = 5;
  if (has_show_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 piao_score = 2;
  if (has_piao_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piao_score(), target);
  }

  // optional int32 piao_totalscore = 3;
  if (has_piao_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piao_totalscore(), target);
  }

  // optional int32 hu_score = 4;
  if (has_hu_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hu_score(), target);
  }

  // optional bool show_card = 5;
  if (has_show_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagEndInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 piao_score = 2;
    if (has_piao_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao_score());
    }

    // optional int32 piao_totalscore = 3;
    if (has_piao_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao_totalscore());
    }

    // optional int32 hu_score = 4;
    if (has_hu_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_score());
    }

    // optional bool show_card = 5;
    if (has_show_card()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndInfo::MergeFrom(const tagEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_piao_score()) {
      set_piao_score(from.piao_score());
    }
    if (from.has_piao_totalscore()) {
      set_piao_totalscore(from.piao_totalscore());
    }
    if (from.has_hu_score()) {
      set_hu_score(from.hu_score());
    }
    if (from.has_show_card()) {
      set_show_card(from.show_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndInfo::CopyFrom(const tagEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndInfo::IsInitialized() const {

  return true;
}

void tagEndInfo::Swap(tagEndInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(piao_score_, other->piao_score_);
    std::swap(piao_totalscore_, other->piao_totalscore_);
    std::swap(hu_score_, other->hu_score_);
    std::swap(show_card_, other->show_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndInfo_descriptor_;
  metadata.reflection = tagEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagXYGameEnd::kEndinfoFieldNumber;
const int tagXYGameEnd::kIsPiaoFieldNumber;
#endif  // !_MSC_VER

tagXYGameEnd::tagXYGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagXYGameEnd::InitAsDefaultInstance() {
}

tagXYGameEnd::tagXYGameEnd(const tagXYGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagXYGameEnd::SharedCtor() {
  _cached_size_ = 0;
  is_piao_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagXYGameEnd::~tagXYGameEnd() {
  SharedDtor();
}

void tagXYGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagXYGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagXYGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagXYGameEnd_descriptor_;
}

const tagXYGameEnd& tagXYGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

tagXYGameEnd* tagXYGameEnd::default_instance_ = NULL;

tagXYGameEnd* tagXYGameEnd::New() const {
  return new tagXYGameEnd;
}

void tagXYGameEnd::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_piao_ = false;
  }
  endinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagXYGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.xiangyangmj.tagEndInfo endinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_endinfo;
        if (input->ExpectTag(16)) goto parse_is_piao;
        break;
      }

      // optional bool is_piao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_piao_)));
          set_has_is_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagXYGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.xiangyangmj.tagEndInfo endinfo = 1;
  for (int i = 0; i < this->endinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endinfo(i), output);
  }

  // optional bool is_piao = 2;
  if (has_is_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_piao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagXYGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.xiangyangmj.tagEndInfo endinfo = 1;
  for (int i = 0; i < this->endinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endinfo(i), target);
  }

  // optional bool is_piao = 2;
  if (has_is_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_piao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagXYGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool is_piao = 2;
    if (has_is_piao()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.game.xiangyangmj.tagEndInfo endinfo = 1;
  total_size += 1 * this->endinfo_size();
  for (int i = 0; i < this->endinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagXYGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagXYGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagXYGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagXYGameEnd::MergeFrom(const tagXYGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  endinfo_.MergeFrom(from.endinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_piao()) {
      set_is_piao(from.is_piao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagXYGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagXYGameEnd::CopyFrom(const tagXYGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagXYGameEnd::IsInitialized() const {

  return true;
}

void tagXYGameEnd::Swap(tagXYGameEnd* other) {
  if (other != this) {
    endinfo_.Swap(&other->endinfo_);
    std::swap(is_piao_, other->is_piao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagXYGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagXYGameEnd_descriptor_;
  metadata.reflection = tagXYGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaoNumFieldNumber;
const int ReqChoosePiao::kIsGouxuanFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  isgouxuan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaonum_ = 0;
    isgouxuan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PiaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsGouxuan;
        break;
      }

      // optional int32 IsGouxuan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGouxuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isgouxuan_)));
          set_has_isgouxuan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  // optional int32 IsGouxuan = 2;
  if (has_isgouxuan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isgouxuan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  // optional int32 IsGouxuan = 2;
  if (has_isgouxuan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isgouxuan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PiaoNum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

    // optional int32 IsGouxuan = 2;
    if (has_isgouxuan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isgouxuan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
    if (from.has_isgouxuan()) {
      set_isgouxuan(from.isgouxuan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(isgouxuan_, other->isgouxuan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaoNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChariidFieldNumber;
const int AckBroadPiao::kUserPiaoFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  userpiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xiangyanggameproto_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    userpiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserPiao;
        break;
      }

      // optional int32 UserPiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userpiao_)));
          set_has_userpiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userpiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userpiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 UserPiao = 2;
    if (has_userpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_userpiao()) {
      set_userpiao(from.userpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(userpiao_, other->userpiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xiangyangmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
