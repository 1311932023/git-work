// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jingshangameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jingshangameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace jingshanmj {

namespace {

const ::google::protobuf::Descriptor* AckLaiziCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLaiziCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagJSGameScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagJSGameScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_jingshangameproto_2eproto() {
  protobuf_AddDesc_jingshangameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jingshangameproto.proto");
  GOOGLE_CHECK(file != NULL);
  AckLaiziCard_descriptor_ = file->message_type(0);
  static const int AckLaiziCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, laizicard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, laizipicard_),
  };
  AckLaiziCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLaiziCard_descriptor_,
      AckLaiziCard::default_instance_,
      AckLaiziCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLaiziCard));
  AckStartPiao_descriptor_ = file->message_type(1);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  ReqChoosePiao_descriptor_ = file->message_type(2);
  static const int ReqChoosePiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, isgouxuan_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  AckBroadPiao_descriptor_ = file->message_type(3);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, userpiao_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
  tagJSGameScence_descriptor_ = file->message_type(4);
  static const int tagJSGameScence_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, piaoing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, piao_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, piao_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, laizicard_),
  };
  tagJSGameScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagJSGameScence_descriptor_,
      tagJSGameScence::default_instance_,
      tagJSGameScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJSGameScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagJSGameScence));
  ReordInfo_descriptor_ = file->message_type(5);
  static const int ReordInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, banker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, piaolaizi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, outtime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, wincounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, gangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, diangangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex2_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(6);
  static const int GameEndRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jingshangameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLaiziCard_descriptor_, &AckLaiziCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagJSGameScence_descriptor_, &tagJSGameScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jingshangameproto_2eproto() {
  delete AckLaiziCard::default_instance_;
  delete AckLaiziCard_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
  delete tagJSGameScence::default_instance_;
  delete tagJSGameScence_reflection_;
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
}

void protobuf_AddDesc_jingshangameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027jingshangameproto.proto\022\025proto.game.ji"
    "ngshanmj\"D\n\014AckLaiziCard\022\014\n\004card\030\001 \001(\005\022\021"
    "\n\tlaizicard\030\002 \001(\005\022\023\n\013laizipicard\030\003 \001(\005\"\037"
    "\n\014AckStartPiao\022\017\n\007piaoNum\030\001 \003(\005\"3\n\rReqCh"
    "oosePiao\022\017\n\007PiaoNum\030\001 \001(\005\022\021\n\tIsGouxuan\030\002"
    " \001(\010\"1\n\014AckBroadPiao\022\017\n\007chairid\030\001 \001(\005\022\020\n"
    "\010UserPiao\030\002 \001(\005\"o\n\017tagJSGameScence\022\017\n\007pi"
    "aoing\030\001 \001(\010\022\021\n\tpiao_type\030\002 \001(\005\022\023\n\013remain"
    "_time\030\003 \001(\005\022\020\n\010piao_num\030\004 \003(\005\022\021\n\tlaizica"
    "rd\030\005 \001(\005\"\306\001\n\tReordInfo\022\022\n\nbanker_num\030\001 \001"
    "(\005\022\016\n\006hu_num\030\002 \001(\005\022\025\n\rpiaolaizi_num\030\003 \001("
    "\005\022\023\n\013outtime_num\030\004 \001(\005\022\022\n\ntotalscore\030\005 \001"
    "(\005\022\021\n\tWinCounts\030\006 \001(\005\022\021\n\tGangTimes\030\007 \001(\005"
    "\022\025\n\rDianGangTimes\030\010 \001(\005\022\013\n\003Ex1\030\t \001(\005\022\013\n\003"
    "Ex2\030\n \001(\005\"\216\001\n\rGameEndRecord\0228\n\016UserRecor"
    "eInfo\030\001 \003(\0132 .proto.game.jingshanmj.Reor"
    "dInfo\022\027\n\017MostDianPaoUser\030\002 \003(\005\022\030\n\020MostWi"
    "nScoreUser\030\003 \003(\005\022\020\n\010DataTime\030\004 \001(\005", 714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jingshangameproto.proto", &protobuf_RegisterTypes);
  AckLaiziCard::default_instance_ = new AckLaiziCard();
  AckStartPiao::default_instance_ = new AckStartPiao();
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  tagJSGameScence::default_instance_ = new tagJSGameScence();
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  AckLaiziCard::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  tagJSGameScence::default_instance_->InitAsDefaultInstance();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jingshangameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jingshangameproto_2eproto {
  StaticDescriptorInitializer_jingshangameproto_2eproto() {
    protobuf_AddDesc_jingshangameproto_2eproto();
  }
} static_descriptor_initializer_jingshangameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckLaiziCard::kCardFieldNumber;
const int AckLaiziCard::kLaizicardFieldNumber;
const int AckLaiziCard::kLaizipicardFieldNumber;
#endif  // !_MSC_VER

AckLaiziCard::AckLaiziCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLaiziCard::InitAsDefaultInstance() {
}

AckLaiziCard::AckLaiziCard(const AckLaiziCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLaiziCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  laizicard_ = 0;
  laizipicard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLaiziCard::~AckLaiziCard() {
  SharedDtor();
}

void AckLaiziCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLaiziCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLaiziCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLaiziCard_descriptor_;
}

const AckLaiziCard& AckLaiziCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

AckLaiziCard* AckLaiziCard::default_instance_ = NULL;

AckLaiziCard* AckLaiziCard::New() const {
  return new AckLaiziCard;
}

void AckLaiziCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    laizicard_ = 0;
    laizipicard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLaiziCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laizicard;
        break;
      }

      // optional int32 laizicard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizicard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizicard_)));
          set_has_laizicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_laizipicard;
        break;
      }

      // optional int32 laizipicard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizipicard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizipicard_)));
          set_has_laizipicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLaiziCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 laizicard = 2;
  if (has_laizicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->laizicard(), output);
  }

  // optional int32 laizipicard = 3;
  if (has_laizipicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->laizipicard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLaiziCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 laizicard = 2;
  if (has_laizicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->laizicard(), target);
  }

  // optional int32 laizipicard = 3;
  if (has_laizipicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->laizipicard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLaiziCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 laizicard = 2;
    if (has_laizicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizicard());
    }

    // optional int32 laizipicard = 3;
    if (has_laizipicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizipicard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLaiziCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLaiziCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLaiziCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLaiziCard::MergeFrom(const AckLaiziCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_laizicard()) {
      set_laizicard(from.laizicard());
    }
    if (from.has_laizipicard()) {
      set_laizipicard(from.laizipicard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLaiziCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLaiziCard::CopyFrom(const AckLaiziCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLaiziCard::IsInitialized() const {

  return true;
}

void AckLaiziCard::Swap(AckLaiziCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(laizicard_, other->laizicard_);
    std::swap(laizipicard_, other->laizipicard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLaiziCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLaiziCard_descriptor_;
  metadata.reflection = AckLaiziCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaoNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaoNumFieldNumber;
const int ReqChoosePiao::kIsGouxuanFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  isgouxuan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaonum_ = 0;
    isgouxuan_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PiaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsGouxuan;
        break;
      }

      // optional bool IsGouxuan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsGouxuan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgouxuan_)));
          set_has_isgouxuan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  // optional bool IsGouxuan = 2;
  if (has_isgouxuan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isgouxuan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  // optional bool IsGouxuan = 2;
  if (has_isgouxuan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isgouxuan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PiaoNum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

    // optional bool IsGouxuan = 2;
    if (has_isgouxuan()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
    if (from.has_isgouxuan()) {
      set_isgouxuan(from.isgouxuan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(isgouxuan_, other->isgouxuan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChairidFieldNumber;
const int AckBroadPiao::kUserPiaoFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  userpiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    userpiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserPiao;
        break;
      }

      // optional int32 UserPiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userpiao_)));
          set_has_userpiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userpiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userpiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 UserPiao = 2;
    if (has_userpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_userpiao()) {
      set_userpiao(from.userpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(userpiao_, other->userpiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagJSGameScence::kPiaoingFieldNumber;
const int tagJSGameScence::kPiaoTypeFieldNumber;
const int tagJSGameScence::kRemainTimeFieldNumber;
const int tagJSGameScence::kPiaoNumFieldNumber;
const int tagJSGameScence::kLaizicardFieldNumber;
#endif  // !_MSC_VER

tagJSGameScence::tagJSGameScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagJSGameScence::InitAsDefaultInstance() {
}

tagJSGameScence::tagJSGameScence(const tagJSGameScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagJSGameScence::SharedCtor() {
  _cached_size_ = 0;
  piaoing_ = false;
  piao_type_ = 0;
  remain_time_ = 0;
  laizicard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagJSGameScence::~tagJSGameScence() {
  SharedDtor();
}

void tagJSGameScence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagJSGameScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagJSGameScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagJSGameScence_descriptor_;
}

const tagJSGameScence& tagJSGameScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

tagJSGameScence* tagJSGameScence::default_instance_ = NULL;

tagJSGameScence* tagJSGameScence::New() const {
  return new tagJSGameScence;
}

void tagJSGameScence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaoing_ = false;
    piao_type_ = 0;
    remain_time_ = 0;
    laizicard_ = 0;
  }
  piao_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagJSGameScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool piaoing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &piaoing_)));
          set_has_piaoing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piao_type;
        break;
      }

      // optional int32 piao_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_type_)));
          set_has_piao_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_piao_num;
        break;
      }

      // repeated int32 piao_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_piao_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piao_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_piao_num;
        if (input->ExpectTag(40)) goto parse_laizicard;
        break;
      }

      // optional int32 laizicard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizicard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizicard_)));
          set_has_laizicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagJSGameScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool piaoing = 1;
  if (has_piaoing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->piaoing(), output);
  }

  // optional int32 piao_type = 2;
  if (has_piao_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piao_type(), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  // repeated int32 piao_num = 4;
  for (int i = 0; i < this->piao_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->piao_num(i), output);
  }

  // optional int32 laizicard = 5;
  if (has_laizicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->laizicard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagJSGameScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool piaoing = 1;
  if (has_piaoing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->piaoing(), target);
  }

  // optional int32 piao_type = 2;
  if (has_piao_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piao_type(), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  // repeated int32 piao_num = 4;
  for (int i = 0; i < this->piao_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->piao_num(i), target);
  }

  // optional int32 laizicard = 5;
  if (has_laizicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->laizicard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagJSGameScence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool piaoing = 1;
    if (has_piaoing()) {
      total_size += 1 + 1;
    }

    // optional int32 piao_type = 2;
    if (has_piao_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao_type());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional int32 laizicard = 5;
    if (has_laizicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizicard());
    }

  }
  // repeated int32 piao_num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->piao_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piao_num(i));
    }
    total_size += 1 * this->piao_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagJSGameScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagJSGameScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagJSGameScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagJSGameScence::MergeFrom(const tagJSGameScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  piao_num_.MergeFrom(from.piao_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaoing()) {
      set_piaoing(from.piaoing());
    }
    if (from.has_piao_type()) {
      set_piao_type(from.piao_type());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_laizicard()) {
      set_laizicard(from.laizicard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagJSGameScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagJSGameScence::CopyFrom(const tagJSGameScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagJSGameScence::IsInitialized() const {

  return true;
}

void tagJSGameScence::Swap(tagJSGameScence* other) {
  if (other != this) {
    std::swap(piaoing_, other->piaoing_);
    std::swap(piao_type_, other->piao_type_);
    std::swap(remain_time_, other->remain_time_);
    piao_num_.Swap(&other->piao_num_);
    std::swap(laizicard_, other->laizicard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagJSGameScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagJSGameScence_descriptor_;
  metadata.reflection = tagJSGameScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kBankerNumFieldNumber;
const int ReordInfo::kHuNumFieldNumber;
const int ReordInfo::kPiaolaiziNumFieldNumber;
const int ReordInfo::kOuttimeNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
const int ReordInfo::kWinCountsFieldNumber;
const int ReordInfo::kGangTimesFieldNumber;
const int ReordInfo::kDianGangTimesFieldNumber;
const int ReordInfo::kEx1FieldNumber;
const int ReordInfo::kEx2FieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  banker_num_ = 0;
  hu_num_ = 0;
  piaolaizi_num_ = 0;
  outtime_num_ = 0;
  totalscore_ = 0;
  wincounts_ = 0;
  gangtimes_ = 0;
  diangangtimes_ = 0;
  ex1_ = 0;
  ex2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_num_ = 0;
    hu_num_ = 0;
    piaolaizi_num_ = 0;
    outtime_num_ = 0;
    totalscore_ = 0;
    wincounts_ = 0;
    gangtimes_ = 0;
    diangangtimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ex1_ = 0;
    ex2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_)));
          set_has_banker_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hu_num;
        break;
      }

      // optional int32 hu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_num_)));
          set_has_hu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaolaizi_num;
        break;
      }

      // optional int32 piaolaizi_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaolaizi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaolaizi_num_)));
          set_has_piaolaizi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outtime_num;
        break;
      }

      // optional int32 outtime_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_num_)));
          set_has_outtime_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WinCounts;
        break;
      }

      // optional int32 WinCounts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincounts_)));
          set_has_wincounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GangTimes;
        break;
      }

      // optional int32 GangTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtimes_)));
          set_has_gangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DianGangTimes;
        break;
      }

      // optional int32 DianGangTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DianGangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangtimes_)));
          set_has_diangangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Ex1;
        break;
      }

      // optional int32 Ex1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ex1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex1_)));
          set_has_ex1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Ex2;
        break;
      }

      // optional int32 Ex2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex2_)));
          set_has_ex2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num(), output);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hu_num(), output);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaolaizi_num(), output);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outtime_num(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wincounts(), output);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangtimes(), output);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diangangtimes(), output);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ex1(), output);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ex2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num(), target);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hu_num(), target);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaolaizi_num(), target);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outtime_num(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wincounts(), target);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangtimes(), target);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diangangtimes(), target);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ex1(), target);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ex2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_num = 1;
    if (has_banker_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_num());
    }

    // optional int32 hu_num = 2;
    if (has_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_num());
    }

    // optional int32 piaolaizi_num = 3;
    if (has_piaolaizi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaolaizi_num());
    }

    // optional int32 outtime_num = 4;
    if (has_outtime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime_num());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 WinCounts = 6;
    if (has_wincounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincounts());
    }

    // optional int32 GangTimes = 7;
    if (has_gangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtimes());
    }

    // optional int32 DianGangTimes = 8;
    if (has_diangangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Ex1 = 9;
    if (has_ex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex1());
    }

    // optional int32 Ex2 = 10;
    if (has_ex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_num()) {
      set_banker_num(from.banker_num());
    }
    if (from.has_hu_num()) {
      set_hu_num(from.hu_num());
    }
    if (from.has_piaolaizi_num()) {
      set_piaolaizi_num(from.piaolaizi_num());
    }
    if (from.has_outtime_num()) {
      set_outtime_num(from.outtime_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_wincounts()) {
      set_wincounts(from.wincounts());
    }
    if (from.has_gangtimes()) {
      set_gangtimes(from.gangtimes());
    }
    if (from.has_diangangtimes()) {
      set_diangangtimes(from.diangangtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ex1()) {
      set_ex1(from.ex1());
    }
    if (from.has_ex2()) {
      set_ex2(from.ex2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(banker_num_, other->banker_num_);
    std::swap(hu_num_, other->hu_num_);
    std::swap(piaolaizi_num_, other->piaolaizi_num_);
    std::swap(outtime_num_, other->outtime_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(wincounts_, other->wincounts_);
    std::swap(gangtimes_, other->gangtimes_);
    std::swap(diangangtimes_, other->diangangtimes_);
    std::swap(ex1_, other->ex1_);
    std::swap(ex2_, other->ex2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jingshangameproto_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    datatime_ = 0;
  }
  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.jingshanmj.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.jingshanmj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.jingshanmj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

  }
  // repeated .proto.game.jingshanmj.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jingshanmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
