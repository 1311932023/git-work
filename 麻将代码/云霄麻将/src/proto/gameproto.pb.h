// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#ifndef PROTOBUF_gameproto_2eproto__INCLUDED
#define PROTOBUF_gameproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "guizhougameproto.pb.h"
#include "gdgameproto.pb.h"
#include "sichuangameproto.pb.h"
#include "hainangameproto.pb.h"
#include "hubeigameproto.pb.h"
#include "hunangameproto.pb.h"
#include "jiangxigameproto.pb.h"
#include "pinghugameproto.pb.h"
#include "henangameproto.pb.h"
#include "shanxigameproto.pb.h"
#include "jinhuagameproto.pb.h"
#include "fuzhoumahjonggame.pb.h"
#include "dgkgameproto.pb.h"
#include "nanninggameproto.pb.h"
#include "nanpingmahjonggame.pb.h"
#include "laibingameproto.pb.h"
#include "yuanjianggameproto.pb.h"
#include "longyanmj.pb.h"
#include "ganzhoucg.pb.h"
#include "xiangyanggameproto.pb.h"
#include "xixiahuashuigameproto.pb.h"
#include "zhenjiang.pb.h"
#include "jingshangameproto.pb.h"
#include "qionglaigameproto.pb.h"
#include "anqinggameproto.pb.h"
#include "nanchang.pb.h"
#include "guilinzz.pb.h"
#include "yunxiaomj.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gameproto_2eproto();
void protobuf_AssignDesc_gameproto_2eproto();
void protobuf_ShutdownFile_gameproto_2eproto();

class FixedCard;
class HandCards;
class tagPlayers;
class ReqAction;
class ReqChangeCard;
class ReqChooseLackType;
class ReqOutCard;
class ReqOperateResult;
class ReqIsAuto;
class ReqUpdateUserInfo;
class ReqRoomInfo;
class ReqChooseDisband;
class tagHu;
class tagUserHuInfo;
class tagGangInfo;
class tagGroupCard;
class tagReadyInfo;
class AckGameScene;
class AckUserReady;
class AckGameStart;
class AckHorse;
class AckFirstHandCard;
class HuaPaiInfo;
class FirstFlowerHandCard;
class GetHuaPai;
class AckEnSureJoker;
class VideoFirstHandCard;
class VideoFlowerHandCard;
class AckChangeCard;
class AckUserLackType;
class AckUserLackTypeOk;
class tagHuInfo;
class tagListenInfo;
class tagPreGangs;
class AckUserGetCard;
class tagShowOutCard;
class AckUserOutCard;
class AckOpNotify;
class AckBcOpResult;
class AckListenNotify;
class AckUserHu;
class Horse;
class UserHorseCard;
class tagGameEndGang;
class tagGameEndInfo;
class AckGameEnd;
class AckIsAuto;
class AckUpdateUserInfo;
class AckPoolMoney;
class AckWinPoolMoney;
class AckGameStartFail;
class VideoGameEnd;
class AckUpdateTimer;
class AckDisbandChooseFaild;
class AckDisbandApply;
class AckDisbandChooseBc;
class AckDisbandResult;
class AckUserOnlineState;
class AckUserOvertimeState;
class AckMessage;
class OperateWaite;
class ReqCheckHandCards;

enum ACTION {
  ACTION_SIDOWN = 1,
  ACTION_READY = 2,
  ACTION_LEAVE = 3,
  ACTION_CHANGE_TABLE = 4
};
bool ACTION_IsValid(int value);
const ACTION ACTION_MIN = ACTION_SIDOWN;
const ACTION ACTION_MAX = ACTION_CHANGE_TABLE;
const int ACTION_ARRAYSIZE = ACTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTION_descriptor();
inline const ::std::string& ACTION_Name(ACTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTION_descriptor(), value);
}
inline bool ACTION_Parse(
    const ::std::string& name, ACTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTION>(
    ACTION_descriptor(), name, value);
}
enum STATUS {
  GAME_FREE = 0,
  GAME_CHANGECARD = 1,
  GAME_CHOOSE_LACKTYPE = 2,
  GAME_PLAYING = 3,
  GAME_PIAO = 4
};
bool STATUS_IsValid(int value);
const STATUS STATUS_MIN = GAME_FREE;
const STATUS STATUS_MAX = GAME_PIAO;
const int STATUS_ARRAYSIZE = STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* STATUS_descriptor();
inline const ::std::string& STATUS_Name(STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    STATUS_descriptor(), value);
}
inline bool STATUS_Parse(
    const ::std::string& name, STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STATUS>(
    STATUS_descriptor(), name, value);
}
enum DISSBAND_ACTION {
  DISBAND_WAIT = 0,
  DISBAND_YES = 1,
  DISBAND_NO = 2,
  DISBAND_APPLYER = 3
};
bool DISSBAND_ACTION_IsValid(int value);
const DISSBAND_ACTION DISSBAND_ACTION_MIN = DISBAND_WAIT;
const DISSBAND_ACTION DISSBAND_ACTION_MAX = DISBAND_APPLYER;
const int DISSBAND_ACTION_ARRAYSIZE = DISSBAND_ACTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor();
inline const ::std::string& DISSBAND_ACTION_Name(DISSBAND_ACTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    DISSBAND_ACTION_descriptor(), value);
}
inline bool DISSBAND_ACTION_Parse(
    const ::std::string& name, DISSBAND_ACTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DISSBAND_ACTION>(
    DISSBAND_ACTION_descriptor(), name, value);
}
enum OverTimeState {
  OVER_TIME_NO = 0,
  OVER_TIME_OUTCARD = 1,
  OVER_TIME_OPERATE = 2
};
bool OverTimeState_IsValid(int value);
const OverTimeState OverTimeState_MIN = OVER_TIME_NO;
const OverTimeState OverTimeState_MAX = OVER_TIME_OPERATE;
const int OverTimeState_ARRAYSIZE = OverTimeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor();
inline const ::std::string& OverTimeState_Name(OverTimeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    OverTimeState_descriptor(), value);
}
inline bool OverTimeState_Parse(
    const ::std::string& name, OverTimeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OverTimeState>(
    OverTimeState_descriptor(), name, value);
}
// ===================================================================

class FixedCard : public ::google::protobuf::Message {
 public:
  FixedCard();
  virtual ~FixedCard();

  FixedCard(const FixedCard& from);

  inline FixedCard& operator=(const FixedCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedCard& default_instance();

  void Swap(FixedCard* other);

  // implements Message ----------------------------------------------

  FixedCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedCard& from);
  void MergeFrom(const FixedCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CardData = 1;
  inline bool has_carddata() const;
  inline void clear_carddata();
  static const int kCardDataFieldNumber = 1;
  inline ::google::protobuf::int32 carddata() const;
  inline void set_carddata(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 chairID = 3;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 3;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.FixedCard)
 private:
  inline void set_has_carddata();
  inline void clear_has_carddata();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 carddata_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static FixedCard* default_instance_;
};
// -------------------------------------------------------------------

class HandCards : public ::google::protobuf::Message {
 public:
  HandCards();
  virtual ~HandCards();

  HandCards(const HandCards& from);

  inline HandCards& operator=(const HandCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandCards& default_instance();

  void Swap(HandCards* other);

  // implements Message ----------------------------------------------

  HandCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandCards& from);
  void MergeFrom(const HandCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChangeableCardsLen = 1;
  inline bool has_changeablecardslen() const;
  inline void clear_changeablecardslen();
  static const int kChangeableCardsLenFieldNumber = 1;
  inline ::google::protobuf::int32 changeablecardslen() const;
  inline void set_changeablecardslen(::google::protobuf::int32 value);

  // repeated int32 ChangeableCards = 2;
  inline int changeablecards_size() const;
  inline void clear_changeablecards();
  static const int kChangeableCardsFieldNumber = 2;
  inline ::google::protobuf::int32 changeablecards(int index) const;
  inline void set_changeablecards(int index, ::google::protobuf::int32 value);
  inline void add_changeablecards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      changeablecards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_changeablecards();

  // optional int32 FixedCardsLen = 3;
  inline bool has_fixedcardslen() const;
  inline void clear_fixedcardslen();
  static const int kFixedCardsLenFieldNumber = 3;
  inline ::google::protobuf::int32 fixedcardslen() const;
  inline void set_fixedcardslen(::google::protobuf::int32 value);

  // repeated .proto.game.FixedCard stFixedCards = 4;
  inline int stfixedcards_size() const;
  inline void clear_stfixedcards();
  static const int kStFixedCardsFieldNumber = 4;
  inline const ::proto::game::FixedCard& stfixedcards(int index) const;
  inline ::proto::game::FixedCard* mutable_stfixedcards(int index);
  inline ::proto::game::FixedCard* add_stfixedcards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
      stfixedcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
      mutable_stfixedcards();

  // @@protoc_insertion_point(class_scope:proto.game.HandCards)
 private:
  inline void set_has_changeablecardslen();
  inline void clear_has_changeablecardslen();
  inline void set_has_fixedcardslen();
  inline void clear_has_fixedcardslen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > changeablecards_;
  ::google::protobuf::int32 changeablecardslen_;
  ::google::protobuf::int32 fixedcardslen_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard > stfixedcards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static HandCards* default_instance_;
};
// -------------------------------------------------------------------

class tagPlayers : public ::google::protobuf::Message {
 public:
  tagPlayers();
  virtual ~tagPlayers();

  tagPlayers(const tagPlayers& from);

  inline tagPlayers& operator=(const tagPlayers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPlayers& default_instance();

  void Swap(tagPlayers* other);

  // implements Message ----------------------------------------------

  tagPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPlayers& from);
  void MergeFrom(const tagPlayers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 ready = 3;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 3;
  inline ::google::protobuf::int32 ready() const;
  inline void set_ready(::google::protobuf::int32 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:proto.game.tagPlayers)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_avatar();
  inline void clear_has_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 money_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagPlayers* default_instance_;
};
// -------------------------------------------------------------------

class ReqAction : public ::google::protobuf::Message {
 public:
  ReqAction();
  virtual ~ReqAction();

  ReqAction(const ReqAction& from);

  inline ReqAction& operator=(const ReqAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAction& default_instance();

  void Swap(ReqAction* other);

  // implements Message ----------------------------------------------

  ReqAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAction& from);
  void MergeFrom(const ReqAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqAction)
 private:
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqAction* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangeCard : public ::google::protobuf::Message {
 public:
  ReqChangeCard();
  virtual ~ReqChangeCard();

  ReqChangeCard(const ReqChangeCard& from);

  inline ReqChangeCard& operator=(const ReqChangeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeCard& default_instance();

  void Swap(ReqChangeCard* other);

  // implements Message ----------------------------------------------

  ReqChangeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeCard& from);
  void MergeFrom(const ReqChangeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ischange = 1;
  inline bool has_ischange() const;
  inline void clear_ischange();
  static const int kIschangeFieldNumber = 1;
  inline ::google::protobuf::int32 ischange() const;
  inline void set_ischange(::google::protobuf::int32 value);

  // repeated int32 Card = 2;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:proto.game.ReqChangeCard)
 private:
  inline void set_has_ischange();
  inline void clear_has_ischange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::int32 ischange_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChangeCard* default_instance_;
};
// -------------------------------------------------------------------

class ReqChooseLackType : public ::google::protobuf::Message {
 public:
  ReqChooseLackType();
  virtual ~ReqChooseLackType();

  ReqChooseLackType(const ReqChooseLackType& from);

  inline ReqChooseLackType& operator=(const ReqChooseLackType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChooseLackType& default_instance();

  void Swap(ReqChooseLackType* other);

  // implements Message ----------------------------------------------

  ReqChooseLackType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChooseLackType& from);
  void MergeFrom(const ReqChooseLackType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqChooseLackType)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChooseLackType* default_instance_;
};
// -------------------------------------------------------------------

class ReqOutCard : public ::google::protobuf::Message {
 public:
  ReqOutCard();
  virtual ~ReqOutCard();

  ReqOutCard(const ReqOutCard& from);

  inline ReqOutCard& operator=(const ReqOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOutCard& default_instance();

  void Swap(ReqOutCard* other);

  // implements Message ----------------------------------------------

  ReqOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOutCard& from);
  void MergeFrom(const ReqOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 ShowCard = 2;
  inline bool has_showcard() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 2;
  inline ::google::protobuf::int32 showcard() const;
  inline void set_showcard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqOutCard)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_showcard();
  inline void clear_has_showcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 showcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOutCard* default_instance_;
};
// -------------------------------------------------------------------

class ReqOperateResult : public ::google::protobuf::Message {
 public:
  ReqOperateResult();
  virtual ~ReqOperateResult();

  ReqOperateResult(const ReqOperateResult& from);

  inline ReqOperateResult& operator=(const ReqOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOperateResult& default_instance();

  void Swap(ReqOperateResult* other);

  // implements Message ----------------------------------------------

  ReqOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOperateResult& from);
  void MergeFrom(const ReqOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqOperateResult)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_card();
  inline void clear_has_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class ReqIsAuto : public ::google::protobuf::Message {
 public:
  ReqIsAuto();
  virtual ~ReqIsAuto();

  ReqIsAuto(const ReqIsAuto& from);

  inline ReqIsAuto& operator=(const ReqIsAuto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqIsAuto& default_instance();

  void Swap(ReqIsAuto* other);

  // implements Message ----------------------------------------------

  ReqIsAuto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqIsAuto& from);
  void MergeFrom(const ReqIsAuto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isAuto = 1;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsAutoFieldNumber = 1;
  inline ::google::protobuf::int32 isauto() const;
  inline void set_isauto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqIsAuto)
 private:
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 isauto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqIsAuto* default_instance_;
};
// -------------------------------------------------------------------

class ReqUpdateUserInfo : public ::google::protobuf::Message {
 public:
  ReqUpdateUserInfo();
  virtual ~ReqUpdateUserInfo();

  ReqUpdateUserInfo(const ReqUpdateUserInfo& from);

  inline ReqUpdateUserInfo& operator=(const ReqUpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUpdateUserInfo& default_instance();

  void Swap(ReqUpdateUserInfo* other);

  // implements Message ----------------------------------------------

  ReqUpdateUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUpdateUserInfo& from);
  void MergeFrom(const ReqUpdateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 vid = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqUpdateUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vid();
  inline void clear_has_vid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 vid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqUpdateUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqRoomInfo : public ::google::protobuf::Message {
 public:
  ReqRoomInfo();
  virtual ~ReqRoomInfo();

  ReqRoomInfo(const ReqRoomInfo& from);

  inline ReqRoomInfo& operator=(const ReqRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRoomInfo& default_instance();

  void Swap(ReqRoomInfo* other);

  // implements Message ----------------------------------------------

  ReqRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRoomInfo& from);
  void MergeFrom(const ReqRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 vid = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional string skey = 3;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 3;
  inline const ::std::string& skey() const;
  inline void set_skey(const ::std::string& value);
  inline void set_skey(const char* value);
  inline void set_skey(const char* value, size_t size);
  inline ::std::string* mutable_skey();
  inline ::std::string* release_skey();
  inline void set_allocated_skey(::std::string* skey);

  // @@protoc_insertion_point(class_scope:proto.game.ReqRoomInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_skey();
  inline void clear_has_skey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 vid_;
  ::std::string* skey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqChooseDisband : public ::google::protobuf::Message {
 public:
  ReqChooseDisband();
  virtual ~ReqChooseDisband();

  ReqChooseDisband(const ReqChooseDisband& from);

  inline ReqChooseDisband& operator=(const ReqChooseDisband& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChooseDisband& default_instance();

  void Swap(ReqChooseDisband* other);

  // implements Message ----------------------------------------------

  ReqChooseDisband* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChooseDisband& from);
  void MergeFrom(const ReqChooseDisband& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Choosestate = 1;
  inline bool has_choosestate() const;
  inline void clear_choosestate();
  static const int kChoosestateFieldNumber = 1;
  inline ::google::protobuf::int32 choosestate() const;
  inline void set_choosestate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqChooseDisband)
 private:
  inline void set_has_choosestate();
  inline void clear_has_choosestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 choosestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChooseDisband* default_instance_;
};
// -------------------------------------------------------------------

class tagHu : public ::google::protobuf::Message {
 public:
  tagHu();
  virtual ~tagHu();

  tagHu(const tagHu& from);

  inline tagHu& operator=(const tagHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHu& default_instance();

  void Swap(tagHu* other);

  // implements Message ----------------------------------------------

  tagHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHu& from);
  void MergeFrom(const tagHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HuCard = 1;
  inline bool has_hucard() const;
  inline void clear_hucard();
  static const int kHuCardFieldNumber = 1;
  inline ::google::protobuf::int32 hucard() const;
  inline void set_hucard(::google::protobuf::int32 value);

  // optional int32 PasHuChiarid = 2;
  inline bool has_pashuchiarid() const;
  inline void clear_pashuchiarid();
  static const int kPasHuChiaridFieldNumber = 2;
  inline ::google::protobuf::int32 pashuchiarid() const;
  inline void set_pashuchiarid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagHu)
 private:
  inline void set_has_hucard();
  inline void clear_has_hucard();
  inline void set_has_pashuchiarid();
  inline void clear_has_pashuchiarid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hucard_;
  ::google::protobuf::int32 pashuchiarid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagHu* default_instance_;
};
// -------------------------------------------------------------------

class tagUserHuInfo : public ::google::protobuf::Message {
 public:
  tagUserHuInfo();
  virtual ~tagUserHuInfo();

  tagUserHuInfo(const tagUserHuInfo& from);

  inline tagUserHuInfo& operator=(const tagUserHuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagUserHuInfo& default_instance();

  void Swap(tagUserHuInfo* other);

  // implements Message ----------------------------------------------

  tagUserHuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagUserHuInfo& from);
  void MergeFrom(const tagUserHuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagHu hu = 1;
  inline int hu_size() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 1;
  inline const ::proto::game::tagHu& hu(int index) const;
  inline ::proto::game::tagHu* mutable_hu(int index);
  inline ::proto::game::tagHu* add_hu();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >&
      hu() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >*
      mutable_hu();

  // @@protoc_insertion_point(class_scope:proto.game.tagUserHuInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu > hu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagUserHuInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagGangInfo : public ::google::protobuf::Message {
 public:
  tagGangInfo();
  virtual ~tagGangInfo();

  tagGangInfo(const tagGangInfo& from);

  inline tagGangInfo& operator=(const tagGangInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGangInfo& default_instance();

  void Swap(tagGangInfo* other);

  // implements Message ----------------------------------------------

  tagGangInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGangInfo& from);
  void MergeFrom(const tagGangInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagGangInfo)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGangInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagGroupCard : public ::google::protobuf::Message {
 public:
  tagGroupCard();
  virtual ~tagGroupCard();

  tagGroupCard(const tagGroupCard& from);

  inline tagGroupCard& operator=(const tagGroupCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGroupCard& default_instance();

  void Swap(tagGroupCard* other);

  // implements Message ----------------------------------------------

  tagGroupCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGroupCard& from);
  void MergeFrom(const tagGroupCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.FixedCard FixedCard = 1;
  inline int fixedcard_size() const;
  inline void clear_fixedcard();
  static const int kFixedCardFieldNumber = 1;
  inline const ::proto::game::FixedCard& fixedcard(int index) const;
  inline ::proto::game::FixedCard* mutable_fixedcard(int index);
  inline ::proto::game::FixedCard* add_fixedcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
      fixedcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
      mutable_fixedcard();

  // @@protoc_insertion_point(class_scope:proto.game.tagGroupCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard > fixedcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGroupCard* default_instance_;
};
// -------------------------------------------------------------------

class tagReadyInfo : public ::google::protobuf::Message {
 public:
  tagReadyInfo();
  virtual ~tagReadyInfo();

  tagReadyInfo(const tagReadyInfo& from);

  inline tagReadyInfo& operator=(const tagReadyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagReadyInfo& default_instance();

  void Swap(tagReadyInfo* other);

  // implements Message ----------------------------------------------

  tagReadyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagReadyInfo& from);
  void MergeFrom(const tagReadyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Ready = 1;
  inline int ready_size() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline ::google::protobuf::int32 ready(int index) const;
  inline void set_ready(int index, ::google::protobuf::int32 value);
  inline void add_ready(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ready() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ready();

  // repeated int32 RemainReadyTime = 2;
  inline int remainreadytime_size() const;
  inline void clear_remainreadytime();
  static const int kRemainReadyTimeFieldNumber = 2;
  inline ::google::protobuf::int32 remainreadytime(int index) const;
  inline void set_remainreadytime(int index, ::google::protobuf::int32 value);
  inline void add_remainreadytime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remainreadytime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remainreadytime();

  // optional int32 ReadyTime = 3;
  inline bool has_readytime() const;
  inline void clear_readytime();
  static const int kReadyTimeFieldNumber = 3;
  inline ::google::protobuf::int32 readytime() const;
  inline void set_readytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagReadyInfo)
 private:
  inline void set_has_readytime();
  inline void clear_has_readytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ready_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remainreadytime_;
  ::google::protobuf::int32 readytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagReadyInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameScene : public ::google::protobuf::Message {
 public:
  AckGameScene();
  virtual ~AckGameScene();

  AckGameScene(const AckGameScene& from);

  inline AckGameScene& operator=(const AckGameScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameScene& default_instance();

  void Swap(AckGameScene* other);

  // implements Message ----------------------------------------------

  AckGameScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameScene& from);
  void MergeFrom(const AckGameScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 changetime = 1;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangetimeFieldNumber = 1;
  inline ::google::protobuf::int32 changetime() const;
  inline void set_changetime(::google::protobuf::int32 value);

  // optional int32 lacktypetime = 2;
  inline bool has_lacktypetime() const;
  inline void clear_lacktypetime();
  static const int kLacktypetimeFieldNumber = 2;
  inline ::google::protobuf::int32 lacktypetime() const;
  inline void set_lacktypetime(::google::protobuf::int32 value);

  // optional int32 outcardtime = 3;
  inline bool has_outcardtime() const;
  inline void clear_outcardtime();
  static const int kOutcardtimeFieldNumber = 3;
  inline ::google::protobuf::int32 outcardtime() const;
  inline void set_outcardtime(::google::protobuf::int32 value);

  // optional int32 operatetime = 4;
  inline bool has_operatetime() const;
  inline void clear_operatetime();
  static const int kOperatetimeFieldNumber = 4;
  inline ::google::protobuf::int32 operatetime() const;
  inline void set_operatetime(::google::protobuf::int32 value);

  // optional int32 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::int32 basescore() const;
  inline void set_basescore(::google::protobuf::int32 value);

  // optional int32 delaytime = 6;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 6;
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 SceneStatus = 7;
  inline bool has_scenestatus() const;
  inline void clear_scenestatus();
  static const int kSceneStatusFieldNumber = 7;
  inline ::google::protobuf::int32 scenestatus() const;
  inline void set_scenestatus(::google::protobuf::int32 value);

  // optional int32 LeftTime = 8;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 8;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // optional .proto.game.HandCards UserCard = 9;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 9;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated int32 HandCardNums = 10;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 10;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // optional int32 CurOutCardUser = 11;
  inline bool has_curoutcarduser() const;
  inline void clear_curoutcarduser();
  static const int kCurOutCardUserFieldNumber = 11;
  inline ::google::protobuf::int32 curoutcarduser() const;
  inline void set_curoutcarduser(::google::protobuf::int32 value);

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  inline int showcard_size() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 12;
  inline const ::proto::game::tagShowOutCard& showcard(int index) const;
  inline ::proto::game::tagShowOutCard* mutable_showcard(int index);
  inline ::proto::game::tagShowOutCard* add_showcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
      showcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
      mutable_showcard();

  // optional int32 curOutCard = 13;
  inline bool has_curoutcard() const;
  inline void clear_curoutcard();
  static const int kCurOutCardFieldNumber = 13;
  inline ::google::protobuf::int32 curoutcard() const;
  inline void set_curoutcard(::google::protobuf::int32 value);

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  inline int huinfo_size() const;
  inline void clear_huinfo();
  static const int kHuInfoFieldNumber = 14;
  inline const ::proto::game::tagUserHuInfo& huinfo(int index) const;
  inline ::proto::game::tagUserHuInfo* mutable_huinfo(int index);
  inline ::proto::game::tagUserHuInfo* add_huinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >&
      huinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >*
      mutable_huinfo();

  // repeated int32 TotalScore = 15;
  inline int totalscore_size() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 15;
  inline ::google::protobuf::int32 totalscore(int index) const;
  inline void set_totalscore(int index, ::google::protobuf::int32 value);
  inline void add_totalscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      totalscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_totalscore();

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  inline int groupcard_size() const;
  inline void clear_groupcard();
  static const int kGroupCardFieldNumber = 16;
  inline const ::proto::game::tagGroupCard& groupcard(int index) const;
  inline ::proto::game::tagGroupCard* mutable_groupcard(int index);
  inline ::proto::game::tagGroupCard* add_groupcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >&
      groupcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >*
      mutable_groupcard();

  // optional int32 IsAutoHu = 17;
  inline bool has_isautohu() const;
  inline void clear_isautohu();
  static const int kIsAutoHuFieldNumber = 17;
  inline ::google::protobuf::int32 isautohu() const;
  inline void set_isautohu(::google::protobuf::int32 value);

  // optional int32 BankerChairid = 18;
  inline bool has_bankerchairid() const;
  inline void clear_bankerchairid();
  static const int kBankerChairidFieldNumber = 18;
  inline ::google::protobuf::int32 bankerchairid() const;
  inline void set_bankerchairid(::google::protobuf::int32 value);

  // repeated int32 UserLackType = 19;
  inline int userlacktype_size() const;
  inline void clear_userlacktype();
  static const int kUserLackTypeFieldNumber = 19;
  inline ::google::protobuf::int32 userlacktype(int index) const;
  inline void set_userlacktype(int index, ::google::protobuf::int32 value);
  inline void add_userlacktype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userlacktype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userlacktype();

  // optional int32 IscurGetCard = 20;
  inline bool has_iscurgetcard() const;
  inline void clear_iscurgetcard();
  static const int kIscurGetCardFieldNumber = 20;
  inline ::google::protobuf::int32 iscurgetcard() const;
  inline void set_iscurgetcard(::google::protobuf::int32 value);

  // optional int32 Card = 21;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 21;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 OpType = 22;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 22;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 23;
  inline const ::proto::game::tagGangInfo& ganginfo(int index) const;
  inline ::proto::game::tagGangInfo* mutable_ganginfo(int index);
  inline ::proto::game::tagGangInfo* add_ganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_ganginfo();

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 24;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // repeated int32 OfflineState = 25;
  inline int offlinestate_size() const;
  inline void clear_offlinestate();
  static const int kOfflineStateFieldNumber = 25;
  inline ::google::protobuf::int32 offlinestate(int index) const;
  inline void set_offlinestate(int index, ::google::protobuf::int32 value);
  inline void add_offlinestate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offlinestate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offlinestate();

  // optional int32 PoolCardLeftNums = 26;
  inline bool has_poolcardleftnums() const;
  inline void clear_poolcardleftnums();
  static const int kPoolCardLeftNumsFieldNumber = 26;
  inline ::google::protobuf::int32 poolcardleftnums() const;
  inline void set_poolcardleftnums(::google::protobuf::int32 value);

  // optional int32 preready_timer = 27;
  inline bool has_preready_timer() const;
  inline void clear_preready_timer();
  static const int kPrereadyTimerFieldNumber = 27;
  inline ::google::protobuf::int32 preready_timer() const;
  inline void set_preready_timer(::google::protobuf::int32 value);

  // optional int32 stand_money = 28;
  inline bool has_stand_money() const;
  inline void clear_stand_money();
  static const int kStandMoneyFieldNumber = 28;
  inline ::google::protobuf::int32 stand_money() const;
  inline void set_stand_money(::google::protobuf::int32 value);

  // optional int32 HorseNum = 29;
  inline bool has_horsenum() const;
  inline void clear_horsenum();
  static const int kHorseNumFieldNumber = 29;
  inline ::google::protobuf::int32 horsenum() const;
  inline void set_horsenum(::google::protobuf::int32 value);

  // optional int32 isDisbandroom = 30;
  inline bool has_isdisbandroom() const;
  inline void clear_isdisbandroom();
  static const int kIsDisbandroomFieldNumber = 30;
  inline ::google::protobuf::int32 isdisbandroom() const;
  inline void set_isdisbandroom(::google::protobuf::int32 value);

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  inline bool has_disbandinfo() const;
  inline void clear_disbandinfo();
  static const int kDisbandinfoFieldNumber = 31;
  inline const ::proto::game::AckDisbandApply& disbandinfo() const;
  inline ::proto::game::AckDisbandApply* mutable_disbandinfo();
  inline ::proto::game::AckDisbandApply* release_disbandinfo();
  inline void set_allocated_disbandinfo(::proto::game::AckDisbandApply* disbandinfo);

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  inline int userdisbandstate_size() const;
  inline void clear_userdisbandstate();
  static const int kUserDisbandstateFieldNumber = 32;
  inline const ::proto::game::AckDisbandChooseBc& userdisbandstate(int index) const;
  inline ::proto::game::AckDisbandChooseBc* mutable_userdisbandstate(int index);
  inline ::proto::game::AckDisbandChooseBc* add_userdisbandstate();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >&
      userdisbandstate() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >*
      mutable_userdisbandstate();

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  inline int useronlinestate_size() const;
  inline void clear_useronlinestate();
  static const int kUserOnlinestateFieldNumber = 33;
  inline const ::proto::game::AckUserOnlineState& useronlinestate(int index) const;
  inline ::proto::game::AckUserOnlineState* mutable_useronlinestate(int index);
  inline ::proto::game::AckUserOnlineState* add_useronlinestate();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >&
      useronlinestate() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >*
      mutable_useronlinestate();

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  inline int userovertime_size() const;
  inline void clear_userovertime();
  static const int kUserOvertimeFieldNumber = 34;
  inline const ::proto::game::AckUserOvertimeState& userovertime(int index) const;
  inline ::proto::game::AckUserOvertimeState* mutable_userovertime(int index);
  inline ::proto::game::AckUserOvertimeState* add_userovertime();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >&
      userovertime() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >*
      mutable_userovertime();

  // optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
  inline bool has_gztableinfo() const;
  inline void clear_gztableinfo();
  static const int kGZTableInfoFieldNumber = 35;
  inline const ::proto::game::guizhou::tagGuiZhouTableInfo& gztableinfo() const;
  inline ::proto::game::guizhou::tagGuiZhouTableInfo* mutable_gztableinfo();
  inline ::proto::game::guizhou::tagGuiZhouTableInfo* release_gztableinfo();
  inline void set_allocated_gztableinfo(::proto::game::guizhou::tagGuiZhouTableInfo* gztableinfo);

  // optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
  inline bool has_gdscene() const;
  inline void clear_gdscene();
  static const int kGdsceneFieldNumber = 36;
  inline const ::proto::game::gdmahjonggame::gdgamescene& gdscene() const;
  inline ::proto::game::gdmahjonggame::gdgamescene* mutable_gdscene();
  inline ::proto::game::gdmahjonggame::gdgamescene* release_gdscene();
  inline void set_allocated_gdscene(::proto::game::gdmahjonggame::gdgamescene* gdscene);

  // optional bool IsZhuanZhuanRoom = 37;
  inline bool has_iszhuanzhuanroom() const;
  inline void clear_iszhuanzhuanroom();
  static const int kIsZhuanZhuanRoomFieldNumber = 37;
  inline bool iszhuanzhuanroom() const;
  inline void set_iszhuanzhuanroom(bool value);

  // optional .proto.game.tagReadyInfo UserReadyInfo = 38;
  inline bool has_userreadyinfo() const;
  inline void clear_userreadyinfo();
  static const int kUserReadyInfoFieldNumber = 38;
  inline const ::proto::game::tagReadyInfo& userreadyinfo() const;
  inline ::proto::game::tagReadyInfo* mutable_userreadyinfo();
  inline ::proto::game::tagReadyInfo* release_userreadyinfo();
  inline void set_allocated_userreadyinfo(::proto::game::tagReadyInfo* userreadyinfo);

  // optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
  inline bool has_scmjcustomied() const;
  inline void clear_scmjcustomied();
  static const int kScmjCustomiedFieldNumber = 39;
  inline const ::proto::game::scmj::AckCustomiedInfo& scmjcustomied() const;
  inline ::proto::game::scmj::AckCustomiedInfo* mutable_scmjcustomied();
  inline ::proto::game::scmj::AckCustomiedInfo* release_scmjcustomied();
  inline void set_allocated_scmjcustomied(::proto::game::scmj::AckCustomiedInfo* scmjcustomied);

  // optional int32 roomGolden = 40;
  inline bool has_roomgolden() const;
  inline void clear_roomgolden();
  static const int kRoomGoldenFieldNumber = 40;
  inline ::google::protobuf::int32 roomgolden() const;
  inline void set_roomgolden(::google::protobuf::int32 value);

  // optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
  inline bool has_hnscene() const;
  inline void clear_hnscene();
  static const int kHnsceneFieldNumber = 41;
  inline const ::proto::game::hnmahjonggame::hngamescene& hnscene() const;
  inline ::proto::game::hnmahjonggame::hngamescene* mutable_hnscene();
  inline ::proto::game::hnmahjonggame::hngamescene* release_hnscene();
  inline void set_allocated_hnscene(::proto::game::hnmahjonggame::hngamescene* hnscene);

  // optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
  inline bool has_hunanscene() const;
  inline void clear_hunanscene();
  static const int kHunansceneFieldNumber = 42;
  inline const ::proto::game::hunanmj::AckCustomiedInfo& hunanscene() const;
  inline ::proto::game::hunanmj::AckCustomiedInfo* mutable_hunanscene();
  inline ::proto::game::hunanmj::AckCustomiedInfo* release_hunanscene();
  inline void set_allocated_hunanscene(::proto::game::hunanmj::AckCustomiedInfo* hunanscene);

  // optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
  inline bool has_jxscene() const;
  inline void clear_jxscene();
  static const int kJxsceneFieldNumber = 43;
  inline const ::proto::game::jxmahjonggame::jxgamescene& jxscene() const;
  inline ::proto::game::jxmahjonggame::jxgamescene* mutable_jxscene();
  inline ::proto::game::jxmahjonggame::jxgamescene* release_jxscene();
  inline void set_allocated_jxscene(::proto::game::jxmahjonggame::jxgamescene* jxscene);

  // optional .proto.game.pinghumj.phgamescene phscene = 44;
  inline bool has_phscene() const;
  inline void clear_phscene();
  static const int kPhsceneFieldNumber = 44;
  inline const ::proto::game::pinghumj::phgamescene& phscene() const;
  inline ::proto::game::pinghumj::phgamescene* mutable_phscene();
  inline ::proto::game::pinghumj::phgamescene* release_phscene();
  inline void set_allocated_phscene(::proto::game::pinghumj::phgamescene* phscene);

  // optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
  inline bool has_hubeiscene() const;
  inline void clear_hubeiscene();
  static const int kHubeisceneFieldNumber = 45;
  inline const ::proto::game::hubeimj::hubeiGameScene& hubeiscene() const;
  inline ::proto::game::hubeimj::hubeiGameScene* mutable_hubeiscene();
  inline ::proto::game::hubeimj::hubeiGameScene* release_hubeiscene();
  inline void set_allocated_hubeiscene(::proto::game::hubeimj::hubeiGameScene* hubeiscene);

  // optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
  inline bool has_shanxigamescene() const;
  inline void clear_shanxigamescene();
  static const int kShanxigamesceneFieldNumber = 46;
  inline const ::proto::game::sxmahjonggame::sxgamescene& shanxigamescene() const;
  inline ::proto::game::sxmahjonggame::sxgamescene* mutable_shanxigamescene();
  inline ::proto::game::sxmahjonggame::sxgamescene* release_shanxigamescene();
  inline void set_allocated_shanxigamescene(::proto::game::sxmahjonggame::sxgamescene* shanxigamescene);

  // optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
  inline bool has_jinhuagamescene() const;
  inline void clear_jinhuagamescene();
  static const int kJinhuagamesceneFieldNumber = 47;
  inline const ::proto::game::jhmahjonggame::jhgamescene& jinhuagamescene() const;
  inline ::proto::game::jhmahjonggame::jhgamescene* mutable_jinhuagamescene();
  inline ::proto::game::jhmahjonggame::jhgamescene* release_jinhuagamescene();
  inline void set_allocated_jinhuagamescene(::proto::game::jhmahjonggame::jhgamescene* jinhuagamescene);

  // optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
  inline bool has_fuzhouscene() const;
  inline void clear_fuzhouscene();
  static const int kFuzhousceneFieldNumber = 48;
  inline const ::proto::game::fuzhoumahjonggame::FZ_GameSence& fuzhouscene() const;
  inline ::proto::game::fuzhoumahjonggame::FZ_GameSence* mutable_fuzhouscene();
  inline ::proto::game::fuzhoumahjonggame::FZ_GameSence* release_fuzhouscene();
  inline void set_allocated_fuzhouscene(::proto::game::fuzhoumahjonggame::FZ_GameSence* fuzhouscene);

  // optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
  inline bool has_dgkmjcustomied() const;
  inline void clear_dgkmjcustomied();
  static const int kDgkmjCustomiedFieldNumber = 49;
  inline const ::proto::game::dgkmj::AckCustomiedInfo& dgkmjcustomied() const;
  inline ::proto::game::dgkmj::AckCustomiedInfo* mutable_dgkmjcustomied();
  inline ::proto::game::dgkmj::AckCustomiedInfo* release_dgkmjcustomied();
  inline void set_allocated_dgkmjcustomied(::proto::game::dgkmj::AckCustomiedInfo* dgkmjcustomied);

  // optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
  inline bool has_nanninggamescene() const;
  inline void clear_nanninggamescene();
  static const int kNanninggamesceneFieldNumber = 50;
  inline const ::proto::game::nanningmj::nngamescene& nanninggamescene() const;
  inline ::proto::game::nanningmj::nngamescene* mutable_nanninggamescene();
  inline ::proto::game::nanningmj::nngamescene* release_nanninggamescene();
  inline void set_allocated_nanninggamescene(::proto::game::nanningmj::nngamescene* nanninggamescene);

  // optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
  inline bool has_laibingamescene() const;
  inline void clear_laibingamescene();
  static const int kLaibingamesceneFieldNumber = 51;
  inline const ::proto::game::laibinmj::lbgamescene& laibingamescene() const;
  inline ::proto::game::laibinmj::lbgamescene* mutable_laibingamescene();
  inline ::proto::game::laibinmj::lbgamescene* release_laibingamescene();
  inline void set_allocated_laibingamescene(::proto::game::laibinmj::lbgamescene* laibingamescene);

  // optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
  inline bool has_nanpinggamesence() const;
  inline void clear_nanpinggamesence();
  static const int kNanpingGameSenceFieldNumber = 52;
  inline const ::proto::game::nanpingmahjonggame::NanPingGameSence& nanpinggamesence() const;
  inline ::proto::game::nanpingmahjonggame::NanPingGameSence* mutable_nanpinggamesence();
  inline ::proto::game::nanpingmahjonggame::NanPingGameSence* release_nanpinggamesence();
  inline void set_allocated_nanpinggamesence(::proto::game::nanpingmahjonggame::NanPingGameSence* nanpinggamesence);

  // optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
  inline bool has_yuanjianggamescene() const;
  inline void clear_yuanjianggamescene();
  static const int kYuanjianggamesceneFieldNumber = 53;
  inline const ::proto::game::yuanjiangmj::yjgamescene& yuanjianggamescene() const;
  inline ::proto::game::yuanjiangmj::yjgamescene* mutable_yuanjianggamescene();
  inline ::proto::game::yuanjiangmj::yjgamescene* release_yuanjianggamescene();
  inline void set_allocated_yuanjianggamescene(::proto::game::yuanjiangmj::yjgamescene* yuanjianggamescene);

  // optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
  inline bool has_longyangamesence() const;
  inline void clear_longyangamesence();
  static const int kLongyanGameSenceFieldNumber = 54;
  inline const ::proto::game::longyanmj::GamsSence& longyangamesence() const;
  inline ::proto::game::longyanmj::GamsSence* mutable_longyangamesence();
  inline ::proto::game::longyanmj::GamsSence* release_longyangamesence();
  inline void set_allocated_longyangamesence(::proto::game::longyanmj::GamsSence* longyangamesence);

  // optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
  inline bool has_xiangyangscene() const;
  inline void clear_xiangyangscene();
  static const int kXiangyangsceneFieldNumber = 55;
  inline const ::proto::game::xiangyangmj::tagGameScene& xiangyangscene() const;
  inline ::proto::game::xiangyangmj::tagGameScene* mutable_xiangyangscene();
  inline ::proto::game::xiangyangmj::tagGameScene* release_xiangyangscene();
  inline void set_allocated_xiangyangscene(::proto::game::xiangyangmj::tagGameScene* xiangyangscene);

  // optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
  inline bool has_zhenjianggamescene() const;
  inline void clear_zhenjianggamescene();
  static const int kZhenjiangGameSceneFieldNumber = 56;
  inline const ::proto::game::zhenjiang::zhenjiangGameSence& zhenjianggamescene() const;
  inline ::proto::game::zhenjiang::zhenjiangGameSence* mutable_zhenjianggamescene();
  inline ::proto::game::zhenjiang::zhenjiangGameSence* release_zhenjianggamescene();
  inline void set_allocated_zhenjianggamescene(::proto::game::zhenjiang::zhenjiangGameSence* zhenjianggamescene);

  // optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
  inline bool has_jingshangamescene() const;
  inline void clear_jingshangamescene();
  static const int kJingshanGameSceneFieldNumber = 57;
  inline const ::proto::game::jingshanmj::tagJSGameScence& jingshangamescene() const;
  inline ::proto::game::jingshanmj::tagJSGameScence* mutable_jingshangamescene();
  inline ::proto::game::jingshanmj::tagJSGameScence* release_jingshangamescene();
  inline void set_allocated_jingshangamescene(::proto::game::jingshanmj::tagJSGameScence* jingshangamescene);

  // optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
  inline bool has_qionglaimjcustomied() const;
  inline void clear_qionglaimjcustomied();
  static const int kQionglaimjCustomiedFieldNumber = 58;
  inline const ::proto::game::qionglaimj::AckCustomiedInfo& qionglaimjcustomied() const;
  inline ::proto::game::qionglaimj::AckCustomiedInfo* mutable_qionglaimjcustomied();
  inline ::proto::game::qionglaimj::AckCustomiedInfo* release_qionglaimjcustomied();
  inline void set_allocated_qionglaimjcustomied(::proto::game::qionglaimj::AckCustomiedInfo* qionglaimjcustomied);

  // optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
  inline bool has_guilinzzscene() const;
  inline void clear_guilinzzscene();
  static const int kGuilinzzsceneFieldNumber = 59;
  inline const ::proto::game::guilinzzmj::AckCustomiedInfo& guilinzzscene() const;
  inline ::proto::game::guilinzzmj::AckCustomiedInfo* mutable_guilinzzscene();
  inline ::proto::game::guilinzzmj::AckCustomiedInfo* release_guilinzzscene();
  inline void set_allocated_guilinzzscene(::proto::game::guilinzzmj::AckCustomiedInfo* guilinzzscene);

  // optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
  inline bool has_yunxiaomjscene() const;
  inline void clear_yunxiaomjscene();
  static const int kYunxiaomjsceneFieldNumber = 60;
  inline const ::proto::game::yunxiaomj::AckCustomiedInfo& yunxiaomjscene() const;
  inline ::proto::game::yunxiaomj::AckCustomiedInfo* mutable_yunxiaomjscene();
  inline ::proto::game::yunxiaomj::AckCustomiedInfo* release_yunxiaomjscene();
  inline void set_allocated_yunxiaomjscene(::proto::game::yunxiaomj::AckCustomiedInfo* yunxiaomjscene);

  // optional int32 OpTypeHuType = 61;
  inline bool has_optypehutype() const;
  inline void clear_optypehutype();
  static const int kOpTypeHuTypeFieldNumber = 61;
  inline ::google::protobuf::int32 optypehutype() const;
  inline void set_optypehutype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameScene)
 private:
  inline void set_has_changetime();
  inline void clear_has_changetime();
  inline void set_has_lacktypetime();
  inline void clear_has_lacktypetime();
  inline void set_has_outcardtime();
  inline void clear_has_outcardtime();
  inline void set_has_operatetime();
  inline void clear_has_operatetime();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_scenestatus();
  inline void clear_has_scenestatus();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_curoutcarduser();
  inline void clear_has_curoutcarduser();
  inline void set_has_curoutcard();
  inline void clear_has_curoutcard();
  inline void set_has_isautohu();
  inline void clear_has_isautohu();
  inline void set_has_bankerchairid();
  inline void clear_has_bankerchairid();
  inline void set_has_iscurgetcard();
  inline void clear_has_iscurgetcard();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_poolcardleftnums();
  inline void clear_has_poolcardleftnums();
  inline void set_has_preready_timer();
  inline void clear_has_preready_timer();
  inline void set_has_stand_money();
  inline void clear_has_stand_money();
  inline void set_has_horsenum();
  inline void clear_has_horsenum();
  inline void set_has_isdisbandroom();
  inline void clear_has_isdisbandroom();
  inline void set_has_disbandinfo();
  inline void clear_has_disbandinfo();
  inline void set_has_gztableinfo();
  inline void clear_has_gztableinfo();
  inline void set_has_gdscene();
  inline void clear_has_gdscene();
  inline void set_has_iszhuanzhuanroom();
  inline void clear_has_iszhuanzhuanroom();
  inline void set_has_userreadyinfo();
  inline void clear_has_userreadyinfo();
  inline void set_has_scmjcustomied();
  inline void clear_has_scmjcustomied();
  inline void set_has_roomgolden();
  inline void clear_has_roomgolden();
  inline void set_has_hnscene();
  inline void clear_has_hnscene();
  inline void set_has_hunanscene();
  inline void clear_has_hunanscene();
  inline void set_has_jxscene();
  inline void clear_has_jxscene();
  inline void set_has_phscene();
  inline void clear_has_phscene();
  inline void set_has_hubeiscene();
  inline void clear_has_hubeiscene();
  inline void set_has_shanxigamescene();
  inline void clear_has_shanxigamescene();
  inline void set_has_jinhuagamescene();
  inline void clear_has_jinhuagamescene();
  inline void set_has_fuzhouscene();
  inline void clear_has_fuzhouscene();
  inline void set_has_dgkmjcustomied();
  inline void clear_has_dgkmjcustomied();
  inline void set_has_nanninggamescene();
  inline void clear_has_nanninggamescene();
  inline void set_has_laibingamescene();
  inline void clear_has_laibingamescene();
  inline void set_has_nanpinggamesence();
  inline void clear_has_nanpinggamesence();
  inline void set_has_yuanjianggamescene();
  inline void clear_has_yuanjianggamescene();
  inline void set_has_longyangamesence();
  inline void clear_has_longyangamesence();
  inline void set_has_xiangyangscene();
  inline void clear_has_xiangyangscene();
  inline void set_has_zhenjianggamescene();
  inline void clear_has_zhenjianggamescene();
  inline void set_has_jingshangamescene();
  inline void clear_has_jingshangamescene();
  inline void set_has_qionglaimjcustomied();
  inline void clear_has_qionglaimjcustomied();
  inline void set_has_guilinzzscene();
  inline void clear_has_guilinzzscene();
  inline void set_has_yunxiaomjscene();
  inline void clear_has_yunxiaomjscene();
  inline void set_has_optypehutype();
  inline void clear_has_optypehutype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 changetime_;
  ::google::protobuf::int32 lacktypetime_;
  ::google::protobuf::int32 outcardtime_;
  ::google::protobuf::int32 operatetime_;
  ::google::protobuf::int32 basescore_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 scenestatus_;
  ::google::protobuf::int32 lefttime_;
  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard > showcard_;
  ::google::protobuf::int32 curoutcarduser_;
  ::google::protobuf::int32 curoutcard_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo > huinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > totalscore_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard > groupcard_;
  ::google::protobuf::int32 isautohu_;
  ::google::protobuf::int32 bankerchairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userlacktype_;
  ::google::protobuf::int32 iscurgetcard_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 poolcardleftnums_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offlinestate_;
  ::google::protobuf::int32 preready_timer_;
  ::google::protobuf::int32 stand_money_;
  ::google::protobuf::int32 horsenum_;
  ::google::protobuf::int32 isdisbandroom_;
  ::proto::game::AckDisbandApply* disbandinfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc > userdisbandstate_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState > useronlinestate_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState > userovertime_;
  ::proto::game::guizhou::tagGuiZhouTableInfo* gztableinfo_;
  ::proto::game::gdmahjonggame::gdgamescene* gdscene_;
  ::proto::game::tagReadyInfo* userreadyinfo_;
  bool iszhuanzhuanroom_;
  ::google::protobuf::int32 roomgolden_;
  ::proto::game::scmj::AckCustomiedInfo* scmjcustomied_;
  ::proto::game::hnmahjonggame::hngamescene* hnscene_;
  ::proto::game::hunanmj::AckCustomiedInfo* hunanscene_;
  ::proto::game::jxmahjonggame::jxgamescene* jxscene_;
  ::proto::game::pinghumj::phgamescene* phscene_;
  ::proto::game::hubeimj::hubeiGameScene* hubeiscene_;
  ::proto::game::sxmahjonggame::sxgamescene* shanxigamescene_;
  ::proto::game::jhmahjonggame::jhgamescene* jinhuagamescene_;
  ::proto::game::fuzhoumahjonggame::FZ_GameSence* fuzhouscene_;
  ::proto::game::dgkmj::AckCustomiedInfo* dgkmjcustomied_;
  ::proto::game::nanningmj::nngamescene* nanninggamescene_;
  ::proto::game::laibinmj::lbgamescene* laibingamescene_;
  ::proto::game::nanpingmahjonggame::NanPingGameSence* nanpinggamesence_;
  ::proto::game::yuanjiangmj::yjgamescene* yuanjianggamescene_;
  ::proto::game::longyanmj::GamsSence* longyangamesence_;
  ::proto::game::xiangyangmj::tagGameScene* xiangyangscene_;
  ::proto::game::zhenjiang::zhenjiangGameSence* zhenjianggamescene_;
  ::proto::game::jingshanmj::tagJSGameScence* jingshangamescene_;
  ::proto::game::qionglaimj::AckCustomiedInfo* qionglaimjcustomied_;
  ::proto::game::guilinzzmj::AckCustomiedInfo* guilinzzscene_;
  ::proto::game::yunxiaomj::AckCustomiedInfo* yunxiaomjscene_;
  ::google::protobuf::int32 optypehutype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(61 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameScene* default_instance_;
};
// -------------------------------------------------------------------

class AckUserReady : public ::google::protobuf::Message {
 public:
  AckUserReady();
  virtual ~AckUserReady();

  AckUserReady(const AckUserReady& from);

  inline AckUserReady& operator=(const AckUserReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserReady& default_instance();

  void Swap(AckUserReady* other);

  // implements Message ----------------------------------------------

  AckUserReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserReady& from);
  void MergeFrom(const AckUserReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ready = 1;
  inline int ready_size() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline ::google::protobuf::int32 ready(int index) const;
  inline void set_ready(int index, ::google::protobuf::int32 value);
  inline void add_ready(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ready() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ready();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserReady)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserReady* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStart : public ::google::protobuf::Message {
 public:
  AckGameStart();
  virtual ~AckGameStart();

  AckGameStart(const AckGameStart& from);

  inline AckGameStart& operator=(const AckGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStart& default_instance();

  void Swap(AckGameStart* other);

  // implements Message ----------------------------------------------

  AckGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStart& from);
  void MergeFrom(const AckGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 IsChangBanker = 2;
  inline bool has_ischangbanker() const;
  inline void clear_ischangbanker();
  static const int kIsChangBankerFieldNumber = 2;
  inline ::google::protobuf::int32 ischangbanker() const;
  inline void set_ischangbanker(::google::protobuf::int32 value);

  // repeated int32 TouZiInfo = 3;
  inline int touziinfo_size() const;
  inline void clear_touziinfo();
  static const int kTouZiInfoFieldNumber = 3;
  inline ::google::protobuf::int32 touziinfo(int index) const;
  inline void set_touziinfo(int index, ::google::protobuf::int32 value);
  inline void add_touziinfo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      touziinfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_touziinfo();

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStart)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_ischangbanker();
  inline void clear_has_ischangbanker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 ischangbanker_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > touziinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStart* default_instance_;
};
// -------------------------------------------------------------------

class AckHorse : public ::google::protobuf::Message {
 public:
  AckHorse();
  virtual ~AckHorse();

  AckHorse(const AckHorse& from);

  inline AckHorse& operator=(const AckHorse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHorse& default_instance();

  void Swap(AckHorse* other);

  // implements Message ----------------------------------------------

  AckHorse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckHorse& from);
  void MergeFrom(const AckHorse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 HorseNum = 2;
  inline bool has_horsenum() const;
  inline void clear_horsenum();
  static const int kHorseNumFieldNumber = 2;
  inline ::google::protobuf::int32 horsenum() const;
  inline void set_horsenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckHorse)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_horsenum();
  inline void clear_has_horsenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 horsenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckHorse* default_instance_;
};
// -------------------------------------------------------------------

class AckFirstHandCard : public ::google::protobuf::Message {
 public:
  AckFirstHandCard();
  virtual ~AckFirstHandCard();

  AckFirstHandCard(const AckFirstHandCard& from);

  inline AckFirstHandCard& operator=(const AckFirstHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFirstHandCard& default_instance();

  void Swap(AckFirstHandCard* other);

  // implements Message ----------------------------------------------

  AckFirstHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFirstHandCard& from);
  void MergeFrom(const AckFirstHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.game.HandCards UserCard = 1;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated int32 HandCardNums = 2;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 2;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // optional int32 CardNum = 3;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 3;
  inline ::google::protobuf::int32 cardnum() const;
  inline void set_cardnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckFirstHandCard)
 private:
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_cardnum();
  inline void clear_has_cardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::int32 cardnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckFirstHandCard* default_instance_;
};
// -------------------------------------------------------------------

class HuaPaiInfo : public ::google::protobuf::Message {
 public:
  HuaPaiInfo();
  virtual ~HuaPaiInfo();

  HuaPaiInfo(const HuaPaiInfo& from);

  inline HuaPaiInfo& operator=(const HuaPaiInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuaPaiInfo& default_instance();

  void Swap(HuaPaiInfo* other);

  // implements Message ----------------------------------------------

  HuaPaiInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HuaPaiInfo& from);
  void MergeFrom(const HuaPaiInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HuaCount = 1;
  inline bool has_huacount() const;
  inline void clear_huacount();
  static const int kHuaCountFieldNumber = 1;
  inline ::google::protobuf::int32 huacount() const;
  inline void set_huacount(::google::protobuf::int32 value);

  // repeated int32 HuaCard = 2;
  inline int huacard_size() const;
  inline void clear_huacard();
  static const int kHuaCardFieldNumber = 2;
  inline ::google::protobuf::int32 huacard(int index) const;
  inline void set_huacard(int index, ::google::protobuf::int32 value);
  inline void add_huacard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      huacard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_huacard();

  // @@protoc_insertion_point(class_scope:proto.game.HuaPaiInfo)
 private:
  inline void set_has_huacount();
  inline void clear_has_huacount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > huacard_;
  ::google::protobuf::int32 huacount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static HuaPaiInfo* default_instance_;
};
// -------------------------------------------------------------------

class FirstFlowerHandCard : public ::google::protobuf::Message {
 public:
  FirstFlowerHandCard();
  virtual ~FirstFlowerHandCard();

  FirstFlowerHandCard(const FirstFlowerHandCard& from);

  inline FirstFlowerHandCard& operator=(const FirstFlowerHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstFlowerHandCard& default_instance();

  void Swap(FirstFlowerHandCard* other);

  // implements Message ----------------------------------------------

  FirstFlowerHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstFlowerHandCard& from);
  void MergeFrom(const FirstFlowerHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.game.HandCards UserCard = 1;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated int32 HandCardNums = 2;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 2;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  inline int huapai_size() const;
  inline void clear_huapai();
  static const int kHuaPaiFieldNumber = 3;
  inline const ::proto::game::HuaPaiInfo& huapai(int index) const;
  inline ::proto::game::HuaPaiInfo* mutable_huapai(int index);
  inline ::proto::game::HuaPaiInfo* add_huapai();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >&
      huapai() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >*
      mutable_huapai();

  // @@protoc_insertion_point(class_scope:proto.game.FirstFlowerHandCard)
 private:
  inline void set_has_usercard();
  inline void clear_has_usercard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo > huapai_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static FirstFlowerHandCard* default_instance_;
};
// -------------------------------------------------------------------

class GetHuaPai : public ::google::protobuf::Message {
 public:
  GetHuaPai();
  virtual ~GetHuaPai();

  GetHuaPai(const GetHuaPai& from);

  inline GetHuaPai& operator=(const GetHuaPai& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHuaPai& default_instance();

  void Swap(GetHuaPai* other);

  // implements Message ----------------------------------------------

  GetHuaPai* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHuaPai& from);
  void MergeFrom(const GetHuaPai& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 LeftCardNum = 2;
  inline bool has_leftcardnum() const;
  inline void clear_leftcardnum();
  static const int kLeftCardNumFieldNumber = 2;
  inline ::google::protobuf::int32 leftcardnum() const;
  inline void set_leftcardnum(::google::protobuf::int32 value);

  // optional int32 HuaCard = 3;
  inline bool has_huacard() const;
  inline void clear_huacard();
  static const int kHuaCardFieldNumber = 3;
  inline ::google::protobuf::int32 huacard() const;
  inline void set_huacard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.GetHuaPai)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_leftcardnum();
  inline void clear_has_leftcardnum();
  inline void set_has_huacard();
  inline void clear_has_huacard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 leftcardnum_;
  ::google::protobuf::int32 huacard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static GetHuaPai* default_instance_;
};
// -------------------------------------------------------------------

class AckEnSureJoker : public ::google::protobuf::Message {
 public:
  AckEnSureJoker();
  virtual ~AckEnSureJoker();

  AckEnSureJoker(const AckEnSureJoker& from);

  inline AckEnSureJoker& operator=(const AckEnSureJoker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckEnSureJoker& default_instance();

  void Swap(AckEnSureJoker* other);

  // implements Message ----------------------------------------------

  AckEnSureJoker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckEnSureJoker& from);
  void MergeFrom(const AckEnSureJoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OpenCard = 1;
  inline bool has_opencard() const;
  inline void clear_opencard();
  static const int kOpenCardFieldNumber = 1;
  inline ::google::protobuf::int32 opencard() const;
  inline void set_opencard(::google::protobuf::int32 value);

  // optional int32 CurJokerCard = 2;
  inline bool has_curjokercard() const;
  inline void clear_curjokercard();
  static const int kCurJokerCardFieldNumber = 2;
  inline ::google::protobuf::int32 curjokercard() const;
  inline void set_curjokercard(::google::protobuf::int32 value);

  // optional int32 JokerType = 3;
  inline bool has_jokertype() const;
  inline void clear_jokertype();
  static const int kJokerTypeFieldNumber = 3;
  inline ::google::protobuf::int32 jokertype() const;
  inline void set_jokertype(::google::protobuf::int32 value);

  // optional int32 CurJokerCard2 = 4;
  inline bool has_curjokercard2() const;
  inline void clear_curjokercard2();
  static const int kCurJokerCard2FieldNumber = 4;
  inline ::google::protobuf::int32 curjokercard2() const;
  inline void set_curjokercard2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckEnSureJoker)
 private:
  inline void set_has_opencard();
  inline void clear_has_opencard();
  inline void set_has_curjokercard();
  inline void clear_has_curjokercard();
  inline void set_has_jokertype();
  inline void clear_has_jokertype();
  inline void set_has_curjokercard2();
  inline void clear_has_curjokercard2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opencard_;
  ::google::protobuf::int32 curjokercard_;
  ::google::protobuf::int32 jokertype_;
  ::google::protobuf::int32 curjokercard2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckEnSureJoker* default_instance_;
};
// -------------------------------------------------------------------

class VideoFirstHandCard : public ::google::protobuf::Message {
 public:
  VideoFirstHandCard();
  virtual ~VideoFirstHandCard();

  VideoFirstHandCard(const VideoFirstHandCard& from);

  inline VideoFirstHandCard& operator=(const VideoFirstHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFirstHandCard& default_instance();

  void Swap(VideoFirstHandCard* other);

  // implements Message ----------------------------------------------

  VideoFirstHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoFirstHandCard& from);
  void MergeFrom(const VideoFirstHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // @@protoc_insertion_point(class_scope:proto.game.VideoFirstHandCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static VideoFirstHandCard* default_instance_;
};
// -------------------------------------------------------------------

class VideoFlowerHandCard : public ::google::protobuf::Message {
 public:
  VideoFlowerHandCard();
  virtual ~VideoFlowerHandCard();

  VideoFlowerHandCard(const VideoFlowerHandCard& from);

  inline VideoFlowerHandCard& operator=(const VideoFlowerHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFlowerHandCard& default_instance();

  void Swap(VideoFlowerHandCard* other);

  // implements Message ----------------------------------------------

  VideoFlowerHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoFlowerHandCard& from);
  void MergeFrom(const VideoFlowerHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // repeated int32 HandCardNums = 2;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 2;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  inline int huapai_size() const;
  inline void clear_huapai();
  static const int kHuaPaiFieldNumber = 3;
  inline const ::proto::game::HuaPaiInfo& huapai(int index) const;
  inline ::proto::game::HuaPaiInfo* mutable_huapai(int index);
  inline ::proto::game::HuaPaiInfo* add_huapai();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >&
      huapai() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >*
      mutable_huapai();

  // @@protoc_insertion_point(class_scope:proto.game.VideoFlowerHandCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo > huapai_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static VideoFlowerHandCard* default_instance_;
};
// -------------------------------------------------------------------

class AckChangeCard : public ::google::protobuf::Message {
 public:
  AckChangeCard();
  virtual ~AckChangeCard();

  AckChangeCard(const AckChangeCard& from);

  inline AckChangeCard& operator=(const AckChangeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckChangeCard& default_instance();

  void Swap(AckChangeCard* other);

  // implements Message ----------------------------------------------

  AckChangeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckChangeCard& from);
  void MergeFrom(const AckChangeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ischange = 1;
  inline bool has_ischange() const;
  inline void clear_ischange();
  static const int kIschangeFieldNumber = 1;
  inline ::google::protobuf::int32 ischange() const;
  inline void set_ischange(::google::protobuf::int32 value);

  // repeated int32 Card = 2;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // repeated int32 oldCard = 3;
  inline int oldcard_size() const;
  inline void clear_oldcard();
  static const int kOldCardFieldNumber = 3;
  inline ::google::protobuf::int32 oldcard(int index) const;
  inline void set_oldcard(int index, ::google::protobuf::int32 value);
  inline void add_oldcard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      oldcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_oldcard();

  // @@protoc_insertion_point(class_scope:proto.game.AckChangeCard)
 private:
  inline void set_has_ischange();
  inline void clear_has_ischange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > oldcard_;
  ::google::protobuf::int32 ischange_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckChangeCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUserLackType : public ::google::protobuf::Message {
 public:
  AckUserLackType();
  virtual ~AckUserLackType();

  AckUserLackType(const AckUserLackType& from);

  inline AckUserLackType& operator=(const AckUserLackType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserLackType& default_instance();

  void Swap(AckUserLackType* other);

  // implements Message ----------------------------------------------

  AckUserLackType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserLackType& from);
  void MergeFrom(const AckUserLackType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 LackType = 1;
  inline int lacktype_size() const;
  inline void clear_lacktype();
  static const int kLackTypeFieldNumber = 1;
  inline ::google::protobuf::int32 lacktype(int index) const;
  inline void set_lacktype(int index, ::google::protobuf::int32 value);
  inline void add_lacktype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lacktype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lacktype();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserLackType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lacktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserLackType* default_instance_;
};
// -------------------------------------------------------------------

class AckUserLackTypeOk : public ::google::protobuf::Message {
 public:
  AckUserLackTypeOk();
  virtual ~AckUserLackTypeOk();

  AckUserLackTypeOk(const AckUserLackTypeOk& from);

  inline AckUserLackTypeOk& operator=(const AckUserLackTypeOk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserLackTypeOk& default_instance();

  void Swap(AckUserLackTypeOk* other);

  // implements Message ----------------------------------------------

  AckUserLackTypeOk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserLackTypeOk& from);
  void MergeFrom(const AckUserLackTypeOk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 chairID = 1;
  inline int chairid_size() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid(int index) const;
  inline void set_chairid(int index, ::google::protobuf::int32 value);
  inline void add_chairid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chairid();

  // repeated int32 isOk = 2;
  inline int isok_size() const;
  inline void clear_isok();
  static const int kIsOkFieldNumber = 2;
  inline ::google::protobuf::int32 isok(int index) const;
  inline void set_isok(int index, ::google::protobuf::int32 value);
  inline void add_isok(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      isok() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_isok();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserLackTypeOk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > isok_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserLackTypeOk* default_instance_;
};
// -------------------------------------------------------------------

class tagHuInfo : public ::google::protobuf::Message {
 public:
  tagHuInfo();
  virtual ~tagHuInfo();

  tagHuInfo(const tagHuInfo& from);

  inline tagHuInfo& operator=(const tagHuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHuInfo& default_instance();

  void Swap(tagHuInfo* other);

  // implements Message ----------------------------------------------

  tagHuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHuInfo& from);
  void MergeFrom(const tagHuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 LeftNum = 2;
  inline bool has_leftnum() const;
  inline void clear_leftnum();
  static const int kLeftNumFieldNumber = 2;
  inline ::google::protobuf::int32 leftnum() const;
  inline void set_leftnum(::google::protobuf::int32 value);

  // optional int32 HuFanNum = 3;
  inline bool has_hufannum() const;
  inline void clear_hufannum();
  static const int kHuFanNumFieldNumber = 3;
  inline ::google::protobuf::int32 hufannum() const;
  inline void set_hufannum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagHuInfo)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_leftnum();
  inline void clear_has_leftnum();
  inline void set_has_hufannum();
  inline void clear_has_hufannum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 leftnum_;
  ::google::protobuf::int32 hufannum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagHuInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagListenInfo : public ::google::protobuf::Message {
 public:
  tagListenInfo();
  virtual ~tagListenInfo();

  tagListenInfo(const tagListenInfo& from);

  inline tagListenInfo& operator=(const tagListenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagListenInfo& default_instance();

  void Swap(tagListenInfo* other);

  // implements Message ----------------------------------------------

  tagListenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagListenInfo& from);
  void MergeFrom(const tagListenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OutCard = 1;
  inline bool has_outcard() const;
  inline void clear_outcard();
  static const int kOutCardFieldNumber = 1;
  inline ::google::protobuf::int32 outcard() const;
  inline void set_outcard(::google::protobuf::int32 value);

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  inline int huinfo_size() const;
  inline void clear_huinfo();
  static const int kHuInfoFieldNumber = 2;
  inline const ::proto::game::tagHuInfo& huinfo(int index) const;
  inline ::proto::game::tagHuInfo* mutable_huinfo(int index);
  inline ::proto::game::tagHuInfo* add_huinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >&
      huinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >*
      mutable_huinfo();

  // @@protoc_insertion_point(class_scope:proto.game.tagListenInfo)
 private:
  inline void set_has_outcard();
  inline void clear_has_outcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo > huinfo_;
  ::google::protobuf::int32 outcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagListenInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagPreGangs : public ::google::protobuf::Message {
 public:
  tagPreGangs();
  virtual ~tagPreGangs();

  tagPreGangs(const tagPreGangs& from);

  inline tagPreGangs& operator=(const tagPreGangs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPreGangs& default_instance();

  void Swap(tagPreGangs* other);

  // implements Message ----------------------------------------------

  tagPreGangs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPreGangs& from);
  void MergeFrom(const tagPreGangs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OutCard = 1;
  inline bool has_outcard() const;
  inline void clear_outcard();
  static const int kOutCardFieldNumber = 1;
  inline ::google::protobuf::int32 outcard() const;
  inline void set_outcard(::google::protobuf::int32 value);

  // repeated int32 GangInfo = 2;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 2;
  inline ::google::protobuf::int32 ganginfo(int index) const;
  inline void set_ganginfo(int index, ::google::protobuf::int32 value);
  inline void add_ganginfo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ganginfo();

  // @@protoc_insertion_point(class_scope:proto.game.tagPreGangs)
 private:
  inline void set_has_outcard();
  inline void clear_has_outcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ganginfo_;
  ::google::protobuf::int32 outcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagPreGangs* default_instance_;
};
// -------------------------------------------------------------------

class AckUserGetCard : public ::google::protobuf::Message {
 public:
  AckUserGetCard();
  virtual ~AckUserGetCard();

  AckUserGetCard(const AckUserGetCard& from);

  inline AckUserGetCard& operator=(const AckUserGetCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserGetCard& default_instance();

  void Swap(AckUserGetCard* other);

  // implements Message ----------------------------------------------

  AckUserGetCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserGetCard& from);
  void MergeFrom(const AckUserGetCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 LeftCardNum = 2;
  inline bool has_leftcardnum() const;
  inline void clear_leftcardnum();
  static const int kLeftCardNumFieldNumber = 2;
  inline ::google::protobuf::int32 leftcardnum() const;
  inline void set_leftcardnum(::google::protobuf::int32 value);

  // optional int32 Card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 OpType = 4;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 4;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 5;
  inline const ::proto::game::tagGangInfo& ganginfo(int index) const;
  inline ::proto::game::tagGangInfo* mutable_ganginfo(int index);
  inline ::proto::game::tagGangInfo* add_ganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_ganginfo();

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 6;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // optional .proto.game.hunanmj.tagBuZhang bu = 7;
  inline bool has_bu() const;
  inline void clear_bu();
  static const int kBuFieldNumber = 7;
  inline const ::proto::game::hunanmj::tagBuZhang& bu() const;
  inline ::proto::game::hunanmj::tagBuZhang* mutable_bu();
  inline ::proto::game::hunanmj::tagBuZhang* release_bu();
  inline void set_allocated_bu(::proto::game::hunanmj::tagBuZhang* bu);

  // optional int32 OpType2 = 8;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 8;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // optional int32 fz_type = 9;
  inline bool has_fz_type() const;
  inline void clear_fz_type();
  static const int kFzTypeFieldNumber = 9;
  inline ::google::protobuf::int32 fz_type() const;
  inline void set_fz_type(::google::protobuf::int32 value);

  // optional int32 GetCardDir = 10;
  inline bool has_getcarddir() const;
  inline void clear_getcarddir();
  static const int kGetCardDirFieldNumber = 10;
  inline ::google::protobuf::int32 getcarddir() const;
  inline void set_getcarddir(::google::protobuf::int32 value);

  // repeated .proto.game.tagPreGangs xy_pregang = 11;
  inline int xy_pregang_size() const;
  inline void clear_xy_pregang();
  static const int kXyPregangFieldNumber = 11;
  inline const ::proto::game::tagPreGangs& xy_pregang(int index) const;
  inline ::proto::game::tagPreGangs* mutable_xy_pregang(int index);
  inline ::proto::game::tagPreGangs* add_xy_pregang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
      xy_pregang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
      mutable_xy_pregang();

  // optional int32 LockLaizi = 12;
  inline bool has_locklaizi() const;
  inline void clear_locklaizi();
  static const int kLockLaiziFieldNumber = 12;
  inline ::google::protobuf::int32 locklaizi() const;
  inline void set_locklaizi(::google::protobuf::int32 value);

  // optional int32 getlaizi = 13;
  inline bool has_getlaizi() const;
  inline void clear_getlaizi();
  static const int kGetlaiziFieldNumber = 13;
  inline ::google::protobuf::int32 getlaizi() const;
  inline void set_getlaizi(::google::protobuf::int32 value);

  // optional int32 OpTypeHuType = 15;
  inline bool has_optypehutype() const;
  inline void clear_optypehutype();
  static const int kOpTypeHuTypeFieldNumber = 15;
  inline ::google::protobuf::int32 optypehutype() const;
  inline void set_optypehutype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserGetCard)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_leftcardnum();
  inline void clear_has_leftcardnum();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_bu();
  inline void clear_has_bu();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_fz_type();
  inline void clear_has_fz_type();
  inline void set_has_getcarddir();
  inline void clear_has_getcarddir();
  inline void set_has_locklaizi();
  inline void clear_has_locklaizi();
  inline void set_has_getlaizi();
  inline void clear_has_getlaizi();
  inline void set_has_optypehutype();
  inline void clear_has_optypehutype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 leftcardnum_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::proto::game::hunanmj::tagBuZhang* bu_;
  ::google::protobuf::int32 optype2_;
  ::google::protobuf::int32 fz_type_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs > xy_pregang_;
  ::google::protobuf::int32 getcarddir_;
  ::google::protobuf::int32 locklaizi_;
  ::google::protobuf::int32 getlaizi_;
  ::google::protobuf::int32 optypehutype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserGetCard* default_instance_;
};
// -------------------------------------------------------------------

class tagShowOutCard : public ::google::protobuf::Message {
 public:
  tagShowOutCard();
  virtual ~tagShowOutCard();

  tagShowOutCard(const tagShowOutCard& from);

  inline tagShowOutCard& operator=(const tagShowOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagShowOutCard& default_instance();

  void Swap(tagShowOutCard* other);

  // implements Message ----------------------------------------------

  tagShowOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagShowOutCard& from);
  void MergeFrom(const tagShowOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OutCardLen = 1;
  inline bool has_outcardlen() const;
  inline void clear_outcardlen();
  static const int kOutCardLenFieldNumber = 1;
  inline ::google::protobuf::int32 outcardlen() const;
  inline void set_outcardlen(::google::protobuf::int32 value);

  // repeated int32 OutCard = 2;
  inline int outcard_size() const;
  inline void clear_outcard();
  static const int kOutCardFieldNumber = 2;
  inline ::google::protobuf::int32 outcard(int index) const;
  inline void set_outcard(int index, ::google::protobuf::int32 value);
  inline void add_outcard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcard();

  // @@protoc_insertion_point(class_scope:proto.game.tagShowOutCard)
 private:
  inline void set_has_outcardlen();
  inline void clear_has_outcardlen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcard_;
  ::google::protobuf::int32 outcardlen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagShowOutCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOutCard : public ::google::protobuf::Message {
 public:
  AckUserOutCard();
  virtual ~AckUserOutCard();

  AckUserOutCard(const AckUserOutCard& from);

  inline AckUserOutCard& operator=(const AckUserOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOutCard& default_instance();

  void Swap(AckUserOutCard* other);

  // implements Message ----------------------------------------------

  AckUserOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOutCard& from);
  void MergeFrom(const AckUserOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 Card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  inline int showcard_size() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 3;
  inline const ::proto::game::tagShowOutCard& showcard(int index) const;
  inline ::proto::game::tagShowOutCard* mutable_showcard(int index);
  inline ::proto::game::tagShowOutCard* add_showcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
      showcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
      mutable_showcard();

  // optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
  inline bool has_gzoutcard() const;
  inline void clear_gzoutcard();
  static const int kGZOutCardFieldNumber = 4;
  inline const ::proto::game::guizhou::tagGuiZhouOutCard& gzoutcard() const;
  inline ::proto::game::guizhou::tagGuiZhouOutCard* mutable_gzoutcard();
  inline ::proto::game::guizhou::tagGuiZhouOutCard* release_gzoutcard();
  inline void set_allocated_gzoutcard(::proto::game::guizhou::tagGuiZhouOutCard* gzoutcard);

  // optional .proto.game.HandCards UserCard = 5;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 5;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 6;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // optional int32 da_type = 7;
  inline bool has_da_type() const;
  inline void clear_da_type();
  static const int kDaTypeFieldNumber = 7;
  inline ::google::protobuf::int32 da_type() const;
  inline void set_da_type(::google::protobuf::int32 value);

  // optional bool DoubleJinFlag = 8;
  inline bool has_doublejinflag() const;
  inline void clear_doublejinflag();
  static const int kDoubleJinFlagFieldNumber = 8;
  inline bool doublejinflag() const;
  inline void set_doublejinflag(bool value);

  // optional bool AutoOutFlag = 9;
  inline bool has_autooutflag() const;
  inline void clear_autooutflag();
  static const int kAutoOutFlagFieldNumber = 9;
  inline bool autooutflag() const;
  inline void set_autooutflag(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOutCard)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_gzoutcard();
  inline void clear_has_gzoutcard();
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_da_type();
  inline void clear_has_da_type();
  inline void set_has_doublejinflag();
  inline void clear_has_doublejinflag();
  inline void set_has_autooutflag();
  inline void clear_has_autooutflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard > showcard_;
  ::proto::game::guizhou::tagGuiZhouOutCard* gzoutcard_;
  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 da_type_;
  bool doublejinflag_;
  bool autooutflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOutCard* default_instance_;
};
// -------------------------------------------------------------------

class AckOpNotify : public ::google::protobuf::Message {
 public:
  AckOpNotify();
  virtual ~AckOpNotify();

  AckOpNotify(const AckOpNotify& from);

  inline AckOpNotify& operator=(const AckOpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOpNotify& default_instance();

  void Swap(AckOpNotify* other);

  // implements Message ----------------------------------------------

  AckOpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOpNotify& from);
  void MergeFrom(const AckOpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 OpType = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 2;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 Card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo Gang = 4;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 4;
  inline const ::proto::game::tagGangInfo& gang(int index) const;
  inline ::proto::game::tagGangInfo* mutable_gang(int index);
  inline ::proto::game::tagGangInfo* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_gang();

  // optional .proto.game.hunanmj.tagBuZhang bu = 5;
  inline bool has_bu() const;
  inline void clear_bu();
  static const int kBuFieldNumber = 5;
  inline const ::proto::game::hunanmj::tagBuZhang& bu() const;
  inline ::proto::game::hunanmj::tagBuZhang* mutable_bu();
  inline ::proto::game::hunanmj::tagBuZhang* release_bu();
  inline void set_allocated_bu(::proto::game::hunanmj::tagBuZhang* bu);

  // optional int32 fz_type = 6;
  inline bool has_fz_type() const;
  inline void clear_fz_type();
  static const int kFzTypeFieldNumber = 6;
  inline ::google::protobuf::int32 fz_type() const;
  inline void set_fz_type(::google::protobuf::int32 value);

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  inline int xy_pregang_size() const;
  inline void clear_xy_pregang();
  static const int kXyPregangFieldNumber = 7;
  inline const ::proto::game::tagPreGangs& xy_pregang(int index) const;
  inline ::proto::game::tagPreGangs* mutable_xy_pregang(int index);
  inline ::proto::game::tagPreGangs* add_xy_pregang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
      xy_pregang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
      mutable_xy_pregang();

  // optional int32 LockLaizi = 8;
  inline bool has_locklaizi() const;
  inline void clear_locklaizi();
  static const int kLockLaiziFieldNumber = 8;
  inline ::google::protobuf::int32 locklaizi() const;
  inline void set_locklaizi(::google::protobuf::int32 value);

  // optional int32 OpTypeHuType = 9;
  inline bool has_optypehutype() const;
  inline void clear_optypehutype();
  static const int kOpTypeHuTypeFieldNumber = 9;
  inline ::google::protobuf::int32 optypehutype() const;
  inline void set_optypehutype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckOpNotify)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_bu();
  inline void clear_has_bu();
  inline void set_has_fz_type();
  inline void clear_has_fz_type();
  inline void set_has_locklaizi();
  inline void clear_has_locklaizi();
  inline void set_has_optypehutype();
  inline void clear_has_optypehutype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > gang_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 fz_type_;
  ::proto::game::hunanmj::tagBuZhang* bu_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs > xy_pregang_;
  ::google::protobuf::int32 locklaizi_;
  ::google::protobuf::int32 optypehutype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOpNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckBcOpResult : public ::google::protobuf::Message {
 public:
  AckBcOpResult();
  virtual ~AckBcOpResult();

  AckBcOpResult(const AckBcOpResult& from);

  inline AckBcOpResult& operator=(const AckBcOpResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBcOpResult& default_instance();

  void Swap(AckBcOpResult* other);

  // implements Message ----------------------------------------------

  AckBcOpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBcOpResult& from);
  void MergeFrom(const AckBcOpResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 OutCardChairID = 2;
  inline bool has_outcardchairid() const;
  inline void clear_outcardchairid();
  static const int kOutCardChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 outcardchairid() const;
  inline void set_outcardchairid(::google::protobuf::int32 value);

  // optional int32 OpType = 3;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 3;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 Card = 4;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 4;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated int32 Score = 5;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
  inline bool has_gzgang() const;
  inline void clear_gzgang();
  static const int kGZGangFieldNumber = 6;
  inline const ::proto::game::guizhou::tagGuiZhouGang& gzgang() const;
  inline ::proto::game::guizhou::tagGuiZhouGang* mutable_gzgang();
  inline ::proto::game::guizhou::tagGuiZhouGang* release_gzgang();
  inline void set_allocated_gzgang(::proto::game::guizhou::tagGuiZhouGang* gzgang);

  // optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
  inline bool has_gzopresult() const;
  inline void clear_gzopresult();
  static const int kGZOpResultFieldNumber = 7;
  inline const ::proto::game::guizhou::tagGuiZhouOpResult& gzopresult() const;
  inline ::proto::game::guizhou::tagGuiZhouOpResult* mutable_gzopresult();
  inline ::proto::game::guizhou::tagGuiZhouOpResult* release_gzopresult();
  inline void set_allocated_gzopresult(::proto::game::guizhou::tagGuiZhouOpResult* gzopresult);

  // optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
  inline bool has_hnopresult() const;
  inline void clear_hnopresult();
  static const int kHNOPResultFieldNumber = 8;
  inline const ::proto::game::hunanmj::tagBuZhangOpResult& hnopresult() const;
  inline ::proto::game::hunanmj::tagBuZhangOpResult* mutable_hnopresult();
  inline ::proto::game::hunanmj::tagBuZhangOpResult* release_hnopresult();
  inline void set_allocated_hnopresult(::proto::game::hunanmj::tagBuZhangOpResult* hnopresult);

  // optional int32 IsQiangganghu = 9;
  inline bool has_isqiangganghu() const;
  inline void clear_isqiangganghu();
  static const int kIsQiangganghuFieldNumber = 9;
  inline ::google::protobuf::int32 isqiangganghu() const;
  inline void set_isqiangganghu(::google::protobuf::int32 value);

  // optional int32 OpType2 = 10;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 10;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // optional int32 fz_hu_type = 11;
  inline bool has_fz_hu_type() const;
  inline void clear_fz_hu_type();
  static const int kFzHuTypeFieldNumber = 11;
  inline ::google::protobuf::int32 fz_hu_type() const;
  inline void set_fz_hu_type(::google::protobuf::int32 value);

  // optional int32 YunXiaoYouJinType = 12;
  inline bool has_yunxiaoyoujintype() const;
  inline void clear_yunxiaoyoujintype();
  static const int kYunXiaoYouJinTypeFieldNumber = 12;
  inline ::google::protobuf::int32 yunxiaoyoujintype() const;
  inline void set_yunxiaoyoujintype(::google::protobuf::int32 value);

  // optional bool MingGangFlag = 13;
  inline bool has_minggangflag() const;
  inline void clear_minggangflag();
  static const int kMingGangFlagFieldNumber = 13;
  inline bool minggangflag() const;
  inline void set_minggangflag(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.AckBcOpResult)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_outcardchairid();
  inline void clear_has_outcardchairid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_gzgang();
  inline void clear_has_gzgang();
  inline void set_has_gzopresult();
  inline void clear_has_gzopresult();
  inline void set_has_hnopresult();
  inline void clear_has_hnopresult();
  inline void set_has_isqiangganghu();
  inline void clear_has_isqiangganghu();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_fz_hu_type();
  inline void clear_has_fz_hu_type();
  inline void set_has_yunxiaoyoujintype();
  inline void clear_has_yunxiaoyoujintype();
  inline void set_has_minggangflag();
  inline void clear_has_minggangflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 outcardchairid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::proto::game::guizhou::tagGuiZhouGang* gzgang_;
  ::proto::game::guizhou::tagGuiZhouOpResult* gzopresult_;
  ::proto::game::hunanmj::tagBuZhangOpResult* hnopresult_;
  ::google::protobuf::int32 isqiangganghu_;
  ::google::protobuf::int32 optype2_;
  ::google::protobuf::int32 fz_hu_type_;
  ::google::protobuf::int32 yunxiaoyoujintype_;
  bool minggangflag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckBcOpResult* default_instance_;
};
// -------------------------------------------------------------------

class AckListenNotify : public ::google::protobuf::Message {
 public:
  AckListenNotify();
  virtual ~AckListenNotify();

  AckListenNotify(const AckListenNotify& from);

  inline AckListenNotify& operator=(const AckListenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckListenNotify& default_instance();

  void Swap(AckListenNotify* other);

  // implements Message ----------------------------------------------

  AckListenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckListenNotify& from);
  void MergeFrom(const AckListenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OpType = 1;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 2;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // @@protoc_insertion_point(class_scope:proto.game.AckListenNotify)
 private:
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 optype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckListenNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckUserHu : public ::google::protobuf::Message {
 public:
  AckUserHu();
  virtual ~AckUserHu();

  AckUserHu(const AckUserHu& from);

  inline AckUserHu& operator=(const AckUserHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserHu& default_instance();

  void Swap(AckUserHu* other);

  // implements Message ----------------------------------------------

  AckUserHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserHu& from);
  void MergeFrom(const AckUserHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 HuChairID = 1;
  inline bool has_huchairid() const;
  inline void clear_huchairid();
  static const int kHuChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 huchairid() const;
  inline void set_huchairid(::google::protobuf::int32 value);

  // optional int32 PasHuChairID = 2;
  inline bool has_pashuchairid() const;
  inline void clear_pashuchairid();
  static const int kPasHuChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 pashuchairid() const;
  inline void set_pashuchairid(::google::protobuf::int32 value);

  // repeated int32 Score = 3;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserHu)
 private:
  inline void set_has_huchairid();
  inline void clear_has_huchairid();
  inline void set_has_pashuchairid();
  inline void clear_has_pashuchairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 huchairid_;
  ::google::protobuf::int32 pashuchairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserHu* default_instance_;
};
// -------------------------------------------------------------------

class Horse : public ::google::protobuf::Message {
 public:
  Horse();
  virtual ~Horse();

  Horse(const Horse& from);

  inline Horse& operator=(const Horse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Horse& default_instance();

  void Swap(Horse* other);

  // implements Message ----------------------------------------------

  Horse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Horse& from);
  void MergeFrom(const Horse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HorseNum = 1;
  inline bool has_horsenum() const;
  inline void clear_horsenum();
  static const int kHorseNumFieldNumber = 1;
  inline ::google::protobuf::int32 horsenum() const;
  inline void set_horsenum(::google::protobuf::int32 value);

  // repeated int32 HorseCard = 2;
  inline int horsecard_size() const;
  inline void clear_horsecard();
  static const int kHorseCardFieldNumber = 2;
  inline ::google::protobuf::int32 horsecard(int index) const;
  inline void set_horsecard(int index, ::google::protobuf::int32 value);
  inline void add_horsecard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      horsecard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_horsecard();

  // @@protoc_insertion_point(class_scope:proto.game.Horse)
 private:
  inline void set_has_horsenum();
  inline void clear_has_horsenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > horsecard_;
  ::google::protobuf::int32 horsenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static Horse* default_instance_;
};
// -------------------------------------------------------------------

class UserHorseCard : public ::google::protobuf::Message {
 public:
  UserHorseCard();
  virtual ~UserHorseCard();

  UserHorseCard(const UserHorseCard& from);

  inline UserHorseCard& operator=(const UserHorseCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserHorseCard& default_instance();

  void Swap(UserHorseCard* other);

  // implements Message ----------------------------------------------

  UserHorseCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserHorseCard& from);
  void MergeFrom(const UserHorseCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 HorseCard = 3;
  inline int horsecard_size() const;
  inline void clear_horsecard();
  static const int kHorseCardFieldNumber = 3;
  inline ::google::protobuf::int32 horsecard(int index) const;
  inline void set_horsecard(int index, ::google::protobuf::int32 value);
  inline void add_horsecard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      horsecard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_horsecard();

  // optional int32 bValid = 4;
  inline bool has_bvalid() const;
  inline void clear_bvalid();
  static const int kBValidFieldNumber = 4;
  inline ::google::protobuf::int32 bvalid() const;
  inline void set_bvalid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.UserHorseCard)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_bvalid();
  inline void clear_has_bvalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > horsecard_;
  ::google::protobuf::int32 bvalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static UserHorseCard* default_instance_;
};
// -------------------------------------------------------------------

class tagGameEndGang : public ::google::protobuf::Message {
 public:
  tagGameEndGang();
  virtual ~tagGameEndGang();

  tagGameEndGang(const tagGameEndGang& from);

  inline tagGameEndGang& operator=(const tagGameEndGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameEndGang& default_instance();

  void Swap(tagGameEndGang* other);

  // implements Message ----------------------------------------------

  tagGameEndGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGameEndGang& from);
  void MergeFrom(const tagGameEndGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GangType = 1;
  inline bool has_gangtype() const;
  inline void clear_gangtype();
  static const int kGangTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gangtype() const;
  inline void set_gangtype(::google::protobuf::int32 value);

  // optional int32 GangCard = 2;
  inline bool has_gangcard() const;
  inline void clear_gangcard();
  static const int kGangCardFieldNumber = 2;
  inline ::google::protobuf::int32 gangcard() const;
  inline void set_gangcard(::google::protobuf::int32 value);

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
  inline bool has_gzgang() const;
  inline void clear_gzgang();
  static const int kGZGangFieldNumber = 3;
  inline const ::proto::game::guizhou::tagGuiZhouGang& gzgang() const;
  inline ::proto::game::guizhou::tagGuiZhouGang* mutable_gzgang();
  inline ::proto::game::guizhou::tagGuiZhouGang* release_gzgang();
  inline void set_allocated_gzgang(::proto::game::guizhou::tagGuiZhouGang* gzgang);

  // @@protoc_insertion_point(class_scope:proto.game.tagGameEndGang)
 private:
  inline void set_has_gangtype();
  inline void clear_has_gangtype();
  inline void set_has_gangcard();
  inline void clear_has_gangcard();
  inline void set_has_gzgang();
  inline void clear_has_gzgang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gangtype_;
  ::google::protobuf::int32 gangcard_;
  ::proto::game::guizhou::tagGuiZhouGang* gzgang_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGameEndGang* default_instance_;
};
// -------------------------------------------------------------------

class tagGameEndInfo : public ::google::protobuf::Message {
 public:
  tagGameEndInfo();
  virtual ~tagGameEndInfo();

  tagGameEndInfo(const tagGameEndInfo& from);

  inline tagGameEndInfo& operator=(const tagGameEndInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameEndInfo& default_instance();

  void Swap(tagGameEndInfo* other);

  // implements Message ----------------------------------------------

  tagGameEndInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGameEndInfo& from);
  void MergeFrom(const tagGameEndInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagGameEndGang Gang = 1;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 1;
  inline const ::proto::game::tagGameEndGang& gang(int index) const;
  inline ::proto::game::tagGameEndGang* mutable_gang(int index);
  inline ::proto::game::tagGameEndGang* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndGang >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndGang >*
      mutable_gang();

  // optional int32 EndType = 2;
  inline bool has_endtype() const;
  inline void clear_endtype();
  static const int kEndTypeFieldNumber = 2;
  inline ::google::protobuf::int32 endtype() const;
  inline void set_endtype(::google::protobuf::int32 value);

  // optional int32 HuCard = 3;
  inline bool has_hucard() const;
  inline void clear_hucard();
  static const int kHuCardFieldNumber = 3;
  inline ::google::protobuf::int32 hucard() const;
  inline void set_hucard(::google::protobuf::int32 value);

  // optional int32 BaoTingType = 4;
  inline bool has_baotingtype() const;
  inline void clear_baotingtype();
  static const int kBaoTingTypeFieldNumber = 4;
  inline ::google::protobuf::int32 baotingtype() const;
  inline void set_baotingtype(::google::protobuf::int32 value);

  // optional int32 TotalGangScore = 5;
  inline bool has_totalgangscore() const;
  inline void clear_totalgangscore();
  static const int kTotalGangScoreFieldNumber = 5;
  inline ::google::protobuf::int32 totalgangscore() const;
  inline void set_totalgangscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagGameEndInfo)
 private:
  inline void set_has_endtype();
  inline void clear_has_endtype();
  inline void set_has_hucard();
  inline void clear_has_hucard();
  inline void set_has_baotingtype();
  inline void clear_has_baotingtype();
  inline void set_has_totalgangscore();
  inline void clear_has_totalgangscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndGang > gang_;
  ::google::protobuf::int32 endtype_;
  ::google::protobuf::int32 hucard_;
  ::google::protobuf::int32 baotingtype_;
  ::google::protobuf::int32 totalgangscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGameEndInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameEnd : public ::google::protobuf::Message {
 public:
  AckGameEnd();
  virtual ~AckGameEnd();

  AckGameEnd(const AckGameEnd& from);

  inline AckGameEnd& operator=(const AckGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameEnd& default_instance();

  void Swap(AckGameEnd* other);

  // implements Message ----------------------------------------------

  AckGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameEnd& from);
  void MergeFrom(const AckGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // required int32 HuScore = 2;
  inline bool has_huscore() const;
  inline void clear_huscore();
  static const int kHuScoreFieldNumber = 2;
  inline ::google::protobuf::int32 huscore() const;
  inline void set_huscore(::google::protobuf::int32 value);

  // optional int32 GangScore = 3;
  inline bool has_gangscore() const;
  inline void clear_gangscore();
  static const int kGangScoreFieldNumber = 3;
  inline ::google::protobuf::int32 gangscore() const;
  inline void set_gangscore(::google::protobuf::int32 value);

  // repeated int32 Score = 4;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // optional int32 EndState = 5;
  inline bool has_endstate() const;
  inline void clear_endstate();
  static const int kEndStateFieldNumber = 5;
  inline ::google::protobuf::int32 endstate() const;
  inline void set_endstate(::google::protobuf::int32 value);

  // repeated int32 isHuazhu = 6;
  inline int ishuazhu_size() const;
  inline void clear_ishuazhu();
  static const int kIsHuazhuFieldNumber = 6;
  inline ::google::protobuf::int32 ishuazhu(int index) const;
  inline void set_ishuazhu(int index, ::google::protobuf::int32 value);
  inline void add_ishuazhu(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ishuazhu() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ishuazhu();

  // repeated int32 HuazhuScore = 7;
  inline int huazhuscore_size() const;
  inline void clear_huazhuscore();
  static const int kHuazhuScoreFieldNumber = 7;
  inline ::google::protobuf::int32 huazhuscore(int index) const;
  inline void set_huazhuscore(int index, ::google::protobuf::int32 value);
  inline void add_huazhuscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      huazhuscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_huazhuscore();

  // repeated int32 isDajiao = 8;
  inline int isdajiao_size() const;
  inline void clear_isdajiao();
  static const int kIsDajiaoFieldNumber = 8;
  inline ::google::protobuf::int32 isdajiao(int index) const;
  inline void set_isdajiao(int index, ::google::protobuf::int32 value);
  inline void add_isdajiao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      isdajiao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_isdajiao();

  // repeated int32 DajiaoScore = 9;
  inline int dajiaoscore_size() const;
  inline void clear_dajiaoscore();
  static const int kDajiaoScoreFieldNumber = 9;
  inline ::google::protobuf::int32 dajiaoscore(int index) const;
  inline void set_dajiaoscore(int index, ::google::protobuf::int32 value);
  inline void add_dajiaoscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dajiaoscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dajiaoscore();

  // repeated int32 ReturnGangScore = 10;
  inline int returngangscore_size() const;
  inline void clear_returngangscore();
  static const int kReturnGangScoreFieldNumber = 10;
  inline ::google::protobuf::int32 returngangscore(int index) const;
  inline void set_returngangscore(int index, ::google::protobuf::int32 value);
  inline void add_returngangscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      returngangscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_returngangscore();

  // repeated int32 HorseScore = 11;
  inline int horsescore_size() const;
  inline void clear_horsescore();
  static const int kHorseScoreFieldNumber = 11;
  inline ::google::protobuf::int32 horsescore(int index) const;
  inline void set_horsescore(int index, ::google::protobuf::int32 value);
  inline void add_horsescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      horsescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_horsescore();

  // optional .proto.game.Horse HorseInfo = 12;
  inline bool has_horseinfo() const;
  inline void clear_horseinfo();
  static const int kHorseInfoFieldNumber = 12;
  inline const ::proto::game::Horse& horseinfo() const;
  inline ::proto::game::Horse* mutable_horseinfo();
  inline ::proto::game::Horse* release_horseinfo();
  inline void set_allocated_horseinfo(::proto::game::Horse* horseinfo);

  // repeated .proto.game.UserHorseCard UserHorse = 13;
  inline int userhorse_size() const;
  inline void clear_userhorse();
  static const int kUserHorseFieldNumber = 13;
  inline const ::proto::game::UserHorseCard& userhorse(int index) const;
  inline ::proto::game::UserHorseCard* mutable_userhorse(int index);
  inline ::proto::game::UserHorseCard* add_userhorse();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::UserHorseCard >&
      userhorse() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::UserHorseCard >*
      mutable_userhorse();

  // optional int32 HuFanType = 14;
  inline bool has_hufantype() const;
  inline void clear_hufantype();
  static const int kHuFanTypeFieldNumber = 14;
  inline ::google::protobuf::int32 hufantype() const;
  inline void set_hufantype(::google::protobuf::int32 value);

  // optional int32 ZhiGangCount = 15;
  inline bool has_zhigangcount() const;
  inline void clear_zhigangcount();
  static const int kZhiGangCountFieldNumber = 15;
  inline ::google::protobuf::int32 zhigangcount() const;
  inline void set_zhigangcount(::google::protobuf::int32 value);

  // optional int32 ZhiGangScore = 16;
  inline bool has_zhigangscore() const;
  inline void clear_zhigangscore();
  static const int kZhiGangScoreFieldNumber = 16;
  inline ::google::protobuf::int32 zhigangscore() const;
  inline void set_zhigangscore(::google::protobuf::int32 value);

  // optional int32 WanGangCount = 17;
  inline bool has_wangangcount() const;
  inline void clear_wangangcount();
  static const int kWanGangCountFieldNumber = 17;
  inline ::google::protobuf::int32 wangangcount() const;
  inline void set_wangangcount(::google::protobuf::int32 value);

  // optional int32 WanGangScore = 18;
  inline bool has_wangangscore() const;
  inline void clear_wangangscore();
  static const int kWanGangScoreFieldNumber = 18;
  inline ::google::protobuf::int32 wangangscore() const;
  inline void set_wangangscore(::google::protobuf::int32 value);

  // optional int32 AnGangCount = 19;
  inline bool has_angangcount() const;
  inline void clear_angangcount();
  static const int kAnGangCountFieldNumber = 19;
  inline ::google::protobuf::int32 angangcount() const;
  inline void set_angangcount(::google::protobuf::int32 value);

  // optional int32 AnGangScore = 20;
  inline bool has_angangscore() const;
  inline void clear_angangscore();
  static const int kAnGangScoreFieldNumber = 20;
  inline ::google::protobuf::int32 angangscore() const;
  inline void set_angangscore(::google::protobuf::int32 value);

  // optional int32 DianGangCount = 21;
  inline bool has_diangangcount() const;
  inline void clear_diangangcount();
  static const int kDianGangCountFieldNumber = 21;
  inline ::google::protobuf::int32 diangangcount() const;
  inline void set_diangangcount(::google::protobuf::int32 value);

  // optional int32 DianGangScore = 22;
  inline bool has_diangangscore() const;
  inline void clear_diangangscore();
  static const int kDianGangScoreFieldNumber = 22;
  inline ::google::protobuf::int32 diangangscore() const;
  inline void set_diangangscore(::google::protobuf::int32 value);

  // repeated .proto.game.tagGameEndInfo EndInfo = 23;
  inline int endinfo_size() const;
  inline void clear_endinfo();
  static const int kEndInfoFieldNumber = 23;
  inline const ::proto::game::tagGameEndInfo& endinfo(int index) const;
  inline ::proto::game::tagGameEndInfo* mutable_endinfo(int index);
  inline ::proto::game::tagGameEndInfo* add_endinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndInfo >&
      endinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndInfo >*
      mutable_endinfo();

  // optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
  inline bool has_guizhouendinfo() const;
  inline void clear_guizhouendinfo();
  static const int kGuiZhouEndInfoFieldNumber = 24;
  inline const ::proto::game::guizhou::tagGuiZhouEndInfo& guizhouendinfo() const;
  inline ::proto::game::guizhou::tagGuiZhouEndInfo* mutable_guizhouendinfo();
  inline ::proto::game::guizhou::tagGuiZhouEndInfo* release_guizhouendinfo();
  inline void set_allocated_guizhouendinfo(::proto::game::guizhou::tagGuiZhouEndInfo* guizhouendinfo);

  // optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
  inline bool has_gdgameendinfo() const;
  inline void clear_gdgameendinfo();
  static const int kGdGameEndInfoFieldNumber = 25;
  inline const ::proto::game::gdmahjonggame::gdmjGameEndInfo& gdgameendinfo() const;
  inline ::proto::game::gdmahjonggame::gdmjGameEndInfo* mutable_gdgameendinfo();
  inline ::proto::game::gdmahjonggame::gdmjGameEndInfo* release_gdgameendinfo();
  inline void set_allocated_gdgameendinfo(::proto::game::gdmahjonggame::gdmjGameEndInfo* gdgameendinfo);

  // optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
  inline bool has_scendinfo() const;
  inline void clear_scendinfo();
  static const int kScEndInfoFieldNumber = 26;
  inline const ::proto::game::scmj::tagScGameEnd& scendinfo() const;
  inline ::proto::game::scmj::tagScGameEnd* mutable_scendinfo();
  inline ::proto::game::scmj::tagScGameEnd* release_scendinfo();
  inline void set_allocated_scendinfo(::proto::game::scmj::tagScGameEnd* scendinfo);

  // optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
  inline bool has_hngameendinfo() const;
  inline void clear_hngameendinfo();
  static const int kHnGameEndInfoFieldNumber = 27;
  inline const ::proto::game::hnmahjonggame::hnmjGameEndInfo& hngameendinfo() const;
  inline ::proto::game::hnmahjonggame::hnmjGameEndInfo* mutable_hngameendinfo();
  inline ::proto::game::hnmahjonggame::hnmjGameEndInfo* release_hngameendinfo();
  inline void set_allocated_hngameendinfo(::proto::game::hnmahjonggame::hnmjGameEndInfo* hngameendinfo);

  // optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
  inline bool has_hunangameendinfo() const;
  inline void clear_hunangameendinfo();
  static const int kHunanGameEndInfoFieldNumber = 28;
  inline const ::proto::game::hunanmj::tagHuNanGameEnd& hunangameendinfo() const;
  inline ::proto::game::hunanmj::tagHuNanGameEnd* mutable_hunangameendinfo();
  inline ::proto::game::hunanmj::tagHuNanGameEnd* release_hunangameendinfo();
  inline void set_allocated_hunangameendinfo(::proto::game::hunanmj::tagHuNanGameEnd* hunangameendinfo);

  // optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
  inline bool has_hubeigameend() const;
  inline void clear_hubeigameend();
  static const int kHubeiGameendFieldNumber = 29;
  inline const ::proto::game::hubeimj::AckhubeiGameEnd& hubeigameend() const;
  inline ::proto::game::hubeimj::AckhubeiGameEnd* mutable_hubeigameend();
  inline ::proto::game::hubeimj::AckhubeiGameEnd* release_hubeigameend();
  inline void set_allocated_hubeigameend(::proto::game::hubeimj::AckhubeiGameEnd* hubeigameend);

  // optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
  inline bool has_jxgameendinfo() const;
  inline void clear_jxgameendinfo();
  static const int kJxGameEndInfoFieldNumber = 30;
  inline const ::proto::game::jxmahjonggame::jxmjGameEndInfo& jxgameendinfo() const;
  inline ::proto::game::jxmahjonggame::jxmjGameEndInfo* mutable_jxgameendinfo();
  inline ::proto::game::jxmahjonggame::jxmjGameEndInfo* release_jxgameendinfo();
  inline void set_allocated_jxgameendinfo(::proto::game::jxmahjonggame::jxmjGameEndInfo* jxgameendinfo);

  // optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
  inline bool has_phgameendinfo() const;
  inline void clear_phgameendinfo();
  static const int kPhGameEndInfoFieldNumber = 31;
  inline const ::proto::game::pinghumj::phmjGameEndInfo& phgameendinfo() const;
  inline ::proto::game::pinghumj::phmjGameEndInfo* mutable_phgameendinfo();
  inline ::proto::game::pinghumj::phmjGameEndInfo* release_phgameendinfo();
  inline void set_allocated_phgameendinfo(::proto::game::pinghumj::phmjGameEndInfo* phgameendinfo);

  // optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
  inline bool has_gameendinfo() const;
  inline void clear_gameendinfo();
  static const int kGameEndInfoFieldNumber = 32;
  inline const ::proto::game::henanmj::tagGameEnd& gameendinfo() const;
  inline ::proto::game::henanmj::tagGameEnd* mutable_gameendinfo();
  inline ::proto::game::henanmj::tagGameEnd* release_gameendinfo();
  inline void set_allocated_gameendinfo(::proto::game::henanmj::tagGameEnd* gameendinfo);

  // optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
  inline bool has_sxgameendinfo() const;
  inline void clear_sxgameendinfo();
  static const int kSxGameEndInfoFieldNumber = 33;
  inline const ::proto::game::sxmahjonggame::sxmjGameEndInfo& sxgameendinfo() const;
  inline ::proto::game::sxmahjonggame::sxmjGameEndInfo* mutable_sxgameendinfo();
  inline ::proto::game::sxmahjonggame::sxmjGameEndInfo* release_sxgameendinfo();
  inline void set_allocated_sxgameendinfo(::proto::game::sxmahjonggame::sxmjGameEndInfo* sxgameendinfo);

  // optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
  inline bool has_jhgameendinfo() const;
  inline void clear_jhgameendinfo();
  static const int kJhGameEndInfoFieldNumber = 34;
  inline const ::proto::game::jhmahjonggame::jhmjGameEndInfo& jhgameendinfo() const;
  inline ::proto::game::jhmahjonggame::jhmjGameEndInfo* mutable_jhgameendinfo();
  inline ::proto::game::jhmahjonggame::jhmjGameEndInfo* release_jhgameendinfo();
  inline void set_allocated_jhgameendinfo(::proto::game::jhmahjonggame::jhmjGameEndInfo* jhgameendinfo);

  // optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
  inline bool has_fuzhougameend() const;
  inline void clear_fuzhougameend();
  static const int kFuzhouGameEndFieldNumber = 35;
  inline const ::proto::game::fuzhoumahjonggame::FZ_GameEnd& fuzhougameend() const;
  inline ::proto::game::fuzhoumahjonggame::FZ_GameEnd* mutable_fuzhougameend();
  inline ::proto::game::fuzhoumahjonggame::FZ_GameEnd* release_fuzhougameend();
  inline void set_allocated_fuzhougameend(::proto::game::fuzhoumahjonggame::FZ_GameEnd* fuzhougameend);

  // optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
  inline bool has_dgkendinfo() const;
  inline void clear_dgkendinfo();
  static const int kDgkEndInfoFieldNumber = 36;
  inline const ::proto::game::dgkmj::tagDgkGameEnd& dgkendinfo() const;
  inline ::proto::game::dgkmj::tagDgkGameEnd* mutable_dgkendinfo();
  inline ::proto::game::dgkmj::tagDgkGameEnd* release_dgkendinfo();
  inline void set_allocated_dgkendinfo(::proto::game::dgkmj::tagDgkGameEnd* dgkendinfo);

  // optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
  inline bool has_nanninggameendinfo() const;
  inline void clear_nanninggameendinfo();
  static const int kNanningGameEndInfoFieldNumber = 37;
  inline const ::proto::game::nanningmj::tagNanNingGameEnd& nanninggameendinfo() const;
  inline ::proto::game::nanningmj::tagNanNingGameEnd* mutable_nanninggameendinfo();
  inline ::proto::game::nanningmj::tagNanNingGameEnd* release_nanninggameendinfo();
  inline void set_allocated_nanninggameendinfo(::proto::game::nanningmj::tagNanNingGameEnd* nanninggameendinfo);

  // optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
  inline bool has_nanpinggameend() const;
  inline void clear_nanpinggameend();
  static const int kNanpingGameEndFieldNumber = 38;
  inline const ::proto::game::nanpingmahjonggame::GameEnd& nanpinggameend() const;
  inline ::proto::game::nanpingmahjonggame::GameEnd* mutable_nanpinggameend();
  inline ::proto::game::nanpingmahjonggame::GameEnd* release_nanpinggameend();
  inline void set_allocated_nanpinggameend(::proto::game::nanpingmahjonggame::GameEnd* nanpinggameend);

  // optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
  inline bool has_laibingameendinfo() const;
  inline void clear_laibingameendinfo();
  static const int kLaibinGameEndInfoFieldNumber = 39;
  inline const ::proto::game::laibinmj::tagLaiBinGameEnd& laibingameendinfo() const;
  inline ::proto::game::laibinmj::tagLaiBinGameEnd* mutable_laibingameendinfo();
  inline ::proto::game::laibinmj::tagLaiBinGameEnd* release_laibingameendinfo();
  inline void set_allocated_laibingameendinfo(::proto::game::laibinmj::tagLaiBinGameEnd* laibingameendinfo);

  // optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
  inline bool has_longyangameend() const;
  inline void clear_longyangameend();
  static const int kLongyangameendFieldNumber = 40;
  inline const ::proto::game::longyanmj::LongYanGameend& longyangameend() const;
  inline ::proto::game::longyanmj::LongYanGameend* mutable_longyangameend();
  inline ::proto::game::longyanmj::LongYanGameend* release_longyangameend();
  inline void set_allocated_longyangameend(::proto::game::longyanmj::LongYanGameend* longyangameend);

  // optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
  inline bool has_ganzhoucggameend() const;
  inline void clear_ganzhoucggameend();
  static const int kGanzhoucgGameendFieldNumber = 41;
  inline const ::proto::game::ganzhoucg::GanZhoucgGameend& ganzhoucggameend() const;
  inline ::proto::game::ganzhoucg::GanZhoucgGameend* mutable_ganzhoucggameend();
  inline ::proto::game::ganzhoucg::GanZhoucgGameend* release_ganzhoucggameend();
  inline void set_allocated_ganzhoucggameend(::proto::game::ganzhoucg::GanZhoucgGameend* ganzhoucggameend);

  // optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
  inline bool has_xiangyanggameend() const;
  inline void clear_xiangyanggameend();
  static const int kXiangyangGameEndFieldNumber = 42;
  inline const ::proto::game::xiangyangmj::tagXYGameEnd& xiangyanggameend() const;
  inline ::proto::game::xiangyangmj::tagXYGameEnd* mutable_xiangyanggameend();
  inline ::proto::game::xiangyangmj::tagXYGameEnd* release_xiangyanggameend();
  inline void set_allocated_xiangyanggameend(::proto::game::xiangyangmj::tagXYGameEnd* xiangyanggameend);

  // optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
  inline bool has_xixiahuashuigameend() const;
  inline void clear_xixiahuashuigameend();
  static const int kXixiahuashuiGameEndFieldNumber = 43;
  inline const ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd& xixiahuashuigameend() const;
  inline ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* mutable_xixiahuashuigameend();
  inline ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* release_xixiahuashuigameend();
  inline void set_allocated_xixiahuashuigameend(::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* xixiahuashuigameend);

  // optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
  inline bool has_zhenjianggameend() const;
  inline void clear_zhenjianggameend();
  static const int kZhenjiangGameEndFieldNumber = 44;
  inline const ::proto::game::zhenjiang::zhenjiangGameEnd& zhenjianggameend() const;
  inline ::proto::game::zhenjiang::zhenjiangGameEnd* mutable_zhenjianggameend();
  inline ::proto::game::zhenjiang::zhenjiangGameEnd* release_zhenjianggameend();
  inline void set_allocated_zhenjianggameend(::proto::game::zhenjiang::zhenjiangGameEnd* zhenjianggameend);

  // optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
  inline bool has_qionglaiendinfo() const;
  inline void clear_qionglaiendinfo();
  static const int kQionglaiEndInfoFieldNumber = 45;
  inline const ::proto::game::qionglaimj::tagQiongLaiGameEnd& qionglaiendinfo() const;
  inline ::proto::game::qionglaimj::tagQiongLaiGameEnd* mutable_qionglaiendinfo();
  inline ::proto::game::qionglaimj::tagQiongLaiGameEnd* release_qionglaiendinfo();
  inline void set_allocated_qionglaiendinfo(::proto::game::qionglaimj::tagQiongLaiGameEnd* qionglaiendinfo);

  // optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
  inline bool has_anqinggameend() const;
  inline void clear_anqinggameend();
  static const int kAnqingGameEndFieldNumber = 46;
  inline const ::proto::game::anqingmj::AnQingGameEnd& anqinggameend() const;
  inline ::proto::game::anqingmj::AnQingGameEnd* mutable_anqinggameend();
  inline ::proto::game::anqingmj::AnQingGameEnd* release_anqinggameend();
  inline void set_allocated_anqinggameend(::proto::game::anqingmj::AnQingGameEnd* anqinggameend);

  // optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
  inline bool has_nanchangganeend() const;
  inline void clear_nanchangganeend();
  static const int kNanchangGaneEndFieldNumber = 47;
  inline const ::proto::game::nanchang::GameEndNanChang& nanchangganeend() const;
  inline ::proto::game::nanchang::GameEndNanChang* mutable_nanchangganeend();
  inline ::proto::game::nanchang::GameEndNanChang* release_nanchangganeend();
  inline void set_allocated_nanchangganeend(::proto::game::nanchang::GameEndNanChang* nanchangganeend);

  // optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
  inline bool has_guilinzzgameendinfo() const;
  inline void clear_guilinzzgameendinfo();
  static const int kGuilinzzGameEndInfoFieldNumber = 48;
  inline const ::proto::game::guilinzzmj::tagGuiLinzzGameEnd& guilinzzgameendinfo() const;
  inline ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* mutable_guilinzzgameendinfo();
  inline ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* release_guilinzzgameendinfo();
  inline void set_allocated_guilinzzgameendinfo(::proto::game::guilinzzmj::tagGuiLinzzGameEnd* guilinzzgameendinfo);

  // optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
  inline bool has_yunxiaomjgameendinfo() const;
  inline void clear_yunxiaomjgameendinfo();
  static const int kYunxiaomjGameEndInfoFieldNumber = 49;
  inline const ::proto::game::yunxiaomj::tagYunXiaomjGameEnd& yunxiaomjgameendinfo() const;
  inline ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* mutable_yunxiaomjgameendinfo();
  inline ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* release_yunxiaomjgameendinfo();
  inline void set_allocated_yunxiaomjgameendinfo(::proto::game::yunxiaomj::tagYunXiaomjGameEnd* yunxiaomjgameendinfo);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameEnd)
 private:
  inline void set_has_huscore();
  inline void clear_has_huscore();
  inline void set_has_gangscore();
  inline void clear_has_gangscore();
  inline void set_has_endstate();
  inline void clear_has_endstate();
  inline void set_has_horseinfo();
  inline void clear_has_horseinfo();
  inline void set_has_hufantype();
  inline void clear_has_hufantype();
  inline void set_has_zhigangcount();
  inline void clear_has_zhigangcount();
  inline void set_has_zhigangscore();
  inline void clear_has_zhigangscore();
  inline void set_has_wangangcount();
  inline void clear_has_wangangcount();
  inline void set_has_wangangscore();
  inline void clear_has_wangangscore();
  inline void set_has_angangcount();
  inline void clear_has_angangcount();
  inline void set_has_angangscore();
  inline void clear_has_angangscore();
  inline void set_has_diangangcount();
  inline void clear_has_diangangcount();
  inline void set_has_diangangscore();
  inline void clear_has_diangangscore();
  inline void set_has_guizhouendinfo();
  inline void clear_has_guizhouendinfo();
  inline void set_has_gdgameendinfo();
  inline void clear_has_gdgameendinfo();
  inline void set_has_scendinfo();
  inline void clear_has_scendinfo();
  inline void set_has_hngameendinfo();
  inline void clear_has_hngameendinfo();
  inline void set_has_hunangameendinfo();
  inline void clear_has_hunangameendinfo();
  inline void set_has_hubeigameend();
  inline void clear_has_hubeigameend();
  inline void set_has_jxgameendinfo();
  inline void clear_has_jxgameendinfo();
  inline void set_has_phgameendinfo();
  inline void clear_has_phgameendinfo();
  inline void set_has_gameendinfo();
  inline void clear_has_gameendinfo();
  inline void set_has_sxgameendinfo();
  inline void clear_has_sxgameendinfo();
  inline void set_has_jhgameendinfo();
  inline void clear_has_jhgameendinfo();
  inline void set_has_fuzhougameend();
  inline void clear_has_fuzhougameend();
  inline void set_has_dgkendinfo();
  inline void clear_has_dgkendinfo();
  inline void set_has_nanninggameendinfo();
  inline void clear_has_nanninggameendinfo();
  inline void set_has_nanpinggameend();
  inline void clear_has_nanpinggameend();
  inline void set_has_laibingameendinfo();
  inline void clear_has_laibingameendinfo();
  inline void set_has_longyangameend();
  inline void clear_has_longyangameend();
  inline void set_has_ganzhoucggameend();
  inline void clear_has_ganzhoucggameend();
  inline void set_has_xiangyanggameend();
  inline void clear_has_xiangyanggameend();
  inline void set_has_xixiahuashuigameend();
  inline void clear_has_xixiahuashuigameend();
  inline void set_has_zhenjianggameend();
  inline void clear_has_zhenjianggameend();
  inline void set_has_qionglaiendinfo();
  inline void clear_has_qionglaiendinfo();
  inline void set_has_anqinggameend();
  inline void clear_has_anqinggameend();
  inline void set_has_nanchangganeend();
  inline void clear_has_nanchangganeend();
  inline void set_has_guilinzzgameendinfo();
  inline void clear_has_guilinzzgameendinfo();
  inline void set_has_yunxiaomjgameendinfo();
  inline void clear_has_yunxiaomjgameendinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;
  ::google::protobuf::int32 huscore_;
  ::google::protobuf::int32 gangscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ishuazhu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > huazhuscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > isdajiao_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dajiaoscore_;
  ::google::protobuf::int32 endstate_;
  ::google::protobuf::int32 hufantype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > returngangscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > horsescore_;
  ::proto::game::Horse* horseinfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::UserHorseCard > userhorse_;
  ::google::protobuf::int32 zhigangcount_;
  ::google::protobuf::int32 zhigangscore_;
  ::google::protobuf::int32 wangangcount_;
  ::google::protobuf::int32 wangangscore_;
  ::google::protobuf::int32 angangcount_;
  ::google::protobuf::int32 angangscore_;
  ::google::protobuf::int32 diangangcount_;
  ::google::protobuf::int32 diangangscore_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndInfo > endinfo_;
  ::proto::game::guizhou::tagGuiZhouEndInfo* guizhouendinfo_;
  ::proto::game::gdmahjonggame::gdmjGameEndInfo* gdgameendinfo_;
  ::proto::game::scmj::tagScGameEnd* scendinfo_;
  ::proto::game::hnmahjonggame::hnmjGameEndInfo* hngameendinfo_;
  ::proto::game::hunanmj::tagHuNanGameEnd* hunangameendinfo_;
  ::proto::game::hubeimj::AckhubeiGameEnd* hubeigameend_;
  ::proto::game::jxmahjonggame::jxmjGameEndInfo* jxgameendinfo_;
  ::proto::game::pinghumj::phmjGameEndInfo* phgameendinfo_;
  ::proto::game::henanmj::tagGameEnd* gameendinfo_;
  ::proto::game::sxmahjonggame::sxmjGameEndInfo* sxgameendinfo_;
  ::proto::game::jhmahjonggame::jhmjGameEndInfo* jhgameendinfo_;
  ::proto::game::fuzhoumahjonggame::FZ_GameEnd* fuzhougameend_;
  ::proto::game::dgkmj::tagDgkGameEnd* dgkendinfo_;
  ::proto::game::nanningmj::tagNanNingGameEnd* nanninggameendinfo_;
  ::proto::game::nanpingmahjonggame::GameEnd* nanpinggameend_;
  ::proto::game::laibinmj::tagLaiBinGameEnd* laibingameendinfo_;
  ::proto::game::longyanmj::LongYanGameend* longyangameend_;
  ::proto::game::ganzhoucg::GanZhoucgGameend* ganzhoucggameend_;
  ::proto::game::xiangyangmj::tagXYGameEnd* xiangyanggameend_;
  ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* xixiahuashuigameend_;
  ::proto::game::zhenjiang::zhenjiangGameEnd* zhenjianggameend_;
  ::proto::game::qionglaimj::tagQiongLaiGameEnd* qionglaiendinfo_;
  ::proto::game::anqingmj::AnQingGameEnd* anqinggameend_;
  ::proto::game::nanchang::GameEndNanChang* nanchangganeend_;
  ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* guilinzzgameendinfo_;
  ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* yunxiaomjgameendinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(49 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class AckIsAuto : public ::google::protobuf::Message {
 public:
  AckIsAuto();
  virtual ~AckIsAuto();

  AckIsAuto(const AckIsAuto& from);

  inline AckIsAuto& operator=(const AckIsAuto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckIsAuto& default_instance();

  void Swap(AckIsAuto* other);

  // implements Message ----------------------------------------------

  AckIsAuto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckIsAuto& from);
  void MergeFrom(const AckIsAuto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 isAuto = 2;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsAutoFieldNumber = 2;
  inline ::google::protobuf::int32 isauto() const;
  inline void set_isauto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckIsAuto)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 isauto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckIsAuto* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateUserInfo : public ::google::protobuf::Message {
 public:
  AckUpdateUserInfo();
  virtual ~AckUpdateUserInfo();

  AckUpdateUserInfo(const AckUpdateUserInfo& from);

  inline AckUpdateUserInfo& operator=(const AckUpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateUserInfo& default_instance();

  void Swap(AckUpdateUserInfo* other);

  // implements Message ----------------------------------------------

  AckUpdateUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateUserInfo& from);
  void MergeFrom(const AckUpdateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 rmb = 4;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 4;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateUserInfo)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_rmb();
  inline void clear_has_rmb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 rmb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckPoolMoney : public ::google::protobuf::Message {
 public:
  AckPoolMoney();
  virtual ~AckPoolMoney();

  AckPoolMoney(const AckPoolMoney& from);

  inline AckPoolMoney& operator=(const AckPoolMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPoolMoney& default_instance();

  void Swap(AckPoolMoney* other);

  // implements Message ----------------------------------------------

  AckPoolMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPoolMoney& from);
  void MergeFrom(const AckPoolMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckPoolMoney)
 private:
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckPoolMoney* default_instance_;
};
// -------------------------------------------------------------------

class AckWinPoolMoney : public ::google::protobuf::Message {
 public:
  AckWinPoolMoney();
  virtual ~AckWinPoolMoney();

  AckWinPoolMoney(const AckWinPoolMoney& from);

  inline AckWinPoolMoney& operator=(const AckWinPoolMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckWinPoolMoney& default_instance();

  void Swap(AckWinPoolMoney* other);

  // implements Message ----------------------------------------------

  AckWinPoolMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckWinPoolMoney& from);
  void MergeFrom(const AckWinPoolMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 winmoney = 1;
  inline int winmoney_size() const;
  inline void clear_winmoney();
  static const int kWinmoneyFieldNumber = 1;
  inline ::google::protobuf::int32 winmoney(int index) const;
  inline void set_winmoney(int index, ::google::protobuf::int32 value);
  inline void add_winmoney(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winmoney() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winmoney();

  // @@protoc_insertion_point(class_scope:proto.game.AckWinPoolMoney)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckWinPoolMoney* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStartFail : public ::google::protobuf::Message {
 public:
  AckGameStartFail();
  virtual ~AckGameStartFail();

  AckGameStartFail(const AckGameStartFail& from);

  inline AckGameStartFail& operator=(const AckGameStartFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStartFail& default_instance();

  void Swap(AckGameStartFail* other);

  // implements Message ----------------------------------------------

  AckGameStartFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStartFail& from);
  void MergeFrom(const AckGameStartFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional string roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const char* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional int32 can_start = 3;
  inline bool has_can_start() const;
  inline void clear_can_start();
  static const int kCanStartFieldNumber = 3;
  inline ::google::protobuf::int32 can_start() const;
  inline void set_can_start(::google::protobuf::int32 value);

  // optional int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStartFail)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_can_start();
  inline void clear_has_can_start();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roomid_;
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 can_start_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 ts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStartFail* default_instance_;
};
// -------------------------------------------------------------------

class VideoGameEnd : public ::google::protobuf::Message {
 public:
  VideoGameEnd();
  virtual ~VideoGameEnd();

  VideoGameEnd(const VideoGameEnd& from);

  inline VideoGameEnd& operator=(const VideoGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoGameEnd& default_instance();

  void Swap(VideoGameEnd* other);

  // implements Message ----------------------------------------------

  VideoGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoGameEnd& from);
  void MergeFrom(const VideoGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // repeated int32 HuScore = 2;
  inline int huscore_size() const;
  inline void clear_huscore();
  static const int kHuScoreFieldNumber = 2;
  inline ::google::protobuf::int32 huscore(int index) const;
  inline void set_huscore(int index, ::google::protobuf::int32 value);
  inline void add_huscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      huscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_huscore();

  // repeated int32 GangScore = 3;
  inline int gangscore_size() const;
  inline void clear_gangscore();
  static const int kGangScoreFieldNumber = 3;
  inline ::google::protobuf::int32 gangscore(int index) const;
  inline void set_gangscore(int index, ::google::protobuf::int32 value);
  inline void add_gangscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gangscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gangscore();

  // repeated int32 Score = 4;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // optional int32 EndState = 5;
  inline bool has_endstate() const;
  inline void clear_endstate();
  static const int kEndStateFieldNumber = 5;
  inline ::google::protobuf::int32 endstate() const;
  inline void set_endstate(::google::protobuf::int32 value);

  // repeated int32 isHuazhu = 6;
  inline int ishuazhu_size() const;
  inline void clear_ishuazhu();
  static const int kIsHuazhuFieldNumber = 6;
  inline ::google::protobuf::int32 ishuazhu(int index) const;
  inline void set_ishuazhu(int index, ::google::protobuf::int32 value);
  inline void add_ishuazhu(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ishuazhu() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ishuazhu();

  // repeated int32 HuazhuScore = 7;
  inline int huazhuscore_size() const;
  inline void clear_huazhuscore();
  static const int kHuazhuScoreFieldNumber = 7;
  inline ::google::protobuf::int32 huazhuscore(int index) const;
  inline void set_huazhuscore(int index, ::google::protobuf::int32 value);
  inline void add_huazhuscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      huazhuscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_huazhuscore();

  // repeated int32 isDajiao = 8;
  inline int isdajiao_size() const;
  inline void clear_isdajiao();
  static const int kIsDajiaoFieldNumber = 8;
  inline ::google::protobuf::int32 isdajiao(int index) const;
  inline void set_isdajiao(int index, ::google::protobuf::int32 value);
  inline void add_isdajiao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      isdajiao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_isdajiao();

  // repeated int32 DajiaoScore = 9;
  inline int dajiaoscore_size() const;
  inline void clear_dajiaoscore();
  static const int kDajiaoScoreFieldNumber = 9;
  inline ::google::protobuf::int32 dajiaoscore(int index) const;
  inline void set_dajiaoscore(int index, ::google::protobuf::int32 value);
  inline void add_dajiaoscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dajiaoscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dajiaoscore();

  // repeated int32 ReturnGangScore = 10;
  inline int returngangscore_size() const;
  inline void clear_returngangscore();
  static const int kReturnGangScoreFieldNumber = 10;
  inline ::google::protobuf::int32 returngangscore(int index) const;
  inline void set_returngangscore(int index, ::google::protobuf::int32 value);
  inline void add_returngangscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      returngangscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_returngangscore();

  // @@protoc_insertion_point(class_scope:proto.game.VideoGameEnd)
 private:
  inline void set_has_endstate();
  inline void clear_has_endstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > huscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gangscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ishuazhu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > huazhuscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > isdajiao_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dajiaoscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > returngangscore_;
  ::google::protobuf::int32 endstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static VideoGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateTimer : public ::google::protobuf::Message {
 public:
  AckUpdateTimer();
  virtual ~AckUpdateTimer();

  AckUpdateTimer(const AckUpdateTimer& from);

  inline AckUpdateTimer& operator=(const AckUpdateTimer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateTimer& default_instance();

  void Swap(AckUpdateTimer* other);

  // implements Message ----------------------------------------------

  AckUpdateTimer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateTimer& from);
  void MergeFrom(const AckUpdateTimer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 lefttime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateTimer)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateTimer* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandChooseFaild : public ::google::protobuf::Message {
 public:
  AckDisbandChooseFaild();
  virtual ~AckDisbandChooseFaild();

  AckDisbandChooseFaild(const AckDisbandChooseFaild& from);

  inline AckDisbandChooseFaild& operator=(const AckDisbandChooseFaild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandChooseFaild& default_instance();

  void Swap(AckDisbandChooseFaild* other);

  // implements Message ----------------------------------------------

  AckDisbandChooseFaild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandChooseFaild& from);
  void MergeFrom(const AckDisbandChooseFaild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandChooseFaild)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandChooseFaild* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandApply : public ::google::protobuf::Message {
 public:
  AckDisbandApply();
  virtual ~AckDisbandApply();

  AckDisbandApply(const AckDisbandApply& from);

  inline AckDisbandApply& operator=(const AckDisbandApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandApply& default_instance();

  void Swap(AckDisbandApply* other);

  // implements Message ----------------------------------------------

  AckDisbandApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandApply& from);
  void MergeFrom(const AckDisbandApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ApplyChairid = 1;
  inline bool has_applychairid() const;
  inline void clear_applychairid();
  static const int kApplyChairidFieldNumber = 1;
  inline ::google::protobuf::int32 applychairid() const;
  inline void set_applychairid(::google::protobuf::int32 value);

  // optional int32 Waittime = 2;
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 2;
  inline ::google::protobuf::int32 waittime() const;
  inline void set_waittime(::google::protobuf::int32 value);

  // repeated int32 onlinechairid = 3;
  inline int onlinechairid_size() const;
  inline void clear_onlinechairid();
  static const int kOnlinechairidFieldNumber = 3;
  inline ::google::protobuf::int32 onlinechairid(int index) const;
  inline void set_onlinechairid(int index, ::google::protobuf::int32 value);
  inline void add_onlinechairid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onlinechairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onlinechairid();

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandApply)
 private:
  inline void set_has_applychairid();
  inline void clear_has_applychairid();
  inline void set_has_waittime();
  inline void clear_has_waittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 applychairid_;
  ::google::protobuf::int32 waittime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onlinechairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandApply* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandChooseBc : public ::google::protobuf::Message {
 public:
  AckDisbandChooseBc();
  virtual ~AckDisbandChooseBc();

  AckDisbandChooseBc(const AckDisbandChooseBc& from);

  inline AckDisbandChooseBc& operator=(const AckDisbandChooseBc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandChooseBc& default_instance();

  void Swap(AckDisbandChooseBc* other);

  // implements Message ----------------------------------------------

  AckDisbandChooseBc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandChooseBc& from);
  void MergeFrom(const AckDisbandChooseBc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 Choosestate = 2;
  inline bool has_choosestate() const;
  inline void clear_choosestate();
  static const int kChoosestateFieldNumber = 2;
  inline ::google::protobuf::int32 choosestate() const;
  inline void set_choosestate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandChooseBc)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_choosestate();
  inline void clear_has_choosestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 choosestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandChooseBc* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandResult : public ::google::protobuf::Message {
 public:
  AckDisbandResult();
  virtual ~AckDisbandResult();

  AckDisbandResult(const AckDisbandResult& from);

  inline AckDisbandResult& operator=(const AckDisbandResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandResult& default_instance();

  void Swap(AckDisbandResult* other);

  // implements Message ----------------------------------------------

  AckDisbandResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandResult& from);
  void MergeFrom(const AckDisbandResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandResult* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOnlineState : public ::google::protobuf::Message {
 public:
  AckUserOnlineState();
  virtual ~AckUserOnlineState();

  AckUserOnlineState(const AckUserOnlineState& from);

  inline AckUserOnlineState& operator=(const AckUserOnlineState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOnlineState& default_instance();

  void Swap(AckUserOnlineState* other);

  // implements Message ----------------------------------------------

  AckUserOnlineState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOnlineState& from);
  void MergeFrom(const AckUserOnlineState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOnlineState)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOnlineState* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOvertimeState : public ::google::protobuf::Message {
 public:
  AckUserOvertimeState();
  virtual ~AckUserOvertimeState();

  AckUserOvertimeState(const AckUserOvertimeState& from);

  inline AckUserOvertimeState& operator=(const AckUserOvertimeState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOvertimeState& default_instance();

  void Swap(AckUserOvertimeState* other);

  // implements Message ----------------------------------------------

  AckUserOvertimeState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOvertimeState& from);
  void MergeFrom(const AckUserOvertimeState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOvertimeState)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOvertimeState* default_instance_;
};
// -------------------------------------------------------------------

class AckMessage : public ::google::protobuf::Message {
 public:
  AckMessage();
  virtual ~AckMessage();

  AckMessage(const AckMessage& from);

  inline AckMessage& operator=(const AckMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMessage& default_instance();

  void Swap(AckMessage* other);

  // implements Message ----------------------------------------------

  AckMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMessage& from);
  void MergeFrom(const AckMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:proto.game.AckMessage)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckMessage* default_instance_;
};
// -------------------------------------------------------------------

class OperateWaite : public ::google::protobuf::Message {
 public:
  OperateWaite();
  virtual ~OperateWaite();

  OperateWaite(const OperateWaite& from);

  inline OperateWaite& operator=(const OperateWaite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateWaite& default_instance();

  void Swap(OperateWaite* other);

  // implements Message ----------------------------------------------

  OperateWaite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateWaite& from);
  void MergeFrom(const OperateWaite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.OperateWaite)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static OperateWaite* default_instance_;
};
// -------------------------------------------------------------------

class ReqCheckHandCards : public ::google::protobuf::Message {
 public:
  ReqCheckHandCards();
  virtual ~ReqCheckHandCards();

  ReqCheckHandCards(const ReqCheckHandCards& from);

  inline ReqCheckHandCards& operator=(const ReqCheckHandCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCheckHandCards& default_instance();

  void Swap(ReqCheckHandCards* other);

  // implements Message ----------------------------------------------

  ReqCheckHandCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCheckHandCards& from);
  void MergeFrom(const ReqCheckHandCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // repeated int32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:proto.game.ReqCheckHandCards)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqCheckHandCards* default_instance_;
};
// ===================================================================


// ===================================================================

// FixedCard

// required int32 CardData = 1;
inline bool FixedCard::has_carddata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedCard::set_has_carddata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedCard::clear_has_carddata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedCard::clear_carddata() {
  carddata_ = 0;
  clear_has_carddata();
}
inline ::google::protobuf::int32 FixedCard::carddata() const {
  return carddata_;
}
inline void FixedCard::set_carddata(::google::protobuf::int32 value) {
  set_has_carddata();
  carddata_ = value;
}

// optional int32 state = 2;
inline bool FixedCard::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedCard::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedCard::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedCard::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FixedCard::state() const {
  return state_;
}
inline void FixedCard::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 chairID = 3;
inline bool FixedCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 FixedCard::chairid() const {
  return chairid_;
}
inline void FixedCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// -------------------------------------------------------------------

// HandCards

// required int32 ChangeableCardsLen = 1;
inline bool HandCards::has_changeablecardslen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandCards::set_has_changeablecardslen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandCards::clear_has_changeablecardslen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandCards::clear_changeablecardslen() {
  changeablecardslen_ = 0;
  clear_has_changeablecardslen();
}
inline ::google::protobuf::int32 HandCards::changeablecardslen() const {
  return changeablecardslen_;
}
inline void HandCards::set_changeablecardslen(::google::protobuf::int32 value) {
  set_has_changeablecardslen();
  changeablecardslen_ = value;
}

// repeated int32 ChangeableCards = 2;
inline int HandCards::changeablecards_size() const {
  return changeablecards_.size();
}
inline void HandCards::clear_changeablecards() {
  changeablecards_.Clear();
}
inline ::google::protobuf::int32 HandCards::changeablecards(int index) const {
  return changeablecards_.Get(index);
}
inline void HandCards::set_changeablecards(int index, ::google::protobuf::int32 value) {
  changeablecards_.Set(index, value);
}
inline void HandCards::add_changeablecards(::google::protobuf::int32 value) {
  changeablecards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HandCards::changeablecards() const {
  return changeablecards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HandCards::mutable_changeablecards() {
  return &changeablecards_;
}

// optional int32 FixedCardsLen = 3;
inline bool HandCards::has_fixedcardslen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandCards::set_has_fixedcardslen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandCards::clear_has_fixedcardslen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandCards::clear_fixedcardslen() {
  fixedcardslen_ = 0;
  clear_has_fixedcardslen();
}
inline ::google::protobuf::int32 HandCards::fixedcardslen() const {
  return fixedcardslen_;
}
inline void HandCards::set_fixedcardslen(::google::protobuf::int32 value) {
  set_has_fixedcardslen();
  fixedcardslen_ = value;
}

// repeated .proto.game.FixedCard stFixedCards = 4;
inline int HandCards::stfixedcards_size() const {
  return stfixedcards_.size();
}
inline void HandCards::clear_stfixedcards() {
  stfixedcards_.Clear();
}
inline const ::proto::game::FixedCard& HandCards::stfixedcards(int index) const {
  return stfixedcards_.Get(index);
}
inline ::proto::game::FixedCard* HandCards::mutable_stfixedcards(int index) {
  return stfixedcards_.Mutable(index);
}
inline ::proto::game::FixedCard* HandCards::add_stfixedcards() {
  return stfixedcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
HandCards::stfixedcards() const {
  return stfixedcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
HandCards::mutable_stfixedcards() {
  return &stfixedcards_;
}

// -------------------------------------------------------------------

// tagPlayers

// required int32 uid = 1;
inline bool tagPlayers::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPlayers::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPlayers::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPlayers::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 tagPlayers::uid() const {
  return uid_;
}
inline void tagPlayers::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 seatid = 2;
inline bool tagPlayers::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagPlayers::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagPlayers::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagPlayers::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 tagPlayers::seatid() const {
  return seatid_;
}
inline void tagPlayers::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 ready = 3;
inline bool tagPlayers::has_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagPlayers::set_has_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagPlayers::clear_has_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagPlayers::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
inline ::google::protobuf::int32 tagPlayers::ready() const {
  return ready_;
}
inline void tagPlayers::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
}

// optional int32 money = 4;
inline bool tagPlayers::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagPlayers::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagPlayers::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagPlayers::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 tagPlayers::money() const {
  return money_;
}
inline void tagPlayers::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional string name = 5;
inline bool tagPlayers::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagPlayers::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagPlayers::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagPlayers::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tagPlayers::name() const {
  return *name_;
}
inline void tagPlayers::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tagPlayers::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tagPlayers::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tagPlayers::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 6;
inline bool tagPlayers::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagPlayers::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagPlayers::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagPlayers::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 tagPlayers::sex() const {
  return sex_;
}
inline void tagPlayers::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string avatar = 7;
inline bool tagPlayers::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagPlayers::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagPlayers::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagPlayers::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& tagPlayers::avatar() const {
  return *avatar_;
}
inline void tagPlayers::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void tagPlayers::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void tagPlayers::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* tagPlayers::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAction

// required int32 action = 1;
inline bool ReqAction::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAction::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ReqAction::action() const {
  return action_;
}
inline void ReqAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// ReqChangeCard

// required int32 ischange = 1;
inline bool ReqChangeCard::has_ischange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangeCard::set_has_ischange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChangeCard::clear_has_ischange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChangeCard::clear_ischange() {
  ischange_ = 0;
  clear_has_ischange();
}
inline ::google::protobuf::int32 ReqChangeCard::ischange() const {
  return ischange_;
}
inline void ReqChangeCard::set_ischange(::google::protobuf::int32 value) {
  set_has_ischange();
  ischange_ = value;
}

// repeated int32 Card = 2;
inline int ReqChangeCard::card_size() const {
  return card_.size();
}
inline void ReqChangeCard::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 ReqChangeCard::card(int index) const {
  return card_.Get(index);
}
inline void ReqChangeCard::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void ReqChangeCard::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqChangeCard::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqChangeCard::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// ReqChooseLackType

// required int32 Type = 1;
inline bool ReqChooseLackType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChooseLackType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChooseLackType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChooseLackType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqChooseLackType::type() const {
  return type_;
}
inline void ReqChooseLackType::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ReqOutCard

// required int32 Card = 1;
inline bool ReqOutCard::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOutCard::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOutCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOutCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 ReqOutCard::card() const {
  return card_;
}
inline void ReqOutCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// optional int32 ShowCard = 2;
inline bool ReqOutCard::has_showcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqOutCard::set_has_showcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqOutCard::clear_has_showcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqOutCard::clear_showcard() {
  showcard_ = 0;
  clear_has_showcard();
}
inline ::google::protobuf::int32 ReqOutCard::showcard() const {
  return showcard_;
}
inline void ReqOutCard::set_showcard(::google::protobuf::int32 value) {
  set_has_showcard();
  showcard_ = value;
}

// -------------------------------------------------------------------

// ReqOperateResult

// required int32 Type = 1;
inline bool ReqOperateResult::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOperateResult::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOperateResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOperateResult::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqOperateResult::type() const {
  return type_;
}
inline void ReqOperateResult::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 Card = 2;
inline bool ReqOperateResult::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqOperateResult::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqOperateResult::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqOperateResult::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 ReqOperateResult::card() const {
  return card_;
}
inline void ReqOperateResult::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// -------------------------------------------------------------------

// ReqIsAuto

// required int32 isAuto = 1;
inline bool ReqIsAuto::has_isauto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqIsAuto::set_has_isauto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqIsAuto::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqIsAuto::clear_isauto() {
  isauto_ = 0;
  clear_has_isauto();
}
inline ::google::protobuf::int32 ReqIsAuto::isauto() const {
  return isauto_;
}
inline void ReqIsAuto::set_isauto(::google::protobuf::int32 value) {
  set_has_isauto();
  isauto_ = value;
}

// -------------------------------------------------------------------

// ReqUpdateUserInfo

// required int32 uid = 1;
inline bool ReqUpdateUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUpdateUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUpdateUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUpdateUserInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqUpdateUserInfo::uid() const {
  return uid_;
}
inline void ReqUpdateUserInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 vid = 2;
inline bool ReqUpdateUserInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUpdateUserInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUpdateUserInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUpdateUserInfo::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 ReqUpdateUserInfo::vid() const {
  return vid_;
}
inline void ReqUpdateUserInfo::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
}

// -------------------------------------------------------------------

// ReqRoomInfo

// required int32 uid = 1;
inline bool ReqRoomInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRoomInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRoomInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRoomInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqRoomInfo::uid() const {
  return uid_;
}
inline void ReqRoomInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 vid = 2;
inline bool ReqRoomInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRoomInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRoomInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRoomInfo::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 ReqRoomInfo::vid() const {
  return vid_;
}
inline void ReqRoomInfo::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
}

// optional string skey = 3;
inline bool ReqRoomInfo::has_skey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRoomInfo::set_has_skey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRoomInfo::clear_has_skey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRoomInfo::clear_skey() {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    skey_->clear();
  }
  clear_has_skey();
}
inline const ::std::string& ReqRoomInfo::skey() const {
  return *skey_;
}
inline void ReqRoomInfo::set_skey(const ::std::string& value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
}
inline void ReqRoomInfo::set_skey(const char* value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
}
inline void ReqRoomInfo::set_skey(const char* value, size_t size) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqRoomInfo::mutable_skey() {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  return skey_;
}
inline ::std::string* ReqRoomInfo::release_skey() {
  clear_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skey_;
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqRoomInfo::set_allocated_skey(::std::string* skey) {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    delete skey_;
  }
  if (skey) {
    set_has_skey();
    skey_ = skey;
  } else {
    clear_has_skey();
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqChooseDisband

// required int32 Choosestate = 1;
inline bool ReqChooseDisband::has_choosestate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChooseDisband::set_has_choosestate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChooseDisband::clear_has_choosestate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChooseDisband::clear_choosestate() {
  choosestate_ = 0;
  clear_has_choosestate();
}
inline ::google::protobuf::int32 ReqChooseDisband::choosestate() const {
  return choosestate_;
}
inline void ReqChooseDisband::set_choosestate(::google::protobuf::int32 value) {
  set_has_choosestate();
  choosestate_ = value;
}

// -------------------------------------------------------------------

// tagHu

// optional int32 HuCard = 1;
inline bool tagHu::has_hucard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHu::set_has_hucard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHu::clear_has_hucard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHu::clear_hucard() {
  hucard_ = 0;
  clear_has_hucard();
}
inline ::google::protobuf::int32 tagHu::hucard() const {
  return hucard_;
}
inline void tagHu::set_hucard(::google::protobuf::int32 value) {
  set_has_hucard();
  hucard_ = value;
}

// optional int32 PasHuChiarid = 2;
inline bool tagHu::has_pashuchiarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHu::set_has_pashuchiarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHu::clear_has_pashuchiarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHu::clear_pashuchiarid() {
  pashuchiarid_ = 0;
  clear_has_pashuchiarid();
}
inline ::google::protobuf::int32 tagHu::pashuchiarid() const {
  return pashuchiarid_;
}
inline void tagHu::set_pashuchiarid(::google::protobuf::int32 value) {
  set_has_pashuchiarid();
  pashuchiarid_ = value;
}

// -------------------------------------------------------------------

// tagUserHuInfo

// repeated .proto.game.tagHu hu = 1;
inline int tagUserHuInfo::hu_size() const {
  return hu_.size();
}
inline void tagUserHuInfo::clear_hu() {
  hu_.Clear();
}
inline const ::proto::game::tagHu& tagUserHuInfo::hu(int index) const {
  return hu_.Get(index);
}
inline ::proto::game::tagHu* tagUserHuInfo::mutable_hu(int index) {
  return hu_.Mutable(index);
}
inline ::proto::game::tagHu* tagUserHuInfo::add_hu() {
  return hu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >&
tagUserHuInfo::hu() const {
  return hu_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >*
tagUserHuInfo::mutable_hu() {
  return &hu_;
}

// -------------------------------------------------------------------

// tagGangInfo

// required int32 Card = 1;
inline bool tagGangInfo::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagGangInfo::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagGangInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagGangInfo::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 tagGangInfo::card() const {
  return card_;
}
inline void tagGangInfo::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// optional int32 state = 2;
inline bool tagGangInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagGangInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagGangInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagGangInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 tagGangInfo::state() const {
  return state_;
}
inline void tagGangInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// tagGroupCard

// repeated .proto.game.FixedCard FixedCard = 1;
inline int tagGroupCard::fixedcard_size() const {
  return fixedcard_.size();
}
inline void tagGroupCard::clear_fixedcard() {
  fixedcard_.Clear();
}
inline const ::proto::game::FixedCard& tagGroupCard::fixedcard(int index) const {
  return fixedcard_.Get(index);
}
inline ::proto::game::FixedCard* tagGroupCard::mutable_fixedcard(int index) {
  return fixedcard_.Mutable(index);
}
inline ::proto::game::FixedCard* tagGroupCard::add_fixedcard() {
  return fixedcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
tagGroupCard::fixedcard() const {
  return fixedcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
tagGroupCard::mutable_fixedcard() {
  return &fixedcard_;
}

// -------------------------------------------------------------------

// tagReadyInfo

// repeated int32 Ready = 1;
inline int tagReadyInfo::ready_size() const {
  return ready_.size();
}
inline void tagReadyInfo::clear_ready() {
  ready_.Clear();
}
inline ::google::protobuf::int32 tagReadyInfo::ready(int index) const {
  return ready_.Get(index);
}
inline void tagReadyInfo::set_ready(int index, ::google::protobuf::int32 value) {
  ready_.Set(index, value);
}
inline void tagReadyInfo::add_ready(::google::protobuf::int32 value) {
  ready_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagReadyInfo::ready() const {
  return ready_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagReadyInfo::mutable_ready() {
  return &ready_;
}

// repeated int32 RemainReadyTime = 2;
inline int tagReadyInfo::remainreadytime_size() const {
  return remainreadytime_.size();
}
inline void tagReadyInfo::clear_remainreadytime() {
  remainreadytime_.Clear();
}
inline ::google::protobuf::int32 tagReadyInfo::remainreadytime(int index) const {
  return remainreadytime_.Get(index);
}
inline void tagReadyInfo::set_remainreadytime(int index, ::google::protobuf::int32 value) {
  remainreadytime_.Set(index, value);
}
inline void tagReadyInfo::add_remainreadytime(::google::protobuf::int32 value) {
  remainreadytime_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagReadyInfo::remainreadytime() const {
  return remainreadytime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagReadyInfo::mutable_remainreadytime() {
  return &remainreadytime_;
}

// optional int32 ReadyTime = 3;
inline bool tagReadyInfo::has_readytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagReadyInfo::set_has_readytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagReadyInfo::clear_has_readytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagReadyInfo::clear_readytime() {
  readytime_ = 0;
  clear_has_readytime();
}
inline ::google::protobuf::int32 tagReadyInfo::readytime() const {
  return readytime_;
}
inline void tagReadyInfo::set_readytime(::google::protobuf::int32 value) {
  set_has_readytime();
  readytime_ = value;
}

// -------------------------------------------------------------------

// AckGameScene

// optional int32 changetime = 1;
inline bool AckGameScene::has_changetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameScene::set_has_changetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameScene::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameScene::clear_changetime() {
  changetime_ = 0;
  clear_has_changetime();
}
inline ::google::protobuf::int32 AckGameScene::changetime() const {
  return changetime_;
}
inline void AckGameScene::set_changetime(::google::protobuf::int32 value) {
  set_has_changetime();
  changetime_ = value;
}

// optional int32 lacktypetime = 2;
inline bool AckGameScene::has_lacktypetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameScene::set_has_lacktypetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameScene::clear_has_lacktypetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameScene::clear_lacktypetime() {
  lacktypetime_ = 0;
  clear_has_lacktypetime();
}
inline ::google::protobuf::int32 AckGameScene::lacktypetime() const {
  return lacktypetime_;
}
inline void AckGameScene::set_lacktypetime(::google::protobuf::int32 value) {
  set_has_lacktypetime();
  lacktypetime_ = value;
}

// optional int32 outcardtime = 3;
inline bool AckGameScene::has_outcardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameScene::set_has_outcardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameScene::clear_has_outcardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameScene::clear_outcardtime() {
  outcardtime_ = 0;
  clear_has_outcardtime();
}
inline ::google::protobuf::int32 AckGameScene::outcardtime() const {
  return outcardtime_;
}
inline void AckGameScene::set_outcardtime(::google::protobuf::int32 value) {
  set_has_outcardtime();
  outcardtime_ = value;
}

// optional int32 operatetime = 4;
inline bool AckGameScene::has_operatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameScene::set_has_operatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameScene::clear_has_operatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameScene::clear_operatetime() {
  operatetime_ = 0;
  clear_has_operatetime();
}
inline ::google::protobuf::int32 AckGameScene::operatetime() const {
  return operatetime_;
}
inline void AckGameScene::set_operatetime(::google::protobuf::int32 value) {
  set_has_operatetime();
  operatetime_ = value;
}

// optional int32 basescore = 5;
inline bool AckGameScene::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameScene::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameScene::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameScene::clear_basescore() {
  basescore_ = 0;
  clear_has_basescore();
}
inline ::google::protobuf::int32 AckGameScene::basescore() const {
  return basescore_;
}
inline void AckGameScene::set_basescore(::google::protobuf::int32 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional int32 delaytime = 6;
inline bool AckGameScene::has_delaytime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckGameScene::set_has_delaytime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckGameScene::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckGameScene::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 AckGameScene::delaytime() const {
  return delaytime_;
}
inline void AckGameScene::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
}

// optional int32 SceneStatus = 7;
inline bool AckGameScene::has_scenestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckGameScene::set_has_scenestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckGameScene::clear_has_scenestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckGameScene::clear_scenestatus() {
  scenestatus_ = 0;
  clear_has_scenestatus();
}
inline ::google::protobuf::int32 AckGameScene::scenestatus() const {
  return scenestatus_;
}
inline void AckGameScene::set_scenestatus(::google::protobuf::int32 value) {
  set_has_scenestatus();
  scenestatus_ = value;
}

// optional int32 LeftTime = 8;
inline bool AckGameScene::has_lefttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckGameScene::set_has_lefttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckGameScene::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckGameScene::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 AckGameScene::lefttime() const {
  return lefttime_;
}
inline void AckGameScene::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// optional .proto.game.HandCards UserCard = 9;
inline bool AckGameScene::has_usercard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckGameScene::set_has_usercard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckGameScene::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckGameScene::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckGameScene::usercard() const {
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckGameScene::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  return usercard_;
}
inline ::proto::game::HandCards* AckGameScene::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
}

// repeated int32 HandCardNums = 10;
inline int AckGameScene::handcardnums_size() const {
  return handcardnums_.size();
}
inline void AckGameScene::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::handcardnums(int index) const {
  return handcardnums_.Get(index);
}
inline void AckGameScene::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
}
inline void AckGameScene::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::handcardnums() const {
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_handcardnums() {
  return &handcardnums_;
}

// optional int32 CurOutCardUser = 11;
inline bool AckGameScene::has_curoutcarduser() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AckGameScene::set_has_curoutcarduser() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AckGameScene::clear_has_curoutcarduser() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AckGameScene::clear_curoutcarduser() {
  curoutcarduser_ = 0;
  clear_has_curoutcarduser();
}
inline ::google::protobuf::int32 AckGameScene::curoutcarduser() const {
  return curoutcarduser_;
}
inline void AckGameScene::set_curoutcarduser(::google::protobuf::int32 value) {
  set_has_curoutcarduser();
  curoutcarduser_ = value;
}

// repeated .proto.game.tagShowOutCard ShowCard = 12;
inline int AckGameScene::showcard_size() const {
  return showcard_.size();
}
inline void AckGameScene::clear_showcard() {
  showcard_.Clear();
}
inline const ::proto::game::tagShowOutCard& AckGameScene::showcard(int index) const {
  return showcard_.Get(index);
}
inline ::proto::game::tagShowOutCard* AckGameScene::mutable_showcard(int index) {
  return showcard_.Mutable(index);
}
inline ::proto::game::tagShowOutCard* AckGameScene::add_showcard() {
  return showcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
AckGameScene::showcard() const {
  return showcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
AckGameScene::mutable_showcard() {
  return &showcard_;
}

// optional int32 curOutCard = 13;
inline bool AckGameScene::has_curoutcard() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckGameScene::set_has_curoutcard() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckGameScene::clear_has_curoutcard() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckGameScene::clear_curoutcard() {
  curoutcard_ = 0;
  clear_has_curoutcard();
}
inline ::google::protobuf::int32 AckGameScene::curoutcard() const {
  return curoutcard_;
}
inline void AckGameScene::set_curoutcard(::google::protobuf::int32 value) {
  set_has_curoutcard();
  curoutcard_ = value;
}

// repeated .proto.game.tagUserHuInfo HuInfo = 14;
inline int AckGameScene::huinfo_size() const {
  return huinfo_.size();
}
inline void AckGameScene::clear_huinfo() {
  huinfo_.Clear();
}
inline const ::proto::game::tagUserHuInfo& AckGameScene::huinfo(int index) const {
  return huinfo_.Get(index);
}
inline ::proto::game::tagUserHuInfo* AckGameScene::mutable_huinfo(int index) {
  return huinfo_.Mutable(index);
}
inline ::proto::game::tagUserHuInfo* AckGameScene::add_huinfo() {
  return huinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >&
AckGameScene::huinfo() const {
  return huinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >*
AckGameScene::mutable_huinfo() {
  return &huinfo_;
}

// repeated int32 TotalScore = 15;
inline int AckGameScene::totalscore_size() const {
  return totalscore_.size();
}
inline void AckGameScene::clear_totalscore() {
  totalscore_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::totalscore(int index) const {
  return totalscore_.Get(index);
}
inline void AckGameScene::set_totalscore(int index, ::google::protobuf::int32 value) {
  totalscore_.Set(index, value);
}
inline void AckGameScene::add_totalscore(::google::protobuf::int32 value) {
  totalscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::totalscore() const {
  return totalscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_totalscore() {
  return &totalscore_;
}

// repeated .proto.game.tagGroupCard GroupCard = 16;
inline int AckGameScene::groupcard_size() const {
  return groupcard_.size();
}
inline void AckGameScene::clear_groupcard() {
  groupcard_.Clear();
}
inline const ::proto::game::tagGroupCard& AckGameScene::groupcard(int index) const {
  return groupcard_.Get(index);
}
inline ::proto::game::tagGroupCard* AckGameScene::mutable_groupcard(int index) {
  return groupcard_.Mutable(index);
}
inline ::proto::game::tagGroupCard* AckGameScene::add_groupcard() {
  return groupcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >&
AckGameScene::groupcard() const {
  return groupcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >*
AckGameScene::mutable_groupcard() {
  return &groupcard_;
}

// optional int32 IsAutoHu = 17;
inline bool AckGameScene::has_isautohu() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AckGameScene::set_has_isautohu() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AckGameScene::clear_has_isautohu() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AckGameScene::clear_isautohu() {
  isautohu_ = 0;
  clear_has_isautohu();
}
inline ::google::protobuf::int32 AckGameScene::isautohu() const {
  return isautohu_;
}
inline void AckGameScene::set_isautohu(::google::protobuf::int32 value) {
  set_has_isautohu();
  isautohu_ = value;
}

// optional int32 BankerChairid = 18;
inline bool AckGameScene::has_bankerchairid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AckGameScene::set_has_bankerchairid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AckGameScene::clear_has_bankerchairid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AckGameScene::clear_bankerchairid() {
  bankerchairid_ = 0;
  clear_has_bankerchairid();
}
inline ::google::protobuf::int32 AckGameScene::bankerchairid() const {
  return bankerchairid_;
}
inline void AckGameScene::set_bankerchairid(::google::protobuf::int32 value) {
  set_has_bankerchairid();
  bankerchairid_ = value;
}

// repeated int32 UserLackType = 19;
inline int AckGameScene::userlacktype_size() const {
  return userlacktype_.size();
}
inline void AckGameScene::clear_userlacktype() {
  userlacktype_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::userlacktype(int index) const {
  return userlacktype_.Get(index);
}
inline void AckGameScene::set_userlacktype(int index, ::google::protobuf::int32 value) {
  userlacktype_.Set(index, value);
}
inline void AckGameScene::add_userlacktype(::google::protobuf::int32 value) {
  userlacktype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::userlacktype() const {
  return userlacktype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_userlacktype() {
  return &userlacktype_;
}

// optional int32 IscurGetCard = 20;
inline bool AckGameScene::has_iscurgetcard() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AckGameScene::set_has_iscurgetcard() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AckGameScene::clear_has_iscurgetcard() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AckGameScene::clear_iscurgetcard() {
  iscurgetcard_ = 0;
  clear_has_iscurgetcard();
}
inline ::google::protobuf::int32 AckGameScene::iscurgetcard() const {
  return iscurgetcard_;
}
inline void AckGameScene::set_iscurgetcard(::google::protobuf::int32 value) {
  set_has_iscurgetcard();
  iscurgetcard_ = value;
}

// optional int32 Card = 21;
inline bool AckGameScene::has_card() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AckGameScene::set_has_card() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AckGameScene::clear_has_card() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AckGameScene::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckGameScene::card() const {
  return card_;
}
inline void AckGameScene::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// optional int32 OpType = 22;
inline bool AckGameScene::has_optype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AckGameScene::set_has_optype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AckGameScene::clear_has_optype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AckGameScene::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckGameScene::optype() const {
  return optype_;
}
inline void AckGameScene::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// repeated .proto.game.tagGangInfo GangInfo = 23;
inline int AckGameScene::ganginfo_size() const {
  return ganginfo_.size();
}
inline void AckGameScene::clear_ganginfo() {
  ganginfo_.Clear();
}
inline const ::proto::game::tagGangInfo& AckGameScene::ganginfo(int index) const {
  return ganginfo_.Get(index);
}
inline ::proto::game::tagGangInfo* AckGameScene::mutable_ganginfo(int index) {
  return ganginfo_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckGameScene::add_ganginfo() {
  return ganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckGameScene::ganginfo() const {
  return ganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckGameScene::mutable_ganginfo() {
  return &ganginfo_;
}

// repeated .proto.game.tagListenInfo ListenInfo = 24;
inline int AckGameScene::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckGameScene::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckGameScene::listeninfo(int index) const {
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckGameScene::mutable_listeninfo(int index) {
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckGameScene::add_listeninfo() {
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckGameScene::listeninfo() const {
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckGameScene::mutable_listeninfo() {
  return &listeninfo_;
}

// repeated int32 OfflineState = 25;
inline int AckGameScene::offlinestate_size() const {
  return offlinestate_.size();
}
inline void AckGameScene::clear_offlinestate() {
  offlinestate_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::offlinestate(int index) const {
  return offlinestate_.Get(index);
}
inline void AckGameScene::set_offlinestate(int index, ::google::protobuf::int32 value) {
  offlinestate_.Set(index, value);
}
inline void AckGameScene::add_offlinestate(::google::protobuf::int32 value) {
  offlinestate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::offlinestate() const {
  return offlinestate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_offlinestate() {
  return &offlinestate_;
}

// optional int32 PoolCardLeftNums = 26;
inline bool AckGameScene::has_poolcardleftnums() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AckGameScene::set_has_poolcardleftnums() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AckGameScene::clear_has_poolcardleftnums() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AckGameScene::clear_poolcardleftnums() {
  poolcardleftnums_ = 0;
  clear_has_poolcardleftnums();
}
inline ::google::protobuf::int32 AckGameScene::poolcardleftnums() const {
  return poolcardleftnums_;
}
inline void AckGameScene::set_poolcardleftnums(::google::protobuf::int32 value) {
  set_has_poolcardleftnums();
  poolcardleftnums_ = value;
}

// optional int32 preready_timer = 27;
inline bool AckGameScene::has_preready_timer() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AckGameScene::set_has_preready_timer() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AckGameScene::clear_has_preready_timer() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AckGameScene::clear_preready_timer() {
  preready_timer_ = 0;
  clear_has_preready_timer();
}
inline ::google::protobuf::int32 AckGameScene::preready_timer() const {
  return preready_timer_;
}
inline void AckGameScene::set_preready_timer(::google::protobuf::int32 value) {
  set_has_preready_timer();
  preready_timer_ = value;
}

// optional int32 stand_money = 28;
inline bool AckGameScene::has_stand_money() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void AckGameScene::set_has_stand_money() {
  _has_bits_[0] |= 0x08000000u;
}
inline void AckGameScene::clear_has_stand_money() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void AckGameScene::clear_stand_money() {
  stand_money_ = 0;
  clear_has_stand_money();
}
inline ::google::protobuf::int32 AckGameScene::stand_money() const {
  return stand_money_;
}
inline void AckGameScene::set_stand_money(::google::protobuf::int32 value) {
  set_has_stand_money();
  stand_money_ = value;
}

// optional int32 HorseNum = 29;
inline bool AckGameScene::has_horsenum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AckGameScene::set_has_horsenum() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AckGameScene::clear_has_horsenum() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AckGameScene::clear_horsenum() {
  horsenum_ = 0;
  clear_has_horsenum();
}
inline ::google::protobuf::int32 AckGameScene::horsenum() const {
  return horsenum_;
}
inline void AckGameScene::set_horsenum(::google::protobuf::int32 value) {
  set_has_horsenum();
  horsenum_ = value;
}

// optional int32 isDisbandroom = 30;
inline bool AckGameScene::has_isdisbandroom() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void AckGameScene::set_has_isdisbandroom() {
  _has_bits_[0] |= 0x20000000u;
}
inline void AckGameScene::clear_has_isdisbandroom() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void AckGameScene::clear_isdisbandroom() {
  isdisbandroom_ = 0;
  clear_has_isdisbandroom();
}
inline ::google::protobuf::int32 AckGameScene::isdisbandroom() const {
  return isdisbandroom_;
}
inline void AckGameScene::set_isdisbandroom(::google::protobuf::int32 value) {
  set_has_isdisbandroom();
  isdisbandroom_ = value;
}

// optional .proto.game.AckDisbandApply Disbandinfo = 31;
inline bool AckGameScene::has_disbandinfo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void AckGameScene::set_has_disbandinfo() {
  _has_bits_[0] |= 0x40000000u;
}
inline void AckGameScene::clear_has_disbandinfo() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void AckGameScene::clear_disbandinfo() {
  if (disbandinfo_ != NULL) disbandinfo_->::proto::game::AckDisbandApply::Clear();
  clear_has_disbandinfo();
}
inline const ::proto::game::AckDisbandApply& AckGameScene::disbandinfo() const {
  return disbandinfo_ != NULL ? *disbandinfo_ : *default_instance_->disbandinfo_;
}
inline ::proto::game::AckDisbandApply* AckGameScene::mutable_disbandinfo() {
  set_has_disbandinfo();
  if (disbandinfo_ == NULL) disbandinfo_ = new ::proto::game::AckDisbandApply;
  return disbandinfo_;
}
inline ::proto::game::AckDisbandApply* AckGameScene::release_disbandinfo() {
  clear_has_disbandinfo();
  ::proto::game::AckDisbandApply* temp = disbandinfo_;
  disbandinfo_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_disbandinfo(::proto::game::AckDisbandApply* disbandinfo) {
  delete disbandinfo_;
  disbandinfo_ = disbandinfo;
  if (disbandinfo) {
    set_has_disbandinfo();
  } else {
    clear_has_disbandinfo();
  }
}

// repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
inline int AckGameScene::userdisbandstate_size() const {
  return userdisbandstate_.size();
}
inline void AckGameScene::clear_userdisbandstate() {
  userdisbandstate_.Clear();
}
inline const ::proto::game::AckDisbandChooseBc& AckGameScene::userdisbandstate(int index) const {
  return userdisbandstate_.Get(index);
}
inline ::proto::game::AckDisbandChooseBc* AckGameScene::mutable_userdisbandstate(int index) {
  return userdisbandstate_.Mutable(index);
}
inline ::proto::game::AckDisbandChooseBc* AckGameScene::add_userdisbandstate() {
  return userdisbandstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >&
AckGameScene::userdisbandstate() const {
  return userdisbandstate_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >*
AckGameScene::mutable_userdisbandstate() {
  return &userdisbandstate_;
}

// repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
inline int AckGameScene::useronlinestate_size() const {
  return useronlinestate_.size();
}
inline void AckGameScene::clear_useronlinestate() {
  useronlinestate_.Clear();
}
inline const ::proto::game::AckUserOnlineState& AckGameScene::useronlinestate(int index) const {
  return useronlinestate_.Get(index);
}
inline ::proto::game::AckUserOnlineState* AckGameScene::mutable_useronlinestate(int index) {
  return useronlinestate_.Mutable(index);
}
inline ::proto::game::AckUserOnlineState* AckGameScene::add_useronlinestate() {
  return useronlinestate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >&
AckGameScene::useronlinestate() const {
  return useronlinestate_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >*
AckGameScene::mutable_useronlinestate() {
  return &useronlinestate_;
}

// repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
inline int AckGameScene::userovertime_size() const {
  return userovertime_.size();
}
inline void AckGameScene::clear_userovertime() {
  userovertime_.Clear();
}
inline const ::proto::game::AckUserOvertimeState& AckGameScene::userovertime(int index) const {
  return userovertime_.Get(index);
}
inline ::proto::game::AckUserOvertimeState* AckGameScene::mutable_userovertime(int index) {
  return userovertime_.Mutable(index);
}
inline ::proto::game::AckUserOvertimeState* AckGameScene::add_userovertime() {
  return userovertime_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >&
AckGameScene::userovertime() const {
  return userovertime_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >*
AckGameScene::mutable_userovertime() {
  return &userovertime_;
}

// optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
inline bool AckGameScene::has_gztableinfo() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void AckGameScene::set_has_gztableinfo() {
  _has_bits_[1] |= 0x00000004u;
}
inline void AckGameScene::clear_has_gztableinfo() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void AckGameScene::clear_gztableinfo() {
  if (gztableinfo_ != NULL) gztableinfo_->::proto::game::guizhou::tagGuiZhouTableInfo::Clear();
  clear_has_gztableinfo();
}
inline const ::proto::game::guizhou::tagGuiZhouTableInfo& AckGameScene::gztableinfo() const {
  return gztableinfo_ != NULL ? *gztableinfo_ : *default_instance_->gztableinfo_;
}
inline ::proto::game::guizhou::tagGuiZhouTableInfo* AckGameScene::mutable_gztableinfo() {
  set_has_gztableinfo();
  if (gztableinfo_ == NULL) gztableinfo_ = new ::proto::game::guizhou::tagGuiZhouTableInfo;
  return gztableinfo_;
}
inline ::proto::game::guizhou::tagGuiZhouTableInfo* AckGameScene::release_gztableinfo() {
  clear_has_gztableinfo();
  ::proto::game::guizhou::tagGuiZhouTableInfo* temp = gztableinfo_;
  gztableinfo_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_gztableinfo(::proto::game::guizhou::tagGuiZhouTableInfo* gztableinfo) {
  delete gztableinfo_;
  gztableinfo_ = gztableinfo;
  if (gztableinfo) {
    set_has_gztableinfo();
  } else {
    clear_has_gztableinfo();
  }
}

// optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
inline bool AckGameScene::has_gdscene() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void AckGameScene::set_has_gdscene() {
  _has_bits_[1] |= 0x00000008u;
}
inline void AckGameScene::clear_has_gdscene() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void AckGameScene::clear_gdscene() {
  if (gdscene_ != NULL) gdscene_->::proto::game::gdmahjonggame::gdgamescene::Clear();
  clear_has_gdscene();
}
inline const ::proto::game::gdmahjonggame::gdgamescene& AckGameScene::gdscene() const {
  return gdscene_ != NULL ? *gdscene_ : *default_instance_->gdscene_;
}
inline ::proto::game::gdmahjonggame::gdgamescene* AckGameScene::mutable_gdscene() {
  set_has_gdscene();
  if (gdscene_ == NULL) gdscene_ = new ::proto::game::gdmahjonggame::gdgamescene;
  return gdscene_;
}
inline ::proto::game::gdmahjonggame::gdgamescene* AckGameScene::release_gdscene() {
  clear_has_gdscene();
  ::proto::game::gdmahjonggame::gdgamescene* temp = gdscene_;
  gdscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_gdscene(::proto::game::gdmahjonggame::gdgamescene* gdscene) {
  delete gdscene_;
  gdscene_ = gdscene;
  if (gdscene) {
    set_has_gdscene();
  } else {
    clear_has_gdscene();
  }
}

// optional bool IsZhuanZhuanRoom = 37;
inline bool AckGameScene::has_iszhuanzhuanroom() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void AckGameScene::set_has_iszhuanzhuanroom() {
  _has_bits_[1] |= 0x00000010u;
}
inline void AckGameScene::clear_has_iszhuanzhuanroom() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void AckGameScene::clear_iszhuanzhuanroom() {
  iszhuanzhuanroom_ = false;
  clear_has_iszhuanzhuanroom();
}
inline bool AckGameScene::iszhuanzhuanroom() const {
  return iszhuanzhuanroom_;
}
inline void AckGameScene::set_iszhuanzhuanroom(bool value) {
  set_has_iszhuanzhuanroom();
  iszhuanzhuanroom_ = value;
}

// optional .proto.game.tagReadyInfo UserReadyInfo = 38;
inline bool AckGameScene::has_userreadyinfo() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void AckGameScene::set_has_userreadyinfo() {
  _has_bits_[1] |= 0x00000020u;
}
inline void AckGameScene::clear_has_userreadyinfo() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void AckGameScene::clear_userreadyinfo() {
  if (userreadyinfo_ != NULL) userreadyinfo_->::proto::game::tagReadyInfo::Clear();
  clear_has_userreadyinfo();
}
inline const ::proto::game::tagReadyInfo& AckGameScene::userreadyinfo() const {
  return userreadyinfo_ != NULL ? *userreadyinfo_ : *default_instance_->userreadyinfo_;
}
inline ::proto::game::tagReadyInfo* AckGameScene::mutable_userreadyinfo() {
  set_has_userreadyinfo();
  if (userreadyinfo_ == NULL) userreadyinfo_ = new ::proto::game::tagReadyInfo;
  return userreadyinfo_;
}
inline ::proto::game::tagReadyInfo* AckGameScene::release_userreadyinfo() {
  clear_has_userreadyinfo();
  ::proto::game::tagReadyInfo* temp = userreadyinfo_;
  userreadyinfo_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_userreadyinfo(::proto::game::tagReadyInfo* userreadyinfo) {
  delete userreadyinfo_;
  userreadyinfo_ = userreadyinfo;
  if (userreadyinfo) {
    set_has_userreadyinfo();
  } else {
    clear_has_userreadyinfo();
  }
}

// optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
inline bool AckGameScene::has_scmjcustomied() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void AckGameScene::set_has_scmjcustomied() {
  _has_bits_[1] |= 0x00000040u;
}
inline void AckGameScene::clear_has_scmjcustomied() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void AckGameScene::clear_scmjcustomied() {
  if (scmjcustomied_ != NULL) scmjcustomied_->::proto::game::scmj::AckCustomiedInfo::Clear();
  clear_has_scmjcustomied();
}
inline const ::proto::game::scmj::AckCustomiedInfo& AckGameScene::scmjcustomied() const {
  return scmjcustomied_ != NULL ? *scmjcustomied_ : *default_instance_->scmjcustomied_;
}
inline ::proto::game::scmj::AckCustomiedInfo* AckGameScene::mutable_scmjcustomied() {
  set_has_scmjcustomied();
  if (scmjcustomied_ == NULL) scmjcustomied_ = new ::proto::game::scmj::AckCustomiedInfo;
  return scmjcustomied_;
}
inline ::proto::game::scmj::AckCustomiedInfo* AckGameScene::release_scmjcustomied() {
  clear_has_scmjcustomied();
  ::proto::game::scmj::AckCustomiedInfo* temp = scmjcustomied_;
  scmjcustomied_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_scmjcustomied(::proto::game::scmj::AckCustomiedInfo* scmjcustomied) {
  delete scmjcustomied_;
  scmjcustomied_ = scmjcustomied;
  if (scmjcustomied) {
    set_has_scmjcustomied();
  } else {
    clear_has_scmjcustomied();
  }
}

// optional int32 roomGolden = 40;
inline bool AckGameScene::has_roomgolden() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void AckGameScene::set_has_roomgolden() {
  _has_bits_[1] |= 0x00000080u;
}
inline void AckGameScene::clear_has_roomgolden() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void AckGameScene::clear_roomgolden() {
  roomgolden_ = 0;
  clear_has_roomgolden();
}
inline ::google::protobuf::int32 AckGameScene::roomgolden() const {
  return roomgolden_;
}
inline void AckGameScene::set_roomgolden(::google::protobuf::int32 value) {
  set_has_roomgolden();
  roomgolden_ = value;
}

// optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
inline bool AckGameScene::has_hnscene() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void AckGameScene::set_has_hnscene() {
  _has_bits_[1] |= 0x00000100u;
}
inline void AckGameScene::clear_has_hnscene() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void AckGameScene::clear_hnscene() {
  if (hnscene_ != NULL) hnscene_->::proto::game::hnmahjonggame::hngamescene::Clear();
  clear_has_hnscene();
}
inline const ::proto::game::hnmahjonggame::hngamescene& AckGameScene::hnscene() const {
  return hnscene_ != NULL ? *hnscene_ : *default_instance_->hnscene_;
}
inline ::proto::game::hnmahjonggame::hngamescene* AckGameScene::mutable_hnscene() {
  set_has_hnscene();
  if (hnscene_ == NULL) hnscene_ = new ::proto::game::hnmahjonggame::hngamescene;
  return hnscene_;
}
inline ::proto::game::hnmahjonggame::hngamescene* AckGameScene::release_hnscene() {
  clear_has_hnscene();
  ::proto::game::hnmahjonggame::hngamescene* temp = hnscene_;
  hnscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_hnscene(::proto::game::hnmahjonggame::hngamescene* hnscene) {
  delete hnscene_;
  hnscene_ = hnscene;
  if (hnscene) {
    set_has_hnscene();
  } else {
    clear_has_hnscene();
  }
}

// optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
inline bool AckGameScene::has_hunanscene() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void AckGameScene::set_has_hunanscene() {
  _has_bits_[1] |= 0x00000200u;
}
inline void AckGameScene::clear_has_hunanscene() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void AckGameScene::clear_hunanscene() {
  if (hunanscene_ != NULL) hunanscene_->::proto::game::hunanmj::AckCustomiedInfo::Clear();
  clear_has_hunanscene();
}
inline const ::proto::game::hunanmj::AckCustomiedInfo& AckGameScene::hunanscene() const {
  return hunanscene_ != NULL ? *hunanscene_ : *default_instance_->hunanscene_;
}
inline ::proto::game::hunanmj::AckCustomiedInfo* AckGameScene::mutable_hunanscene() {
  set_has_hunanscene();
  if (hunanscene_ == NULL) hunanscene_ = new ::proto::game::hunanmj::AckCustomiedInfo;
  return hunanscene_;
}
inline ::proto::game::hunanmj::AckCustomiedInfo* AckGameScene::release_hunanscene() {
  clear_has_hunanscene();
  ::proto::game::hunanmj::AckCustomiedInfo* temp = hunanscene_;
  hunanscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_hunanscene(::proto::game::hunanmj::AckCustomiedInfo* hunanscene) {
  delete hunanscene_;
  hunanscene_ = hunanscene;
  if (hunanscene) {
    set_has_hunanscene();
  } else {
    clear_has_hunanscene();
  }
}

// optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
inline bool AckGameScene::has_jxscene() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void AckGameScene::set_has_jxscene() {
  _has_bits_[1] |= 0x00000400u;
}
inline void AckGameScene::clear_has_jxscene() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void AckGameScene::clear_jxscene() {
  if (jxscene_ != NULL) jxscene_->::proto::game::jxmahjonggame::jxgamescene::Clear();
  clear_has_jxscene();
}
inline const ::proto::game::jxmahjonggame::jxgamescene& AckGameScene::jxscene() const {
  return jxscene_ != NULL ? *jxscene_ : *default_instance_->jxscene_;
}
inline ::proto::game::jxmahjonggame::jxgamescene* AckGameScene::mutable_jxscene() {
  set_has_jxscene();
  if (jxscene_ == NULL) jxscene_ = new ::proto::game::jxmahjonggame::jxgamescene;
  return jxscene_;
}
inline ::proto::game::jxmahjonggame::jxgamescene* AckGameScene::release_jxscene() {
  clear_has_jxscene();
  ::proto::game::jxmahjonggame::jxgamescene* temp = jxscene_;
  jxscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_jxscene(::proto::game::jxmahjonggame::jxgamescene* jxscene) {
  delete jxscene_;
  jxscene_ = jxscene;
  if (jxscene) {
    set_has_jxscene();
  } else {
    clear_has_jxscene();
  }
}

// optional .proto.game.pinghumj.phgamescene phscene = 44;
inline bool AckGameScene::has_phscene() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void AckGameScene::set_has_phscene() {
  _has_bits_[1] |= 0x00000800u;
}
inline void AckGameScene::clear_has_phscene() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void AckGameScene::clear_phscene() {
  if (phscene_ != NULL) phscene_->::proto::game::pinghumj::phgamescene::Clear();
  clear_has_phscene();
}
inline const ::proto::game::pinghumj::phgamescene& AckGameScene::phscene() const {
  return phscene_ != NULL ? *phscene_ : *default_instance_->phscene_;
}
inline ::proto::game::pinghumj::phgamescene* AckGameScene::mutable_phscene() {
  set_has_phscene();
  if (phscene_ == NULL) phscene_ = new ::proto::game::pinghumj::phgamescene;
  return phscene_;
}
inline ::proto::game::pinghumj::phgamescene* AckGameScene::release_phscene() {
  clear_has_phscene();
  ::proto::game::pinghumj::phgamescene* temp = phscene_;
  phscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_phscene(::proto::game::pinghumj::phgamescene* phscene) {
  delete phscene_;
  phscene_ = phscene;
  if (phscene) {
    set_has_phscene();
  } else {
    clear_has_phscene();
  }
}

// optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
inline bool AckGameScene::has_hubeiscene() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void AckGameScene::set_has_hubeiscene() {
  _has_bits_[1] |= 0x00001000u;
}
inline void AckGameScene::clear_has_hubeiscene() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void AckGameScene::clear_hubeiscene() {
  if (hubeiscene_ != NULL) hubeiscene_->::proto::game::hubeimj::hubeiGameScene::Clear();
  clear_has_hubeiscene();
}
inline const ::proto::game::hubeimj::hubeiGameScene& AckGameScene::hubeiscene() const {
  return hubeiscene_ != NULL ? *hubeiscene_ : *default_instance_->hubeiscene_;
}
inline ::proto::game::hubeimj::hubeiGameScene* AckGameScene::mutable_hubeiscene() {
  set_has_hubeiscene();
  if (hubeiscene_ == NULL) hubeiscene_ = new ::proto::game::hubeimj::hubeiGameScene;
  return hubeiscene_;
}
inline ::proto::game::hubeimj::hubeiGameScene* AckGameScene::release_hubeiscene() {
  clear_has_hubeiscene();
  ::proto::game::hubeimj::hubeiGameScene* temp = hubeiscene_;
  hubeiscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_hubeiscene(::proto::game::hubeimj::hubeiGameScene* hubeiscene) {
  delete hubeiscene_;
  hubeiscene_ = hubeiscene;
  if (hubeiscene) {
    set_has_hubeiscene();
  } else {
    clear_has_hubeiscene();
  }
}

// optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
inline bool AckGameScene::has_shanxigamescene() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void AckGameScene::set_has_shanxigamescene() {
  _has_bits_[1] |= 0x00002000u;
}
inline void AckGameScene::clear_has_shanxigamescene() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void AckGameScene::clear_shanxigamescene() {
  if (shanxigamescene_ != NULL) shanxigamescene_->::proto::game::sxmahjonggame::sxgamescene::Clear();
  clear_has_shanxigamescene();
}
inline const ::proto::game::sxmahjonggame::sxgamescene& AckGameScene::shanxigamescene() const {
  return shanxigamescene_ != NULL ? *shanxigamescene_ : *default_instance_->shanxigamescene_;
}
inline ::proto::game::sxmahjonggame::sxgamescene* AckGameScene::mutable_shanxigamescene() {
  set_has_shanxigamescene();
  if (shanxigamescene_ == NULL) shanxigamescene_ = new ::proto::game::sxmahjonggame::sxgamescene;
  return shanxigamescene_;
}
inline ::proto::game::sxmahjonggame::sxgamescene* AckGameScene::release_shanxigamescene() {
  clear_has_shanxigamescene();
  ::proto::game::sxmahjonggame::sxgamescene* temp = shanxigamescene_;
  shanxigamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_shanxigamescene(::proto::game::sxmahjonggame::sxgamescene* shanxigamescene) {
  delete shanxigamescene_;
  shanxigamescene_ = shanxigamescene;
  if (shanxigamescene) {
    set_has_shanxigamescene();
  } else {
    clear_has_shanxigamescene();
  }
}

// optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
inline bool AckGameScene::has_jinhuagamescene() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void AckGameScene::set_has_jinhuagamescene() {
  _has_bits_[1] |= 0x00004000u;
}
inline void AckGameScene::clear_has_jinhuagamescene() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void AckGameScene::clear_jinhuagamescene() {
  if (jinhuagamescene_ != NULL) jinhuagamescene_->::proto::game::jhmahjonggame::jhgamescene::Clear();
  clear_has_jinhuagamescene();
}
inline const ::proto::game::jhmahjonggame::jhgamescene& AckGameScene::jinhuagamescene() const {
  return jinhuagamescene_ != NULL ? *jinhuagamescene_ : *default_instance_->jinhuagamescene_;
}
inline ::proto::game::jhmahjonggame::jhgamescene* AckGameScene::mutable_jinhuagamescene() {
  set_has_jinhuagamescene();
  if (jinhuagamescene_ == NULL) jinhuagamescene_ = new ::proto::game::jhmahjonggame::jhgamescene;
  return jinhuagamescene_;
}
inline ::proto::game::jhmahjonggame::jhgamescene* AckGameScene::release_jinhuagamescene() {
  clear_has_jinhuagamescene();
  ::proto::game::jhmahjonggame::jhgamescene* temp = jinhuagamescene_;
  jinhuagamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_jinhuagamescene(::proto::game::jhmahjonggame::jhgamescene* jinhuagamescene) {
  delete jinhuagamescene_;
  jinhuagamescene_ = jinhuagamescene;
  if (jinhuagamescene) {
    set_has_jinhuagamescene();
  } else {
    clear_has_jinhuagamescene();
  }
}

// optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
inline bool AckGameScene::has_fuzhouscene() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void AckGameScene::set_has_fuzhouscene() {
  _has_bits_[1] |= 0x00008000u;
}
inline void AckGameScene::clear_has_fuzhouscene() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void AckGameScene::clear_fuzhouscene() {
  if (fuzhouscene_ != NULL) fuzhouscene_->::proto::game::fuzhoumahjonggame::FZ_GameSence::Clear();
  clear_has_fuzhouscene();
}
inline const ::proto::game::fuzhoumahjonggame::FZ_GameSence& AckGameScene::fuzhouscene() const {
  return fuzhouscene_ != NULL ? *fuzhouscene_ : *default_instance_->fuzhouscene_;
}
inline ::proto::game::fuzhoumahjonggame::FZ_GameSence* AckGameScene::mutable_fuzhouscene() {
  set_has_fuzhouscene();
  if (fuzhouscene_ == NULL) fuzhouscene_ = new ::proto::game::fuzhoumahjonggame::FZ_GameSence;
  return fuzhouscene_;
}
inline ::proto::game::fuzhoumahjonggame::FZ_GameSence* AckGameScene::release_fuzhouscene() {
  clear_has_fuzhouscene();
  ::proto::game::fuzhoumahjonggame::FZ_GameSence* temp = fuzhouscene_;
  fuzhouscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_fuzhouscene(::proto::game::fuzhoumahjonggame::FZ_GameSence* fuzhouscene) {
  delete fuzhouscene_;
  fuzhouscene_ = fuzhouscene;
  if (fuzhouscene) {
    set_has_fuzhouscene();
  } else {
    clear_has_fuzhouscene();
  }
}

// optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
inline bool AckGameScene::has_dgkmjcustomied() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void AckGameScene::set_has_dgkmjcustomied() {
  _has_bits_[1] |= 0x00010000u;
}
inline void AckGameScene::clear_has_dgkmjcustomied() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void AckGameScene::clear_dgkmjcustomied() {
  if (dgkmjcustomied_ != NULL) dgkmjcustomied_->::proto::game::dgkmj::AckCustomiedInfo::Clear();
  clear_has_dgkmjcustomied();
}
inline const ::proto::game::dgkmj::AckCustomiedInfo& AckGameScene::dgkmjcustomied() const {
  return dgkmjcustomied_ != NULL ? *dgkmjcustomied_ : *default_instance_->dgkmjcustomied_;
}
inline ::proto::game::dgkmj::AckCustomiedInfo* AckGameScene::mutable_dgkmjcustomied() {
  set_has_dgkmjcustomied();
  if (dgkmjcustomied_ == NULL) dgkmjcustomied_ = new ::proto::game::dgkmj::AckCustomiedInfo;
  return dgkmjcustomied_;
}
inline ::proto::game::dgkmj::AckCustomiedInfo* AckGameScene::release_dgkmjcustomied() {
  clear_has_dgkmjcustomied();
  ::proto::game::dgkmj::AckCustomiedInfo* temp = dgkmjcustomied_;
  dgkmjcustomied_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_dgkmjcustomied(::proto::game::dgkmj::AckCustomiedInfo* dgkmjcustomied) {
  delete dgkmjcustomied_;
  dgkmjcustomied_ = dgkmjcustomied;
  if (dgkmjcustomied) {
    set_has_dgkmjcustomied();
  } else {
    clear_has_dgkmjcustomied();
  }
}

// optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
inline bool AckGameScene::has_nanninggamescene() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void AckGameScene::set_has_nanninggamescene() {
  _has_bits_[1] |= 0x00020000u;
}
inline void AckGameScene::clear_has_nanninggamescene() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void AckGameScene::clear_nanninggamescene() {
  if (nanninggamescene_ != NULL) nanninggamescene_->::proto::game::nanningmj::nngamescene::Clear();
  clear_has_nanninggamescene();
}
inline const ::proto::game::nanningmj::nngamescene& AckGameScene::nanninggamescene() const {
  return nanninggamescene_ != NULL ? *nanninggamescene_ : *default_instance_->nanninggamescene_;
}
inline ::proto::game::nanningmj::nngamescene* AckGameScene::mutable_nanninggamescene() {
  set_has_nanninggamescene();
  if (nanninggamescene_ == NULL) nanninggamescene_ = new ::proto::game::nanningmj::nngamescene;
  return nanninggamescene_;
}
inline ::proto::game::nanningmj::nngamescene* AckGameScene::release_nanninggamescene() {
  clear_has_nanninggamescene();
  ::proto::game::nanningmj::nngamescene* temp = nanninggamescene_;
  nanninggamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_nanninggamescene(::proto::game::nanningmj::nngamescene* nanninggamescene) {
  delete nanninggamescene_;
  nanninggamescene_ = nanninggamescene;
  if (nanninggamescene) {
    set_has_nanninggamescene();
  } else {
    clear_has_nanninggamescene();
  }
}

// optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
inline bool AckGameScene::has_laibingamescene() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void AckGameScene::set_has_laibingamescene() {
  _has_bits_[1] |= 0x00040000u;
}
inline void AckGameScene::clear_has_laibingamescene() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void AckGameScene::clear_laibingamescene() {
  if (laibingamescene_ != NULL) laibingamescene_->::proto::game::laibinmj::lbgamescene::Clear();
  clear_has_laibingamescene();
}
inline const ::proto::game::laibinmj::lbgamescene& AckGameScene::laibingamescene() const {
  return laibingamescene_ != NULL ? *laibingamescene_ : *default_instance_->laibingamescene_;
}
inline ::proto::game::laibinmj::lbgamescene* AckGameScene::mutable_laibingamescene() {
  set_has_laibingamescene();
  if (laibingamescene_ == NULL) laibingamescene_ = new ::proto::game::laibinmj::lbgamescene;
  return laibingamescene_;
}
inline ::proto::game::laibinmj::lbgamescene* AckGameScene::release_laibingamescene() {
  clear_has_laibingamescene();
  ::proto::game::laibinmj::lbgamescene* temp = laibingamescene_;
  laibingamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_laibingamescene(::proto::game::laibinmj::lbgamescene* laibingamescene) {
  delete laibingamescene_;
  laibingamescene_ = laibingamescene;
  if (laibingamescene) {
    set_has_laibingamescene();
  } else {
    clear_has_laibingamescene();
  }
}

// optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
inline bool AckGameScene::has_nanpinggamesence() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void AckGameScene::set_has_nanpinggamesence() {
  _has_bits_[1] |= 0x00080000u;
}
inline void AckGameScene::clear_has_nanpinggamesence() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void AckGameScene::clear_nanpinggamesence() {
  if (nanpinggamesence_ != NULL) nanpinggamesence_->::proto::game::nanpingmahjonggame::NanPingGameSence::Clear();
  clear_has_nanpinggamesence();
}
inline const ::proto::game::nanpingmahjonggame::NanPingGameSence& AckGameScene::nanpinggamesence() const {
  return nanpinggamesence_ != NULL ? *nanpinggamesence_ : *default_instance_->nanpinggamesence_;
}
inline ::proto::game::nanpingmahjonggame::NanPingGameSence* AckGameScene::mutable_nanpinggamesence() {
  set_has_nanpinggamesence();
  if (nanpinggamesence_ == NULL) nanpinggamesence_ = new ::proto::game::nanpingmahjonggame::NanPingGameSence;
  return nanpinggamesence_;
}
inline ::proto::game::nanpingmahjonggame::NanPingGameSence* AckGameScene::release_nanpinggamesence() {
  clear_has_nanpinggamesence();
  ::proto::game::nanpingmahjonggame::NanPingGameSence* temp = nanpinggamesence_;
  nanpinggamesence_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_nanpinggamesence(::proto::game::nanpingmahjonggame::NanPingGameSence* nanpinggamesence) {
  delete nanpinggamesence_;
  nanpinggamesence_ = nanpinggamesence;
  if (nanpinggamesence) {
    set_has_nanpinggamesence();
  } else {
    clear_has_nanpinggamesence();
  }
}

// optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
inline bool AckGameScene::has_yuanjianggamescene() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void AckGameScene::set_has_yuanjianggamescene() {
  _has_bits_[1] |= 0x00100000u;
}
inline void AckGameScene::clear_has_yuanjianggamescene() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void AckGameScene::clear_yuanjianggamescene() {
  if (yuanjianggamescene_ != NULL) yuanjianggamescene_->::proto::game::yuanjiangmj::yjgamescene::Clear();
  clear_has_yuanjianggamescene();
}
inline const ::proto::game::yuanjiangmj::yjgamescene& AckGameScene::yuanjianggamescene() const {
  return yuanjianggamescene_ != NULL ? *yuanjianggamescene_ : *default_instance_->yuanjianggamescene_;
}
inline ::proto::game::yuanjiangmj::yjgamescene* AckGameScene::mutable_yuanjianggamescene() {
  set_has_yuanjianggamescene();
  if (yuanjianggamescene_ == NULL) yuanjianggamescene_ = new ::proto::game::yuanjiangmj::yjgamescene;
  return yuanjianggamescene_;
}
inline ::proto::game::yuanjiangmj::yjgamescene* AckGameScene::release_yuanjianggamescene() {
  clear_has_yuanjianggamescene();
  ::proto::game::yuanjiangmj::yjgamescene* temp = yuanjianggamescene_;
  yuanjianggamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_yuanjianggamescene(::proto::game::yuanjiangmj::yjgamescene* yuanjianggamescene) {
  delete yuanjianggamescene_;
  yuanjianggamescene_ = yuanjianggamescene;
  if (yuanjianggamescene) {
    set_has_yuanjianggamescene();
  } else {
    clear_has_yuanjianggamescene();
  }
}

// optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
inline bool AckGameScene::has_longyangamesence() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void AckGameScene::set_has_longyangamesence() {
  _has_bits_[1] |= 0x00200000u;
}
inline void AckGameScene::clear_has_longyangamesence() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void AckGameScene::clear_longyangamesence() {
  if (longyangamesence_ != NULL) longyangamesence_->::proto::game::longyanmj::GamsSence::Clear();
  clear_has_longyangamesence();
}
inline const ::proto::game::longyanmj::GamsSence& AckGameScene::longyangamesence() const {
  return longyangamesence_ != NULL ? *longyangamesence_ : *default_instance_->longyangamesence_;
}
inline ::proto::game::longyanmj::GamsSence* AckGameScene::mutable_longyangamesence() {
  set_has_longyangamesence();
  if (longyangamesence_ == NULL) longyangamesence_ = new ::proto::game::longyanmj::GamsSence;
  return longyangamesence_;
}
inline ::proto::game::longyanmj::GamsSence* AckGameScene::release_longyangamesence() {
  clear_has_longyangamesence();
  ::proto::game::longyanmj::GamsSence* temp = longyangamesence_;
  longyangamesence_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_longyangamesence(::proto::game::longyanmj::GamsSence* longyangamesence) {
  delete longyangamesence_;
  longyangamesence_ = longyangamesence;
  if (longyangamesence) {
    set_has_longyangamesence();
  } else {
    clear_has_longyangamesence();
  }
}

// optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
inline bool AckGameScene::has_xiangyangscene() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void AckGameScene::set_has_xiangyangscene() {
  _has_bits_[1] |= 0x00400000u;
}
inline void AckGameScene::clear_has_xiangyangscene() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void AckGameScene::clear_xiangyangscene() {
  if (xiangyangscene_ != NULL) xiangyangscene_->::proto::game::xiangyangmj::tagGameScene::Clear();
  clear_has_xiangyangscene();
}
inline const ::proto::game::xiangyangmj::tagGameScene& AckGameScene::xiangyangscene() const {
  return xiangyangscene_ != NULL ? *xiangyangscene_ : *default_instance_->xiangyangscene_;
}
inline ::proto::game::xiangyangmj::tagGameScene* AckGameScene::mutable_xiangyangscene() {
  set_has_xiangyangscene();
  if (xiangyangscene_ == NULL) xiangyangscene_ = new ::proto::game::xiangyangmj::tagGameScene;
  return xiangyangscene_;
}
inline ::proto::game::xiangyangmj::tagGameScene* AckGameScene::release_xiangyangscene() {
  clear_has_xiangyangscene();
  ::proto::game::xiangyangmj::tagGameScene* temp = xiangyangscene_;
  xiangyangscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_xiangyangscene(::proto::game::xiangyangmj::tagGameScene* xiangyangscene) {
  delete xiangyangscene_;
  xiangyangscene_ = xiangyangscene;
  if (xiangyangscene) {
    set_has_xiangyangscene();
  } else {
    clear_has_xiangyangscene();
  }
}

// optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
inline bool AckGameScene::has_zhenjianggamescene() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void AckGameScene::set_has_zhenjianggamescene() {
  _has_bits_[1] |= 0x00800000u;
}
inline void AckGameScene::clear_has_zhenjianggamescene() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void AckGameScene::clear_zhenjianggamescene() {
  if (zhenjianggamescene_ != NULL) zhenjianggamescene_->::proto::game::zhenjiang::zhenjiangGameSence::Clear();
  clear_has_zhenjianggamescene();
}
inline const ::proto::game::zhenjiang::zhenjiangGameSence& AckGameScene::zhenjianggamescene() const {
  return zhenjianggamescene_ != NULL ? *zhenjianggamescene_ : *default_instance_->zhenjianggamescene_;
}
inline ::proto::game::zhenjiang::zhenjiangGameSence* AckGameScene::mutable_zhenjianggamescene() {
  set_has_zhenjianggamescene();
  if (zhenjianggamescene_ == NULL) zhenjianggamescene_ = new ::proto::game::zhenjiang::zhenjiangGameSence;
  return zhenjianggamescene_;
}
inline ::proto::game::zhenjiang::zhenjiangGameSence* AckGameScene::release_zhenjianggamescene() {
  clear_has_zhenjianggamescene();
  ::proto::game::zhenjiang::zhenjiangGameSence* temp = zhenjianggamescene_;
  zhenjianggamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_zhenjianggamescene(::proto::game::zhenjiang::zhenjiangGameSence* zhenjianggamescene) {
  delete zhenjianggamescene_;
  zhenjianggamescene_ = zhenjianggamescene;
  if (zhenjianggamescene) {
    set_has_zhenjianggamescene();
  } else {
    clear_has_zhenjianggamescene();
  }
}

// optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
inline bool AckGameScene::has_jingshangamescene() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void AckGameScene::set_has_jingshangamescene() {
  _has_bits_[1] |= 0x01000000u;
}
inline void AckGameScene::clear_has_jingshangamescene() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void AckGameScene::clear_jingshangamescene() {
  if (jingshangamescene_ != NULL) jingshangamescene_->::proto::game::jingshanmj::tagJSGameScence::Clear();
  clear_has_jingshangamescene();
}
inline const ::proto::game::jingshanmj::tagJSGameScence& AckGameScene::jingshangamescene() const {
  return jingshangamescene_ != NULL ? *jingshangamescene_ : *default_instance_->jingshangamescene_;
}
inline ::proto::game::jingshanmj::tagJSGameScence* AckGameScene::mutable_jingshangamescene() {
  set_has_jingshangamescene();
  if (jingshangamescene_ == NULL) jingshangamescene_ = new ::proto::game::jingshanmj::tagJSGameScence;
  return jingshangamescene_;
}
inline ::proto::game::jingshanmj::tagJSGameScence* AckGameScene::release_jingshangamescene() {
  clear_has_jingshangamescene();
  ::proto::game::jingshanmj::tagJSGameScence* temp = jingshangamescene_;
  jingshangamescene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_jingshangamescene(::proto::game::jingshanmj::tagJSGameScence* jingshangamescene) {
  delete jingshangamescene_;
  jingshangamescene_ = jingshangamescene;
  if (jingshangamescene) {
    set_has_jingshangamescene();
  } else {
    clear_has_jingshangamescene();
  }
}

// optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
inline bool AckGameScene::has_qionglaimjcustomied() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void AckGameScene::set_has_qionglaimjcustomied() {
  _has_bits_[1] |= 0x02000000u;
}
inline void AckGameScene::clear_has_qionglaimjcustomied() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void AckGameScene::clear_qionglaimjcustomied() {
  if (qionglaimjcustomied_ != NULL) qionglaimjcustomied_->::proto::game::qionglaimj::AckCustomiedInfo::Clear();
  clear_has_qionglaimjcustomied();
}
inline const ::proto::game::qionglaimj::AckCustomiedInfo& AckGameScene::qionglaimjcustomied() const {
  return qionglaimjcustomied_ != NULL ? *qionglaimjcustomied_ : *default_instance_->qionglaimjcustomied_;
}
inline ::proto::game::qionglaimj::AckCustomiedInfo* AckGameScene::mutable_qionglaimjcustomied() {
  set_has_qionglaimjcustomied();
  if (qionglaimjcustomied_ == NULL) qionglaimjcustomied_ = new ::proto::game::qionglaimj::AckCustomiedInfo;
  return qionglaimjcustomied_;
}
inline ::proto::game::qionglaimj::AckCustomiedInfo* AckGameScene::release_qionglaimjcustomied() {
  clear_has_qionglaimjcustomied();
  ::proto::game::qionglaimj::AckCustomiedInfo* temp = qionglaimjcustomied_;
  qionglaimjcustomied_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_qionglaimjcustomied(::proto::game::qionglaimj::AckCustomiedInfo* qionglaimjcustomied) {
  delete qionglaimjcustomied_;
  qionglaimjcustomied_ = qionglaimjcustomied;
  if (qionglaimjcustomied) {
    set_has_qionglaimjcustomied();
  } else {
    clear_has_qionglaimjcustomied();
  }
}

// optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
inline bool AckGameScene::has_guilinzzscene() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void AckGameScene::set_has_guilinzzscene() {
  _has_bits_[1] |= 0x04000000u;
}
inline void AckGameScene::clear_has_guilinzzscene() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void AckGameScene::clear_guilinzzscene() {
  if (guilinzzscene_ != NULL) guilinzzscene_->::proto::game::guilinzzmj::AckCustomiedInfo::Clear();
  clear_has_guilinzzscene();
}
inline const ::proto::game::guilinzzmj::AckCustomiedInfo& AckGameScene::guilinzzscene() const {
  return guilinzzscene_ != NULL ? *guilinzzscene_ : *default_instance_->guilinzzscene_;
}
inline ::proto::game::guilinzzmj::AckCustomiedInfo* AckGameScene::mutable_guilinzzscene() {
  set_has_guilinzzscene();
  if (guilinzzscene_ == NULL) guilinzzscene_ = new ::proto::game::guilinzzmj::AckCustomiedInfo;
  return guilinzzscene_;
}
inline ::proto::game::guilinzzmj::AckCustomiedInfo* AckGameScene::release_guilinzzscene() {
  clear_has_guilinzzscene();
  ::proto::game::guilinzzmj::AckCustomiedInfo* temp = guilinzzscene_;
  guilinzzscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_guilinzzscene(::proto::game::guilinzzmj::AckCustomiedInfo* guilinzzscene) {
  delete guilinzzscene_;
  guilinzzscene_ = guilinzzscene;
  if (guilinzzscene) {
    set_has_guilinzzscene();
  } else {
    clear_has_guilinzzscene();
  }
}

// optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
inline bool AckGameScene::has_yunxiaomjscene() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void AckGameScene::set_has_yunxiaomjscene() {
  _has_bits_[1] |= 0x08000000u;
}
inline void AckGameScene::clear_has_yunxiaomjscene() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void AckGameScene::clear_yunxiaomjscene() {
  if (yunxiaomjscene_ != NULL) yunxiaomjscene_->::proto::game::yunxiaomj::AckCustomiedInfo::Clear();
  clear_has_yunxiaomjscene();
}
inline const ::proto::game::yunxiaomj::AckCustomiedInfo& AckGameScene::yunxiaomjscene() const {
  return yunxiaomjscene_ != NULL ? *yunxiaomjscene_ : *default_instance_->yunxiaomjscene_;
}
inline ::proto::game::yunxiaomj::AckCustomiedInfo* AckGameScene::mutable_yunxiaomjscene() {
  set_has_yunxiaomjscene();
  if (yunxiaomjscene_ == NULL) yunxiaomjscene_ = new ::proto::game::yunxiaomj::AckCustomiedInfo;
  return yunxiaomjscene_;
}
inline ::proto::game::yunxiaomj::AckCustomiedInfo* AckGameScene::release_yunxiaomjscene() {
  clear_has_yunxiaomjscene();
  ::proto::game::yunxiaomj::AckCustomiedInfo* temp = yunxiaomjscene_;
  yunxiaomjscene_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_yunxiaomjscene(::proto::game::yunxiaomj::AckCustomiedInfo* yunxiaomjscene) {
  delete yunxiaomjscene_;
  yunxiaomjscene_ = yunxiaomjscene;
  if (yunxiaomjscene) {
    set_has_yunxiaomjscene();
  } else {
    clear_has_yunxiaomjscene();
  }
}

// optional int32 OpTypeHuType = 61;
inline bool AckGameScene::has_optypehutype() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void AckGameScene::set_has_optypehutype() {
  _has_bits_[1] |= 0x10000000u;
}
inline void AckGameScene::clear_has_optypehutype() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void AckGameScene::clear_optypehutype() {
  optypehutype_ = 0;
  clear_has_optypehutype();
}
inline ::google::protobuf::int32 AckGameScene::optypehutype() const {
  return optypehutype_;
}
inline void AckGameScene::set_optypehutype(::google::protobuf::int32 value) {
  set_has_optypehutype();
  optypehutype_ = value;
}

// -------------------------------------------------------------------

// AckUserReady

// repeated int32 ready = 1;
inline int AckUserReady::ready_size() const {
  return ready_.size();
}
inline void AckUserReady::clear_ready() {
  ready_.Clear();
}
inline ::google::protobuf::int32 AckUserReady::ready(int index) const {
  return ready_.Get(index);
}
inline void AckUserReady::set_ready(int index, ::google::protobuf::int32 value) {
  ready_.Set(index, value);
}
inline void AckUserReady::add_ready(::google::protobuf::int32 value) {
  ready_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserReady::ready() const {
  return ready_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserReady::mutable_ready() {
  return &ready_;
}

// -------------------------------------------------------------------

// AckGameStart

// required int32 ChairID = 1;
inline bool AckGameStart::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStart::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStart::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStart::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckGameStart::chairid() const {
  return chairid_;
}
inline void AckGameStart::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 IsChangBanker = 2;
inline bool AckGameStart::has_ischangbanker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStart::set_has_ischangbanker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStart::clear_has_ischangbanker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStart::clear_ischangbanker() {
  ischangbanker_ = 0;
  clear_has_ischangbanker();
}
inline ::google::protobuf::int32 AckGameStart::ischangbanker() const {
  return ischangbanker_;
}
inline void AckGameStart::set_ischangbanker(::google::protobuf::int32 value) {
  set_has_ischangbanker();
  ischangbanker_ = value;
}

// repeated int32 TouZiInfo = 3;
inline int AckGameStart::touziinfo_size() const {
  return touziinfo_.size();
}
inline void AckGameStart::clear_touziinfo() {
  touziinfo_.Clear();
}
inline ::google::protobuf::int32 AckGameStart::touziinfo(int index) const {
  return touziinfo_.Get(index);
}
inline void AckGameStart::set_touziinfo(int index, ::google::protobuf::int32 value) {
  touziinfo_.Set(index, value);
}
inline void AckGameStart::add_touziinfo(::google::protobuf::int32 value) {
  touziinfo_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameStart::touziinfo() const {
  return touziinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameStart::mutable_touziinfo() {
  return &touziinfo_;
}

// -------------------------------------------------------------------

// AckHorse

// optional int32 chairID = 1;
inline bool AckHorse::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckHorse::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckHorse::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckHorse::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckHorse::chairid() const {
  return chairid_;
}
inline void AckHorse::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 HorseNum = 2;
inline bool AckHorse::has_horsenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckHorse::set_has_horsenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckHorse::clear_has_horsenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckHorse::clear_horsenum() {
  horsenum_ = 0;
  clear_has_horsenum();
}
inline ::google::protobuf::int32 AckHorse::horsenum() const {
  return horsenum_;
}
inline void AckHorse::set_horsenum(::google::protobuf::int32 value) {
  set_has_horsenum();
  horsenum_ = value;
}

// -------------------------------------------------------------------

// AckFirstHandCard

// optional .proto.game.HandCards UserCard = 1;
inline bool AckFirstHandCard::has_usercard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFirstHandCard::set_has_usercard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFirstHandCard::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFirstHandCard::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckFirstHandCard::usercard() const {
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckFirstHandCard::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  return usercard_;
}
inline ::proto::game::HandCards* AckFirstHandCard::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckFirstHandCard::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
}

// repeated int32 HandCardNums = 2;
inline int AckFirstHandCard::handcardnums_size() const {
  return handcardnums_.size();
}
inline void AckFirstHandCard::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 AckFirstHandCard::handcardnums(int index) const {
  return handcardnums_.Get(index);
}
inline void AckFirstHandCard::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
}
inline void AckFirstHandCard::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckFirstHandCard::handcardnums() const {
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckFirstHandCard::mutable_handcardnums() {
  return &handcardnums_;
}

// optional int32 CardNum = 3;
inline bool AckFirstHandCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckFirstHandCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckFirstHandCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckFirstHandCard::clear_cardnum() {
  cardnum_ = 0;
  clear_has_cardnum();
}
inline ::google::protobuf::int32 AckFirstHandCard::cardnum() const {
  return cardnum_;
}
inline void AckFirstHandCard::set_cardnum(::google::protobuf::int32 value) {
  set_has_cardnum();
  cardnum_ = value;
}

// -------------------------------------------------------------------

// HuaPaiInfo

// optional int32 HuaCount = 1;
inline bool HuaPaiInfo::has_huacount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HuaPaiInfo::set_has_huacount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HuaPaiInfo::clear_has_huacount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HuaPaiInfo::clear_huacount() {
  huacount_ = 0;
  clear_has_huacount();
}
inline ::google::protobuf::int32 HuaPaiInfo::huacount() const {
  return huacount_;
}
inline void HuaPaiInfo::set_huacount(::google::protobuf::int32 value) {
  set_has_huacount();
  huacount_ = value;
}

// repeated int32 HuaCard = 2;
inline int HuaPaiInfo::huacard_size() const {
  return huacard_.size();
}
inline void HuaPaiInfo::clear_huacard() {
  huacard_.Clear();
}
inline ::google::protobuf::int32 HuaPaiInfo::huacard(int index) const {
  return huacard_.Get(index);
}
inline void HuaPaiInfo::set_huacard(int index, ::google::protobuf::int32 value) {
  huacard_.Set(index, value);
}
inline void HuaPaiInfo::add_huacard(::google::protobuf::int32 value) {
  huacard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HuaPaiInfo::huacard() const {
  return huacard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HuaPaiInfo::mutable_huacard() {
  return &huacard_;
}

// -------------------------------------------------------------------

// FirstFlowerHandCard

// required .proto.game.HandCards UserCard = 1;
inline bool FirstFlowerHandCard::has_usercard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstFlowerHandCard::set_has_usercard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstFlowerHandCard::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstFlowerHandCard::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& FirstFlowerHandCard::usercard() const {
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* FirstFlowerHandCard::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  return usercard_;
}
inline ::proto::game::HandCards* FirstFlowerHandCard::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void FirstFlowerHandCard::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
}

// repeated int32 HandCardNums = 2;
inline int FirstFlowerHandCard::handcardnums_size() const {
  return handcardnums_.size();
}
inline void FirstFlowerHandCard::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 FirstFlowerHandCard::handcardnums(int index) const {
  return handcardnums_.Get(index);
}
inline void FirstFlowerHandCard::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
}
inline void FirstFlowerHandCard::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FirstFlowerHandCard::handcardnums() const {
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FirstFlowerHandCard::mutable_handcardnums() {
  return &handcardnums_;
}

// repeated .proto.game.HuaPaiInfo HuaPai = 3;
inline int FirstFlowerHandCard::huapai_size() const {
  return huapai_.size();
}
inline void FirstFlowerHandCard::clear_huapai() {
  huapai_.Clear();
}
inline const ::proto::game::HuaPaiInfo& FirstFlowerHandCard::huapai(int index) const {
  return huapai_.Get(index);
}
inline ::proto::game::HuaPaiInfo* FirstFlowerHandCard::mutable_huapai(int index) {
  return huapai_.Mutable(index);
}
inline ::proto::game::HuaPaiInfo* FirstFlowerHandCard::add_huapai() {
  return huapai_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >&
FirstFlowerHandCard::huapai() const {
  return huapai_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >*
FirstFlowerHandCard::mutable_huapai() {
  return &huapai_;
}

// -------------------------------------------------------------------

// GetHuaPai

// optional int32 chairID = 1;
inline bool GetHuaPai::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHuaPai::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHuaPai::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHuaPai::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 GetHuaPai::chairid() const {
  return chairid_;
}
inline void GetHuaPai::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 LeftCardNum = 2;
inline bool GetHuaPai::has_leftcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHuaPai::set_has_leftcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHuaPai::clear_has_leftcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHuaPai::clear_leftcardnum() {
  leftcardnum_ = 0;
  clear_has_leftcardnum();
}
inline ::google::protobuf::int32 GetHuaPai::leftcardnum() const {
  return leftcardnum_;
}
inline void GetHuaPai::set_leftcardnum(::google::protobuf::int32 value) {
  set_has_leftcardnum();
  leftcardnum_ = value;
}

// optional int32 HuaCard = 3;
inline bool GetHuaPai::has_huacard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHuaPai::set_has_huacard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHuaPai::clear_has_huacard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHuaPai::clear_huacard() {
  huacard_ = 0;
  clear_has_huacard();
}
inline ::google::protobuf::int32 GetHuaPai::huacard() const {
  return huacard_;
}
inline void GetHuaPai::set_huacard(::google::protobuf::int32 value) {
  set_has_huacard();
  huacard_ = value;
}

// -------------------------------------------------------------------

// AckEnSureJoker

// optional int32 OpenCard = 1;
inline bool AckEnSureJoker::has_opencard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckEnSureJoker::set_has_opencard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckEnSureJoker::clear_has_opencard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckEnSureJoker::clear_opencard() {
  opencard_ = 0;
  clear_has_opencard();
}
inline ::google::protobuf::int32 AckEnSureJoker::opencard() const {
  return opencard_;
}
inline void AckEnSureJoker::set_opencard(::google::protobuf::int32 value) {
  set_has_opencard();
  opencard_ = value;
}

// optional int32 CurJokerCard = 2;
inline bool AckEnSureJoker::has_curjokercard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckEnSureJoker::set_has_curjokercard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckEnSureJoker::clear_has_curjokercard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckEnSureJoker::clear_curjokercard() {
  curjokercard_ = 0;
  clear_has_curjokercard();
}
inline ::google::protobuf::int32 AckEnSureJoker::curjokercard() const {
  return curjokercard_;
}
inline void AckEnSureJoker::set_curjokercard(::google::protobuf::int32 value) {
  set_has_curjokercard();
  curjokercard_ = value;
}

// optional int32 JokerType = 3;
inline bool AckEnSureJoker::has_jokertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckEnSureJoker::set_has_jokertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckEnSureJoker::clear_has_jokertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckEnSureJoker::clear_jokertype() {
  jokertype_ = 0;
  clear_has_jokertype();
}
inline ::google::protobuf::int32 AckEnSureJoker::jokertype() const {
  return jokertype_;
}
inline void AckEnSureJoker::set_jokertype(::google::protobuf::int32 value) {
  set_has_jokertype();
  jokertype_ = value;
}

// optional int32 CurJokerCard2 = 4;
inline bool AckEnSureJoker::has_curjokercard2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckEnSureJoker::set_has_curjokercard2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckEnSureJoker::clear_has_curjokercard2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckEnSureJoker::clear_curjokercard2() {
  curjokercard2_ = 0;
  clear_has_curjokercard2();
}
inline ::google::protobuf::int32 AckEnSureJoker::curjokercard2() const {
  return curjokercard2_;
}
inline void AckEnSureJoker::set_curjokercard2(::google::protobuf::int32 value) {
  set_has_curjokercard2();
  curjokercard2_ = value;
}

// -------------------------------------------------------------------

// VideoFirstHandCard

// repeated .proto.game.HandCards UserCard = 1;
inline int VideoFirstHandCard::usercard_size() const {
  return usercard_.size();
}
inline void VideoFirstHandCard::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& VideoFirstHandCard::usercard(int index) const {
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* VideoFirstHandCard::mutable_usercard(int index) {
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* VideoFirstHandCard::add_usercard() {
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
VideoFirstHandCard::usercard() const {
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
VideoFirstHandCard::mutable_usercard() {
  return &usercard_;
}

// -------------------------------------------------------------------

// VideoFlowerHandCard

// repeated .proto.game.HandCards UserCard = 1;
inline int VideoFlowerHandCard::usercard_size() const {
  return usercard_.size();
}
inline void VideoFlowerHandCard::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& VideoFlowerHandCard::usercard(int index) const {
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* VideoFlowerHandCard::mutable_usercard(int index) {
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* VideoFlowerHandCard::add_usercard() {
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
VideoFlowerHandCard::usercard() const {
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
VideoFlowerHandCard::mutable_usercard() {
  return &usercard_;
}

// repeated int32 HandCardNums = 2;
inline int VideoFlowerHandCard::handcardnums_size() const {
  return handcardnums_.size();
}
inline void VideoFlowerHandCard::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 VideoFlowerHandCard::handcardnums(int index) const {
  return handcardnums_.Get(index);
}
inline void VideoFlowerHandCard::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
}
inline void VideoFlowerHandCard::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoFlowerHandCard::handcardnums() const {
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoFlowerHandCard::mutable_handcardnums() {
  return &handcardnums_;
}

// repeated .proto.game.HuaPaiInfo HuaPai = 3;
inline int VideoFlowerHandCard::huapai_size() const {
  return huapai_.size();
}
inline void VideoFlowerHandCard::clear_huapai() {
  huapai_.Clear();
}
inline const ::proto::game::HuaPaiInfo& VideoFlowerHandCard::huapai(int index) const {
  return huapai_.Get(index);
}
inline ::proto::game::HuaPaiInfo* VideoFlowerHandCard::mutable_huapai(int index) {
  return huapai_.Mutable(index);
}
inline ::proto::game::HuaPaiInfo* VideoFlowerHandCard::add_huapai() {
  return huapai_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >&
VideoFlowerHandCard::huapai() const {
  return huapai_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HuaPaiInfo >*
VideoFlowerHandCard::mutable_huapai() {
  return &huapai_;
}

// -------------------------------------------------------------------

// AckChangeCard

// required int32 ischange = 1;
inline bool AckChangeCard::has_ischange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckChangeCard::set_has_ischange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckChangeCard::clear_has_ischange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckChangeCard::clear_ischange() {
  ischange_ = 0;
  clear_has_ischange();
}
inline ::google::protobuf::int32 AckChangeCard::ischange() const {
  return ischange_;
}
inline void AckChangeCard::set_ischange(::google::protobuf::int32 value) {
  set_has_ischange();
  ischange_ = value;
}

// repeated int32 Card = 2;
inline int AckChangeCard::card_size() const {
  return card_.size();
}
inline void AckChangeCard::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 AckChangeCard::card(int index) const {
  return card_.Get(index);
}
inline void AckChangeCard::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void AckChangeCard::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckChangeCard::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckChangeCard::mutable_card() {
  return &card_;
}

// repeated int32 oldCard = 3;
inline int AckChangeCard::oldcard_size() const {
  return oldcard_.size();
}
inline void AckChangeCard::clear_oldcard() {
  oldcard_.Clear();
}
inline ::google::protobuf::int32 AckChangeCard::oldcard(int index) const {
  return oldcard_.Get(index);
}
inline void AckChangeCard::set_oldcard(int index, ::google::protobuf::int32 value) {
  oldcard_.Set(index, value);
}
inline void AckChangeCard::add_oldcard(::google::protobuf::int32 value) {
  oldcard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckChangeCard::oldcard() const {
  return oldcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckChangeCard::mutable_oldcard() {
  return &oldcard_;
}

// -------------------------------------------------------------------

// AckUserLackType

// repeated int32 LackType = 1;
inline int AckUserLackType::lacktype_size() const {
  return lacktype_.size();
}
inline void AckUserLackType::clear_lacktype() {
  lacktype_.Clear();
}
inline ::google::protobuf::int32 AckUserLackType::lacktype(int index) const {
  return lacktype_.Get(index);
}
inline void AckUserLackType::set_lacktype(int index, ::google::protobuf::int32 value) {
  lacktype_.Set(index, value);
}
inline void AckUserLackType::add_lacktype(::google::protobuf::int32 value) {
  lacktype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserLackType::lacktype() const {
  return lacktype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserLackType::mutable_lacktype() {
  return &lacktype_;
}

// -------------------------------------------------------------------

// AckUserLackTypeOk

// repeated int32 chairID = 1;
inline int AckUserLackTypeOk::chairid_size() const {
  return chairid_.size();
}
inline void AckUserLackTypeOk::clear_chairid() {
  chairid_.Clear();
}
inline ::google::protobuf::int32 AckUserLackTypeOk::chairid(int index) const {
  return chairid_.Get(index);
}
inline void AckUserLackTypeOk::set_chairid(int index, ::google::protobuf::int32 value) {
  chairid_.Set(index, value);
}
inline void AckUserLackTypeOk::add_chairid(::google::protobuf::int32 value) {
  chairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserLackTypeOk::chairid() const {
  return chairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserLackTypeOk::mutable_chairid() {
  return &chairid_;
}

// repeated int32 isOk = 2;
inline int AckUserLackTypeOk::isok_size() const {
  return isok_.size();
}
inline void AckUserLackTypeOk::clear_isok() {
  isok_.Clear();
}
inline ::google::protobuf::int32 AckUserLackTypeOk::isok(int index) const {
  return isok_.Get(index);
}
inline void AckUserLackTypeOk::set_isok(int index, ::google::protobuf::int32 value) {
  isok_.Set(index, value);
}
inline void AckUserLackTypeOk::add_isok(::google::protobuf::int32 value) {
  isok_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserLackTypeOk::isok() const {
  return isok_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserLackTypeOk::mutable_isok() {
  return &isok_;
}

// -------------------------------------------------------------------

// tagHuInfo

// required int32 Card = 1;
inline bool tagHuInfo::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHuInfo::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHuInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHuInfo::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 tagHuInfo::card() const {
  return card_;
}
inline void tagHuInfo::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// optional int32 LeftNum = 2;
inline bool tagHuInfo::has_leftnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHuInfo::set_has_leftnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHuInfo::clear_has_leftnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHuInfo::clear_leftnum() {
  leftnum_ = 0;
  clear_has_leftnum();
}
inline ::google::protobuf::int32 tagHuInfo::leftnum() const {
  return leftnum_;
}
inline void tagHuInfo::set_leftnum(::google::protobuf::int32 value) {
  set_has_leftnum();
  leftnum_ = value;
}

// optional int32 HuFanNum = 3;
inline bool tagHuInfo::has_hufannum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagHuInfo::set_has_hufannum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagHuInfo::clear_has_hufannum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagHuInfo::clear_hufannum() {
  hufannum_ = 0;
  clear_has_hufannum();
}
inline ::google::protobuf::int32 tagHuInfo::hufannum() const {
  return hufannum_;
}
inline void tagHuInfo::set_hufannum(::google::protobuf::int32 value) {
  set_has_hufannum();
  hufannum_ = value;
}

// -------------------------------------------------------------------

// tagListenInfo

// required int32 OutCard = 1;
inline bool tagListenInfo::has_outcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagListenInfo::set_has_outcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagListenInfo::clear_has_outcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagListenInfo::clear_outcard() {
  outcard_ = 0;
  clear_has_outcard();
}
inline ::google::protobuf::int32 tagListenInfo::outcard() const {
  return outcard_;
}
inline void tagListenInfo::set_outcard(::google::protobuf::int32 value) {
  set_has_outcard();
  outcard_ = value;
}

// repeated .proto.game.tagHuInfo HuInfo = 2;
inline int tagListenInfo::huinfo_size() const {
  return huinfo_.size();
}
inline void tagListenInfo::clear_huinfo() {
  huinfo_.Clear();
}
inline const ::proto::game::tagHuInfo& tagListenInfo::huinfo(int index) const {
  return huinfo_.Get(index);
}
inline ::proto::game::tagHuInfo* tagListenInfo::mutable_huinfo(int index) {
  return huinfo_.Mutable(index);
}
inline ::proto::game::tagHuInfo* tagListenInfo::add_huinfo() {
  return huinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >&
tagListenInfo::huinfo() const {
  return huinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >*
tagListenInfo::mutable_huinfo() {
  return &huinfo_;
}

// -------------------------------------------------------------------

// tagPreGangs

// required int32 OutCard = 1;
inline bool tagPreGangs::has_outcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPreGangs::set_has_outcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPreGangs::clear_has_outcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPreGangs::clear_outcard() {
  outcard_ = 0;
  clear_has_outcard();
}
inline ::google::protobuf::int32 tagPreGangs::outcard() const {
  return outcard_;
}
inline void tagPreGangs::set_outcard(::google::protobuf::int32 value) {
  set_has_outcard();
  outcard_ = value;
}

// repeated int32 GangInfo = 2;
inline int tagPreGangs::ganginfo_size() const {
  return ganginfo_.size();
}
inline void tagPreGangs::clear_ganginfo() {
  ganginfo_.Clear();
}
inline ::google::protobuf::int32 tagPreGangs::ganginfo(int index) const {
  return ganginfo_.Get(index);
}
inline void tagPreGangs::set_ganginfo(int index, ::google::protobuf::int32 value) {
  ganginfo_.Set(index, value);
}
inline void tagPreGangs::add_ganginfo(::google::protobuf::int32 value) {
  ganginfo_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPreGangs::ganginfo() const {
  return ganginfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPreGangs::mutable_ganginfo() {
  return &ganginfo_;
}

// -------------------------------------------------------------------

// AckUserGetCard

// required int32 ChairID = 1;
inline bool AckUserGetCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserGetCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserGetCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserGetCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserGetCard::chairid() const {
  return chairid_;
}
inline void AckUserGetCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 LeftCardNum = 2;
inline bool AckUserGetCard::has_leftcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserGetCard::set_has_leftcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserGetCard::clear_has_leftcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserGetCard::clear_leftcardnum() {
  leftcardnum_ = 0;
  clear_has_leftcardnum();
}
inline ::google::protobuf::int32 AckUserGetCard::leftcardnum() const {
  return leftcardnum_;
}
inline void AckUserGetCard::set_leftcardnum(::google::protobuf::int32 value) {
  set_has_leftcardnum();
  leftcardnum_ = value;
}

// optional int32 Card = 3;
inline bool AckUserGetCard::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckUserGetCard::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckUserGetCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckUserGetCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUserGetCard::card() const {
  return card_;
}
inline void AckUserGetCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// optional int32 OpType = 4;
inline bool AckUserGetCard::has_optype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUserGetCard::set_has_optype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUserGetCard::clear_has_optype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUserGetCard::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckUserGetCard::optype() const {
  return optype_;
}
inline void AckUserGetCard::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// repeated .proto.game.tagGangInfo GangInfo = 5;
inline int AckUserGetCard::ganginfo_size() const {
  return ganginfo_.size();
}
inline void AckUserGetCard::clear_ganginfo() {
  ganginfo_.Clear();
}
inline const ::proto::game::tagGangInfo& AckUserGetCard::ganginfo(int index) const {
  return ganginfo_.Get(index);
}
inline ::proto::game::tagGangInfo* AckUserGetCard::mutable_ganginfo(int index) {
  return ganginfo_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckUserGetCard::add_ganginfo() {
  return ganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckUserGetCard::ganginfo() const {
  return ganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckUserGetCard::mutable_ganginfo() {
  return &ganginfo_;
}

// repeated .proto.game.tagListenInfo ListenInfo = 6;
inline int AckUserGetCard::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckUserGetCard::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckUserGetCard::listeninfo(int index) const {
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::mutable_listeninfo(int index) {
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::add_listeninfo() {
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckUserGetCard::listeninfo() const {
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckUserGetCard::mutable_listeninfo() {
  return &listeninfo_;
}

// optional .proto.game.hunanmj.tagBuZhang bu = 7;
inline bool AckUserGetCard::has_bu() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckUserGetCard::set_has_bu() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckUserGetCard::clear_has_bu() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckUserGetCard::clear_bu() {
  if (bu_ != NULL) bu_->::proto::game::hunanmj::tagBuZhang::Clear();
  clear_has_bu();
}
inline const ::proto::game::hunanmj::tagBuZhang& AckUserGetCard::bu() const {
  return bu_ != NULL ? *bu_ : *default_instance_->bu_;
}
inline ::proto::game::hunanmj::tagBuZhang* AckUserGetCard::mutable_bu() {
  set_has_bu();
  if (bu_ == NULL) bu_ = new ::proto::game::hunanmj::tagBuZhang;
  return bu_;
}
inline ::proto::game::hunanmj::tagBuZhang* AckUserGetCard::release_bu() {
  clear_has_bu();
  ::proto::game::hunanmj::tagBuZhang* temp = bu_;
  bu_ = NULL;
  return temp;
}
inline void AckUserGetCard::set_allocated_bu(::proto::game::hunanmj::tagBuZhang* bu) {
  delete bu_;
  bu_ = bu;
  if (bu) {
    set_has_bu();
  } else {
    clear_has_bu();
  }
}

// optional int32 OpType2 = 8;
inline bool AckUserGetCard::has_optype2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckUserGetCard::set_has_optype2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckUserGetCard::clear_has_optype2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckUserGetCard::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckUserGetCard::optype2() const {
  return optype2_;
}
inline void AckUserGetCard::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
}

// optional int32 fz_type = 9;
inline bool AckUserGetCard::has_fz_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckUserGetCard::set_has_fz_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckUserGetCard::clear_has_fz_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckUserGetCard::clear_fz_type() {
  fz_type_ = 0;
  clear_has_fz_type();
}
inline ::google::protobuf::int32 AckUserGetCard::fz_type() const {
  return fz_type_;
}
inline void AckUserGetCard::set_fz_type(::google::protobuf::int32 value) {
  set_has_fz_type();
  fz_type_ = value;
}

// optional int32 GetCardDir = 10;
inline bool AckUserGetCard::has_getcarddir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AckUserGetCard::set_has_getcarddir() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AckUserGetCard::clear_has_getcarddir() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AckUserGetCard::clear_getcarddir() {
  getcarddir_ = 0;
  clear_has_getcarddir();
}
inline ::google::protobuf::int32 AckUserGetCard::getcarddir() const {
  return getcarddir_;
}
inline void AckUserGetCard::set_getcarddir(::google::protobuf::int32 value) {
  set_has_getcarddir();
  getcarddir_ = value;
}

// repeated .proto.game.tagPreGangs xy_pregang = 11;
inline int AckUserGetCard::xy_pregang_size() const {
  return xy_pregang_.size();
}
inline void AckUserGetCard::clear_xy_pregang() {
  xy_pregang_.Clear();
}
inline const ::proto::game::tagPreGangs& AckUserGetCard::xy_pregang(int index) const {
  return xy_pregang_.Get(index);
}
inline ::proto::game::tagPreGangs* AckUserGetCard::mutable_xy_pregang(int index) {
  return xy_pregang_.Mutable(index);
}
inline ::proto::game::tagPreGangs* AckUserGetCard::add_xy_pregang() {
  return xy_pregang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
AckUserGetCard::xy_pregang() const {
  return xy_pregang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
AckUserGetCard::mutable_xy_pregang() {
  return &xy_pregang_;
}

// optional int32 LockLaizi = 12;
inline bool AckUserGetCard::has_locklaizi() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckUserGetCard::set_has_locklaizi() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckUserGetCard::clear_has_locklaizi() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckUserGetCard::clear_locklaizi() {
  locklaizi_ = 0;
  clear_has_locklaizi();
}
inline ::google::protobuf::int32 AckUserGetCard::locklaizi() const {
  return locklaizi_;
}
inline void AckUserGetCard::set_locklaizi(::google::protobuf::int32 value) {
  set_has_locklaizi();
  locklaizi_ = value;
}

// optional int32 getlaizi = 13;
inline bool AckUserGetCard::has_getlaizi() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckUserGetCard::set_has_getlaizi() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckUserGetCard::clear_has_getlaizi() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckUserGetCard::clear_getlaizi() {
  getlaizi_ = 0;
  clear_has_getlaizi();
}
inline ::google::protobuf::int32 AckUserGetCard::getlaizi() const {
  return getlaizi_;
}
inline void AckUserGetCard::set_getlaizi(::google::protobuf::int32 value) {
  set_has_getlaizi();
  getlaizi_ = value;
}

// optional int32 OpTypeHuType = 15;
inline bool AckUserGetCard::has_optypehutype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckUserGetCard::set_has_optypehutype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckUserGetCard::clear_has_optypehutype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckUserGetCard::clear_optypehutype() {
  optypehutype_ = 0;
  clear_has_optypehutype();
}
inline ::google::protobuf::int32 AckUserGetCard::optypehutype() const {
  return optypehutype_;
}
inline void AckUserGetCard::set_optypehutype(::google::protobuf::int32 value) {
  set_has_optypehutype();
  optypehutype_ = value;
}

// -------------------------------------------------------------------

// tagShowOutCard

// required int32 OutCardLen = 1;
inline bool tagShowOutCard::has_outcardlen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagShowOutCard::set_has_outcardlen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagShowOutCard::clear_has_outcardlen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagShowOutCard::clear_outcardlen() {
  outcardlen_ = 0;
  clear_has_outcardlen();
}
inline ::google::protobuf::int32 tagShowOutCard::outcardlen() const {
  return outcardlen_;
}
inline void tagShowOutCard::set_outcardlen(::google::protobuf::int32 value) {
  set_has_outcardlen();
  outcardlen_ = value;
}

// repeated int32 OutCard = 2;
inline int tagShowOutCard::outcard_size() const {
  return outcard_.size();
}
inline void tagShowOutCard::clear_outcard() {
  outcard_.Clear();
}
inline ::google::protobuf::int32 tagShowOutCard::outcard(int index) const {
  return outcard_.Get(index);
}
inline void tagShowOutCard::set_outcard(int index, ::google::protobuf::int32 value) {
  outcard_.Set(index, value);
}
inline void tagShowOutCard::add_outcard(::google::protobuf::int32 value) {
  outcard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagShowOutCard::outcard() const {
  return outcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagShowOutCard::mutable_outcard() {
  return &outcard_;
}

// -------------------------------------------------------------------

// AckUserOutCard

// required int32 ChairID = 1;
inline bool AckUserOutCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOutCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOutCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOutCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOutCard::chairid() const {
  return chairid_;
}
inline void AckUserOutCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 Card = 2;
inline bool AckUserOutCard::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOutCard::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOutCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOutCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUserOutCard::card() const {
  return card_;
}
inline void AckUserOutCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// repeated .proto.game.tagShowOutCard ShowCard = 3;
inline int AckUserOutCard::showcard_size() const {
  return showcard_.size();
}
inline void AckUserOutCard::clear_showcard() {
  showcard_.Clear();
}
inline const ::proto::game::tagShowOutCard& AckUserOutCard::showcard(int index) const {
  return showcard_.Get(index);
}
inline ::proto::game::tagShowOutCard* AckUserOutCard::mutable_showcard(int index) {
  return showcard_.Mutable(index);
}
inline ::proto::game::tagShowOutCard* AckUserOutCard::add_showcard() {
  return showcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
AckUserOutCard::showcard() const {
  return showcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
AckUserOutCard::mutable_showcard() {
  return &showcard_;
}

// optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
inline bool AckUserOutCard::has_gzoutcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUserOutCard::set_has_gzoutcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUserOutCard::clear_has_gzoutcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUserOutCard::clear_gzoutcard() {
  if (gzoutcard_ != NULL) gzoutcard_->::proto::game::guizhou::tagGuiZhouOutCard::Clear();
  clear_has_gzoutcard();
}
inline const ::proto::game::guizhou::tagGuiZhouOutCard& AckUserOutCard::gzoutcard() const {
  return gzoutcard_ != NULL ? *gzoutcard_ : *default_instance_->gzoutcard_;
}
inline ::proto::game::guizhou::tagGuiZhouOutCard* AckUserOutCard::mutable_gzoutcard() {
  set_has_gzoutcard();
  if (gzoutcard_ == NULL) gzoutcard_ = new ::proto::game::guizhou::tagGuiZhouOutCard;
  return gzoutcard_;
}
inline ::proto::game::guizhou::tagGuiZhouOutCard* AckUserOutCard::release_gzoutcard() {
  clear_has_gzoutcard();
  ::proto::game::guizhou::tagGuiZhouOutCard* temp = gzoutcard_;
  gzoutcard_ = NULL;
  return temp;
}
inline void AckUserOutCard::set_allocated_gzoutcard(::proto::game::guizhou::tagGuiZhouOutCard* gzoutcard) {
  delete gzoutcard_;
  gzoutcard_ = gzoutcard;
  if (gzoutcard) {
    set_has_gzoutcard();
  } else {
    clear_has_gzoutcard();
  }
}

// optional .proto.game.HandCards UserCard = 5;
inline bool AckUserOutCard::has_usercard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckUserOutCard::set_has_usercard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckUserOutCard::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckUserOutCard::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckUserOutCard::usercard() const {
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckUserOutCard::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  return usercard_;
}
inline ::proto::game::HandCards* AckUserOutCard::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckUserOutCard::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
}

// repeated .proto.game.tagListenInfo ListenInfo = 6;
inline int AckUserOutCard::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckUserOutCard::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckUserOutCard::listeninfo(int index) const {
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckUserOutCard::mutable_listeninfo(int index) {
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckUserOutCard::add_listeninfo() {
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckUserOutCard::listeninfo() const {
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckUserOutCard::mutable_listeninfo() {
  return &listeninfo_;
}

// optional int32 da_type = 7;
inline bool AckUserOutCard::has_da_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckUserOutCard::set_has_da_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckUserOutCard::clear_has_da_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckUserOutCard::clear_da_type() {
  da_type_ = 0;
  clear_has_da_type();
}
inline ::google::protobuf::int32 AckUserOutCard::da_type() const {
  return da_type_;
}
inline void AckUserOutCard::set_da_type(::google::protobuf::int32 value) {
  set_has_da_type();
  da_type_ = value;
}

// optional bool DoubleJinFlag = 8;
inline bool AckUserOutCard::has_doublejinflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckUserOutCard::set_has_doublejinflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckUserOutCard::clear_has_doublejinflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckUserOutCard::clear_doublejinflag() {
  doublejinflag_ = false;
  clear_has_doublejinflag();
}
inline bool AckUserOutCard::doublejinflag() const {
  return doublejinflag_;
}
inline void AckUserOutCard::set_doublejinflag(bool value) {
  set_has_doublejinflag();
  doublejinflag_ = value;
}

// optional bool AutoOutFlag = 9;
inline bool AckUserOutCard::has_autooutflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckUserOutCard::set_has_autooutflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckUserOutCard::clear_has_autooutflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckUserOutCard::clear_autooutflag() {
  autooutflag_ = false;
  clear_has_autooutflag();
}
inline bool AckUserOutCard::autooutflag() const {
  return autooutflag_;
}
inline void AckUserOutCard::set_autooutflag(bool value) {
  set_has_autooutflag();
  autooutflag_ = value;
}

// -------------------------------------------------------------------

// AckOpNotify

// required int32 ChairID = 1;
inline bool AckOpNotify::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOpNotify::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOpNotify::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOpNotify::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckOpNotify::chairid() const {
  return chairid_;
}
inline void AckOpNotify::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 OpType = 2;
inline bool AckOpNotify::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOpNotify::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOpNotify::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOpNotify::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckOpNotify::optype() const {
  return optype_;
}
inline void AckOpNotify::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// optional int32 Card = 3;
inline bool AckOpNotify::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckOpNotify::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckOpNotify::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckOpNotify::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckOpNotify::card() const {
  return card_;
}
inline void AckOpNotify::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// repeated .proto.game.tagGangInfo Gang = 4;
inline int AckOpNotify::gang_size() const {
  return gang_.size();
}
inline void AckOpNotify::clear_gang() {
  gang_.Clear();
}
inline const ::proto::game::tagGangInfo& AckOpNotify::gang(int index) const {
  return gang_.Get(index);
}
inline ::proto::game::tagGangInfo* AckOpNotify::mutable_gang(int index) {
  return gang_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckOpNotify::add_gang() {
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckOpNotify::gang() const {
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckOpNotify::mutable_gang() {
  return &gang_;
}

// optional .proto.game.hunanmj.tagBuZhang bu = 5;
inline bool AckOpNotify::has_bu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckOpNotify::set_has_bu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckOpNotify::clear_has_bu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckOpNotify::clear_bu() {
  if (bu_ != NULL) bu_->::proto::game::hunanmj::tagBuZhang::Clear();
  clear_has_bu();
}
inline const ::proto::game::hunanmj::tagBuZhang& AckOpNotify::bu() const {
  return bu_ != NULL ? *bu_ : *default_instance_->bu_;
}
inline ::proto::game::hunanmj::tagBuZhang* AckOpNotify::mutable_bu() {
  set_has_bu();
  if (bu_ == NULL) bu_ = new ::proto::game::hunanmj::tagBuZhang;
  return bu_;
}
inline ::proto::game::hunanmj::tagBuZhang* AckOpNotify::release_bu() {
  clear_has_bu();
  ::proto::game::hunanmj::tagBuZhang* temp = bu_;
  bu_ = NULL;
  return temp;
}
inline void AckOpNotify::set_allocated_bu(::proto::game::hunanmj::tagBuZhang* bu) {
  delete bu_;
  bu_ = bu;
  if (bu) {
    set_has_bu();
  } else {
    clear_has_bu();
  }
}

// optional int32 fz_type = 6;
inline bool AckOpNotify::has_fz_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckOpNotify::set_has_fz_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckOpNotify::clear_has_fz_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckOpNotify::clear_fz_type() {
  fz_type_ = 0;
  clear_has_fz_type();
}
inline ::google::protobuf::int32 AckOpNotify::fz_type() const {
  return fz_type_;
}
inline void AckOpNotify::set_fz_type(::google::protobuf::int32 value) {
  set_has_fz_type();
  fz_type_ = value;
}

// repeated .proto.game.tagPreGangs xy_pregang = 7;
inline int AckOpNotify::xy_pregang_size() const {
  return xy_pregang_.size();
}
inline void AckOpNotify::clear_xy_pregang() {
  xy_pregang_.Clear();
}
inline const ::proto::game::tagPreGangs& AckOpNotify::xy_pregang(int index) const {
  return xy_pregang_.Get(index);
}
inline ::proto::game::tagPreGangs* AckOpNotify::mutable_xy_pregang(int index) {
  return xy_pregang_.Mutable(index);
}
inline ::proto::game::tagPreGangs* AckOpNotify::add_xy_pregang() {
  return xy_pregang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
AckOpNotify::xy_pregang() const {
  return xy_pregang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
AckOpNotify::mutable_xy_pregang() {
  return &xy_pregang_;
}

// optional int32 LockLaizi = 8;
inline bool AckOpNotify::has_locklaizi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckOpNotify::set_has_locklaizi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckOpNotify::clear_has_locklaizi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckOpNotify::clear_locklaizi() {
  locklaizi_ = 0;
  clear_has_locklaizi();
}
inline ::google::protobuf::int32 AckOpNotify::locklaizi() const {
  return locklaizi_;
}
inline void AckOpNotify::set_locklaizi(::google::protobuf::int32 value) {
  set_has_locklaizi();
  locklaizi_ = value;
}

// optional int32 OpTypeHuType = 9;
inline bool AckOpNotify::has_optypehutype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckOpNotify::set_has_optypehutype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckOpNotify::clear_has_optypehutype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckOpNotify::clear_optypehutype() {
  optypehutype_ = 0;
  clear_has_optypehutype();
}
inline ::google::protobuf::int32 AckOpNotify::optypehutype() const {
  return optypehutype_;
}
inline void AckOpNotify::set_optypehutype(::google::protobuf::int32 value) {
  set_has_optypehutype();
  optypehutype_ = value;
}

// -------------------------------------------------------------------

// AckBcOpResult

// required int32 ChairID = 1;
inline bool AckBcOpResult::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBcOpResult::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBcOpResult::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBcOpResult::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckBcOpResult::chairid() const {
  return chairid_;
}
inline void AckBcOpResult::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 OutCardChairID = 2;
inline bool AckBcOpResult::has_outcardchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckBcOpResult::set_has_outcardchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckBcOpResult::clear_has_outcardchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckBcOpResult::clear_outcardchairid() {
  outcardchairid_ = 0;
  clear_has_outcardchairid();
}
inline ::google::protobuf::int32 AckBcOpResult::outcardchairid() const {
  return outcardchairid_;
}
inline void AckBcOpResult::set_outcardchairid(::google::protobuf::int32 value) {
  set_has_outcardchairid();
  outcardchairid_ = value;
}

// optional int32 OpType = 3;
inline bool AckBcOpResult::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckBcOpResult::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckBcOpResult::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckBcOpResult::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckBcOpResult::optype() const {
  return optype_;
}
inline void AckBcOpResult::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// optional int32 Card = 4;
inline bool AckBcOpResult::has_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckBcOpResult::set_has_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckBcOpResult::clear_has_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckBcOpResult::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckBcOpResult::card() const {
  return card_;
}
inline void AckBcOpResult::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// repeated int32 Score = 5;
inline int AckBcOpResult::score_size() const {
  return score_.size();
}
inline void AckBcOpResult::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckBcOpResult::score(int index) const {
  return score_.Get(index);
}
inline void AckBcOpResult::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void AckBcOpResult::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckBcOpResult::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckBcOpResult::mutable_score() {
  return &score_;
}

// optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
inline bool AckBcOpResult::has_gzgang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckBcOpResult::set_has_gzgang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckBcOpResult::clear_has_gzgang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckBcOpResult::clear_gzgang() {
  if (gzgang_ != NULL) gzgang_->::proto::game::guizhou::tagGuiZhouGang::Clear();
  clear_has_gzgang();
}
inline const ::proto::game::guizhou::tagGuiZhouGang& AckBcOpResult::gzgang() const {
  return gzgang_ != NULL ? *gzgang_ : *default_instance_->gzgang_;
}
inline ::proto::game::guizhou::tagGuiZhouGang* AckBcOpResult::mutable_gzgang() {
  set_has_gzgang();
  if (gzgang_ == NULL) gzgang_ = new ::proto::game::guizhou::tagGuiZhouGang;
  return gzgang_;
}
inline ::proto::game::guizhou::tagGuiZhouGang* AckBcOpResult::release_gzgang() {
  clear_has_gzgang();
  ::proto::game::guizhou::tagGuiZhouGang* temp = gzgang_;
  gzgang_ = NULL;
  return temp;
}
inline void AckBcOpResult::set_allocated_gzgang(::proto::game::guizhou::tagGuiZhouGang* gzgang) {
  delete gzgang_;
  gzgang_ = gzgang;
  if (gzgang) {
    set_has_gzgang();
  } else {
    clear_has_gzgang();
  }
}

// optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
inline bool AckBcOpResult::has_gzopresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckBcOpResult::set_has_gzopresult() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckBcOpResult::clear_has_gzopresult() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckBcOpResult::clear_gzopresult() {
  if (gzopresult_ != NULL) gzopresult_->::proto::game::guizhou::tagGuiZhouOpResult::Clear();
  clear_has_gzopresult();
}
inline const ::proto::game::guizhou::tagGuiZhouOpResult& AckBcOpResult::gzopresult() const {
  return gzopresult_ != NULL ? *gzopresult_ : *default_instance_->gzopresult_;
}
inline ::proto::game::guizhou::tagGuiZhouOpResult* AckBcOpResult::mutable_gzopresult() {
  set_has_gzopresult();
  if (gzopresult_ == NULL) gzopresult_ = new ::proto::game::guizhou::tagGuiZhouOpResult;
  return gzopresult_;
}
inline ::proto::game::guizhou::tagGuiZhouOpResult* AckBcOpResult::release_gzopresult() {
  clear_has_gzopresult();
  ::proto::game::guizhou::tagGuiZhouOpResult* temp = gzopresult_;
  gzopresult_ = NULL;
  return temp;
}
inline void AckBcOpResult::set_allocated_gzopresult(::proto::game::guizhou::tagGuiZhouOpResult* gzopresult) {
  delete gzopresult_;
  gzopresult_ = gzopresult;
  if (gzopresult) {
    set_has_gzopresult();
  } else {
    clear_has_gzopresult();
  }
}

// optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
inline bool AckBcOpResult::has_hnopresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckBcOpResult::set_has_hnopresult() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckBcOpResult::clear_has_hnopresult() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckBcOpResult::clear_hnopresult() {
  if (hnopresult_ != NULL) hnopresult_->::proto::game::hunanmj::tagBuZhangOpResult::Clear();
  clear_has_hnopresult();
}
inline const ::proto::game::hunanmj::tagBuZhangOpResult& AckBcOpResult::hnopresult() const {
  return hnopresult_ != NULL ? *hnopresult_ : *default_instance_->hnopresult_;
}
inline ::proto::game::hunanmj::tagBuZhangOpResult* AckBcOpResult::mutable_hnopresult() {
  set_has_hnopresult();
  if (hnopresult_ == NULL) hnopresult_ = new ::proto::game::hunanmj::tagBuZhangOpResult;
  return hnopresult_;
}
inline ::proto::game::hunanmj::tagBuZhangOpResult* AckBcOpResult::release_hnopresult() {
  clear_has_hnopresult();
  ::proto::game::hunanmj::tagBuZhangOpResult* temp = hnopresult_;
  hnopresult_ = NULL;
  return temp;
}
inline void AckBcOpResult::set_allocated_hnopresult(::proto::game::hunanmj::tagBuZhangOpResult* hnopresult) {
  delete hnopresult_;
  hnopresult_ = hnopresult;
  if (hnopresult) {
    set_has_hnopresult();
  } else {
    clear_has_hnopresult();
  }
}

// optional int32 IsQiangganghu = 9;
inline bool AckBcOpResult::has_isqiangganghu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckBcOpResult::set_has_isqiangganghu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckBcOpResult::clear_has_isqiangganghu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckBcOpResult::clear_isqiangganghu() {
  isqiangganghu_ = 0;
  clear_has_isqiangganghu();
}
inline ::google::protobuf::int32 AckBcOpResult::isqiangganghu() const {
  return isqiangganghu_;
}
inline void AckBcOpResult::set_isqiangganghu(::google::protobuf::int32 value) {
  set_has_isqiangganghu();
  isqiangganghu_ = value;
}

// optional int32 OpType2 = 10;
inline bool AckBcOpResult::has_optype2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AckBcOpResult::set_has_optype2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AckBcOpResult::clear_has_optype2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AckBcOpResult::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckBcOpResult::optype2() const {
  return optype2_;
}
inline void AckBcOpResult::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
}

// optional int32 fz_hu_type = 11;
inline bool AckBcOpResult::has_fz_hu_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AckBcOpResult::set_has_fz_hu_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AckBcOpResult::clear_has_fz_hu_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AckBcOpResult::clear_fz_hu_type() {
  fz_hu_type_ = 0;
  clear_has_fz_hu_type();
}
inline ::google::protobuf::int32 AckBcOpResult::fz_hu_type() const {
  return fz_hu_type_;
}
inline void AckBcOpResult::set_fz_hu_type(::google::protobuf::int32 value) {
  set_has_fz_hu_type();
  fz_hu_type_ = value;
}

// optional int32 YunXiaoYouJinType = 12;
inline bool AckBcOpResult::has_yunxiaoyoujintype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckBcOpResult::set_has_yunxiaoyoujintype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckBcOpResult::clear_has_yunxiaoyoujintype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckBcOpResult::clear_yunxiaoyoujintype() {
  yunxiaoyoujintype_ = 0;
  clear_has_yunxiaoyoujintype();
}
inline ::google::protobuf::int32 AckBcOpResult::yunxiaoyoujintype() const {
  return yunxiaoyoujintype_;
}
inline void AckBcOpResult::set_yunxiaoyoujintype(::google::protobuf::int32 value) {
  set_has_yunxiaoyoujintype();
  yunxiaoyoujintype_ = value;
}

// optional bool MingGangFlag = 13;
inline bool AckBcOpResult::has_minggangflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckBcOpResult::set_has_minggangflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckBcOpResult::clear_has_minggangflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckBcOpResult::clear_minggangflag() {
  minggangflag_ = false;
  clear_has_minggangflag();
}
inline bool AckBcOpResult::minggangflag() const {
  return minggangflag_;
}
inline void AckBcOpResult::set_minggangflag(bool value) {
  set_has_minggangflag();
  minggangflag_ = value;
}

// -------------------------------------------------------------------

// AckListenNotify

// required int32 OpType = 1;
inline bool AckListenNotify::has_optype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckListenNotify::set_has_optype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckListenNotify::clear_has_optype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckListenNotify::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckListenNotify::optype() const {
  return optype_;
}
inline void AckListenNotify::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
}

// repeated .proto.game.tagListenInfo ListenInfo = 2;
inline int AckListenNotify::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckListenNotify::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckListenNotify::listeninfo(int index) const {
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::mutable_listeninfo(int index) {
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::add_listeninfo() {
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckListenNotify::listeninfo() const {
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckListenNotify::mutable_listeninfo() {
  return &listeninfo_;
}

// -------------------------------------------------------------------

// AckUserHu

// required int32 HuChairID = 1;
inline bool AckUserHu::has_huchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserHu::set_has_huchairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserHu::clear_has_huchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserHu::clear_huchairid() {
  huchairid_ = 0;
  clear_has_huchairid();
}
inline ::google::protobuf::int32 AckUserHu::huchairid() const {
  return huchairid_;
}
inline void AckUserHu::set_huchairid(::google::protobuf::int32 value) {
  set_has_huchairid();
  huchairid_ = value;
}

// optional int32 PasHuChairID = 2;
inline bool AckUserHu::has_pashuchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserHu::set_has_pashuchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserHu::clear_has_pashuchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserHu::clear_pashuchairid() {
  pashuchairid_ = 0;
  clear_has_pashuchairid();
}
inline ::google::protobuf::int32 AckUserHu::pashuchairid() const {
  return pashuchairid_;
}
inline void AckUserHu::set_pashuchairid(::google::protobuf::int32 value) {
  set_has_pashuchairid();
  pashuchairid_ = value;
}

// repeated int32 Score = 3;
inline int AckUserHu::score_size() const {
  return score_.size();
}
inline void AckUserHu::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckUserHu::score(int index) const {
  return score_.Get(index);
}
inline void AckUserHu::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void AckUserHu::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserHu::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserHu::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// Horse

// optional int32 HorseNum = 1;
inline bool Horse::has_horsenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Horse::set_has_horsenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Horse::clear_has_horsenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Horse::clear_horsenum() {
  horsenum_ = 0;
  clear_has_horsenum();
}
inline ::google::protobuf::int32 Horse::horsenum() const {
  return horsenum_;
}
inline void Horse::set_horsenum(::google::protobuf::int32 value) {
  set_has_horsenum();
  horsenum_ = value;
}

// repeated int32 HorseCard = 2;
inline int Horse::horsecard_size() const {
  return horsecard_.size();
}
inline void Horse::clear_horsecard() {
  horsecard_.Clear();
}
inline ::google::protobuf::int32 Horse::horsecard(int index) const {
  return horsecard_.Get(index);
}
inline void Horse::set_horsecard(int index, ::google::protobuf::int32 value) {
  horsecard_.Set(index, value);
}
inline void Horse::add_horsecard(::google::protobuf::int32 value) {
  horsecard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Horse::horsecard() const {
  return horsecard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Horse::mutable_horsecard() {
  return &horsecard_;
}

// -------------------------------------------------------------------

// UserHorseCard

// optional int32 chairID = 1;
inline bool UserHorseCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserHorseCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserHorseCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserHorseCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 UserHorseCard::chairid() const {
  return chairid_;
}
inline void UserHorseCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 Num = 2;
inline bool UserHorseCard::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserHorseCard::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserHorseCard::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserHorseCard::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 UserHorseCard::num() const {
  return num_;
}
inline void UserHorseCard::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated int32 HorseCard = 3;
inline int UserHorseCard::horsecard_size() const {
  return horsecard_.size();
}
inline void UserHorseCard::clear_horsecard() {
  horsecard_.Clear();
}
inline ::google::protobuf::int32 UserHorseCard::horsecard(int index) const {
  return horsecard_.Get(index);
}
inline void UserHorseCard::set_horsecard(int index, ::google::protobuf::int32 value) {
  horsecard_.Set(index, value);
}
inline void UserHorseCard::add_horsecard(::google::protobuf::int32 value) {
  horsecard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserHorseCard::horsecard() const {
  return horsecard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserHorseCard::mutable_horsecard() {
  return &horsecard_;
}

// optional int32 bValid = 4;
inline bool UserHorseCard::has_bvalid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserHorseCard::set_has_bvalid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserHorseCard::clear_has_bvalid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserHorseCard::clear_bvalid() {
  bvalid_ = 0;
  clear_has_bvalid();
}
inline ::google::protobuf::int32 UserHorseCard::bvalid() const {
  return bvalid_;
}
inline void UserHorseCard::set_bvalid(::google::protobuf::int32 value) {
  set_has_bvalid();
  bvalid_ = value;
}

// -------------------------------------------------------------------

// tagGameEndGang

// optional int32 GangType = 1;
inline bool tagGameEndGang::has_gangtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagGameEndGang::set_has_gangtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagGameEndGang::clear_has_gangtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagGameEndGang::clear_gangtype() {
  gangtype_ = 0;
  clear_has_gangtype();
}
inline ::google::protobuf::int32 tagGameEndGang::gangtype() const {
  return gangtype_;
}
inline void tagGameEndGang::set_gangtype(::google::protobuf::int32 value) {
  set_has_gangtype();
  gangtype_ = value;
}

// optional int32 GangCard = 2;
inline bool tagGameEndGang::has_gangcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagGameEndGang::set_has_gangcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagGameEndGang::clear_has_gangcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagGameEndGang::clear_gangcard() {
  gangcard_ = 0;
  clear_has_gangcard();
}
inline ::google::protobuf::int32 tagGameEndGang::gangcard() const {
  return gangcard_;
}
inline void tagGameEndGang::set_gangcard(::google::protobuf::int32 value) {
  set_has_gangcard();
  gangcard_ = value;
}

// optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
inline bool tagGameEndGang::has_gzgang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagGameEndGang::set_has_gzgang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagGameEndGang::clear_has_gzgang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagGameEndGang::clear_gzgang() {
  if (gzgang_ != NULL) gzgang_->::proto::game::guizhou::tagGuiZhouGang::Clear();
  clear_has_gzgang();
}
inline const ::proto::game::guizhou::tagGuiZhouGang& tagGameEndGang::gzgang() const {
  return gzgang_ != NULL ? *gzgang_ : *default_instance_->gzgang_;
}
inline ::proto::game::guizhou::tagGuiZhouGang* tagGameEndGang::mutable_gzgang() {
  set_has_gzgang();
  if (gzgang_ == NULL) gzgang_ = new ::proto::game::guizhou::tagGuiZhouGang;
  return gzgang_;
}
inline ::proto::game::guizhou::tagGuiZhouGang* tagGameEndGang::release_gzgang() {
  clear_has_gzgang();
  ::proto::game::guizhou::tagGuiZhouGang* temp = gzgang_;
  gzgang_ = NULL;
  return temp;
}
inline void tagGameEndGang::set_allocated_gzgang(::proto::game::guizhou::tagGuiZhouGang* gzgang) {
  delete gzgang_;
  gzgang_ = gzgang;
  if (gzgang) {
    set_has_gzgang();
  } else {
    clear_has_gzgang();
  }
}

// -------------------------------------------------------------------

// tagGameEndInfo

// repeated .proto.game.tagGameEndGang Gang = 1;
inline int tagGameEndInfo::gang_size() const {
  return gang_.size();
}
inline void tagGameEndInfo::clear_gang() {
  gang_.Clear();
}
inline const ::proto::game::tagGameEndGang& tagGameEndInfo::gang(int index) const {
  return gang_.Get(index);
}
inline ::proto::game::tagGameEndGang* tagGameEndInfo::mutable_gang(int index) {
  return gang_.Mutable(index);
}
inline ::proto::game::tagGameEndGang* tagGameEndInfo::add_gang() {
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndGang >&
tagGameEndInfo::gang() const {
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndGang >*
tagGameEndInfo::mutable_gang() {
  return &gang_;
}

// optional int32 EndType = 2;
inline bool tagGameEndInfo::has_endtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagGameEndInfo::set_has_endtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagGameEndInfo::clear_has_endtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagGameEndInfo::clear_endtype() {
  endtype_ = 0;
  clear_has_endtype();
}
inline ::google::protobuf::int32 tagGameEndInfo::endtype() const {
  return endtype_;
}
inline void tagGameEndInfo::set_endtype(::google::protobuf::int32 value) {
  set_has_endtype();
  endtype_ = value;
}

// optional int32 HuCard = 3;
inline bool tagGameEndInfo::has_hucard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagGameEndInfo::set_has_hucard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagGameEndInfo::clear_has_hucard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagGameEndInfo::clear_hucard() {
  hucard_ = 0;
  clear_has_hucard();
}
inline ::google::protobuf::int32 tagGameEndInfo::hucard() const {
  return hucard_;
}
inline void tagGameEndInfo::set_hucard(::google::protobuf::int32 value) {
  set_has_hucard();
  hucard_ = value;
}

// optional int32 BaoTingType = 4;
inline bool tagGameEndInfo::has_baotingtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagGameEndInfo::set_has_baotingtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagGameEndInfo::clear_has_baotingtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagGameEndInfo::clear_baotingtype() {
  baotingtype_ = 0;
  clear_has_baotingtype();
}
inline ::google::protobuf::int32 tagGameEndInfo::baotingtype() const {
  return baotingtype_;
}
inline void tagGameEndInfo::set_baotingtype(::google::protobuf::int32 value) {
  set_has_baotingtype();
  baotingtype_ = value;
}

// optional int32 TotalGangScore = 5;
inline bool tagGameEndInfo::has_totalgangscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagGameEndInfo::set_has_totalgangscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagGameEndInfo::clear_has_totalgangscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagGameEndInfo::clear_totalgangscore() {
  totalgangscore_ = 0;
  clear_has_totalgangscore();
}
inline ::google::protobuf::int32 tagGameEndInfo::totalgangscore() const {
  return totalgangscore_;
}
inline void tagGameEndInfo::set_totalgangscore(::google::protobuf::int32 value) {
  set_has_totalgangscore();
  totalgangscore_ = value;
}

// -------------------------------------------------------------------

// AckGameEnd

// repeated .proto.game.HandCards UserCard = 1;
inline int AckGameEnd::usercard_size() const {
  return usercard_.size();
}
inline void AckGameEnd::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& AckGameEnd::usercard(int index) const {
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* AckGameEnd::mutable_usercard(int index) {
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* AckGameEnd::add_usercard() {
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
AckGameEnd::usercard() const {
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
AckGameEnd::mutable_usercard() {
  return &usercard_;
}

// required int32 HuScore = 2;
inline bool AckGameEnd::has_huscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameEnd::set_has_huscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameEnd::clear_has_huscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameEnd::clear_huscore() {
  huscore_ = 0;
  clear_has_huscore();
}
inline ::google::protobuf::int32 AckGameEnd::huscore() const {
  return huscore_;
}
inline void AckGameEnd::set_huscore(::google::protobuf::int32 value) {
  set_has_huscore();
  huscore_ = value;
}

// optional int32 GangScore = 3;
inline bool AckGameEnd::has_gangscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameEnd::set_has_gangscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameEnd::clear_has_gangscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameEnd::clear_gangscore() {
  gangscore_ = 0;
  clear_has_gangscore();
}
inline ::google::protobuf::int32 AckGameEnd::gangscore() const {
  return gangscore_;
}
inline void AckGameEnd::set_gangscore(::google::protobuf::int32 value) {
  set_has_gangscore();
  gangscore_ = value;
}

// repeated int32 Score = 4;
inline int AckGameEnd::score_size() const {
  return score_.size();
}
inline void AckGameEnd::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::score(int index) const {
  return score_.Get(index);
}
inline void AckGameEnd::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void AckGameEnd::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_score() {
  return &score_;
}

// optional int32 EndState = 5;
inline bool AckGameEnd::has_endstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameEnd::set_has_endstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameEnd::clear_has_endstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameEnd::clear_endstate() {
  endstate_ = 0;
  clear_has_endstate();
}
inline ::google::protobuf::int32 AckGameEnd::endstate() const {
  return endstate_;
}
inline void AckGameEnd::set_endstate(::google::protobuf::int32 value) {
  set_has_endstate();
  endstate_ = value;
}

// repeated int32 isHuazhu = 6;
inline int AckGameEnd::ishuazhu_size() const {
  return ishuazhu_.size();
}
inline void AckGameEnd::clear_ishuazhu() {
  ishuazhu_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::ishuazhu(int index) const {
  return ishuazhu_.Get(index);
}
inline void AckGameEnd::set_ishuazhu(int index, ::google::protobuf::int32 value) {
  ishuazhu_.Set(index, value);
}
inline void AckGameEnd::add_ishuazhu(::google::protobuf::int32 value) {
  ishuazhu_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::ishuazhu() const {
  return ishuazhu_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_ishuazhu() {
  return &ishuazhu_;
}

// repeated int32 HuazhuScore = 7;
inline int AckGameEnd::huazhuscore_size() const {
  return huazhuscore_.size();
}
inline void AckGameEnd::clear_huazhuscore() {
  huazhuscore_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::huazhuscore(int index) const {
  return huazhuscore_.Get(index);
}
inline void AckGameEnd::set_huazhuscore(int index, ::google::protobuf::int32 value) {
  huazhuscore_.Set(index, value);
}
inline void AckGameEnd::add_huazhuscore(::google::protobuf::int32 value) {
  huazhuscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::huazhuscore() const {
  return huazhuscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_huazhuscore() {
  return &huazhuscore_;
}

// repeated int32 isDajiao = 8;
inline int AckGameEnd::isdajiao_size() const {
  return isdajiao_.size();
}
inline void AckGameEnd::clear_isdajiao() {
  isdajiao_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::isdajiao(int index) const {
  return isdajiao_.Get(index);
}
inline void AckGameEnd::set_isdajiao(int index, ::google::protobuf::int32 value) {
  isdajiao_.Set(index, value);
}
inline void AckGameEnd::add_isdajiao(::google::protobuf::int32 value) {
  isdajiao_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::isdajiao() const {
  return isdajiao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_isdajiao() {
  return &isdajiao_;
}

// repeated int32 DajiaoScore = 9;
inline int AckGameEnd::dajiaoscore_size() const {
  return dajiaoscore_.size();
}
inline void AckGameEnd::clear_dajiaoscore() {
  dajiaoscore_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::dajiaoscore(int index) const {
  return dajiaoscore_.Get(index);
}
inline void AckGameEnd::set_dajiaoscore(int index, ::google::protobuf::int32 value) {
  dajiaoscore_.Set(index, value);
}
inline void AckGameEnd::add_dajiaoscore(::google::protobuf::int32 value) {
  dajiaoscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::dajiaoscore() const {
  return dajiaoscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_dajiaoscore() {
  return &dajiaoscore_;
}

// repeated int32 ReturnGangScore = 10;
inline int AckGameEnd::returngangscore_size() const {
  return returngangscore_.size();
}
inline void AckGameEnd::clear_returngangscore() {
  returngangscore_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::returngangscore(int index) const {
  return returngangscore_.Get(index);
}
inline void AckGameEnd::set_returngangscore(int index, ::google::protobuf::int32 value) {
  returngangscore_.Set(index, value);
}
inline void AckGameEnd::add_returngangscore(::google::protobuf::int32 value) {
  returngangscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::returngangscore() const {
  return returngangscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_returngangscore() {
  return &returngangscore_;
}

// repeated int32 HorseScore = 11;
inline int AckGameEnd::horsescore_size() const {
  return horsescore_.size();
}
inline void AckGameEnd::clear_horsescore() {
  horsescore_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::horsescore(int index) const {
  return horsescore_.Get(index);
}
inline void AckGameEnd::set_horsescore(int index, ::google::protobuf::int32 value) {
  horsescore_.Set(index, value);
}
inline void AckGameEnd::add_horsescore(::google::protobuf::int32 value) {
  horsescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::horsescore() const {
  return horsescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_horsescore() {
  return &horsescore_;
}

// optional .proto.game.Horse HorseInfo = 12;
inline bool AckGameEnd::has_horseinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckGameEnd::set_has_horseinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckGameEnd::clear_has_horseinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckGameEnd::clear_horseinfo() {
  if (horseinfo_ != NULL) horseinfo_->::proto::game::Horse::Clear();
  clear_has_horseinfo();
}
inline const ::proto::game::Horse& AckGameEnd::horseinfo() const {
  return horseinfo_ != NULL ? *horseinfo_ : *default_instance_->horseinfo_;
}
inline ::proto::game::Horse* AckGameEnd::mutable_horseinfo() {
  set_has_horseinfo();
  if (horseinfo_ == NULL) horseinfo_ = new ::proto::game::Horse;
  return horseinfo_;
}
inline ::proto::game::Horse* AckGameEnd::release_horseinfo() {
  clear_has_horseinfo();
  ::proto::game::Horse* temp = horseinfo_;
  horseinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_horseinfo(::proto::game::Horse* horseinfo) {
  delete horseinfo_;
  horseinfo_ = horseinfo;
  if (horseinfo) {
    set_has_horseinfo();
  } else {
    clear_has_horseinfo();
  }
}

// repeated .proto.game.UserHorseCard UserHorse = 13;
inline int AckGameEnd::userhorse_size() const {
  return userhorse_.size();
}
inline void AckGameEnd::clear_userhorse() {
  userhorse_.Clear();
}
inline const ::proto::game::UserHorseCard& AckGameEnd::userhorse(int index) const {
  return userhorse_.Get(index);
}
inline ::proto::game::UserHorseCard* AckGameEnd::mutable_userhorse(int index) {
  return userhorse_.Mutable(index);
}
inline ::proto::game::UserHorseCard* AckGameEnd::add_userhorse() {
  return userhorse_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::UserHorseCard >&
AckGameEnd::userhorse() const {
  return userhorse_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::UserHorseCard >*
AckGameEnd::mutable_userhorse() {
  return &userhorse_;
}

// optional int32 HuFanType = 14;
inline bool AckGameEnd::has_hufantype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckGameEnd::set_has_hufantype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckGameEnd::clear_has_hufantype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckGameEnd::clear_hufantype() {
  hufantype_ = 0;
  clear_has_hufantype();
}
inline ::google::protobuf::int32 AckGameEnd::hufantype() const {
  return hufantype_;
}
inline void AckGameEnd::set_hufantype(::google::protobuf::int32 value) {
  set_has_hufantype();
  hufantype_ = value;
}

// optional int32 ZhiGangCount = 15;
inline bool AckGameEnd::has_zhigangcount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AckGameEnd::set_has_zhigangcount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AckGameEnd::clear_has_zhigangcount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AckGameEnd::clear_zhigangcount() {
  zhigangcount_ = 0;
  clear_has_zhigangcount();
}
inline ::google::protobuf::int32 AckGameEnd::zhigangcount() const {
  return zhigangcount_;
}
inline void AckGameEnd::set_zhigangcount(::google::protobuf::int32 value) {
  set_has_zhigangcount();
  zhigangcount_ = value;
}

// optional int32 ZhiGangScore = 16;
inline bool AckGameEnd::has_zhigangscore() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AckGameEnd::set_has_zhigangscore() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AckGameEnd::clear_has_zhigangscore() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AckGameEnd::clear_zhigangscore() {
  zhigangscore_ = 0;
  clear_has_zhigangscore();
}
inline ::google::protobuf::int32 AckGameEnd::zhigangscore() const {
  return zhigangscore_;
}
inline void AckGameEnd::set_zhigangscore(::google::protobuf::int32 value) {
  set_has_zhigangscore();
  zhigangscore_ = value;
}

// optional int32 WanGangCount = 17;
inline bool AckGameEnd::has_wangangcount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AckGameEnd::set_has_wangangcount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AckGameEnd::clear_has_wangangcount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AckGameEnd::clear_wangangcount() {
  wangangcount_ = 0;
  clear_has_wangangcount();
}
inline ::google::protobuf::int32 AckGameEnd::wangangcount() const {
  return wangangcount_;
}
inline void AckGameEnd::set_wangangcount(::google::protobuf::int32 value) {
  set_has_wangangcount();
  wangangcount_ = value;
}

// optional int32 WanGangScore = 18;
inline bool AckGameEnd::has_wangangscore() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AckGameEnd::set_has_wangangscore() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AckGameEnd::clear_has_wangangscore() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AckGameEnd::clear_wangangscore() {
  wangangscore_ = 0;
  clear_has_wangangscore();
}
inline ::google::protobuf::int32 AckGameEnd::wangangscore() const {
  return wangangscore_;
}
inline void AckGameEnd::set_wangangscore(::google::protobuf::int32 value) {
  set_has_wangangscore();
  wangangscore_ = value;
}

// optional int32 AnGangCount = 19;
inline bool AckGameEnd::has_angangcount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AckGameEnd::set_has_angangcount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AckGameEnd::clear_has_angangcount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AckGameEnd::clear_angangcount() {
  angangcount_ = 0;
  clear_has_angangcount();
}
inline ::google::protobuf::int32 AckGameEnd::angangcount() const {
  return angangcount_;
}
inline void AckGameEnd::set_angangcount(::google::protobuf::int32 value) {
  set_has_angangcount();
  angangcount_ = value;
}

// optional int32 AnGangScore = 20;
inline bool AckGameEnd::has_angangscore() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AckGameEnd::set_has_angangscore() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AckGameEnd::clear_has_angangscore() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AckGameEnd::clear_angangscore() {
  angangscore_ = 0;
  clear_has_angangscore();
}
inline ::google::protobuf::int32 AckGameEnd::angangscore() const {
  return angangscore_;
}
inline void AckGameEnd::set_angangscore(::google::protobuf::int32 value) {
  set_has_angangscore();
  angangscore_ = value;
}

// optional int32 DianGangCount = 21;
inline bool AckGameEnd::has_diangangcount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AckGameEnd::set_has_diangangcount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AckGameEnd::clear_has_diangangcount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AckGameEnd::clear_diangangcount() {
  diangangcount_ = 0;
  clear_has_diangangcount();
}
inline ::google::protobuf::int32 AckGameEnd::diangangcount() const {
  return diangangcount_;
}
inline void AckGameEnd::set_diangangcount(::google::protobuf::int32 value) {
  set_has_diangangcount();
  diangangcount_ = value;
}

// optional int32 DianGangScore = 22;
inline bool AckGameEnd::has_diangangscore() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AckGameEnd::set_has_diangangscore() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AckGameEnd::clear_has_diangangscore() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AckGameEnd::clear_diangangscore() {
  diangangscore_ = 0;
  clear_has_diangangscore();
}
inline ::google::protobuf::int32 AckGameEnd::diangangscore() const {
  return diangangscore_;
}
inline void AckGameEnd::set_diangangscore(::google::protobuf::int32 value) {
  set_has_diangangscore();
  diangangscore_ = value;
}

// repeated .proto.game.tagGameEndInfo EndInfo = 23;
inline int AckGameEnd::endinfo_size() const {
  return endinfo_.size();
}
inline void AckGameEnd::clear_endinfo() {
  endinfo_.Clear();
}
inline const ::proto::game::tagGameEndInfo& AckGameEnd::endinfo(int index) const {
  return endinfo_.Get(index);
}
inline ::proto::game::tagGameEndInfo* AckGameEnd::mutable_endinfo(int index) {
  return endinfo_.Mutable(index);
}
inline ::proto::game::tagGameEndInfo* AckGameEnd::add_endinfo() {
  return endinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndInfo >&
AckGameEnd::endinfo() const {
  return endinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGameEndInfo >*
AckGameEnd::mutable_endinfo() {
  return &endinfo_;
}

// optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
inline bool AckGameEnd::has_guizhouendinfo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AckGameEnd::set_has_guizhouendinfo() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AckGameEnd::clear_has_guizhouendinfo() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AckGameEnd::clear_guizhouendinfo() {
  if (guizhouendinfo_ != NULL) guizhouendinfo_->::proto::game::guizhou::tagGuiZhouEndInfo::Clear();
  clear_has_guizhouendinfo();
}
inline const ::proto::game::guizhou::tagGuiZhouEndInfo& AckGameEnd::guizhouendinfo() const {
  return guizhouendinfo_ != NULL ? *guizhouendinfo_ : *default_instance_->guizhouendinfo_;
}
inline ::proto::game::guizhou::tagGuiZhouEndInfo* AckGameEnd::mutable_guizhouendinfo() {
  set_has_guizhouendinfo();
  if (guizhouendinfo_ == NULL) guizhouendinfo_ = new ::proto::game::guizhou::tagGuiZhouEndInfo;
  return guizhouendinfo_;
}
inline ::proto::game::guizhou::tagGuiZhouEndInfo* AckGameEnd::release_guizhouendinfo() {
  clear_has_guizhouendinfo();
  ::proto::game::guizhou::tagGuiZhouEndInfo* temp = guizhouendinfo_;
  guizhouendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_guizhouendinfo(::proto::game::guizhou::tagGuiZhouEndInfo* guizhouendinfo) {
  delete guizhouendinfo_;
  guizhouendinfo_ = guizhouendinfo;
  if (guizhouendinfo) {
    set_has_guizhouendinfo();
  } else {
    clear_has_guizhouendinfo();
  }
}

// optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
inline bool AckGameEnd::has_gdgameendinfo() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AckGameEnd::set_has_gdgameendinfo() {
  _has_bits_[0] |= 0x01000000u;
}
inline void AckGameEnd::clear_has_gdgameendinfo() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void AckGameEnd::clear_gdgameendinfo() {
  if (gdgameendinfo_ != NULL) gdgameendinfo_->::proto::game::gdmahjonggame::gdmjGameEndInfo::Clear();
  clear_has_gdgameendinfo();
}
inline const ::proto::game::gdmahjonggame::gdmjGameEndInfo& AckGameEnd::gdgameendinfo() const {
  return gdgameendinfo_ != NULL ? *gdgameendinfo_ : *default_instance_->gdgameendinfo_;
}
inline ::proto::game::gdmahjonggame::gdmjGameEndInfo* AckGameEnd::mutable_gdgameendinfo() {
  set_has_gdgameendinfo();
  if (gdgameendinfo_ == NULL) gdgameendinfo_ = new ::proto::game::gdmahjonggame::gdmjGameEndInfo;
  return gdgameendinfo_;
}
inline ::proto::game::gdmahjonggame::gdmjGameEndInfo* AckGameEnd::release_gdgameendinfo() {
  clear_has_gdgameendinfo();
  ::proto::game::gdmahjonggame::gdmjGameEndInfo* temp = gdgameendinfo_;
  gdgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_gdgameendinfo(::proto::game::gdmahjonggame::gdmjGameEndInfo* gdgameendinfo) {
  delete gdgameendinfo_;
  gdgameendinfo_ = gdgameendinfo;
  if (gdgameendinfo) {
    set_has_gdgameendinfo();
  } else {
    clear_has_gdgameendinfo();
  }
}

// optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
inline bool AckGameEnd::has_scendinfo() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AckGameEnd::set_has_scendinfo() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AckGameEnd::clear_has_scendinfo() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AckGameEnd::clear_scendinfo() {
  if (scendinfo_ != NULL) scendinfo_->::proto::game::scmj::tagScGameEnd::Clear();
  clear_has_scendinfo();
}
inline const ::proto::game::scmj::tagScGameEnd& AckGameEnd::scendinfo() const {
  return scendinfo_ != NULL ? *scendinfo_ : *default_instance_->scendinfo_;
}
inline ::proto::game::scmj::tagScGameEnd* AckGameEnd::mutable_scendinfo() {
  set_has_scendinfo();
  if (scendinfo_ == NULL) scendinfo_ = new ::proto::game::scmj::tagScGameEnd;
  return scendinfo_;
}
inline ::proto::game::scmj::tagScGameEnd* AckGameEnd::release_scendinfo() {
  clear_has_scendinfo();
  ::proto::game::scmj::tagScGameEnd* temp = scendinfo_;
  scendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_scendinfo(::proto::game::scmj::tagScGameEnd* scendinfo) {
  delete scendinfo_;
  scendinfo_ = scendinfo;
  if (scendinfo) {
    set_has_scendinfo();
  } else {
    clear_has_scendinfo();
  }
}

// optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
inline bool AckGameEnd::has_hngameendinfo() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AckGameEnd::set_has_hngameendinfo() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AckGameEnd::clear_has_hngameendinfo() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AckGameEnd::clear_hngameendinfo() {
  if (hngameendinfo_ != NULL) hngameendinfo_->::proto::game::hnmahjonggame::hnmjGameEndInfo::Clear();
  clear_has_hngameendinfo();
}
inline const ::proto::game::hnmahjonggame::hnmjGameEndInfo& AckGameEnd::hngameendinfo() const {
  return hngameendinfo_ != NULL ? *hngameendinfo_ : *default_instance_->hngameendinfo_;
}
inline ::proto::game::hnmahjonggame::hnmjGameEndInfo* AckGameEnd::mutable_hngameendinfo() {
  set_has_hngameendinfo();
  if (hngameendinfo_ == NULL) hngameendinfo_ = new ::proto::game::hnmahjonggame::hnmjGameEndInfo;
  return hngameendinfo_;
}
inline ::proto::game::hnmahjonggame::hnmjGameEndInfo* AckGameEnd::release_hngameendinfo() {
  clear_has_hngameendinfo();
  ::proto::game::hnmahjonggame::hnmjGameEndInfo* temp = hngameendinfo_;
  hngameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_hngameendinfo(::proto::game::hnmahjonggame::hnmjGameEndInfo* hngameendinfo) {
  delete hngameendinfo_;
  hngameendinfo_ = hngameendinfo;
  if (hngameendinfo) {
    set_has_hngameendinfo();
  } else {
    clear_has_hngameendinfo();
  }
}

// optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
inline bool AckGameEnd::has_hunangameendinfo() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void AckGameEnd::set_has_hunangameendinfo() {
  _has_bits_[0] |= 0x08000000u;
}
inline void AckGameEnd::clear_has_hunangameendinfo() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void AckGameEnd::clear_hunangameendinfo() {
  if (hunangameendinfo_ != NULL) hunangameendinfo_->::proto::game::hunanmj::tagHuNanGameEnd::Clear();
  clear_has_hunangameendinfo();
}
inline const ::proto::game::hunanmj::tagHuNanGameEnd& AckGameEnd::hunangameendinfo() const {
  return hunangameendinfo_ != NULL ? *hunangameendinfo_ : *default_instance_->hunangameendinfo_;
}
inline ::proto::game::hunanmj::tagHuNanGameEnd* AckGameEnd::mutable_hunangameendinfo() {
  set_has_hunangameendinfo();
  if (hunangameendinfo_ == NULL) hunangameendinfo_ = new ::proto::game::hunanmj::tagHuNanGameEnd;
  return hunangameendinfo_;
}
inline ::proto::game::hunanmj::tagHuNanGameEnd* AckGameEnd::release_hunangameendinfo() {
  clear_has_hunangameendinfo();
  ::proto::game::hunanmj::tagHuNanGameEnd* temp = hunangameendinfo_;
  hunangameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_hunangameendinfo(::proto::game::hunanmj::tagHuNanGameEnd* hunangameendinfo) {
  delete hunangameendinfo_;
  hunangameendinfo_ = hunangameendinfo;
  if (hunangameendinfo) {
    set_has_hunangameendinfo();
  } else {
    clear_has_hunangameendinfo();
  }
}

// optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
inline bool AckGameEnd::has_hubeigameend() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AckGameEnd::set_has_hubeigameend() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AckGameEnd::clear_has_hubeigameend() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AckGameEnd::clear_hubeigameend() {
  if (hubeigameend_ != NULL) hubeigameend_->::proto::game::hubeimj::AckhubeiGameEnd::Clear();
  clear_has_hubeigameend();
}
inline const ::proto::game::hubeimj::AckhubeiGameEnd& AckGameEnd::hubeigameend() const {
  return hubeigameend_ != NULL ? *hubeigameend_ : *default_instance_->hubeigameend_;
}
inline ::proto::game::hubeimj::AckhubeiGameEnd* AckGameEnd::mutable_hubeigameend() {
  set_has_hubeigameend();
  if (hubeigameend_ == NULL) hubeigameend_ = new ::proto::game::hubeimj::AckhubeiGameEnd;
  return hubeigameend_;
}
inline ::proto::game::hubeimj::AckhubeiGameEnd* AckGameEnd::release_hubeigameend() {
  clear_has_hubeigameend();
  ::proto::game::hubeimj::AckhubeiGameEnd* temp = hubeigameend_;
  hubeigameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_hubeigameend(::proto::game::hubeimj::AckhubeiGameEnd* hubeigameend) {
  delete hubeigameend_;
  hubeigameend_ = hubeigameend;
  if (hubeigameend) {
    set_has_hubeigameend();
  } else {
    clear_has_hubeigameend();
  }
}

// optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
inline bool AckGameEnd::has_jxgameendinfo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void AckGameEnd::set_has_jxgameendinfo() {
  _has_bits_[0] |= 0x20000000u;
}
inline void AckGameEnd::clear_has_jxgameendinfo() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void AckGameEnd::clear_jxgameendinfo() {
  if (jxgameendinfo_ != NULL) jxgameendinfo_->::proto::game::jxmahjonggame::jxmjGameEndInfo::Clear();
  clear_has_jxgameendinfo();
}
inline const ::proto::game::jxmahjonggame::jxmjGameEndInfo& AckGameEnd::jxgameendinfo() const {
  return jxgameendinfo_ != NULL ? *jxgameendinfo_ : *default_instance_->jxgameendinfo_;
}
inline ::proto::game::jxmahjonggame::jxmjGameEndInfo* AckGameEnd::mutable_jxgameendinfo() {
  set_has_jxgameendinfo();
  if (jxgameendinfo_ == NULL) jxgameendinfo_ = new ::proto::game::jxmahjonggame::jxmjGameEndInfo;
  return jxgameendinfo_;
}
inline ::proto::game::jxmahjonggame::jxmjGameEndInfo* AckGameEnd::release_jxgameendinfo() {
  clear_has_jxgameendinfo();
  ::proto::game::jxmahjonggame::jxmjGameEndInfo* temp = jxgameendinfo_;
  jxgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_jxgameendinfo(::proto::game::jxmahjonggame::jxmjGameEndInfo* jxgameendinfo) {
  delete jxgameendinfo_;
  jxgameendinfo_ = jxgameendinfo;
  if (jxgameendinfo) {
    set_has_jxgameendinfo();
  } else {
    clear_has_jxgameendinfo();
  }
}

// optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
inline bool AckGameEnd::has_phgameendinfo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void AckGameEnd::set_has_phgameendinfo() {
  _has_bits_[0] |= 0x40000000u;
}
inline void AckGameEnd::clear_has_phgameendinfo() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void AckGameEnd::clear_phgameendinfo() {
  if (phgameendinfo_ != NULL) phgameendinfo_->::proto::game::pinghumj::phmjGameEndInfo::Clear();
  clear_has_phgameendinfo();
}
inline const ::proto::game::pinghumj::phmjGameEndInfo& AckGameEnd::phgameendinfo() const {
  return phgameendinfo_ != NULL ? *phgameendinfo_ : *default_instance_->phgameendinfo_;
}
inline ::proto::game::pinghumj::phmjGameEndInfo* AckGameEnd::mutable_phgameendinfo() {
  set_has_phgameendinfo();
  if (phgameendinfo_ == NULL) phgameendinfo_ = new ::proto::game::pinghumj::phmjGameEndInfo;
  return phgameendinfo_;
}
inline ::proto::game::pinghumj::phmjGameEndInfo* AckGameEnd::release_phgameendinfo() {
  clear_has_phgameendinfo();
  ::proto::game::pinghumj::phmjGameEndInfo* temp = phgameendinfo_;
  phgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_phgameendinfo(::proto::game::pinghumj::phmjGameEndInfo* phgameendinfo) {
  delete phgameendinfo_;
  phgameendinfo_ = phgameendinfo;
  if (phgameendinfo) {
    set_has_phgameendinfo();
  } else {
    clear_has_phgameendinfo();
  }
}

// optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
inline bool AckGameEnd::has_gameendinfo() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void AckGameEnd::set_has_gameendinfo() {
  _has_bits_[0] |= 0x80000000u;
}
inline void AckGameEnd::clear_has_gameendinfo() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void AckGameEnd::clear_gameendinfo() {
  if (gameendinfo_ != NULL) gameendinfo_->::proto::game::henanmj::tagGameEnd::Clear();
  clear_has_gameendinfo();
}
inline const ::proto::game::henanmj::tagGameEnd& AckGameEnd::gameendinfo() const {
  return gameendinfo_ != NULL ? *gameendinfo_ : *default_instance_->gameendinfo_;
}
inline ::proto::game::henanmj::tagGameEnd* AckGameEnd::mutable_gameendinfo() {
  set_has_gameendinfo();
  if (gameendinfo_ == NULL) gameendinfo_ = new ::proto::game::henanmj::tagGameEnd;
  return gameendinfo_;
}
inline ::proto::game::henanmj::tagGameEnd* AckGameEnd::release_gameendinfo() {
  clear_has_gameendinfo();
  ::proto::game::henanmj::tagGameEnd* temp = gameendinfo_;
  gameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_gameendinfo(::proto::game::henanmj::tagGameEnd* gameendinfo) {
  delete gameendinfo_;
  gameendinfo_ = gameendinfo;
  if (gameendinfo) {
    set_has_gameendinfo();
  } else {
    clear_has_gameendinfo();
  }
}

// optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
inline bool AckGameEnd::has_sxgameendinfo() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void AckGameEnd::set_has_sxgameendinfo() {
  _has_bits_[1] |= 0x00000001u;
}
inline void AckGameEnd::clear_has_sxgameendinfo() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void AckGameEnd::clear_sxgameendinfo() {
  if (sxgameendinfo_ != NULL) sxgameendinfo_->::proto::game::sxmahjonggame::sxmjGameEndInfo::Clear();
  clear_has_sxgameendinfo();
}
inline const ::proto::game::sxmahjonggame::sxmjGameEndInfo& AckGameEnd::sxgameendinfo() const {
  return sxgameendinfo_ != NULL ? *sxgameendinfo_ : *default_instance_->sxgameendinfo_;
}
inline ::proto::game::sxmahjonggame::sxmjGameEndInfo* AckGameEnd::mutable_sxgameendinfo() {
  set_has_sxgameendinfo();
  if (sxgameendinfo_ == NULL) sxgameendinfo_ = new ::proto::game::sxmahjonggame::sxmjGameEndInfo;
  return sxgameendinfo_;
}
inline ::proto::game::sxmahjonggame::sxmjGameEndInfo* AckGameEnd::release_sxgameendinfo() {
  clear_has_sxgameendinfo();
  ::proto::game::sxmahjonggame::sxmjGameEndInfo* temp = sxgameendinfo_;
  sxgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_sxgameendinfo(::proto::game::sxmahjonggame::sxmjGameEndInfo* sxgameendinfo) {
  delete sxgameendinfo_;
  sxgameendinfo_ = sxgameendinfo;
  if (sxgameendinfo) {
    set_has_sxgameendinfo();
  } else {
    clear_has_sxgameendinfo();
  }
}

// optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
inline bool AckGameEnd::has_jhgameendinfo() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void AckGameEnd::set_has_jhgameendinfo() {
  _has_bits_[1] |= 0x00000002u;
}
inline void AckGameEnd::clear_has_jhgameendinfo() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void AckGameEnd::clear_jhgameendinfo() {
  if (jhgameendinfo_ != NULL) jhgameendinfo_->::proto::game::jhmahjonggame::jhmjGameEndInfo::Clear();
  clear_has_jhgameendinfo();
}
inline const ::proto::game::jhmahjonggame::jhmjGameEndInfo& AckGameEnd::jhgameendinfo() const {
  return jhgameendinfo_ != NULL ? *jhgameendinfo_ : *default_instance_->jhgameendinfo_;
}
inline ::proto::game::jhmahjonggame::jhmjGameEndInfo* AckGameEnd::mutable_jhgameendinfo() {
  set_has_jhgameendinfo();
  if (jhgameendinfo_ == NULL) jhgameendinfo_ = new ::proto::game::jhmahjonggame::jhmjGameEndInfo;
  return jhgameendinfo_;
}
inline ::proto::game::jhmahjonggame::jhmjGameEndInfo* AckGameEnd::release_jhgameendinfo() {
  clear_has_jhgameendinfo();
  ::proto::game::jhmahjonggame::jhmjGameEndInfo* temp = jhgameendinfo_;
  jhgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_jhgameendinfo(::proto::game::jhmahjonggame::jhmjGameEndInfo* jhgameendinfo) {
  delete jhgameendinfo_;
  jhgameendinfo_ = jhgameendinfo;
  if (jhgameendinfo) {
    set_has_jhgameendinfo();
  } else {
    clear_has_jhgameendinfo();
  }
}

// optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
inline bool AckGameEnd::has_fuzhougameend() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void AckGameEnd::set_has_fuzhougameend() {
  _has_bits_[1] |= 0x00000004u;
}
inline void AckGameEnd::clear_has_fuzhougameend() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void AckGameEnd::clear_fuzhougameend() {
  if (fuzhougameend_ != NULL) fuzhougameend_->::proto::game::fuzhoumahjonggame::FZ_GameEnd::Clear();
  clear_has_fuzhougameend();
}
inline const ::proto::game::fuzhoumahjonggame::FZ_GameEnd& AckGameEnd::fuzhougameend() const {
  return fuzhougameend_ != NULL ? *fuzhougameend_ : *default_instance_->fuzhougameend_;
}
inline ::proto::game::fuzhoumahjonggame::FZ_GameEnd* AckGameEnd::mutable_fuzhougameend() {
  set_has_fuzhougameend();
  if (fuzhougameend_ == NULL) fuzhougameend_ = new ::proto::game::fuzhoumahjonggame::FZ_GameEnd;
  return fuzhougameend_;
}
inline ::proto::game::fuzhoumahjonggame::FZ_GameEnd* AckGameEnd::release_fuzhougameend() {
  clear_has_fuzhougameend();
  ::proto::game::fuzhoumahjonggame::FZ_GameEnd* temp = fuzhougameend_;
  fuzhougameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_fuzhougameend(::proto::game::fuzhoumahjonggame::FZ_GameEnd* fuzhougameend) {
  delete fuzhougameend_;
  fuzhougameend_ = fuzhougameend;
  if (fuzhougameend) {
    set_has_fuzhougameend();
  } else {
    clear_has_fuzhougameend();
  }
}

// optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
inline bool AckGameEnd::has_dgkendinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void AckGameEnd::set_has_dgkendinfo() {
  _has_bits_[1] |= 0x00000008u;
}
inline void AckGameEnd::clear_has_dgkendinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void AckGameEnd::clear_dgkendinfo() {
  if (dgkendinfo_ != NULL) dgkendinfo_->::proto::game::dgkmj::tagDgkGameEnd::Clear();
  clear_has_dgkendinfo();
}
inline const ::proto::game::dgkmj::tagDgkGameEnd& AckGameEnd::dgkendinfo() const {
  return dgkendinfo_ != NULL ? *dgkendinfo_ : *default_instance_->dgkendinfo_;
}
inline ::proto::game::dgkmj::tagDgkGameEnd* AckGameEnd::mutable_dgkendinfo() {
  set_has_dgkendinfo();
  if (dgkendinfo_ == NULL) dgkendinfo_ = new ::proto::game::dgkmj::tagDgkGameEnd;
  return dgkendinfo_;
}
inline ::proto::game::dgkmj::tagDgkGameEnd* AckGameEnd::release_dgkendinfo() {
  clear_has_dgkendinfo();
  ::proto::game::dgkmj::tagDgkGameEnd* temp = dgkendinfo_;
  dgkendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_dgkendinfo(::proto::game::dgkmj::tagDgkGameEnd* dgkendinfo) {
  delete dgkendinfo_;
  dgkendinfo_ = dgkendinfo;
  if (dgkendinfo) {
    set_has_dgkendinfo();
  } else {
    clear_has_dgkendinfo();
  }
}

// optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
inline bool AckGameEnd::has_nanninggameendinfo() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void AckGameEnd::set_has_nanninggameendinfo() {
  _has_bits_[1] |= 0x00000010u;
}
inline void AckGameEnd::clear_has_nanninggameendinfo() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void AckGameEnd::clear_nanninggameendinfo() {
  if (nanninggameendinfo_ != NULL) nanninggameendinfo_->::proto::game::nanningmj::tagNanNingGameEnd::Clear();
  clear_has_nanninggameendinfo();
}
inline const ::proto::game::nanningmj::tagNanNingGameEnd& AckGameEnd::nanninggameendinfo() const {
  return nanninggameendinfo_ != NULL ? *nanninggameendinfo_ : *default_instance_->nanninggameendinfo_;
}
inline ::proto::game::nanningmj::tagNanNingGameEnd* AckGameEnd::mutable_nanninggameendinfo() {
  set_has_nanninggameendinfo();
  if (nanninggameendinfo_ == NULL) nanninggameendinfo_ = new ::proto::game::nanningmj::tagNanNingGameEnd;
  return nanninggameendinfo_;
}
inline ::proto::game::nanningmj::tagNanNingGameEnd* AckGameEnd::release_nanninggameendinfo() {
  clear_has_nanninggameendinfo();
  ::proto::game::nanningmj::tagNanNingGameEnd* temp = nanninggameendinfo_;
  nanninggameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_nanninggameendinfo(::proto::game::nanningmj::tagNanNingGameEnd* nanninggameendinfo) {
  delete nanninggameendinfo_;
  nanninggameendinfo_ = nanninggameendinfo;
  if (nanninggameendinfo) {
    set_has_nanninggameendinfo();
  } else {
    clear_has_nanninggameendinfo();
  }
}

// optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
inline bool AckGameEnd::has_nanpinggameend() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void AckGameEnd::set_has_nanpinggameend() {
  _has_bits_[1] |= 0x00000020u;
}
inline void AckGameEnd::clear_has_nanpinggameend() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void AckGameEnd::clear_nanpinggameend() {
  if (nanpinggameend_ != NULL) nanpinggameend_->::proto::game::nanpingmahjonggame::GameEnd::Clear();
  clear_has_nanpinggameend();
}
inline const ::proto::game::nanpingmahjonggame::GameEnd& AckGameEnd::nanpinggameend() const {
  return nanpinggameend_ != NULL ? *nanpinggameend_ : *default_instance_->nanpinggameend_;
}
inline ::proto::game::nanpingmahjonggame::GameEnd* AckGameEnd::mutable_nanpinggameend() {
  set_has_nanpinggameend();
  if (nanpinggameend_ == NULL) nanpinggameend_ = new ::proto::game::nanpingmahjonggame::GameEnd;
  return nanpinggameend_;
}
inline ::proto::game::nanpingmahjonggame::GameEnd* AckGameEnd::release_nanpinggameend() {
  clear_has_nanpinggameend();
  ::proto::game::nanpingmahjonggame::GameEnd* temp = nanpinggameend_;
  nanpinggameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_nanpinggameend(::proto::game::nanpingmahjonggame::GameEnd* nanpinggameend) {
  delete nanpinggameend_;
  nanpinggameend_ = nanpinggameend;
  if (nanpinggameend) {
    set_has_nanpinggameend();
  } else {
    clear_has_nanpinggameend();
  }
}

// optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
inline bool AckGameEnd::has_laibingameendinfo() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void AckGameEnd::set_has_laibingameendinfo() {
  _has_bits_[1] |= 0x00000040u;
}
inline void AckGameEnd::clear_has_laibingameendinfo() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void AckGameEnd::clear_laibingameendinfo() {
  if (laibingameendinfo_ != NULL) laibingameendinfo_->::proto::game::laibinmj::tagLaiBinGameEnd::Clear();
  clear_has_laibingameendinfo();
}
inline const ::proto::game::laibinmj::tagLaiBinGameEnd& AckGameEnd::laibingameendinfo() const {
  return laibingameendinfo_ != NULL ? *laibingameendinfo_ : *default_instance_->laibingameendinfo_;
}
inline ::proto::game::laibinmj::tagLaiBinGameEnd* AckGameEnd::mutable_laibingameendinfo() {
  set_has_laibingameendinfo();
  if (laibingameendinfo_ == NULL) laibingameendinfo_ = new ::proto::game::laibinmj::tagLaiBinGameEnd;
  return laibingameendinfo_;
}
inline ::proto::game::laibinmj::tagLaiBinGameEnd* AckGameEnd::release_laibingameendinfo() {
  clear_has_laibingameendinfo();
  ::proto::game::laibinmj::tagLaiBinGameEnd* temp = laibingameendinfo_;
  laibingameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_laibingameendinfo(::proto::game::laibinmj::tagLaiBinGameEnd* laibingameendinfo) {
  delete laibingameendinfo_;
  laibingameendinfo_ = laibingameendinfo;
  if (laibingameendinfo) {
    set_has_laibingameendinfo();
  } else {
    clear_has_laibingameendinfo();
  }
}

// optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
inline bool AckGameEnd::has_longyangameend() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void AckGameEnd::set_has_longyangameend() {
  _has_bits_[1] |= 0x00000080u;
}
inline void AckGameEnd::clear_has_longyangameend() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void AckGameEnd::clear_longyangameend() {
  if (longyangameend_ != NULL) longyangameend_->::proto::game::longyanmj::LongYanGameend::Clear();
  clear_has_longyangameend();
}
inline const ::proto::game::longyanmj::LongYanGameend& AckGameEnd::longyangameend() const {
  return longyangameend_ != NULL ? *longyangameend_ : *default_instance_->longyangameend_;
}
inline ::proto::game::longyanmj::LongYanGameend* AckGameEnd::mutable_longyangameend() {
  set_has_longyangameend();
  if (longyangameend_ == NULL) longyangameend_ = new ::proto::game::longyanmj::LongYanGameend;
  return longyangameend_;
}
inline ::proto::game::longyanmj::LongYanGameend* AckGameEnd::release_longyangameend() {
  clear_has_longyangameend();
  ::proto::game::longyanmj::LongYanGameend* temp = longyangameend_;
  longyangameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_longyangameend(::proto::game::longyanmj::LongYanGameend* longyangameend) {
  delete longyangameend_;
  longyangameend_ = longyangameend;
  if (longyangameend) {
    set_has_longyangameend();
  } else {
    clear_has_longyangameend();
  }
}

// optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
inline bool AckGameEnd::has_ganzhoucggameend() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void AckGameEnd::set_has_ganzhoucggameend() {
  _has_bits_[1] |= 0x00000100u;
}
inline void AckGameEnd::clear_has_ganzhoucggameend() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void AckGameEnd::clear_ganzhoucggameend() {
  if (ganzhoucggameend_ != NULL) ganzhoucggameend_->::proto::game::ganzhoucg::GanZhoucgGameend::Clear();
  clear_has_ganzhoucggameend();
}
inline const ::proto::game::ganzhoucg::GanZhoucgGameend& AckGameEnd::ganzhoucggameend() const {
  return ganzhoucggameend_ != NULL ? *ganzhoucggameend_ : *default_instance_->ganzhoucggameend_;
}
inline ::proto::game::ganzhoucg::GanZhoucgGameend* AckGameEnd::mutable_ganzhoucggameend() {
  set_has_ganzhoucggameend();
  if (ganzhoucggameend_ == NULL) ganzhoucggameend_ = new ::proto::game::ganzhoucg::GanZhoucgGameend;
  return ganzhoucggameend_;
}
inline ::proto::game::ganzhoucg::GanZhoucgGameend* AckGameEnd::release_ganzhoucggameend() {
  clear_has_ganzhoucggameend();
  ::proto::game::ganzhoucg::GanZhoucgGameend* temp = ganzhoucggameend_;
  ganzhoucggameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_ganzhoucggameend(::proto::game::ganzhoucg::GanZhoucgGameend* ganzhoucggameend) {
  delete ganzhoucggameend_;
  ganzhoucggameend_ = ganzhoucggameend;
  if (ganzhoucggameend) {
    set_has_ganzhoucggameend();
  } else {
    clear_has_ganzhoucggameend();
  }
}

// optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
inline bool AckGameEnd::has_xiangyanggameend() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void AckGameEnd::set_has_xiangyanggameend() {
  _has_bits_[1] |= 0x00000200u;
}
inline void AckGameEnd::clear_has_xiangyanggameend() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void AckGameEnd::clear_xiangyanggameend() {
  if (xiangyanggameend_ != NULL) xiangyanggameend_->::proto::game::xiangyangmj::tagXYGameEnd::Clear();
  clear_has_xiangyanggameend();
}
inline const ::proto::game::xiangyangmj::tagXYGameEnd& AckGameEnd::xiangyanggameend() const {
  return xiangyanggameend_ != NULL ? *xiangyanggameend_ : *default_instance_->xiangyanggameend_;
}
inline ::proto::game::xiangyangmj::tagXYGameEnd* AckGameEnd::mutable_xiangyanggameend() {
  set_has_xiangyanggameend();
  if (xiangyanggameend_ == NULL) xiangyanggameend_ = new ::proto::game::xiangyangmj::tagXYGameEnd;
  return xiangyanggameend_;
}
inline ::proto::game::xiangyangmj::tagXYGameEnd* AckGameEnd::release_xiangyanggameend() {
  clear_has_xiangyanggameend();
  ::proto::game::xiangyangmj::tagXYGameEnd* temp = xiangyanggameend_;
  xiangyanggameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_xiangyanggameend(::proto::game::xiangyangmj::tagXYGameEnd* xiangyanggameend) {
  delete xiangyanggameend_;
  xiangyanggameend_ = xiangyanggameend;
  if (xiangyanggameend) {
    set_has_xiangyanggameend();
  } else {
    clear_has_xiangyanggameend();
  }
}

// optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
inline bool AckGameEnd::has_xixiahuashuigameend() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void AckGameEnd::set_has_xixiahuashuigameend() {
  _has_bits_[1] |= 0x00000400u;
}
inline void AckGameEnd::clear_has_xixiahuashuigameend() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void AckGameEnd::clear_xixiahuashuigameend() {
  if (xixiahuashuigameend_ != NULL) xixiahuashuigameend_->::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd::Clear();
  clear_has_xixiahuashuigameend();
}
inline const ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd& AckGameEnd::xixiahuashuigameend() const {
  return xixiahuashuigameend_ != NULL ? *xixiahuashuigameend_ : *default_instance_->xixiahuashuigameend_;
}
inline ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* AckGameEnd::mutable_xixiahuashuigameend() {
  set_has_xixiahuashuigameend();
  if (xixiahuashuigameend_ == NULL) xixiahuashuigameend_ = new ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd;
  return xixiahuashuigameend_;
}
inline ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* AckGameEnd::release_xixiahuashuigameend() {
  clear_has_xixiahuashuigameend();
  ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* temp = xixiahuashuigameend_;
  xixiahuashuigameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_xixiahuashuigameend(::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd* xixiahuashuigameend) {
  delete xixiahuashuigameend_;
  xixiahuashuigameend_ = xixiahuashuigameend;
  if (xixiahuashuigameend) {
    set_has_xixiahuashuigameend();
  } else {
    clear_has_xixiahuashuigameend();
  }
}

// optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
inline bool AckGameEnd::has_zhenjianggameend() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void AckGameEnd::set_has_zhenjianggameend() {
  _has_bits_[1] |= 0x00000800u;
}
inline void AckGameEnd::clear_has_zhenjianggameend() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void AckGameEnd::clear_zhenjianggameend() {
  if (zhenjianggameend_ != NULL) zhenjianggameend_->::proto::game::zhenjiang::zhenjiangGameEnd::Clear();
  clear_has_zhenjianggameend();
}
inline const ::proto::game::zhenjiang::zhenjiangGameEnd& AckGameEnd::zhenjianggameend() const {
  return zhenjianggameend_ != NULL ? *zhenjianggameend_ : *default_instance_->zhenjianggameend_;
}
inline ::proto::game::zhenjiang::zhenjiangGameEnd* AckGameEnd::mutable_zhenjianggameend() {
  set_has_zhenjianggameend();
  if (zhenjianggameend_ == NULL) zhenjianggameend_ = new ::proto::game::zhenjiang::zhenjiangGameEnd;
  return zhenjianggameend_;
}
inline ::proto::game::zhenjiang::zhenjiangGameEnd* AckGameEnd::release_zhenjianggameend() {
  clear_has_zhenjianggameend();
  ::proto::game::zhenjiang::zhenjiangGameEnd* temp = zhenjianggameend_;
  zhenjianggameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_zhenjianggameend(::proto::game::zhenjiang::zhenjiangGameEnd* zhenjianggameend) {
  delete zhenjianggameend_;
  zhenjianggameend_ = zhenjianggameend;
  if (zhenjianggameend) {
    set_has_zhenjianggameend();
  } else {
    clear_has_zhenjianggameend();
  }
}

// optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
inline bool AckGameEnd::has_qionglaiendinfo() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void AckGameEnd::set_has_qionglaiendinfo() {
  _has_bits_[1] |= 0x00001000u;
}
inline void AckGameEnd::clear_has_qionglaiendinfo() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void AckGameEnd::clear_qionglaiendinfo() {
  if (qionglaiendinfo_ != NULL) qionglaiendinfo_->::proto::game::qionglaimj::tagQiongLaiGameEnd::Clear();
  clear_has_qionglaiendinfo();
}
inline const ::proto::game::qionglaimj::tagQiongLaiGameEnd& AckGameEnd::qionglaiendinfo() const {
  return qionglaiendinfo_ != NULL ? *qionglaiendinfo_ : *default_instance_->qionglaiendinfo_;
}
inline ::proto::game::qionglaimj::tagQiongLaiGameEnd* AckGameEnd::mutable_qionglaiendinfo() {
  set_has_qionglaiendinfo();
  if (qionglaiendinfo_ == NULL) qionglaiendinfo_ = new ::proto::game::qionglaimj::tagQiongLaiGameEnd;
  return qionglaiendinfo_;
}
inline ::proto::game::qionglaimj::tagQiongLaiGameEnd* AckGameEnd::release_qionglaiendinfo() {
  clear_has_qionglaiendinfo();
  ::proto::game::qionglaimj::tagQiongLaiGameEnd* temp = qionglaiendinfo_;
  qionglaiendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_qionglaiendinfo(::proto::game::qionglaimj::tagQiongLaiGameEnd* qionglaiendinfo) {
  delete qionglaiendinfo_;
  qionglaiendinfo_ = qionglaiendinfo;
  if (qionglaiendinfo) {
    set_has_qionglaiendinfo();
  } else {
    clear_has_qionglaiendinfo();
  }
}

// optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
inline bool AckGameEnd::has_anqinggameend() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void AckGameEnd::set_has_anqinggameend() {
  _has_bits_[1] |= 0x00002000u;
}
inline void AckGameEnd::clear_has_anqinggameend() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void AckGameEnd::clear_anqinggameend() {
  if (anqinggameend_ != NULL) anqinggameend_->::proto::game::anqingmj::AnQingGameEnd::Clear();
  clear_has_anqinggameend();
}
inline const ::proto::game::anqingmj::AnQingGameEnd& AckGameEnd::anqinggameend() const {
  return anqinggameend_ != NULL ? *anqinggameend_ : *default_instance_->anqinggameend_;
}
inline ::proto::game::anqingmj::AnQingGameEnd* AckGameEnd::mutable_anqinggameend() {
  set_has_anqinggameend();
  if (anqinggameend_ == NULL) anqinggameend_ = new ::proto::game::anqingmj::AnQingGameEnd;
  return anqinggameend_;
}
inline ::proto::game::anqingmj::AnQingGameEnd* AckGameEnd::release_anqinggameend() {
  clear_has_anqinggameend();
  ::proto::game::anqingmj::AnQingGameEnd* temp = anqinggameend_;
  anqinggameend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_anqinggameend(::proto::game::anqingmj::AnQingGameEnd* anqinggameend) {
  delete anqinggameend_;
  anqinggameend_ = anqinggameend;
  if (anqinggameend) {
    set_has_anqinggameend();
  } else {
    clear_has_anqinggameend();
  }
}

// optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
inline bool AckGameEnd::has_nanchangganeend() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void AckGameEnd::set_has_nanchangganeend() {
  _has_bits_[1] |= 0x00004000u;
}
inline void AckGameEnd::clear_has_nanchangganeend() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void AckGameEnd::clear_nanchangganeend() {
  if (nanchangganeend_ != NULL) nanchangganeend_->::proto::game::nanchang::GameEndNanChang::Clear();
  clear_has_nanchangganeend();
}
inline const ::proto::game::nanchang::GameEndNanChang& AckGameEnd::nanchangganeend() const {
  return nanchangganeend_ != NULL ? *nanchangganeend_ : *default_instance_->nanchangganeend_;
}
inline ::proto::game::nanchang::GameEndNanChang* AckGameEnd::mutable_nanchangganeend() {
  set_has_nanchangganeend();
  if (nanchangganeend_ == NULL) nanchangganeend_ = new ::proto::game::nanchang::GameEndNanChang;
  return nanchangganeend_;
}
inline ::proto::game::nanchang::GameEndNanChang* AckGameEnd::release_nanchangganeend() {
  clear_has_nanchangganeend();
  ::proto::game::nanchang::GameEndNanChang* temp = nanchangganeend_;
  nanchangganeend_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_nanchangganeend(::proto::game::nanchang::GameEndNanChang* nanchangganeend) {
  delete nanchangganeend_;
  nanchangganeend_ = nanchangganeend;
  if (nanchangganeend) {
    set_has_nanchangganeend();
  } else {
    clear_has_nanchangganeend();
  }
}

// optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
inline bool AckGameEnd::has_guilinzzgameendinfo() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void AckGameEnd::set_has_guilinzzgameendinfo() {
  _has_bits_[1] |= 0x00008000u;
}
inline void AckGameEnd::clear_has_guilinzzgameendinfo() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void AckGameEnd::clear_guilinzzgameendinfo() {
  if (guilinzzgameendinfo_ != NULL) guilinzzgameendinfo_->::proto::game::guilinzzmj::tagGuiLinzzGameEnd::Clear();
  clear_has_guilinzzgameendinfo();
}
inline const ::proto::game::guilinzzmj::tagGuiLinzzGameEnd& AckGameEnd::guilinzzgameendinfo() const {
  return guilinzzgameendinfo_ != NULL ? *guilinzzgameendinfo_ : *default_instance_->guilinzzgameendinfo_;
}
inline ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* AckGameEnd::mutable_guilinzzgameendinfo() {
  set_has_guilinzzgameendinfo();
  if (guilinzzgameendinfo_ == NULL) guilinzzgameendinfo_ = new ::proto::game::guilinzzmj::tagGuiLinzzGameEnd;
  return guilinzzgameendinfo_;
}
inline ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* AckGameEnd::release_guilinzzgameendinfo() {
  clear_has_guilinzzgameendinfo();
  ::proto::game::guilinzzmj::tagGuiLinzzGameEnd* temp = guilinzzgameendinfo_;
  guilinzzgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_guilinzzgameendinfo(::proto::game::guilinzzmj::tagGuiLinzzGameEnd* guilinzzgameendinfo) {
  delete guilinzzgameendinfo_;
  guilinzzgameendinfo_ = guilinzzgameendinfo;
  if (guilinzzgameendinfo) {
    set_has_guilinzzgameendinfo();
  } else {
    clear_has_guilinzzgameendinfo();
  }
}

// optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
inline bool AckGameEnd::has_yunxiaomjgameendinfo() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void AckGameEnd::set_has_yunxiaomjgameendinfo() {
  _has_bits_[1] |= 0x00010000u;
}
inline void AckGameEnd::clear_has_yunxiaomjgameendinfo() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void AckGameEnd::clear_yunxiaomjgameendinfo() {
  if (yunxiaomjgameendinfo_ != NULL) yunxiaomjgameendinfo_->::proto::game::yunxiaomj::tagYunXiaomjGameEnd::Clear();
  clear_has_yunxiaomjgameendinfo();
}
inline const ::proto::game::yunxiaomj::tagYunXiaomjGameEnd& AckGameEnd::yunxiaomjgameendinfo() const {
  return yunxiaomjgameendinfo_ != NULL ? *yunxiaomjgameendinfo_ : *default_instance_->yunxiaomjgameendinfo_;
}
inline ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* AckGameEnd::mutable_yunxiaomjgameendinfo() {
  set_has_yunxiaomjgameendinfo();
  if (yunxiaomjgameendinfo_ == NULL) yunxiaomjgameendinfo_ = new ::proto::game::yunxiaomj::tagYunXiaomjGameEnd;
  return yunxiaomjgameendinfo_;
}
inline ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* AckGameEnd::release_yunxiaomjgameendinfo() {
  clear_has_yunxiaomjgameendinfo();
  ::proto::game::yunxiaomj::tagYunXiaomjGameEnd* temp = yunxiaomjgameendinfo_;
  yunxiaomjgameendinfo_ = NULL;
  return temp;
}
inline void AckGameEnd::set_allocated_yunxiaomjgameendinfo(::proto::game::yunxiaomj::tagYunXiaomjGameEnd* yunxiaomjgameendinfo) {
  delete yunxiaomjgameendinfo_;
  yunxiaomjgameendinfo_ = yunxiaomjgameendinfo;
  if (yunxiaomjgameendinfo) {
    set_has_yunxiaomjgameendinfo();
  } else {
    clear_has_yunxiaomjgameendinfo();
  }
}

// -------------------------------------------------------------------

// AckIsAuto

// required int32 ChairID = 1;
inline bool AckIsAuto::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckIsAuto::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckIsAuto::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckIsAuto::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckIsAuto::chairid() const {
  return chairid_;
}
inline void AckIsAuto::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 isAuto = 2;
inline bool AckIsAuto::has_isauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckIsAuto::set_has_isauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckIsAuto::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckIsAuto::clear_isauto() {
  isauto_ = 0;
  clear_has_isauto();
}
inline ::google::protobuf::int32 AckIsAuto::isauto() const {
  return isauto_;
}
inline void AckIsAuto::set_isauto(::google::protobuf::int32 value) {
  set_has_isauto();
  isauto_ = value;
}

// -------------------------------------------------------------------

// AckUpdateUserInfo

// required int32 chairid = 1;
inline bool AckUpdateUserInfo::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateUserInfo::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateUserInfo::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateUserInfo::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::chairid() const {
  return chairid_;
}
inline void AckUpdateUserInfo::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 uid = 2;
inline bool AckUpdateUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateUserInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::uid() const {
  return uid_;
}
inline void AckUpdateUserInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 money = 3;
inline bool AckUpdateUserInfo::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckUpdateUserInfo::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckUpdateUserInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckUpdateUserInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::money() const {
  return money_;
}
inline void AckUpdateUserInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 rmb = 4;
inline bool AckUpdateUserInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUpdateUserInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUpdateUserInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUpdateUserInfo::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::rmb() const {
  return rmb_;
}
inline void AckUpdateUserInfo::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// -------------------------------------------------------------------

// AckPoolMoney

// required int32 money = 1;
inline bool AckPoolMoney::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckPoolMoney::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckPoolMoney::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckPoolMoney::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 AckPoolMoney::money() const {
  return money_;
}
inline void AckPoolMoney::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// AckWinPoolMoney

// repeated int32 winmoney = 1;
inline int AckWinPoolMoney::winmoney_size() const {
  return winmoney_.size();
}
inline void AckWinPoolMoney::clear_winmoney() {
  winmoney_.Clear();
}
inline ::google::protobuf::int32 AckWinPoolMoney::winmoney(int index) const {
  return winmoney_.Get(index);
}
inline void AckWinPoolMoney::set_winmoney(int index, ::google::protobuf::int32 value) {
  winmoney_.Set(index, value);
}
inline void AckWinPoolMoney::add_winmoney(::google::protobuf::int32 value) {
  winmoney_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckWinPoolMoney::winmoney() const {
  return winmoney_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckWinPoolMoney::mutable_winmoney() {
  return &winmoney_;
}

// -------------------------------------------------------------------

// AckGameStartFail

// required int32 vid = 1;
inline bool AckGameStartFail::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStartFail::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStartFail::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStartFail::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 AckGameStartFail::vid() const {
  return vid_;
}
inline void AckGameStartFail::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
}

// optional string roomid = 2;
inline bool AckGameStartFail::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStartFail::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStartFail::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStartFail::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& AckGameStartFail::roomid() const {
  return *roomid_;
}
inline void AckGameStartFail::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckGameStartFail::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckGameStartFail::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckGameStartFail::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  return roomid_;
}
inline ::std::string* AckGameStartFail::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckGameStartFail::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 can_start = 3;
inline bool AckGameStartFail::has_can_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameStartFail::set_has_can_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameStartFail::clear_has_can_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameStartFail::clear_can_start() {
  can_start_ = 0;
  clear_has_can_start();
}
inline ::google::protobuf::int32 AckGameStartFail::can_start() const {
  return can_start_;
}
inline void AckGameStartFail::set_can_start(::google::protobuf::int32 value) {
  set_has_can_start();
  can_start_ = value;
}

// optional int32 code = 4;
inline bool AckGameStartFail::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameStartFail::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameStartFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameStartFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckGameStartFail::code() const {
  return code_;
}
inline void AckGameStartFail::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int32 ts = 5;
inline bool AckGameStartFail::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameStartFail::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameStartFail::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameStartFail::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 AckGameStartFail::ts() const {
  return ts_;
}
inline void AckGameStartFail::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// -------------------------------------------------------------------

// VideoGameEnd

// repeated .proto.game.HandCards UserCard = 1;
inline int VideoGameEnd::usercard_size() const {
  return usercard_.size();
}
inline void VideoGameEnd::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& VideoGameEnd::usercard(int index) const {
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* VideoGameEnd::mutable_usercard(int index) {
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* VideoGameEnd::add_usercard() {
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
VideoGameEnd::usercard() const {
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
VideoGameEnd::mutable_usercard() {
  return &usercard_;
}

// repeated int32 HuScore = 2;
inline int VideoGameEnd::huscore_size() const {
  return huscore_.size();
}
inline void VideoGameEnd::clear_huscore() {
  huscore_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::huscore(int index) const {
  return huscore_.Get(index);
}
inline void VideoGameEnd::set_huscore(int index, ::google::protobuf::int32 value) {
  huscore_.Set(index, value);
}
inline void VideoGameEnd::add_huscore(::google::protobuf::int32 value) {
  huscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::huscore() const {
  return huscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_huscore() {
  return &huscore_;
}

// repeated int32 GangScore = 3;
inline int VideoGameEnd::gangscore_size() const {
  return gangscore_.size();
}
inline void VideoGameEnd::clear_gangscore() {
  gangscore_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::gangscore(int index) const {
  return gangscore_.Get(index);
}
inline void VideoGameEnd::set_gangscore(int index, ::google::protobuf::int32 value) {
  gangscore_.Set(index, value);
}
inline void VideoGameEnd::add_gangscore(::google::protobuf::int32 value) {
  gangscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::gangscore() const {
  return gangscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_gangscore() {
  return &gangscore_;
}

// repeated int32 Score = 4;
inline int VideoGameEnd::score_size() const {
  return score_.size();
}
inline void VideoGameEnd::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::score(int index) const {
  return score_.Get(index);
}
inline void VideoGameEnd::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void VideoGameEnd::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_score() {
  return &score_;
}

// optional int32 EndState = 5;
inline bool VideoGameEnd::has_endstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoGameEnd::set_has_endstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoGameEnd::clear_has_endstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoGameEnd::clear_endstate() {
  endstate_ = 0;
  clear_has_endstate();
}
inline ::google::protobuf::int32 VideoGameEnd::endstate() const {
  return endstate_;
}
inline void VideoGameEnd::set_endstate(::google::protobuf::int32 value) {
  set_has_endstate();
  endstate_ = value;
}

// repeated int32 isHuazhu = 6;
inline int VideoGameEnd::ishuazhu_size() const {
  return ishuazhu_.size();
}
inline void VideoGameEnd::clear_ishuazhu() {
  ishuazhu_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::ishuazhu(int index) const {
  return ishuazhu_.Get(index);
}
inline void VideoGameEnd::set_ishuazhu(int index, ::google::protobuf::int32 value) {
  ishuazhu_.Set(index, value);
}
inline void VideoGameEnd::add_ishuazhu(::google::protobuf::int32 value) {
  ishuazhu_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::ishuazhu() const {
  return ishuazhu_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_ishuazhu() {
  return &ishuazhu_;
}

// repeated int32 HuazhuScore = 7;
inline int VideoGameEnd::huazhuscore_size() const {
  return huazhuscore_.size();
}
inline void VideoGameEnd::clear_huazhuscore() {
  huazhuscore_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::huazhuscore(int index) const {
  return huazhuscore_.Get(index);
}
inline void VideoGameEnd::set_huazhuscore(int index, ::google::protobuf::int32 value) {
  huazhuscore_.Set(index, value);
}
inline void VideoGameEnd::add_huazhuscore(::google::protobuf::int32 value) {
  huazhuscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::huazhuscore() const {
  return huazhuscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_huazhuscore() {
  return &huazhuscore_;
}

// repeated int32 isDajiao = 8;
inline int VideoGameEnd::isdajiao_size() const {
  return isdajiao_.size();
}
inline void VideoGameEnd::clear_isdajiao() {
  isdajiao_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::isdajiao(int index) const {
  return isdajiao_.Get(index);
}
inline void VideoGameEnd::set_isdajiao(int index, ::google::protobuf::int32 value) {
  isdajiao_.Set(index, value);
}
inline void VideoGameEnd::add_isdajiao(::google::protobuf::int32 value) {
  isdajiao_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::isdajiao() const {
  return isdajiao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_isdajiao() {
  return &isdajiao_;
}

// repeated int32 DajiaoScore = 9;
inline int VideoGameEnd::dajiaoscore_size() const {
  return dajiaoscore_.size();
}
inline void VideoGameEnd::clear_dajiaoscore() {
  dajiaoscore_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::dajiaoscore(int index) const {
  return dajiaoscore_.Get(index);
}
inline void VideoGameEnd::set_dajiaoscore(int index, ::google::protobuf::int32 value) {
  dajiaoscore_.Set(index, value);
}
inline void VideoGameEnd::add_dajiaoscore(::google::protobuf::int32 value) {
  dajiaoscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::dajiaoscore() const {
  return dajiaoscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_dajiaoscore() {
  return &dajiaoscore_;
}

// repeated int32 ReturnGangScore = 10;
inline int VideoGameEnd::returngangscore_size() const {
  return returngangscore_.size();
}
inline void VideoGameEnd::clear_returngangscore() {
  returngangscore_.Clear();
}
inline ::google::protobuf::int32 VideoGameEnd::returngangscore(int index) const {
  return returngangscore_.Get(index);
}
inline void VideoGameEnd::set_returngangscore(int index, ::google::protobuf::int32 value) {
  returngangscore_.Set(index, value);
}
inline void VideoGameEnd::add_returngangscore(::google::protobuf::int32 value) {
  returngangscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoGameEnd::returngangscore() const {
  return returngangscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoGameEnd::mutable_returngangscore() {
  return &returngangscore_;
}

// -------------------------------------------------------------------

// AckUpdateTimer

// required int32 ChairID = 1;
inline bool AckUpdateTimer::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateTimer::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateTimer::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateTimer::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUpdateTimer::chairid() const {
  return chairid_;
}
inline void AckUpdateTimer::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 lefttime = 2;
inline bool AckUpdateTimer::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateTimer::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateTimer::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateTimer::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 AckUpdateTimer::lefttime() const {
  return lefttime_;
}
inline void AckUpdateTimer::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// AckDisbandChooseFaild

// required int32 chairid = 1;
inline bool AckDisbandChooseFaild::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandChooseFaild::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandChooseFaild::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandChooseFaild::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckDisbandChooseFaild::chairid() const {
  return chairid_;
}
inline void AckDisbandChooseFaild::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 code = 2;
inline bool AckDisbandChooseFaild::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandChooseFaild::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandChooseFaild::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandChooseFaild::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckDisbandChooseFaild::code() const {
  return code_;
}
inline void AckDisbandChooseFaild::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// AckDisbandApply

// required int32 ApplyChairid = 1;
inline bool AckDisbandApply::has_applychairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandApply::set_has_applychairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandApply::clear_has_applychairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandApply::clear_applychairid() {
  applychairid_ = 0;
  clear_has_applychairid();
}
inline ::google::protobuf::int32 AckDisbandApply::applychairid() const {
  return applychairid_;
}
inline void AckDisbandApply::set_applychairid(::google::protobuf::int32 value) {
  set_has_applychairid();
  applychairid_ = value;
}

// optional int32 Waittime = 2;
inline bool AckDisbandApply::has_waittime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandApply::set_has_waittime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandApply::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandApply::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
inline ::google::protobuf::int32 AckDisbandApply::waittime() const {
  return waittime_;
}
inline void AckDisbandApply::set_waittime(::google::protobuf::int32 value) {
  set_has_waittime();
  waittime_ = value;
}

// repeated int32 onlinechairid = 3;
inline int AckDisbandApply::onlinechairid_size() const {
  return onlinechairid_.size();
}
inline void AckDisbandApply::clear_onlinechairid() {
  onlinechairid_.Clear();
}
inline ::google::protobuf::int32 AckDisbandApply::onlinechairid(int index) const {
  return onlinechairid_.Get(index);
}
inline void AckDisbandApply::set_onlinechairid(int index, ::google::protobuf::int32 value) {
  onlinechairid_.Set(index, value);
}
inline void AckDisbandApply::add_onlinechairid(::google::protobuf::int32 value) {
  onlinechairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckDisbandApply::onlinechairid() const {
  return onlinechairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckDisbandApply::mutable_onlinechairid() {
  return &onlinechairid_;
}

// -------------------------------------------------------------------

// AckDisbandChooseBc

// required int32 chairid = 1;
inline bool AckDisbandChooseBc::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandChooseBc::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandChooseBc::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandChooseBc::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckDisbandChooseBc::chairid() const {
  return chairid_;
}
inline void AckDisbandChooseBc::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 Choosestate = 2;
inline bool AckDisbandChooseBc::has_choosestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandChooseBc::set_has_choosestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandChooseBc::clear_has_choosestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandChooseBc::clear_choosestate() {
  choosestate_ = 0;
  clear_has_choosestate();
}
inline ::google::protobuf::int32 AckDisbandChooseBc::choosestate() const {
  return choosestate_;
}
inline void AckDisbandChooseBc::set_choosestate(::google::protobuf::int32 value) {
  set_has_choosestate();
  choosestate_ = value;
}

// -------------------------------------------------------------------

// AckDisbandResult

// required int32 Result = 1;
inline bool AckDisbandResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckDisbandResult::result() const {
  return result_;
}
inline void AckDisbandResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AckUserOnlineState

// required int32 chairid = 1;
inline bool AckUserOnlineState::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOnlineState::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOnlineState::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOnlineState::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOnlineState::chairid() const {
  return chairid_;
}
inline void AckUserOnlineState::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 state = 2;
inline bool AckUserOnlineState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOnlineState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOnlineState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOnlineState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AckUserOnlineState::state() const {
  return state_;
}
inline void AckUserOnlineState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// AckUserOvertimeState

// required int32 chairid = 1;
inline bool AckUserOvertimeState::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOvertimeState::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOvertimeState::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOvertimeState::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOvertimeState::chairid() const {
  return chairid_;
}
inline void AckUserOvertimeState::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 state = 2;
inline bool AckUserOvertimeState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOvertimeState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOvertimeState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOvertimeState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AckUserOvertimeState::state() const {
  return state_;
}
inline void AckUserOvertimeState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// AckMessage

// optional string message = 1;
inline bool AckMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& AckMessage::message() const {
  return *message_;
}
inline void AckMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void AckMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void AckMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* AckMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OperateWaite

// optional int32 state = 1;
inline bool OperateWaite::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateWaite::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateWaite::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateWaite::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 OperateWaite::state() const {
  return state_;
}
inline void OperateWaite::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ReqCheckHandCards

// optional int32 seatid = 1;
inline bool ReqCheckHandCards::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCheckHandCards::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCheckHandCards::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCheckHandCards::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 ReqCheckHandCards::seatid() const {
  return seatid_;
}
inline void ReqCheckHandCards::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// repeated int32 cards = 2;
inline int ReqCheckHandCards::cards_size() const {
  return cards_.size();
}
inline void ReqCheckHandCards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 ReqCheckHandCards::cards(int index) const {
  return cards_.Get(index);
}
inline void ReqCheckHandCards::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void ReqCheckHandCards::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqCheckHandCards::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqCheckHandCards::mutable_cards() {
  return &cards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::ACTION>() {
  return ::proto::game::ACTION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::STATUS>() {
  return ::proto::game::STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::DISSBAND_ACTION>() {
  return ::proto::game::DISSBAND_ACTION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::OverTimeState>() {
  return ::proto::game::OverTimeState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameproto_2eproto__INCLUDED
