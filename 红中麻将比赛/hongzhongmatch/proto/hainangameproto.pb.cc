// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hainangameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hainangameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace hnmahjonggame {

namespace {

const ::google::protobuf::Descriptor* BaoPaiReackNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaoPaiReackNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* hngamescene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hngamescene_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuaPaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuaPaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* hnmjGameEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hnmjGameEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hainangameproto_2eproto() {
  protobuf_AddDesc_hainangameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hainangameproto.proto");
  GOOGLE_CHECK(file != NULL);
  BaoPaiReackNotice_descriptor_ = file->message_type(0);
  static const int BaoPaiReackNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoPaiReackNotice, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoPaiReackNotice, reachstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoPaiReackNotice, providechairid_),
  };
  BaoPaiReackNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaoPaiReackNotice_descriptor_,
      BaoPaiReackNotice::default_instance_,
      BaoPaiReackNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoPaiReackNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaoPaiReackNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaoPaiReackNotice));
  hngamescene_descriptor_ = file->message_type(1);
  static const int hngamescene_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, huapai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, ishavepiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, piaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, userpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, ispiaoyet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, piaonum_),
  };
  hngamescene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hngamescene_descriptor_,
      hngamescene::default_instance_,
      hngamescene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hngamescene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hngamescene));
  ReqChoosePiao_descriptor_ = file->message_type(2);
  static const int ReqChoosePiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  AckGameStart_descriptor_ = file->message_type(3);
  static const int AckGameStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, quanfeng_),
  };
  AckGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStart_descriptor_,
      AckGameStart::default_instance_,
      AckGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStart));
  AckStartPiao_descriptor_ = file->message_type(4);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  AckBroadPiao_descriptor_ = file->message_type(5);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, userpiao_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
  HuaPaiInfo_descriptor_ = file->message_type(6);
  static const int HuaPaiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacard_),
  };
  HuaPaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuaPaiInfo_descriptor_,
      HuaPaiInfo::default_instance_,
      HuaPaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuaPaiInfo));
  AddFanInfo_descriptor_ = file->message_type(7);
  static const int AddFanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addnum_),
  };
  AddFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFanInfo_descriptor_,
      AddFanInfo::default_instance_,
      AddFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFanInfo));
  FanInfo_descriptor_ = file->message_type(8);
  static const int FanInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, remainbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, addfan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, baopaistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, firstgangcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, flowerbanker_),
  };
  FanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FanInfo_descriptor_,
      FanInfo::default_instance_,
      FanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FanInfo));
  hnmjGameEndInfo_descriptor_ = file->message_type(9);
  static const int hnmjGameEndInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, huapai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, faninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, huapaiscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, piaonum_),
  };
  hnmjGameEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hnmjGameEndInfo_descriptor_,
      hnmjGameEndInfo::default_instance_,
      hnmjGameEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hnmjGameEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hnmjGameEndInfo));
  ReordInfo_descriptor_ = file->message_type(10);
  static const int ReordInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, minggang_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, angang_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, dianpao_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, jiepao_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, zimo_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(11);
  static const int GameEndRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hainangameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaoPaiReackNotice_descriptor_, &BaoPaiReackNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hngamescene_descriptor_, &hngamescene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStart_descriptor_, &AckGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuaPaiInfo_descriptor_, &HuaPaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFanInfo_descriptor_, &AddFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FanInfo_descriptor_, &FanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hnmjGameEndInfo_descriptor_, &hnmjGameEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hainangameproto_2eproto() {
  delete BaoPaiReackNotice::default_instance_;
  delete BaoPaiReackNotice_reflection_;
  delete hngamescene::default_instance_;
  delete hngamescene_reflection_;
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete AckGameStart::default_instance_;
  delete AckGameStart_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
  delete HuaPaiInfo::default_instance_;
  delete HuaPaiInfo_reflection_;
  delete AddFanInfo::default_instance_;
  delete AddFanInfo_reflection_;
  delete FanInfo::default_instance_;
  delete FanInfo_reflection_;
  delete hnmjGameEndInfo::default_instance_;
  delete hnmjGameEndInfo_reflection_;
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
}

void protobuf_AddDesc_hainangameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025hainangameproto.proto\022\030proto.game.hnma"
    "hjonggame\"P\n\021BaoPaiReackNotice\022\017\n\007chairI"
    "D\030\001 \001(\005\022\022\n\nReachState\030\002 \001(\005\022\026\n\016ProvideCh"
    "airID\030\003 \001(\005\"\261\001\n\013hngamescene\0224\n\006HuaPai\030\001 "
    "\003(\0132$.proto.game.hnmahjonggame.HuaPaiInf"
    "o\022\022\n\nisHavePiao\030\002 \001(\005\022\020\n\010piaoTime\030\003 \001(\005\022"
    "\020\n\010UserPiao\030\004 \003(\005\022\021\n\tIsPiaoyet\030\005 \001(\005\022\020\n\010"
    "roomType\030\006 \001(\005\022\017\n\007piaoNum\030\007 \003(\005\" \n\rReqCh"
    "oosePiao\022\017\n\007PiaoNum\030\001 \001(\005\"2\n\014AckGameStar"
    "t\022\020\n\010bankerid\030\001 \002(\005\022\020\n\010quanfeng\030\002 \001(\005\"\037\n"
    "\014AckStartPiao\022\017\n\007piaoNum\030\001 \003(\005\"1\n\014AckBro"
    "adPiao\022\017\n\007chariid\030\001 \001(\005\022\020\n\010UserPiao\030\002 \001("
    "\005\"/\n\nHuaPaiInfo\022\020\n\010HuaCount\030\001 \001(\005\022\017\n\007Hua"
    "Card\030\002 \003(\005\"-\n\nAddFanInfo\022\017\n\007AddType\030\001 \001("
    "\005\022\016\n\006AddNum\030\002 \001(\005\"\357\001\n\007FanInfo\022\017\n\007chairID"
    "\030\001 \001(\005\022\024\n\014remainBanker\030\002 \001(\005\022\017\n\007EndType\030"
    "\003 \001(\005\022\023\n\013SpecialType\030\004 \001(\005\022\017\n\007FanType\030\005 "
    "\001(\005\022\016\n\006FanNum\030\006 \001(\005\0224\n\006addfan\030\007 \003(\0132$.pr"
    "oto.game.hnmahjonggame.AddFanInfo\022\023\n\013Bao"
    "PaiState\030\010 \001(\005\022\025\n\rFirstGangCard\030\t \001(\005\022\024\n"
    "\014flowerBanker\030\n \001(\005\"\262\001\n\017hnmjGameEndInfo\022"
    "4\n\006HuaPai\030\001 \003(\0132$.proto.game.hnmahjongga"
    "me.HuaPaiInfo\0222\n\007faninfo\030\002 \003(\0132!.proto.g"
    "ame.hnmahjonggame.FanInfo\022\023\n\013HuaPaiScore"
    "\030\003 \003(\005\022\017\n\007HuScore\030\004 \003(\005\022\017\n\007piaoNum\030\005 \003(\005"
    "\"\204\001\n\tReordInfo\022\024\n\014minggang_num\030\001 \001(\005\022\022\n\n"
    "angang_num\030\002 \001(\005\022\023\n\013dianpao_num\030\003 \001(\005\022\022\n"
    "\njiepao_num\030\004 \001(\005\022\020\n\010zimo_num\030\005 \001(\005\022\022\n\nt"
    "otalscore\030\006 \001(\005\"\221\001\n\rGameEndRecord\022;\n\016Use"
    "rRecoreInfo\030\001 \003(\0132#.proto.game.hnmahjong"
    "game.ReordInfo\022\027\n\017MostDianPaoUser\030\002 \003(\005\022"
    "\030\n\020MostWinScoreUser\030\003 \003(\005\022\020\n\010DataTime\030\004 "
    "\001(\005", 1283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hainangameproto.proto", &protobuf_RegisterTypes);
  BaoPaiReackNotice::default_instance_ = new BaoPaiReackNotice();
  hngamescene::default_instance_ = new hngamescene();
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  AckGameStart::default_instance_ = new AckGameStart();
  AckStartPiao::default_instance_ = new AckStartPiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  HuaPaiInfo::default_instance_ = new HuaPaiInfo();
  AddFanInfo::default_instance_ = new AddFanInfo();
  FanInfo::default_instance_ = new FanInfo();
  hnmjGameEndInfo::default_instance_ = new hnmjGameEndInfo();
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  BaoPaiReackNotice::default_instance_->InitAsDefaultInstance();
  hngamescene::default_instance_->InitAsDefaultInstance();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  AckGameStart::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  HuaPaiInfo::default_instance_->InitAsDefaultInstance();
  AddFanInfo::default_instance_->InitAsDefaultInstance();
  FanInfo::default_instance_->InitAsDefaultInstance();
  hnmjGameEndInfo::default_instance_->InitAsDefaultInstance();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hainangameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hainangameproto_2eproto {
  StaticDescriptorInitializer_hainangameproto_2eproto() {
    protobuf_AddDesc_hainangameproto_2eproto();
  }
} static_descriptor_initializer_hainangameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BaoPaiReackNotice::kChairIDFieldNumber;
const int BaoPaiReackNotice::kReachStateFieldNumber;
const int BaoPaiReackNotice::kProvideChairIDFieldNumber;
#endif  // !_MSC_VER

BaoPaiReackNotice::BaoPaiReackNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaoPaiReackNotice::InitAsDefaultInstance() {
}

BaoPaiReackNotice::BaoPaiReackNotice(const BaoPaiReackNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaoPaiReackNotice::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  reachstate_ = 0;
  providechairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaoPaiReackNotice::~BaoPaiReackNotice() {
  SharedDtor();
}

void BaoPaiReackNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaoPaiReackNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaoPaiReackNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaoPaiReackNotice_descriptor_;
}

const BaoPaiReackNotice& BaoPaiReackNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

BaoPaiReackNotice* BaoPaiReackNotice::default_instance_ = NULL;

BaoPaiReackNotice* BaoPaiReackNotice::New() const {
  return new BaoPaiReackNotice;
}

void BaoPaiReackNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    reachstate_ = 0;
    providechairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaoPaiReackNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReachState;
        break;
      }

      // optional int32 ReachState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReachState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reachstate_)));
          set_has_reachstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ProvideChairID;
        break;
      }

      // optional int32 ProvideChairID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProvideChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &providechairid_)));
          set_has_providechairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaoPaiReackNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 ReachState = 2;
  if (has_reachstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reachstate(), output);
  }

  // optional int32 ProvideChairID = 3;
  if (has_providechairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->providechairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaoPaiReackNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 ReachState = 2;
  if (has_reachstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reachstate(), target);
  }

  // optional int32 ProvideChairID = 3;
  if (has_providechairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->providechairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaoPaiReackNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 ReachState = 2;
    if (has_reachstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reachstate());
    }

    // optional int32 ProvideChairID = 3;
    if (has_providechairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->providechairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaoPaiReackNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaoPaiReackNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaoPaiReackNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaoPaiReackNotice::MergeFrom(const BaoPaiReackNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_reachstate()) {
      set_reachstate(from.reachstate());
    }
    if (from.has_providechairid()) {
      set_providechairid(from.providechairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaoPaiReackNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaoPaiReackNotice::CopyFrom(const BaoPaiReackNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaoPaiReackNotice::IsInitialized() const {

  return true;
}

void BaoPaiReackNotice::Swap(BaoPaiReackNotice* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(reachstate_, other->reachstate_);
    std::swap(providechairid_, other->providechairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaoPaiReackNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaoPaiReackNotice_descriptor_;
  metadata.reflection = BaoPaiReackNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hngamescene::kHuaPaiFieldNumber;
const int hngamescene::kIsHavePiaoFieldNumber;
const int hngamescene::kPiaoTimeFieldNumber;
const int hngamescene::kUserPiaoFieldNumber;
const int hngamescene::kIsPiaoyetFieldNumber;
const int hngamescene::kRoomTypeFieldNumber;
const int hngamescene::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

hngamescene::hngamescene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hngamescene::InitAsDefaultInstance() {
}

hngamescene::hngamescene(const hngamescene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hngamescene::SharedCtor() {
  _cached_size_ = 0;
  ishavepiao_ = 0;
  piaotime_ = 0;
  ispiaoyet_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hngamescene::~hngamescene() {
  SharedDtor();
}

void hngamescene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hngamescene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hngamescene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hngamescene_descriptor_;
}

const hngamescene& hngamescene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

hngamescene* hngamescene::default_instance_ = NULL;

hngamescene* hngamescene::New() const {
  return new hngamescene;
}

void hngamescene::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ishavepiao_ = 0;
    piaotime_ = 0;
    ispiaoyet_ = 0;
    roomtype_ = 0;
  }
  huapai_.Clear();
  userpiao_.Clear();
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hngamescene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HuaPai;
        if (input->ExpectTag(16)) goto parse_isHavePiao;
        break;
      }

      // optional int32 isHavePiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHavePiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishavepiao_)));
          set_has_ishavepiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaoTime;
        break;
      }

      // optional int32 piaoTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaotime_)));
          set_has_piaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserPiao;
        break;
      }

      // repeated int32 UserPiao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_userpiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserPiao;
        if (input->ExpectTag(40)) goto parse_IsPiaoyet;
        break;
      }

      // optional int32 IsPiaoyet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPiaoyet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispiaoyet_)));
          set_has_ispiaoyet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piaoNum;
        break;
      }

      // repeated int32 piaoNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hngamescene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huapai(i), output);
  }

  // optional int32 isHavePiao = 2;
  if (has_ishavepiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ishavepiao(), output);
  }

  // optional int32 piaoTime = 3;
  if (has_piaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaotime(), output);
  }

  // repeated int32 UserPiao = 4;
  for (int i = 0; i < this->userpiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->userpiao(i), output);
  }

  // optional int32 IsPiaoyet = 5;
  if (has_ispiaoyet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ispiaoyet(), output);
  }

  // optional int32 roomType = 6;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomtype(), output);
  }

  // repeated int32 piaoNum = 7;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hngamescene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huapai(i), target);
  }

  // optional int32 isHavePiao = 2;
  if (has_ishavepiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ishavepiao(), target);
  }

  // optional int32 piaoTime = 3;
  if (has_piaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaotime(), target);
  }

  // repeated int32 UserPiao = 4;
  for (int i = 0; i < this->userpiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->userpiao(i), target);
  }

  // optional int32 IsPiaoyet = 5;
  if (has_ispiaoyet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ispiaoyet(), target);
  }

  // optional int32 roomType = 6;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomtype(), target);
  }

  // repeated int32 piaoNum = 7;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hngamescene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 isHavePiao = 2;
    if (has_ishavepiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishavepiao());
    }

    // optional int32 piaoTime = 3;
    if (has_piaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaotime());
    }

    // optional int32 IsPiaoyet = 5;
    if (has_ispiaoyet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispiaoyet());
    }

    // optional int32 roomType = 6;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  // repeated int32 UserPiao = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpiao(i));
    }
    total_size += 1 * this->userpiao_size() + data_size;
  }

  // repeated int32 piaoNum = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hngamescene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hngamescene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hngamescene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hngamescene::MergeFrom(const hngamescene& from) {
  GOOGLE_CHECK_NE(&from, this);
  huapai_.MergeFrom(from.huapai_);
  userpiao_.MergeFrom(from.userpiao_);
  piaonum_.MergeFrom(from.piaonum_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ishavepiao()) {
      set_ishavepiao(from.ishavepiao());
    }
    if (from.has_piaotime()) {
      set_piaotime(from.piaotime());
    }
    if (from.has_ispiaoyet()) {
      set_ispiaoyet(from.ispiaoyet());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hngamescene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hngamescene::CopyFrom(const hngamescene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hngamescene::IsInitialized() const {

  return true;
}

void hngamescene::Swap(hngamescene* other) {
  if (other != this) {
    huapai_.Swap(&other->huapai_);
    std::swap(ishavepiao_, other->ishavepiao_);
    std::swap(piaotime_, other->piaotime_);
    userpiao_.Swap(&other->userpiao_);
    std::swap(ispiaoyet_, other->ispiaoyet_);
    std::swap(roomtype_, other->roomtype_);
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hngamescene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hngamescene_descriptor_;
  metadata.reflection = hngamescene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaonum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PiaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PiaoNum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStart::kBankeridFieldNumber;
const int AckGameStart::kQuanfengFieldNumber;
#endif  // !_MSC_VER

AckGameStart::AckGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStart::InitAsDefaultInstance() {
}

AckGameStart::AckGameStart(const AckGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerid_ = 0;
  quanfeng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStart::~AckGameStart() {
  SharedDtor();
}

void AckGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStart_descriptor_;
}

const AckGameStart& AckGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

AckGameStart* AckGameStart::default_instance_ = NULL;

AckGameStart* AckGameStart::New() const {
  return new AckGameStart;
}

void AckGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerid_ = 0;
    quanfeng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bankerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quanfeng;
        break;
      }

      // optional int32 quanfeng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quanfeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quanfeng_)));
          set_has_quanfeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bankerid = 1;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankerid(), output);
  }

  // optional int32 quanfeng = 2;
  if (has_quanfeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quanfeng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bankerid = 1;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankerid(), target);
  }

  // optional int32 quanfeng = 2;
  if (has_quanfeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quanfeng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bankerid = 1;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 quanfeng = 2;
    if (has_quanfeng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quanfeng());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStart::MergeFrom(const AckGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_quanfeng()) {
      set_quanfeng(from.quanfeng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStart::CopyFrom(const AckGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStart::Swap(AckGameStart* other) {
  if (other != this) {
    std::swap(bankerid_, other->bankerid_);
    std::swap(quanfeng_, other->quanfeng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStart_descriptor_;
  metadata.reflection = AckGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaoNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChariidFieldNumber;
const int AckBroadPiao::kUserPiaoFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  userpiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    userpiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserPiao;
        break;
      }

      // optional int32 UserPiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userpiao_)));
          set_has_userpiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userpiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userpiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 UserPiao = 2;
    if (has_userpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_userpiao()) {
      set_userpiao(from.userpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(userpiao_, other->userpiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuaPaiInfo::kHuaCountFieldNumber;
const int HuaPaiInfo::kHuaCardFieldNumber;
#endif  // !_MSC_VER

HuaPaiInfo::HuaPaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuaPaiInfo::InitAsDefaultInstance() {
}

HuaPaiInfo::HuaPaiInfo(const HuaPaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuaPaiInfo::SharedCtor() {
  _cached_size_ = 0;
  huacount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuaPaiInfo::~HuaPaiInfo() {
  SharedDtor();
}

void HuaPaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuaPaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuaPaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuaPaiInfo_descriptor_;
}

const HuaPaiInfo& HuaPaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

HuaPaiInfo* HuaPaiInfo::default_instance_ = NULL;

HuaPaiInfo* HuaPaiInfo::New() const {
  return new HuaPaiInfo;
}

void HuaPaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huacount_ = 0;
  }
  huacard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuaPaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuaCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacount_)));
          set_has_huacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        break;
      }

      // repeated int32 HuaCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_huacard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huacard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuaPaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->huacount(), output);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->huacard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuaPaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->huacount(), target);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->huacard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuaPaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuaCount = 1;
    if (has_huacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacount());
    }

  }
  // repeated int32 HuaCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->huacard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huacard(i));
    }
    total_size += 1 * this->huacard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuaPaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuaPaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuaPaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuaPaiInfo::MergeFrom(const HuaPaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huacard_.MergeFrom(from.huacard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huacount()) {
      set_huacount(from.huacount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuaPaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuaPaiInfo::CopyFrom(const HuaPaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuaPaiInfo::IsInitialized() const {

  return true;
}

void HuaPaiInfo::Swap(HuaPaiInfo* other) {
  if (other != this) {
    std::swap(huacount_, other->huacount_);
    huacard_.Swap(&other->huacard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuaPaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuaPaiInfo_descriptor_;
  metadata.reflection = HuaPaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFanInfo::kAddTypeFieldNumber;
const int AddFanInfo::kAddNumFieldNumber;
#endif  // !_MSC_VER

AddFanInfo::AddFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFanInfo::InitAsDefaultInstance() {
}

AddFanInfo::AddFanInfo(const AddFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFanInfo::SharedCtor() {
  _cached_size_ = 0;
  addtype_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFanInfo::~AddFanInfo() {
  SharedDtor();
}

void AddFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFanInfo_descriptor_;
}

const AddFanInfo& AddFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

AddFanInfo* AddFanInfo::default_instance_ = NULL;

AddFanInfo* AddFanInfo::New() const {
  return new AddFanInfo;
}

void AddFanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addtype_ = 0;
    addnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AddType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AddNum;
        break;
      }

      // optional int32 AddNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addtype(), output);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addtype(), target);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AddType = 1;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 AddNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFanInfo::MergeFrom(const AddFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFanInfo::CopyFrom(const AddFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFanInfo::IsInitialized() const {

  return true;
}

void AddFanInfo::Swap(AddFanInfo* other) {
  if (other != this) {
    std::swap(addtype_, other->addtype_);
    std::swap(addnum_, other->addnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFanInfo_descriptor_;
  metadata.reflection = AddFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FanInfo::kChairIDFieldNumber;
const int FanInfo::kRemainBankerFieldNumber;
const int FanInfo::kEndTypeFieldNumber;
const int FanInfo::kSpecialTypeFieldNumber;
const int FanInfo::kFanTypeFieldNumber;
const int FanInfo::kFanNumFieldNumber;
const int FanInfo::kAddfanFieldNumber;
const int FanInfo::kBaoPaiStateFieldNumber;
const int FanInfo::kFirstGangCardFieldNumber;
const int FanInfo::kFlowerBankerFieldNumber;
#endif  // !_MSC_VER

FanInfo::FanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FanInfo::InitAsDefaultInstance() {
}

FanInfo::FanInfo(const FanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FanInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  remainbanker_ = 0;
  endtype_ = 0;
  specialtype_ = 0;
  fantype_ = 0;
  fannum_ = 0;
  baopaistate_ = 0;
  firstgangcard_ = 0;
  flowerbanker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FanInfo::~FanInfo() {
  SharedDtor();
}

void FanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FanInfo_descriptor_;
}

const FanInfo& FanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

FanInfo* FanInfo::default_instance_ = NULL;

FanInfo* FanInfo::New() const {
  return new FanInfo;
}

void FanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    remainbanker_ = 0;
    endtype_ = 0;
    specialtype_ = 0;
    fantype_ = 0;
    fannum_ = 0;
    baopaistate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    firstgangcard_ = 0;
    flowerbanker_ = 0;
  }
  addfan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainBanker;
        break;
      }

      // optional int32 remainBanker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainbanker_)));
          set_has_remainbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndType;
        break;
      }

      // optional int32 EndType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtype_)));
          set_has_endtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SpecialType;
        break;
      }

      // optional int32 SpecialType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpecialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialtype_)));
          set_has_specialtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FanType;
        break;
      }

      // optional int32 FanType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantype_)));
          set_has_fantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FanNum;
        break;
      }

      // optional int32 FanNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_addfan;
        break;
      }

      // repeated .proto.game.hnmahjonggame.AddFanInfo addfan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addfan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addfan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_addfan;
        if (input->ExpectTag(64)) goto parse_BaoPaiState;
        break;
      }

      // optional int32 BaoPaiState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaoPaiState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baopaistate_)));
          set_has_baopaistate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FirstGangCard;
        break;
      }

      // optional int32 FirstGangCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FirstGangCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstgangcard_)));
          set_has_firstgangcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_flowerBanker;
        break;
      }

      // optional int32 flowerBanker = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flowerBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flowerbanker_)));
          set_has_flowerbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 remainBanker = 2;
  if (has_remainbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remainbanker(), output);
  }

  // optional int32 EndType = 3;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtype(), output);
  }

  // optional int32 SpecialType = 4;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->specialtype(), output);
  }

  // optional int32 FanType = 5;
  if (has_fantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fantype(), output);
  }

  // optional int32 FanNum = 6;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fannum(), output);
  }

  // repeated .proto.game.hnmahjonggame.AddFanInfo addfan = 7;
  for (int i = 0; i < this->addfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->addfan(i), output);
  }

  // optional int32 BaoPaiState = 8;
  if (has_baopaistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->baopaistate(), output);
  }

  // optional int32 FirstGangCard = 9;
  if (has_firstgangcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->firstgangcard(), output);
  }

  // optional int32 flowerBanker = 10;
  if (has_flowerbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flowerbanker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 remainBanker = 2;
  if (has_remainbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remainbanker(), target);
  }

  // optional int32 EndType = 3;
  if (has_endtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtype(), target);
  }

  // optional int32 SpecialType = 4;
  if (has_specialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->specialtype(), target);
  }

  // optional int32 FanType = 5;
  if (has_fantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fantype(), target);
  }

  // optional int32 FanNum = 6;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fannum(), target);
  }

  // repeated .proto.game.hnmahjonggame.AddFanInfo addfan = 7;
  for (int i = 0; i < this->addfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->addfan(i), target);
  }

  // optional int32 BaoPaiState = 8;
  if (has_baopaistate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->baopaistate(), target);
  }

  // optional int32 FirstGangCard = 9;
  if (has_firstgangcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->firstgangcard(), target);
  }

  // optional int32 flowerBanker = 10;
  if (has_flowerbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flowerbanker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 remainBanker = 2;
    if (has_remainbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainbanker());
    }

    // optional int32 EndType = 3;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtype());
    }

    // optional int32 SpecialType = 4;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialtype());
    }

    // optional int32 FanType = 5;
    if (has_fantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fantype());
    }

    // optional int32 FanNum = 6;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

    // optional int32 BaoPaiState = 8;
    if (has_baopaistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baopaistate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 FirstGangCard = 9;
    if (has_firstgangcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstgangcard());
    }

    // optional int32 flowerBanker = 10;
    if (has_flowerbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flowerbanker());
    }

  }
  // repeated .proto.game.hnmahjonggame.AddFanInfo addfan = 7;
  total_size += 1 * this->addfan_size();
  for (int i = 0; i < this->addfan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addfan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FanInfo::MergeFrom(const FanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  addfan_.MergeFrom(from.addfan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_remainbanker()) {
      set_remainbanker(from.remainbanker());
    }
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_fantype()) {
      set_fantype(from.fantype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
    if (from.has_baopaistate()) {
      set_baopaistate(from.baopaistate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_firstgangcard()) {
      set_firstgangcard(from.firstgangcard());
    }
    if (from.has_flowerbanker()) {
      set_flowerbanker(from.flowerbanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanInfo::CopyFrom(const FanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanInfo::IsInitialized() const {

  return true;
}

void FanInfo::Swap(FanInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(remainbanker_, other->remainbanker_);
    std::swap(endtype_, other->endtype_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(fantype_, other->fantype_);
    std::swap(fannum_, other->fannum_);
    addfan_.Swap(&other->addfan_);
    std::swap(baopaistate_, other->baopaistate_);
    std::swap(firstgangcard_, other->firstgangcard_);
    std::swap(flowerbanker_, other->flowerbanker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FanInfo_descriptor_;
  metadata.reflection = FanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hnmjGameEndInfo::kHuaPaiFieldNumber;
const int hnmjGameEndInfo::kFaninfoFieldNumber;
const int hnmjGameEndInfo::kHuaPaiScoreFieldNumber;
const int hnmjGameEndInfo::kHuScoreFieldNumber;
const int hnmjGameEndInfo::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

hnmjGameEndInfo::hnmjGameEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hnmjGameEndInfo::InitAsDefaultInstance() {
}

hnmjGameEndInfo::hnmjGameEndInfo(const hnmjGameEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hnmjGameEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hnmjGameEndInfo::~hnmjGameEndInfo() {
  SharedDtor();
}

void hnmjGameEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hnmjGameEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hnmjGameEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hnmjGameEndInfo_descriptor_;
}

const hnmjGameEndInfo& hnmjGameEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

hnmjGameEndInfo* hnmjGameEndInfo::default_instance_ = NULL;

hnmjGameEndInfo* hnmjGameEndInfo::New() const {
  return new hnmjGameEndInfo;
}

void hnmjGameEndInfo::Clear() {
  huapai_.Clear();
  faninfo_.Clear();
  huapaiscore_.Clear();
  huscore_.Clear();
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hnmjGameEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HuaPai;
        if (input->ExpectTag(18)) goto parse_faninfo;
        break;
      }

      // repeated .proto.game.hnmahjonggame.FanInfo faninfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faninfo;
        if (input->ExpectTag(24)) goto parse_HuaPaiScore;
        break;
      }

      // repeated int32 HuaPaiScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaPaiScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_huapaiscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huapaiscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaPaiScore;
        if (input->ExpectTag(32)) goto parse_HuScore;
        break;
      }

      // repeated int32 HuScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_huscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HuScore;
        if (input->ExpectTag(40)) goto parse_piaoNum;
        break;
      }

      // repeated int32 piaoNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hnmjGameEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huapai(i), output);
  }

  // repeated .proto.game.hnmahjonggame.FanInfo faninfo = 2;
  for (int i = 0; i < this->faninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faninfo(i), output);
  }

  // repeated int32 HuaPaiScore = 3;
  for (int i = 0; i < this->huapaiscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->huapaiscore(i), output);
  }

  // repeated int32 HuScore = 4;
  for (int i = 0; i < this->huscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->huscore(i), output);
  }

  // repeated int32 piaoNum = 5;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hnmjGameEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huapai(i), target);
  }

  // repeated .proto.game.hnmahjonggame.FanInfo faninfo = 2;
  for (int i = 0; i < this->faninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faninfo(i), target);
  }

  // repeated int32 HuaPaiScore = 3;
  for (int i = 0; i < this->huapaiscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->huapaiscore(i), target);
  }

  // repeated int32 HuScore = 4;
  for (int i = 0; i < this->huscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->huscore(i), target);
  }

  // repeated int32 piaoNum = 5;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hnmjGameEndInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.hnmahjonggame.HuaPaiInfo HuaPai = 1;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  // repeated .proto.game.hnmahjonggame.FanInfo faninfo = 2;
  total_size += 1 * this->faninfo_size();
  for (int i = 0; i < this->faninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faninfo(i));
  }

  // repeated int32 HuaPaiScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->huapaiscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huapaiscore(i));
    }
    total_size += 1 * this->huapaiscore_size() + data_size;
  }

  // repeated int32 HuScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->huscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huscore(i));
    }
    total_size += 1 * this->huscore_size() + data_size;
  }

  // repeated int32 piaoNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hnmjGameEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hnmjGameEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hnmjGameEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hnmjGameEndInfo::MergeFrom(const hnmjGameEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huapai_.MergeFrom(from.huapai_);
  faninfo_.MergeFrom(from.faninfo_);
  huapaiscore_.MergeFrom(from.huapaiscore_);
  huscore_.MergeFrom(from.huscore_);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hnmjGameEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hnmjGameEndInfo::CopyFrom(const hnmjGameEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hnmjGameEndInfo::IsInitialized() const {

  return true;
}

void hnmjGameEndInfo::Swap(hnmjGameEndInfo* other) {
  if (other != this) {
    huapai_.Swap(&other->huapai_);
    faninfo_.Swap(&other->faninfo_);
    huapaiscore_.Swap(&other->huapaiscore_);
    huscore_.Swap(&other->huscore_);
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hnmjGameEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hnmjGameEndInfo_descriptor_;
  metadata.reflection = hnmjGameEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kMinggangNumFieldNumber;
const int ReordInfo::kAngangNumFieldNumber;
const int ReordInfo::kDianpaoNumFieldNumber;
const int ReordInfo::kJiepaoNumFieldNumber;
const int ReordInfo::kZimoNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  minggang_num_ = 0;
  angang_num_ = 0;
  dianpao_num_ = 0;
  jiepao_num_ = 0;
  zimo_num_ = 0;
  totalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minggang_num_ = 0;
    angang_num_ = 0;
    dianpao_num_ = 0;
    jiepao_num_ = 0;
    zimo_num_ = 0;
    totalscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minggang_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minggang_num_)));
          set_has_minggang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_angang_num;
        break;
      }

      // optional int32 angang_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angang_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angang_num_)));
          set_has_angang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dianpao_num;
        break;
      }

      // optional int32 dianpao_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dianpao_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dianpao_num_)));
          set_has_dianpao_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jiepao_num;
        break;
      }

      // optional int32 jiepao_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiepao_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiepao_num_)));
          set_has_jiepao_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zimo_num;
        break;
      }

      // optional int32 zimo_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zimo_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zimo_num_)));
          set_has_zimo_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 minggang_num = 1;
  if (has_minggang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minggang_num(), output);
  }

  // optional int32 angang_num = 2;
  if (has_angang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angang_num(), output);
  }

  // optional int32 dianpao_num = 3;
  if (has_dianpao_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dianpao_num(), output);
  }

  // optional int32 jiepao_num = 4;
  if (has_jiepao_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jiepao_num(), output);
  }

  // optional int32 zimo_num = 5;
  if (has_zimo_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zimo_num(), output);
  }

  // optional int32 totalscore = 6;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 minggang_num = 1;
  if (has_minggang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minggang_num(), target);
  }

  // optional int32 angang_num = 2;
  if (has_angang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angang_num(), target);
  }

  // optional int32 dianpao_num = 3;
  if (has_dianpao_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dianpao_num(), target);
  }

  // optional int32 jiepao_num = 4;
  if (has_jiepao_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jiepao_num(), target);
  }

  // optional int32 zimo_num = 5;
  if (has_zimo_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zimo_num(), target);
  }

  // optional int32 totalscore = 6;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 minggang_num = 1;
    if (has_minggang_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minggang_num());
    }

    // optional int32 angang_num = 2;
    if (has_angang_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angang_num());
    }

    // optional int32 dianpao_num = 3;
    if (has_dianpao_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dianpao_num());
    }

    // optional int32 jiepao_num = 4;
    if (has_jiepao_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jiepao_num());
    }

    // optional int32 zimo_num = 5;
    if (has_zimo_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zimo_num());
    }

    // optional int32 totalscore = 6;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minggang_num()) {
      set_minggang_num(from.minggang_num());
    }
    if (from.has_angang_num()) {
      set_angang_num(from.angang_num());
    }
    if (from.has_dianpao_num()) {
      set_dianpao_num(from.dianpao_num());
    }
    if (from.has_jiepao_num()) {
      set_jiepao_num(from.jiepao_num());
    }
    if (from.has_zimo_num()) {
      set_zimo_num(from.zimo_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(minggang_num_, other->minggang_num_);
    std::swap(angang_num_, other->angang_num_);
    std::swap(dianpao_num_, other->dianpao_num_);
    std::swap(jiepao_num_, other->jiepao_num_);
    std::swap(zimo_num_, other->zimo_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hainangameproto_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    datatime_ = 0;
  }
  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hnmahjonggame.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hnmahjonggame.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hnmahjonggame.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

  }
  // repeated .proto.game.hnmahjonggame.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hnmahjonggame
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
