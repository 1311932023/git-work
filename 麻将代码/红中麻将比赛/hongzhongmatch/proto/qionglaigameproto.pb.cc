// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qionglaigameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qionglaigameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace qionglaimj {

namespace {

const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadListentype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadListentype_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDianPaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDianPaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDajiaoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDajiaoReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagQiongLaiGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagQiongLaiGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagOpListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagOpListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChooseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChooseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCustomiedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCustomiedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckShowHuCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckShowHuCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckQingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckQingInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_qionglaigameproto_2eproto() {
  protobuf_AddDesc_qionglaigameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qionglaigameproto.proto");
  GOOGLE_CHECK(file != NULL);
  ReordInfo_descriptor_ = file->message_type(0);
  static const int ReordInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, banker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, piaolaizi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, outtime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, wincounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, gangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, diangangtimes_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(1);
  static const int GameEndRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
  AckBroadListentype_descriptor_ = file->message_type(2);
  static const int AckBroadListentype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, changeablecards_),
  };
  AckBroadListentype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadListentype_descriptor_,
      AckBroadListentype::default_instance_,
      AckBroadListentype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadListentype));
  tagHuinfo_descriptor_ = file->message_type(3);
  static const int tagHuinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, fantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, fannum_),
  };
  tagHuinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuinfo_descriptor_,
      tagHuinfo::default_instance_,
      tagHuinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuinfo));
  tagUserHuInfo_descriptor_ = file->message_type(4);
  static const int tagUserHuInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hutotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, stdianpaositid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, stdianpaofan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, zhuabaoinfo_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  tagDianPaoInfo_descriptor_ = file->message_type(5);
  static const int tagDianPaoInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, stcard_),
  };
  tagDianPaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDianPaoInfo_descriptor_,
      tagDianPaoInfo::default_instance_,
      tagDianPaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDianPaoInfo));
  tagGangReturn_descriptor_ = file->message_type(6);
  static const int tagGangReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, streturngangscore_),
  };
  tagGangReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangReturn_descriptor_,
      tagGangReturn::default_instance_,
      tagGangReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangReturn));
  tagGangScore_descriptor_ = file->message_type(7);
  static const int tagGangScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, gangscore_),
  };
  tagGangScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangScore_descriptor_,
      tagGangScore::default_instance_,
      tagGangScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangScore));
  tagDajiaoReturn_descriptor_ = file->message_type(8);
  static const int tagDajiaoReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, stdajiaoscore_),
  };
  tagDajiaoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDajiaoReturn_descriptor_,
      tagDajiaoReturn::default_instance_,
      tagDajiaoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDajiaoReturn));
  tagQiongLaiGameEnd_descriptor_ = file->message_type(9);
  static const int tagQiongLaiGameEnd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, stuserhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, stdianpaoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, stdajiaoreturngang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, streturngang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, stgangscore_),
  };
  tagQiongLaiGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagQiongLaiGameEnd_descriptor_,
      tagQiongLaiGameEnd::default_instance_,
      tagQiongLaiGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagQiongLaiGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagQiongLaiGameEnd));
  tagOpListenInfo_descriptor_ = file->message_type(10);
  static const int tagOpListenInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, ishaveoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, changeablecards_),
  };
  tagOpListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagOpListenInfo_descriptor_,
      tagOpListenInfo::default_instance_,
      tagOpListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagOpListenInfo));
  AckChooseInfo_descriptor_ = file->message_type(11);
  static const int AckChooseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseInfo, zimojiafanjiadi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseInfo, liangbudao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseInfo, huazhonghuapaozhongpao_),
  };
  AckChooseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChooseInfo_descriptor_,
      AckChooseInfo::default_instance_,
      AckChooseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChooseInfo));
  AckCustomiedInfo_descriptor_ = file->message_type(12);
  static const int AckCustomiedInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isyipaodouxiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischangecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischeckhuazhudajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ishavepiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, piaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, userpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ispiaoyet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stqinghuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stchooseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, sthucardshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, lackopeok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, lacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, npaohupainum_),
  };
  AckCustomiedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCustomiedInfo_descriptor_,
      AckCustomiedInfo::default_instance_,
      AckCustomiedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCustomiedInfo));
  AckShowHuCard_descriptor_ = file->message_type(13);
  static const int AckShowHuCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckShowHuCard, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckShowHuCard, hucard_),
  };
  AckShowHuCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckShowHuCard_descriptor_,
      AckShowHuCard::default_instance_,
      AckShowHuCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckShowHuCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckShowHuCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckShowHuCard));
  AckQingInfo_descriptor_ = file->message_type(14);
  static const int AckQingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, type_),
  };
  AckQingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckQingInfo_descriptor_,
      AckQingInfo::default_instance_,
      AckQingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckQingInfo));
  HUGANG_descriptor_ = file->enum_type(0);
  LISTEN_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qionglaigameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadListentype_descriptor_, &AckBroadListentype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuinfo_descriptor_, &tagHuinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDianPaoInfo_descriptor_, &tagDianPaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangReturn_descriptor_, &tagGangReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangScore_descriptor_, &tagGangScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDajiaoReturn_descriptor_, &tagDajiaoReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagQiongLaiGameEnd_descriptor_, &tagQiongLaiGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagOpListenInfo_descriptor_, &tagOpListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChooseInfo_descriptor_, &AckChooseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCustomiedInfo_descriptor_, &AckCustomiedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckShowHuCard_descriptor_, &AckShowHuCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckQingInfo_descriptor_, &AckQingInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qionglaigameproto_2eproto() {
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
  delete AckBroadListentype::default_instance_;
  delete AckBroadListentype_reflection_;
  delete tagHuinfo::default_instance_;
  delete tagHuinfo_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete tagDianPaoInfo::default_instance_;
  delete tagDianPaoInfo_reflection_;
  delete tagGangReturn::default_instance_;
  delete tagGangReturn_reflection_;
  delete tagGangScore::default_instance_;
  delete tagGangScore_reflection_;
  delete tagDajiaoReturn::default_instance_;
  delete tagDajiaoReturn_reflection_;
  delete tagQiongLaiGameEnd::default_instance_;
  delete tagQiongLaiGameEnd_reflection_;
  delete tagOpListenInfo::default_instance_;
  delete tagOpListenInfo_reflection_;
  delete AckChooseInfo::default_instance_;
  delete AckChooseInfo_reflection_;
  delete AckCustomiedInfo::default_instance_;
  delete AckCustomiedInfo_reflection_;
  delete AckShowHuCard::default_instance_;
  delete AckShowHuCard_reflection_;
  delete AckQingInfo::default_instance_;
  delete AckQingInfo_reflection_;
}

void protobuf_AddDesc_qionglaigameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027qionglaigameproto.proto\022\025proto.game.qi"
    "onglaimj\"\254\001\n\tReordInfo\022\022\n\nbanker_num\030\001 \001"
    "(\005\022\016\n\006hu_num\030\002 \001(\005\022\025\n\rpiaolaizi_num\030\003 \001("
    "\005\022\023\n\013outtime_num\030\004 \001(\005\022\022\n\ntotalscore\030\005 \001"
    "(\005\022\021\n\tWinCounts\030\006 \001(\005\022\021\n\tGangTimes\030\007 \001(\005"
    "\022\025\n\rDianGangTimes\030\010 \001(\005\"\216\001\n\rGameEndRecor"
    "d\0228\n\016UserRecoreInfo\030\001 \003(\0132 .proto.game.q"
    "ionglaimj.ReordInfo\022\027\n\017MostDianPaoUser\030\002"
    " \003(\005\022\030\n\020MostWinScoreUser\030\003 \003(\005\022\020\n\010DataTi"
    "me\030\004 \001(\005\"R\n\022AckBroadListentype\022\017\n\007charii"
    "d\030\001 \001(\005\022\022\n\nListenType\030\002 \001(\005\022\027\n\017Changeabl"
    "eCards\030\003 \003(\005\",\n\ttagHuinfo\022\017\n\007FanType\030\001 \001"
    "(\005\022\016\n\006FanNum\030\002 \001(\005\"\337\001\n\rtagUserHuInfo\022\024\n\014"
    "HuTotalscore\030\001 \001(\005\0222\n\010stHuinfo\030\002 \003(\0132 .p"
    "roto.game.qionglaimj.tagHuinfo\022\017\n\007stHupa"
    "i\030\003 \001(\005\022\020\n\010stHuType\030\004 \001(\005\022\017\n\007stHuFan\030\005 \001"
    "(\005\022\026\n\016stDianPaoSitid\030\006 \001(\005\022\024\n\014stDianPaoF"
    "an\030\007 \001(\005\022\r\n\005Sitid\030\010 \001(\005\022\023\n\013ZhuaBaoInfo\030\t"
    " \003(\005\" \n\016tagDianPaoInfo\022\016\n\006stCard\030\002 \003(\005\"9"
    "\n\rtagGangReturn\022\r\n\005Sitid\030\001 \001(\005\022\031\n\021stRetu"
    "rnGangscore\030\002 \001(\005\"0\n\014tagGangScore\022\r\n\005Sit"
    "id\030\001 \001(\005\022\021\n\tGangScore\030\002 \001(\005\"7\n\017tagDajiao"
    "Return\022\r\n\005Sitid\030\001 \001(\005\022\025\n\rstDajiaoscore\030\002"
    " \001(\005\"\304\002\n\022tagQiongLaiGameEnd\0226\n\010stUserHu\030"
    "\001 \003(\0132$.proto.game.qionglaimj.tagUserHuI"
    "nfo\022<\n\rstDianPaoInfo\030\002 \003(\0132%.proto.game."
    "qionglaimj.tagDianPaoInfo\022B\n\022stDajiaoRet"
    "urnGang\030\003 \003(\0132&.proto.game.qionglaimj.ta"
    "gDajiaoReturn\022:\n\014stReturnGang\030\004 \003(\0132$.pr"
    "oto.game.qionglaimj.tagGangReturn\0228\n\013stG"
    "angScore\030\005 \003(\0132#.proto.game.qionglaimj.t"
    "agGangScore\"S\n\017tagOpListenInfo\022\026\n\016isHave"
    "OpListen\030\001 \001(\005\022\017\n\007ChairID\030\002 \001(\005\022\027\n\017Chang"
    "eableCards\030\003 \003(\005\"\\\n\rAckChooseInfo\022\027\n\017ZiM"
    "oJiaFanJiaDi\030\001 \001(\005\022\022\n\nLiangBuDao\030\002 \001(\005\022\036"
    "\n\026HuaZhongHuaPaoZhongPao\030\003 \001(\005\"\262\004\n\020AckCu"
    "stomiedInfo\022\020\n\010gametype\030\001 \001(\005\022\027\n\017isYipao"
    "douxiang\030\002 \001(\005\022\025\n\risQiangganghu\030\003 \001(\005\022\024\n"
    "\014isChangeCard\030\004 \001(\005\022\033\n\023isCheckhuazhudaji"
    "ao\030\005 \001(\005\022\022\n\nisHavePiao\030\006 \001(\005\022\020\n\010piaoTime"
    "\030\007 \001(\005\022\020\n\010UserPiao\030\010 \003(\005\022\021\n\tIsPiaoyet\030\t "
    "\001(\005\022\020\n\010RoomType\030\n \001(\005\022\022\n\nListenType\030\013 \001("
    "\005\022:\n\nstOpListen\030\014 \003(\0132&.proto.game.qiong"
    "laimj.tagOpListenInfo\0228\n\014stQingHuInfo\030\r "
    "\003(\0132\".proto.game.qionglaimj.AckQingInfo\022"
    ":\n\014stChooseInfo\030\016 \001(\0132$.proto.game.qiong"
    "laimj.AckChooseInfo\022\017\n\007OpType2\030\017 \001(\005\022:\n\014"
    "stHuCardShow\030\020 \001(\0132$.proto.game.qionglai"
    "mj.AckShowHuCard\022\021\n\tLackOpeOk\030\021 \003(\005\022\020\n\010L"
    "ackType\030\022 \003(\005\022\024\n\014nPaoHuPaiNum\030\023 \003(\005\".\n\rA"
    "ckShowHuCard\022\r\n\005sitid\030\001 \001(\005\022\016\n\006HuCard\030\002 "
    "\001(\005\"*\n\013AckQingInfo\022\r\n\005sitid\030\001 \001(\005\022\014\n\004typ"
    "e\030\002 \001(\005*\245\001\n\006HUGANG\022\022\n\016HUGANG_ZHIGANG\020\002\022\022"
    "\n\016HUGANG_WANGANG\020\004\022\021\n\rHUGANG_ANGANG\020\010\022\022\n"
    "\016HUGANG_DIANPAO\020\020\022\020\n\014HUGANG_PAOHU\020 \022\023\n\017H"
    "UGANG_DIANGANG\020@\022\023\n\016HUGANG_BEIZIMO\020\200\001\022\020\n"
    "\013HUGANG_ZIMO\020\200\002*s\n\013LISTEN_TYPE\022\025\n\021LISTEN"
    "_CARD_NOMAL\020\000\022\027\n\023LISTEN_CARD_BAOTING\020\001\022\026"
    "\n\022LISTEN_CARD_BAIPAI\020\002\022\034\n\030LISTEN_CARD_FI"
    "RST_BAOPAI\020\003", 2372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qionglaigameproto.proto", &protobuf_RegisterTypes);
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  AckBroadListentype::default_instance_ = new AckBroadListentype();
  tagHuinfo::default_instance_ = new tagHuinfo();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  tagDianPaoInfo::default_instance_ = new tagDianPaoInfo();
  tagGangReturn::default_instance_ = new tagGangReturn();
  tagGangScore::default_instance_ = new tagGangScore();
  tagDajiaoReturn::default_instance_ = new tagDajiaoReturn();
  tagQiongLaiGameEnd::default_instance_ = new tagQiongLaiGameEnd();
  tagOpListenInfo::default_instance_ = new tagOpListenInfo();
  AckChooseInfo::default_instance_ = new AckChooseInfo();
  AckCustomiedInfo::default_instance_ = new AckCustomiedInfo();
  AckShowHuCard::default_instance_ = new AckShowHuCard();
  AckQingInfo::default_instance_ = new AckQingInfo();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  AckBroadListentype::default_instance_->InitAsDefaultInstance();
  tagHuinfo::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  tagDianPaoInfo::default_instance_->InitAsDefaultInstance();
  tagGangReturn::default_instance_->InitAsDefaultInstance();
  tagGangScore::default_instance_->InitAsDefaultInstance();
  tagDajiaoReturn::default_instance_->InitAsDefaultInstance();
  tagQiongLaiGameEnd::default_instance_->InitAsDefaultInstance();
  tagOpListenInfo::default_instance_->InitAsDefaultInstance();
  AckChooseInfo::default_instance_->InitAsDefaultInstance();
  AckCustomiedInfo::default_instance_->InitAsDefaultInstance();
  AckShowHuCard::default_instance_->InitAsDefaultInstance();
  AckQingInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qionglaigameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qionglaigameproto_2eproto {
  StaticDescriptorInitializer_qionglaigameproto_2eproto() {
    protobuf_AddDesc_qionglaigameproto_2eproto();
  }
} static_descriptor_initializer_qionglaigameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HUGANG_descriptor_;
}
bool HUGANG_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LISTEN_TYPE_descriptor_;
}
bool LISTEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kBankerNumFieldNumber;
const int ReordInfo::kHuNumFieldNumber;
const int ReordInfo::kPiaolaiziNumFieldNumber;
const int ReordInfo::kOuttimeNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
const int ReordInfo::kWinCountsFieldNumber;
const int ReordInfo::kGangTimesFieldNumber;
const int ReordInfo::kDianGangTimesFieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  banker_num_ = 0;
  hu_num_ = 0;
  piaolaizi_num_ = 0;
  outtime_num_ = 0;
  totalscore_ = 0;
  wincounts_ = 0;
  gangtimes_ = 0;
  diangangtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_num_ = 0;
    hu_num_ = 0;
    piaolaizi_num_ = 0;
    outtime_num_ = 0;
    totalscore_ = 0;
    wincounts_ = 0;
    gangtimes_ = 0;
    diangangtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_)));
          set_has_banker_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hu_num;
        break;
      }

      // optional int32 hu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_num_)));
          set_has_hu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaolaizi_num;
        break;
      }

      // optional int32 piaolaizi_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaolaizi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaolaizi_num_)));
          set_has_piaolaizi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outtime_num;
        break;
      }

      // optional int32 outtime_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_num_)));
          set_has_outtime_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WinCounts;
        break;
      }

      // optional int32 WinCounts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincounts_)));
          set_has_wincounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GangTimes;
        break;
      }

      // optional int32 GangTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtimes_)));
          set_has_gangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DianGangTimes;
        break;
      }

      // optional int32 DianGangTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DianGangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangtimes_)));
          set_has_diangangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num(), output);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hu_num(), output);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaolaizi_num(), output);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outtime_num(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wincounts(), output);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangtimes(), output);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diangangtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num(), target);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hu_num(), target);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaolaizi_num(), target);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outtime_num(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wincounts(), target);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangtimes(), target);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diangangtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_num = 1;
    if (has_banker_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_num());
    }

    // optional int32 hu_num = 2;
    if (has_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_num());
    }

    // optional int32 piaolaizi_num = 3;
    if (has_piaolaizi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaolaizi_num());
    }

    // optional int32 outtime_num = 4;
    if (has_outtime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime_num());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 WinCounts = 6;
    if (has_wincounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincounts());
    }

    // optional int32 GangTimes = 7;
    if (has_gangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtimes());
    }

    // optional int32 DianGangTimes = 8;
    if (has_diangangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_num()) {
      set_banker_num(from.banker_num());
    }
    if (from.has_hu_num()) {
      set_hu_num(from.hu_num());
    }
    if (from.has_piaolaizi_num()) {
      set_piaolaizi_num(from.piaolaizi_num());
    }
    if (from.has_outtime_num()) {
      set_outtime_num(from.outtime_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_wincounts()) {
      set_wincounts(from.wincounts());
    }
    if (from.has_gangtimes()) {
      set_gangtimes(from.gangtimes());
    }
    if (from.has_diangangtimes()) {
      set_diangangtimes(from.diangangtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(banker_num_, other->banker_num_);
    std::swap(hu_num_, other->hu_num_);
    std::swap(piaolaizi_num_, other->piaolaizi_num_);
    std::swap(outtime_num_, other->outtime_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(wincounts_, other->wincounts_);
    std::swap(gangtimes_, other->gangtimes_);
    std::swap(diangangtimes_, other->diangangtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    datatime_ = 0;
  }
  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.qionglaimj.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.qionglaimj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.qionglaimj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

  }
  // repeated .proto.game.qionglaimj.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadListentype::kChariidFieldNumber;
const int AckBroadListentype::kListenTypeFieldNumber;
const int AckBroadListentype::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

AckBroadListentype::AckBroadListentype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadListentype::InitAsDefaultInstance() {
}

AckBroadListentype::AckBroadListentype(const AckBroadListentype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadListentype::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  listentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadListentype::~AckBroadListentype() {
  SharedDtor();
}

void AckBroadListentype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadListentype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadListentype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadListentype_descriptor_;
}

const AckBroadListentype& AckBroadListentype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

AckBroadListentype* AckBroadListentype::default_instance_ = NULL;

AckBroadListentype* AckBroadListentype::New() const {
  return new AckBroadListentype;
}

void AckBroadListentype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    listentype_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadListentype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadListentype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->listentype(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadListentype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->listentype(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadListentype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 ListenType = 2;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadListentype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadListentype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadListentype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadListentype::MergeFrom(const AckBroadListentype& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadListentype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadListentype::CopyFrom(const AckBroadListentype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadListentype::IsInitialized() const {

  return true;
}

void AckBroadListentype::Swap(AckBroadListentype* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(listentype_, other->listentype_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadListentype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadListentype_descriptor_;
  metadata.reflection = AckBroadListentype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuinfo::kFanTypeFieldNumber;
const int tagHuinfo::kFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuinfo::tagHuinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuinfo::InitAsDefaultInstance() {
}

tagHuinfo::tagHuinfo(const tagHuinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuinfo::SharedCtor() {
  _cached_size_ = 0;
  fantype_ = 0;
  fannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuinfo::~tagHuinfo() {
  SharedDtor();
}

void tagHuinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuinfo_descriptor_;
}

const tagHuinfo& tagHuinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagHuinfo* tagHuinfo::default_instance_ = NULL;

tagHuinfo* tagHuinfo::New() const {
  return new tagHuinfo;
}

void tagHuinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantype_ = 0;
    fannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FanType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantype_)));
          set_has_fantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FanNum;
        break;
      }

      // optional int32 FanNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FanType = 1;
  if (has_fantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fantype(), output);
  }

  // optional int32 FanNum = 2;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FanType = 1;
  if (has_fantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fantype(), target);
  }

  // optional int32 FanNum = 2;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FanType = 1;
    if (has_fantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fantype());
    }

    // optional int32 FanNum = 2;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuinfo::MergeFrom(const tagHuinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantype()) {
      set_fantype(from.fantype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuinfo::CopyFrom(const tagHuinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuinfo::IsInitialized() const {

  return true;
}

void tagHuinfo::Swap(tagHuinfo* other) {
  if (other != this) {
    std::swap(fantype_, other->fantype_);
    std::swap(fannum_, other->fannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuinfo_descriptor_;
  metadata.reflection = tagHuinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuTotalscoreFieldNumber;
const int tagUserHuInfo::kStHuinfoFieldNumber;
const int tagUserHuInfo::kStHupaiFieldNumber;
const int tagUserHuInfo::kStHuTypeFieldNumber;
const int tagUserHuInfo::kStHuFanFieldNumber;
const int tagUserHuInfo::kStDianPaoSitidFieldNumber;
const int tagUserHuInfo::kStDianPaoFanFieldNumber;
const int tagUserHuInfo::kSitidFieldNumber;
const int tagUserHuInfo::kZhuaBaoInfoFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  hutotalscore_ = 0;
  sthupai_ = 0;
  sthutype_ = 0;
  sthufan_ = 0;
  stdianpaositid_ = 0;
  stdianpaofan_ = 0;
  sitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hutotalscore_ = 0;
    sthupai_ = 0;
    sthutype_ = 0;
    sthufan_ = 0;
    stdianpaositid_ = 0;
    stdianpaofan_ = 0;
    sitid_ = 0;
  }
  sthuinfo_.Clear();
  zhuabaoinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuTotalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hutotalscore_)));
          set_has_hutotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        break;
      }

      // repeated .proto.game.qionglaimj.tagHuinfo stHuinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        if (input->ExpectTag(24)) goto parse_stHupai;
        break;
      }

      // optional int32 stHupai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHupai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthupai_)));
          set_has_sthupai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stHuType;
        break;
      }

      // optional int32 stHuType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthutype_)));
          set_has_sthutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stHuFan;
        break;
      }

      // optional int32 stHuFan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHuFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthufan_)));
          set_has_sthufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stDianPaoSitid;
        break;
      }

      // optional int32 stDianPaoSitid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDianPaoSitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdianpaositid_)));
          set_has_stdianpaositid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stDianPaoFan;
        break;
      }

      // optional int32 stDianPaoFan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDianPaoFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdianpaofan_)));
          set_has_stdianpaofan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Sitid;
        break;
      }

      // optional int32 Sitid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ZhuaBaoInfo;
        break;
      }

      // repeated int32 ZhuaBaoInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhuaBaoInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_zhuabaoinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhuabaoinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ZhuaBaoInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hutotalscore(), output);
  }

  // repeated .proto.game.qionglaimj.tagHuinfo stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sthuinfo(i), output);
  }

  // optional int32 stHupai = 3;
  if (has_sthupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sthupai(), output);
  }

  // optional int32 stHuType = 4;
  if (has_sthutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sthutype(), output);
  }

  // optional int32 stHuFan = 5;
  if (has_sthufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sthufan(), output);
  }

  // optional int32 stDianPaoSitid = 6;
  if (has_stdianpaositid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stdianpaositid(), output);
  }

  // optional int32 stDianPaoFan = 7;
  if (has_stdianpaofan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stdianpaofan(), output);
  }

  // optional int32 Sitid = 8;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sitid(), output);
  }

  // repeated int32 ZhuaBaoInfo = 9;
  for (int i = 0; i < this->zhuabaoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->zhuabaoinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hutotalscore(), target);
  }

  // repeated .proto.game.qionglaimj.tagHuinfo stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sthuinfo(i), target);
  }

  // optional int32 stHupai = 3;
  if (has_sthupai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sthupai(), target);
  }

  // optional int32 stHuType = 4;
  if (has_sthutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sthutype(), target);
  }

  // optional int32 stHuFan = 5;
  if (has_sthufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sthufan(), target);
  }

  // optional int32 stDianPaoSitid = 6;
  if (has_stdianpaositid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stdianpaositid(), target);
  }

  // optional int32 stDianPaoFan = 7;
  if (has_stdianpaofan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stdianpaofan(), target);
  }

  // optional int32 Sitid = 8;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sitid(), target);
  }

  // repeated int32 ZhuaBaoInfo = 9;
  for (int i = 0; i < this->zhuabaoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->zhuabaoinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuTotalscore = 1;
    if (has_hutotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hutotalscore());
    }

    // optional int32 stHupai = 3;
    if (has_sthupai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthupai());
    }

    // optional int32 stHuType = 4;
    if (has_sthutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthutype());
    }

    // optional int32 stHuFan = 5;
    if (has_sthufan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthufan());
    }

    // optional int32 stDianPaoSitid = 6;
    if (has_stdianpaositid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdianpaositid());
    }

    // optional int32 stDianPaoFan = 7;
    if (has_stdianpaofan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdianpaofan());
    }

    // optional int32 Sitid = 8;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

  }
  // repeated .proto.game.qionglaimj.tagHuinfo stHuinfo = 2;
  total_size += 1 * this->sthuinfo_size();
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthuinfo(i));
  }

  // repeated int32 ZhuaBaoInfo = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhuabaoinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhuabaoinfo(i));
    }
    total_size += 1 * this->zhuabaoinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sthuinfo_.MergeFrom(from.sthuinfo_);
  zhuabaoinfo_.MergeFrom(from.zhuabaoinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hutotalscore()) {
      set_hutotalscore(from.hutotalscore());
    }
    if (from.has_sthupai()) {
      set_sthupai(from.sthupai());
    }
    if (from.has_sthutype()) {
      set_sthutype(from.sthutype());
    }
    if (from.has_sthufan()) {
      set_sthufan(from.sthufan());
    }
    if (from.has_stdianpaositid()) {
      set_stdianpaositid(from.stdianpaositid());
    }
    if (from.has_stdianpaofan()) {
      set_stdianpaofan(from.stdianpaofan());
    }
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    std::swap(hutotalscore_, other->hutotalscore_);
    sthuinfo_.Swap(&other->sthuinfo_);
    std::swap(sthupai_, other->sthupai_);
    std::swap(sthutype_, other->sthutype_);
    std::swap(sthufan_, other->sthufan_);
    std::swap(stdianpaositid_, other->stdianpaositid_);
    std::swap(stdianpaofan_, other->stdianpaofan_);
    std::swap(sitid_, other->sitid_);
    zhuabaoinfo_.Swap(&other->zhuabaoinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDianPaoInfo::kStCardFieldNumber;
#endif  // !_MSC_VER

tagDianPaoInfo::tagDianPaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDianPaoInfo::InitAsDefaultInstance() {
}

tagDianPaoInfo::tagDianPaoInfo(const tagDianPaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDianPaoInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDianPaoInfo::~tagDianPaoInfo() {
  SharedDtor();
}

void tagDianPaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDianPaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDianPaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDianPaoInfo_descriptor_;
}

const tagDianPaoInfo& tagDianPaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagDianPaoInfo* tagDianPaoInfo::default_instance_ = NULL;

tagDianPaoInfo* tagDianPaoInfo::New() const {
  return new tagDianPaoInfo;
}

void tagDianPaoInfo::Clear() {
  stcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDianPaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_stcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDianPaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 stCard = 2;
  for (int i = 0; i < this->stcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->stcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDianPaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 stCard = 2;
  for (int i = 0; i < this->stcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->stcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDianPaoInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 stCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stcard(i));
    }
    total_size += 1 * this->stcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDianPaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDianPaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDianPaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDianPaoInfo::MergeFrom(const tagDianPaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stcard_.MergeFrom(from.stcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDianPaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDianPaoInfo::CopyFrom(const tagDianPaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDianPaoInfo::IsInitialized() const {

  return true;
}

void tagDianPaoInfo::Swap(tagDianPaoInfo* other) {
  if (other != this) {
    stcard_.Swap(&other->stcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDianPaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDianPaoInfo_descriptor_;
  metadata.reflection = tagDianPaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangReturn::kSitidFieldNumber;
const int tagGangReturn::kStReturnGangscoreFieldNumber;
#endif  // !_MSC_VER

tagGangReturn::tagGangReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangReturn::InitAsDefaultInstance() {
}

tagGangReturn::tagGangReturn(const tagGangReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangReturn::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  streturngangscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangReturn::~tagGangReturn() {
  SharedDtor();
}

void tagGangReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangReturn_descriptor_;
}

const tagGangReturn& tagGangReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagGangReturn* tagGangReturn::default_instance_ = NULL;

tagGangReturn* tagGangReturn::New() const {
  return new tagGangReturn;
}

void tagGangReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    streturngangscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stReturnGangscore;
        break;
      }

      // optional int32 stReturnGangscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stReturnGangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streturngangscore_)));
          set_has_streturngangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 stReturnGangscore = 2;
  if (has_streturngangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->streturngangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 stReturnGangscore = 2;
  if (has_streturngangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->streturngangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 stReturnGangscore = 2;
    if (has_streturngangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streturngangscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangReturn::MergeFrom(const tagGangReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_streturngangscore()) {
      set_streturngangscore(from.streturngangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangReturn::CopyFrom(const tagGangReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangReturn::IsInitialized() const {

  return true;
}

void tagGangReturn::Swap(tagGangReturn* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(streturngangscore_, other->streturngangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangReturn_descriptor_;
  metadata.reflection = tagGangReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangScore::kSitidFieldNumber;
const int tagGangScore::kGangScoreFieldNumber;
#endif  // !_MSC_VER

tagGangScore::tagGangScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangScore::InitAsDefaultInstance() {
}

tagGangScore::tagGangScore(const tagGangScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangScore::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  gangscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangScore::~tagGangScore() {
  SharedDtor();
}

void tagGangScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangScore_descriptor_;
}

const tagGangScore& tagGangScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagGangScore* tagGangScore::default_instance_ = NULL;

tagGangScore* tagGangScore::New() const {
  return new tagGangScore;
}

void tagGangScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    gangscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangScore;
        break;
      }

      // optional int32 GangScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangscore_)));
          set_has_gangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 GangScore = 2;
  if (has_gangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 GangScore = 2;
  if (has_gangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 GangScore = 2;
    if (has_gangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangScore::MergeFrom(const tagGangScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_gangscore()) {
      set_gangscore(from.gangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangScore::CopyFrom(const tagGangScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangScore::IsInitialized() const {

  return true;
}

void tagGangScore::Swap(tagGangScore* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(gangscore_, other->gangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangScore_descriptor_;
  metadata.reflection = tagGangScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDajiaoReturn::kSitidFieldNumber;
const int tagDajiaoReturn::kStDajiaoscoreFieldNumber;
#endif  // !_MSC_VER

tagDajiaoReturn::tagDajiaoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDajiaoReturn::InitAsDefaultInstance() {
}

tagDajiaoReturn::tagDajiaoReturn(const tagDajiaoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDajiaoReturn::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  stdajiaoscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDajiaoReturn::~tagDajiaoReturn() {
  SharedDtor();
}

void tagDajiaoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDajiaoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDajiaoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDajiaoReturn_descriptor_;
}

const tagDajiaoReturn& tagDajiaoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagDajiaoReturn* tagDajiaoReturn::default_instance_ = NULL;

tagDajiaoReturn* tagDajiaoReturn::New() const {
  return new tagDajiaoReturn;
}

void tagDajiaoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    stdajiaoscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDajiaoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stDajiaoscore;
        break;
      }

      // optional int32 stDajiaoscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDajiaoscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdajiaoscore_)));
          set_has_stdajiaoscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDajiaoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 stDajiaoscore = 2;
  if (has_stdajiaoscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stdajiaoscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDajiaoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 stDajiaoscore = 2;
  if (has_stdajiaoscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stdajiaoscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDajiaoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 stDajiaoscore = 2;
    if (has_stdajiaoscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdajiaoscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDajiaoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDajiaoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDajiaoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDajiaoReturn::MergeFrom(const tagDajiaoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_stdajiaoscore()) {
      set_stdajiaoscore(from.stdajiaoscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDajiaoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDajiaoReturn::CopyFrom(const tagDajiaoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDajiaoReturn::IsInitialized() const {

  return true;
}

void tagDajiaoReturn::Swap(tagDajiaoReturn* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(stdajiaoscore_, other->stdajiaoscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDajiaoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDajiaoReturn_descriptor_;
  metadata.reflection = tagDajiaoReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagQiongLaiGameEnd::kStUserHuFieldNumber;
const int tagQiongLaiGameEnd::kStDianPaoInfoFieldNumber;
const int tagQiongLaiGameEnd::kStDajiaoReturnGangFieldNumber;
const int tagQiongLaiGameEnd::kStReturnGangFieldNumber;
const int tagQiongLaiGameEnd::kStGangScoreFieldNumber;
#endif  // !_MSC_VER

tagQiongLaiGameEnd::tagQiongLaiGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagQiongLaiGameEnd::InitAsDefaultInstance() {
}

tagQiongLaiGameEnd::tagQiongLaiGameEnd(const tagQiongLaiGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagQiongLaiGameEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagQiongLaiGameEnd::~tagQiongLaiGameEnd() {
  SharedDtor();
}

void tagQiongLaiGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagQiongLaiGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagQiongLaiGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagQiongLaiGameEnd_descriptor_;
}

const tagQiongLaiGameEnd& tagQiongLaiGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagQiongLaiGameEnd* tagQiongLaiGameEnd::default_instance_ = NULL;

tagQiongLaiGameEnd* tagQiongLaiGameEnd::New() const {
  return new tagQiongLaiGameEnd;
}

void tagQiongLaiGameEnd::Clear() {
  stuserhu_.Clear();
  stdianpaoinfo_.Clear();
  stdajiaoreturngang_.Clear();
  streturngang_.Clear();
  stgangscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagQiongLaiGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.qionglaimj.tagUserHuInfo stUserHu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserHu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuserhu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUserHu;
        if (input->ExpectTag(18)) goto parse_stDianPaoInfo;
        break;
      }

      // repeated .proto.game.qionglaimj.tagDianPaoInfo stDianPaoInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stDianPaoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdianpaoinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stDianPaoInfo;
        if (input->ExpectTag(26)) goto parse_stDajiaoReturnGang;
        break;
      }

      // repeated .proto.game.qionglaimj.tagDajiaoReturn stDajiaoReturnGang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stDajiaoReturnGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdajiaoreturngang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stDajiaoReturnGang;
        if (input->ExpectTag(34)) goto parse_stReturnGang;
        break;
      }

      // repeated .proto.game.qionglaimj.tagGangReturn stReturnGang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReturnGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streturngang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stReturnGang;
        if (input->ExpectTag(42)) goto parse_stGangScore;
        break;
      }

      // repeated .proto.game.qionglaimj.tagGangScore stGangScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stGangScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stgangscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stGangScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagQiongLaiGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.qionglaimj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stuserhu(i), output);
  }

  // repeated .proto.game.qionglaimj.tagDianPaoInfo stDianPaoInfo = 2;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stdianpaoinfo(i), output);
  }

  // repeated .proto.game.qionglaimj.tagDajiaoReturn stDajiaoReturnGang = 3;
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stdajiaoreturngang(i), output);
  }

  // repeated .proto.game.qionglaimj.tagGangReturn stReturnGang = 4;
  for (int i = 0; i < this->streturngang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->streturngang(i), output);
  }

  // repeated .proto.game.qionglaimj.tagGangScore stGangScore = 5;
  for (int i = 0; i < this->stgangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stgangscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagQiongLaiGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.qionglaimj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stuserhu(i), target);
  }

  // repeated .proto.game.qionglaimj.tagDianPaoInfo stDianPaoInfo = 2;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stdianpaoinfo(i), target);
  }

  // repeated .proto.game.qionglaimj.tagDajiaoReturn stDajiaoReturnGang = 3;
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stdajiaoreturngang(i), target);
  }

  // repeated .proto.game.qionglaimj.tagGangReturn stReturnGang = 4;
  for (int i = 0; i < this->streturngang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->streturngang(i), target);
  }

  // repeated .proto.game.qionglaimj.tagGangScore stGangScore = 5;
  for (int i = 0; i < this->stgangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stgangscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagQiongLaiGameEnd::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.qionglaimj.tagUserHuInfo stUserHu = 1;
  total_size += 1 * this->stuserhu_size();
  for (int i = 0; i < this->stuserhu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuserhu(i));
  }

  // repeated .proto.game.qionglaimj.tagDianPaoInfo stDianPaoInfo = 2;
  total_size += 1 * this->stdianpaoinfo_size();
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdianpaoinfo(i));
  }

  // repeated .proto.game.qionglaimj.tagDajiaoReturn stDajiaoReturnGang = 3;
  total_size += 1 * this->stdajiaoreturngang_size();
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdajiaoreturngang(i));
  }

  // repeated .proto.game.qionglaimj.tagGangReturn stReturnGang = 4;
  total_size += 1 * this->streturngang_size();
  for (int i = 0; i < this->streturngang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streturngang(i));
  }

  // repeated .proto.game.qionglaimj.tagGangScore stGangScore = 5;
  total_size += 1 * this->stgangscore_size();
  for (int i = 0; i < this->stgangscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stgangscore(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagQiongLaiGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagQiongLaiGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagQiongLaiGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagQiongLaiGameEnd::MergeFrom(const tagQiongLaiGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stuserhu_.MergeFrom(from.stuserhu_);
  stdianpaoinfo_.MergeFrom(from.stdianpaoinfo_);
  stdajiaoreturngang_.MergeFrom(from.stdajiaoreturngang_);
  streturngang_.MergeFrom(from.streturngang_);
  stgangscore_.MergeFrom(from.stgangscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagQiongLaiGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagQiongLaiGameEnd::CopyFrom(const tagQiongLaiGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagQiongLaiGameEnd::IsInitialized() const {

  return true;
}

void tagQiongLaiGameEnd::Swap(tagQiongLaiGameEnd* other) {
  if (other != this) {
    stuserhu_.Swap(&other->stuserhu_);
    stdianpaoinfo_.Swap(&other->stdianpaoinfo_);
    stdajiaoreturngang_.Swap(&other->stdajiaoreturngang_);
    streturngang_.Swap(&other->streturngang_);
    stgangscore_.Swap(&other->stgangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagQiongLaiGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagQiongLaiGameEnd_descriptor_;
  metadata.reflection = tagQiongLaiGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagOpListenInfo::kIsHaveOpListenFieldNumber;
const int tagOpListenInfo::kChairIDFieldNumber;
const int tagOpListenInfo::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

tagOpListenInfo::tagOpListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagOpListenInfo::InitAsDefaultInstance() {
}

tagOpListenInfo::tagOpListenInfo(const tagOpListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagOpListenInfo::SharedCtor() {
  _cached_size_ = 0;
  ishaveoplisten_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagOpListenInfo::~tagOpListenInfo() {
  SharedDtor();
}

void tagOpListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagOpListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagOpListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagOpListenInfo_descriptor_;
}

const tagOpListenInfo& tagOpListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

tagOpListenInfo* tagOpListenInfo::default_instance_ = NULL;

tagOpListenInfo* tagOpListenInfo::New() const {
  return new tagOpListenInfo;
}

void tagOpListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishaveoplisten_ = 0;
    chairid_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagOpListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isHaveOpListen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishaveoplisten_)));
          set_has_ishaveoplisten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChairID;
        break;
      }

      // optional int32 ChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagOpListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishaveoplisten(), output);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagOpListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishaveoplisten(), target);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagOpListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isHaveOpListen = 1;
    if (has_ishaveoplisten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishaveoplisten());
    }

    // optional int32 ChairID = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagOpListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagOpListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagOpListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagOpListenInfo::MergeFrom(const tagOpListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishaveoplisten()) {
      set_ishaveoplisten(from.ishaveoplisten());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagOpListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagOpListenInfo::CopyFrom(const tagOpListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagOpListenInfo::IsInitialized() const {

  return true;
}

void tagOpListenInfo::Swap(tagOpListenInfo* other) {
  if (other != this) {
    std::swap(ishaveoplisten_, other->ishaveoplisten_);
    std::swap(chairid_, other->chairid_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagOpListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagOpListenInfo_descriptor_;
  metadata.reflection = tagOpListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChooseInfo::kZiMoJiaFanJiaDiFieldNumber;
const int AckChooseInfo::kLiangBuDaoFieldNumber;
const int AckChooseInfo::kHuaZhongHuaPaoZhongPaoFieldNumber;
#endif  // !_MSC_VER

AckChooseInfo::AckChooseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChooseInfo::InitAsDefaultInstance() {
}

AckChooseInfo::AckChooseInfo(const AckChooseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChooseInfo::SharedCtor() {
  _cached_size_ = 0;
  zimojiafanjiadi_ = 0;
  liangbudao_ = 0;
  huazhonghuapaozhongpao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChooseInfo::~AckChooseInfo() {
  SharedDtor();
}

void AckChooseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChooseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChooseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChooseInfo_descriptor_;
}

const AckChooseInfo& AckChooseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

AckChooseInfo* AckChooseInfo::default_instance_ = NULL;

AckChooseInfo* AckChooseInfo::New() const {
  return new AckChooseInfo;
}

void AckChooseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zimojiafanjiadi_ = 0;
    liangbudao_ = 0;
    huazhonghuapaozhongpao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChooseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ZiMoJiaFanJiaDi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zimojiafanjiadi_)));
          set_has_zimojiafanjiadi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LiangBuDao;
        break;
      }

      // optional int32 LiangBuDao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LiangBuDao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liangbudao_)));
          set_has_liangbudao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaZhongHuaPaoZhongPao;
        break;
      }

      // optional int32 HuaZhongHuaPaoZhongPao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaZhongHuaPaoZhongPao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huazhonghuapaozhongpao_)));
          set_has_huazhonghuapaozhongpao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChooseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ZiMoJiaFanJiaDi = 1;
  if (has_zimojiafanjiadi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zimojiafanjiadi(), output);
  }

  // optional int32 LiangBuDao = 2;
  if (has_liangbudao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->liangbudao(), output);
  }

  // optional int32 HuaZhongHuaPaoZhongPao = 3;
  if (has_huazhonghuapaozhongpao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huazhonghuapaozhongpao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChooseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ZiMoJiaFanJiaDi = 1;
  if (has_zimojiafanjiadi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zimojiafanjiadi(), target);
  }

  // optional int32 LiangBuDao = 2;
  if (has_liangbudao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->liangbudao(), target);
  }

  // optional int32 HuaZhongHuaPaoZhongPao = 3;
  if (has_huazhonghuapaozhongpao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huazhonghuapaozhongpao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChooseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ZiMoJiaFanJiaDi = 1;
    if (has_zimojiafanjiadi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zimojiafanjiadi());
    }

    // optional int32 LiangBuDao = 2;
    if (has_liangbudao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liangbudao());
    }

    // optional int32 HuaZhongHuaPaoZhongPao = 3;
    if (has_huazhonghuapaozhongpao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huazhonghuapaozhongpao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChooseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChooseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChooseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChooseInfo::MergeFrom(const AckChooseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zimojiafanjiadi()) {
      set_zimojiafanjiadi(from.zimojiafanjiadi());
    }
    if (from.has_liangbudao()) {
      set_liangbudao(from.liangbudao());
    }
    if (from.has_huazhonghuapaozhongpao()) {
      set_huazhonghuapaozhongpao(from.huazhonghuapaozhongpao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChooseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChooseInfo::CopyFrom(const AckChooseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChooseInfo::IsInitialized() const {

  return true;
}

void AckChooseInfo::Swap(AckChooseInfo* other) {
  if (other != this) {
    std::swap(zimojiafanjiadi_, other->zimojiafanjiadi_);
    std::swap(liangbudao_, other->liangbudao_);
    std::swap(huazhonghuapaozhongpao_, other->huazhonghuapaozhongpao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChooseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChooseInfo_descriptor_;
  metadata.reflection = AckChooseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCustomiedInfo::kGametypeFieldNumber;
const int AckCustomiedInfo::kIsYipaodouxiangFieldNumber;
const int AckCustomiedInfo::kIsQiangganghuFieldNumber;
const int AckCustomiedInfo::kIsChangeCardFieldNumber;
const int AckCustomiedInfo::kIsCheckhuazhudajiaoFieldNumber;
const int AckCustomiedInfo::kIsHavePiaoFieldNumber;
const int AckCustomiedInfo::kPiaoTimeFieldNumber;
const int AckCustomiedInfo::kUserPiaoFieldNumber;
const int AckCustomiedInfo::kIsPiaoyetFieldNumber;
const int AckCustomiedInfo::kRoomTypeFieldNumber;
const int AckCustomiedInfo::kListenTypeFieldNumber;
const int AckCustomiedInfo::kStOpListenFieldNumber;
const int AckCustomiedInfo::kStQingHuInfoFieldNumber;
const int AckCustomiedInfo::kStChooseInfoFieldNumber;
const int AckCustomiedInfo::kOpType2FieldNumber;
const int AckCustomiedInfo::kStHuCardShowFieldNumber;
const int AckCustomiedInfo::kLackOpeOkFieldNumber;
const int AckCustomiedInfo::kLackTypeFieldNumber;
const int AckCustomiedInfo::kNPaoHuPaiNumFieldNumber;
#endif  // !_MSC_VER

AckCustomiedInfo::AckCustomiedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCustomiedInfo::InitAsDefaultInstance() {
  stchooseinfo_ = const_cast< ::proto::game::qionglaimj::AckChooseInfo*>(&::proto::game::qionglaimj::AckChooseInfo::default_instance());
  sthucardshow_ = const_cast< ::proto::game::qionglaimj::AckShowHuCard*>(&::proto::game::qionglaimj::AckShowHuCard::default_instance());
}

AckCustomiedInfo::AckCustomiedInfo(const AckCustomiedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCustomiedInfo::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  isyipaodouxiang_ = 0;
  isqiangganghu_ = 0;
  ischangecard_ = 0;
  ischeckhuazhudajiao_ = 0;
  ishavepiao_ = 0;
  piaotime_ = 0;
  ispiaoyet_ = 0;
  roomtype_ = 0;
  listentype_ = 0;
  stchooseinfo_ = NULL;
  optype2_ = 0;
  sthucardshow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCustomiedInfo::~AckCustomiedInfo() {
  SharedDtor();
}

void AckCustomiedInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stchooseinfo_;
    delete sthucardshow_;
  }
}

void AckCustomiedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCustomiedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCustomiedInfo_descriptor_;
}

const AckCustomiedInfo& AckCustomiedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

AckCustomiedInfo* AckCustomiedInfo::default_instance_ = NULL;

AckCustomiedInfo* AckCustomiedInfo::New() const {
  return new AckCustomiedInfo;
}

void AckCustomiedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    isyipaodouxiang_ = 0;
    isqiangganghu_ = 0;
    ischangecard_ = 0;
    ischeckhuazhudajiao_ = 0;
    ishavepiao_ = 0;
    piaotime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ispiaoyet_ = 0;
    roomtype_ = 0;
    listentype_ = 0;
    if (has_stchooseinfo()) {
      if (stchooseinfo_ != NULL) stchooseinfo_->::proto::game::qionglaimj::AckChooseInfo::Clear();
    }
    optype2_ = 0;
    if (has_sthucardshow()) {
      if (sthucardshow_ != NULL) sthucardshow_->::proto::game::qionglaimj::AckShowHuCard::Clear();
    }
  }
  userpiao_.Clear();
  stoplisten_.Clear();
  stqinghuinfo_.Clear();
  lackopeok_.Clear();
  lacktype_.Clear();
  npaohupainum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCustomiedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isYipaodouxiang;
        break;
      }

      // optional int32 isYipaodouxiang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYipaodouxiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isyipaodouxiang_)));
          set_has_isyipaodouxiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isQiangganghu;
        break;
      }

      // optional int32 isQiangganghu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqiangganghu_)));
          set_has_isqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isChangeCard;
        break;
      }

      // optional int32 isChangeCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischangecard_)));
          set_has_ischangecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCheckhuazhudajiao;
        break;
      }

      // optional int32 isCheckhuazhudajiao = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCheckhuazhudajiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischeckhuazhudajiao_)));
          set_has_ischeckhuazhudajiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHavePiao;
        break;
      }

      // optional int32 isHavePiao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHavePiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishavepiao_)));
          set_has_ishavepiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piaoTime;
        break;
      }

      // optional int32 piaoTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaotime_)));
          set_has_piaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        break;
      }

      // repeated int32 UserPiao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_userpiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        if (input->ExpectTag(72)) goto parse_IsPiaoyet;
        break;
      }

      // optional int32 IsPiaoyet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPiaoyet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispiaoyet_)));
          set_has_ispiaoyet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomType;
        break;
      }

      // optional int32 RoomType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        break;
      }

      // repeated .proto.game.qionglaimj.tagOpListenInfo stOpListen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOpListen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoplisten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        if (input->ExpectTag(106)) goto parse_stQingHuInfo;
        break;
      }

      // repeated .proto.game.qionglaimj.AckQingInfo stQingHuInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stQingHuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stqinghuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_stQingHuInfo;
        if (input->ExpectTag(114)) goto parse_stChooseInfo;
        break;
      }

      // optional .proto.game.qionglaimj.AckChooseInfo stChooseInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stChooseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stchooseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_stHuCardShow;
        break;
      }

      // optional .proto.game.qionglaimj.AckShowHuCard stHuCardShow = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuCardShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sthucardshow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LackOpeOk;
        break;
      }

      // repeated int32 LackOpeOk = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LackOpeOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lackopeok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lackopeok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LackOpeOk;
        if (input->ExpectTag(144)) goto parse_LackType;
        break;
      }

      // repeated int32 LackType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_lacktype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lacktype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_LackType;
        if (input->ExpectTag(152)) goto parse_nPaoHuPaiNum;
        break;
      }

      // repeated int32 nPaoHuPaiNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPaoHuPaiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_npaohupainum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_npaohupainum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nPaoHuPaiNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCustomiedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isyipaodouxiang(), output);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isqiangganghu(), output);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ischangecard(), output);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ischeckhuazhudajiao(), output);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ishavepiao(), output);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->piaotime(), output);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->userpiao(i), output);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ispiaoyet(), output);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roomtype(), output);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->listentype(), output);
  }

  // repeated .proto.game.qionglaimj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stoplisten(i), output);
  }

  // repeated .proto.game.qionglaimj.AckQingInfo stQingHuInfo = 13;
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stqinghuinfo(i), output);
  }

  // optional .proto.game.qionglaimj.AckChooseInfo stChooseInfo = 14;
  if (has_stchooseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->stchooseinfo(), output);
  }

  // optional int32 OpType2 = 15;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->optype2(), output);
  }

  // optional .proto.game.qionglaimj.AckShowHuCard stHuCardShow = 16;
  if (has_sthucardshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sthucardshow(), output);
  }

  // repeated int32 LackOpeOk = 17;
  for (int i = 0; i < this->lackopeok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lackopeok(i), output);
  }

  // repeated int32 LackType = 18;
  for (int i = 0; i < this->lacktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->lacktype(i), output);
  }

  // repeated int32 nPaoHuPaiNum = 19;
  for (int i = 0; i < this->npaohupainum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->npaohupainum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCustomiedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isyipaodouxiang(), target);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isqiangganghu(), target);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ischangecard(), target);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ischeckhuazhudajiao(), target);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ishavepiao(), target);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->piaotime(), target);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->userpiao(i), target);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ispiaoyet(), target);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roomtype(), target);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->listentype(), target);
  }

  // repeated .proto.game.qionglaimj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stoplisten(i), target);
  }

  // repeated .proto.game.qionglaimj.AckQingInfo stQingHuInfo = 13;
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stqinghuinfo(i), target);
  }

  // optional .proto.game.qionglaimj.AckChooseInfo stChooseInfo = 14;
  if (has_stchooseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->stchooseinfo(), target);
  }

  // optional int32 OpType2 = 15;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->optype2(), target);
  }

  // optional .proto.game.qionglaimj.AckShowHuCard stHuCardShow = 16;
  if (has_sthucardshow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sthucardshow(), target);
  }

  // repeated int32 LackOpeOk = 17;
  for (int i = 0; i < this->lackopeok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lackopeok(i), target);
  }

  // repeated int32 LackType = 18;
  for (int i = 0; i < this->lacktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->lacktype(i), target);
  }

  // repeated int32 nPaoHuPaiNum = 19;
  for (int i = 0; i < this->npaohupainum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->npaohupainum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCustomiedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional int32 isYipaodouxiang = 2;
    if (has_isyipaodouxiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isyipaodouxiang());
    }

    // optional int32 isQiangganghu = 3;
    if (has_isqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqiangganghu());
    }

    // optional int32 isChangeCard = 4;
    if (has_ischangecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischangecard());
    }

    // optional int32 isCheckhuazhudajiao = 5;
    if (has_ischeckhuazhudajiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischeckhuazhudajiao());
    }

    // optional int32 isHavePiao = 6;
    if (has_ishavepiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishavepiao());
    }

    // optional int32 piaoTime = 7;
    if (has_piaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaotime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 IsPiaoyet = 9;
    if (has_ispiaoyet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispiaoyet());
    }

    // optional int32 RoomType = 10;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 ListenType = 11;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

    // optional .proto.game.qionglaimj.AckChooseInfo stChooseInfo = 14;
    if (has_stchooseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stchooseinfo());
    }

    // optional int32 OpType2 = 15;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional .proto.game.qionglaimj.AckShowHuCard stHuCardShow = 16;
    if (has_sthucardshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sthucardshow());
    }

  }
  // repeated int32 UserPiao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpiao(i));
    }
    total_size += 1 * this->userpiao_size() + data_size;
  }

  // repeated .proto.game.qionglaimj.tagOpListenInfo stOpListen = 12;
  total_size += 1 * this->stoplisten_size();
  for (int i = 0; i < this->stoplisten_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoplisten(i));
  }

  // repeated .proto.game.qionglaimj.AckQingInfo stQingHuInfo = 13;
  total_size += 1 * this->stqinghuinfo_size();
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stqinghuinfo(i));
  }

  // repeated int32 LackOpeOk = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lackopeok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lackopeok(i));
    }
    total_size += 2 * this->lackopeok_size() + data_size;
  }

  // repeated int32 LackType = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->lacktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lacktype(i));
    }
    total_size += 2 * this->lacktype_size() + data_size;
  }

  // repeated int32 nPaoHuPaiNum = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->npaohupainum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->npaohupainum(i));
    }
    total_size += 2 * this->npaohupainum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCustomiedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCustomiedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCustomiedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCustomiedInfo::MergeFrom(const AckCustomiedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpiao_.MergeFrom(from.userpiao_);
  stoplisten_.MergeFrom(from.stoplisten_);
  stqinghuinfo_.MergeFrom(from.stqinghuinfo_);
  lackopeok_.MergeFrom(from.lackopeok_);
  lacktype_.MergeFrom(from.lacktype_);
  npaohupainum_.MergeFrom(from.npaohupainum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isyipaodouxiang()) {
      set_isyipaodouxiang(from.isyipaodouxiang());
    }
    if (from.has_isqiangganghu()) {
      set_isqiangganghu(from.isqiangganghu());
    }
    if (from.has_ischangecard()) {
      set_ischangecard(from.ischangecard());
    }
    if (from.has_ischeckhuazhudajiao()) {
      set_ischeckhuazhudajiao(from.ischeckhuazhudajiao());
    }
    if (from.has_ishavepiao()) {
      set_ishavepiao(from.ishavepiao());
    }
    if (from.has_piaotime()) {
      set_piaotime(from.piaotime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ispiaoyet()) {
      set_ispiaoyet(from.ispiaoyet());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
    if (from.has_stchooseinfo()) {
      mutable_stchooseinfo()->::proto::game::qionglaimj::AckChooseInfo::MergeFrom(from.stchooseinfo());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_sthucardshow()) {
      mutable_sthucardshow()->::proto::game::qionglaimj::AckShowHuCard::MergeFrom(from.sthucardshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCustomiedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCustomiedInfo::CopyFrom(const AckCustomiedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCustomiedInfo::IsInitialized() const {

  return true;
}

void AckCustomiedInfo::Swap(AckCustomiedInfo* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(isyipaodouxiang_, other->isyipaodouxiang_);
    std::swap(isqiangganghu_, other->isqiangganghu_);
    std::swap(ischangecard_, other->ischangecard_);
    std::swap(ischeckhuazhudajiao_, other->ischeckhuazhudajiao_);
    std::swap(ishavepiao_, other->ishavepiao_);
    std::swap(piaotime_, other->piaotime_);
    userpiao_.Swap(&other->userpiao_);
    std::swap(ispiaoyet_, other->ispiaoyet_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(listentype_, other->listentype_);
    stoplisten_.Swap(&other->stoplisten_);
    stqinghuinfo_.Swap(&other->stqinghuinfo_);
    std::swap(stchooseinfo_, other->stchooseinfo_);
    std::swap(optype2_, other->optype2_);
    std::swap(sthucardshow_, other->sthucardshow_);
    lackopeok_.Swap(&other->lackopeok_);
    lacktype_.Swap(&other->lacktype_);
    npaohupainum_.Swap(&other->npaohupainum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCustomiedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCustomiedInfo_descriptor_;
  metadata.reflection = AckCustomiedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckShowHuCard::kSitidFieldNumber;
const int AckShowHuCard::kHuCardFieldNumber;
#endif  // !_MSC_VER

AckShowHuCard::AckShowHuCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckShowHuCard::InitAsDefaultInstance() {
}

AckShowHuCard::AckShowHuCard(const AckShowHuCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckShowHuCard::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  hucard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckShowHuCard::~AckShowHuCard() {
  SharedDtor();
}

void AckShowHuCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckShowHuCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckShowHuCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckShowHuCard_descriptor_;
}

const AckShowHuCard& AckShowHuCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

AckShowHuCard* AckShowHuCard::default_instance_ = NULL;

AckShowHuCard* AckShowHuCard::New() const {
  return new AckShowHuCard;
}

void AckShowHuCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    hucard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckShowHuCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuCard;
        break;
      }

      // optional int32 HuCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckShowHuCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 HuCard = 2;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hucard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckShowHuCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 HuCard = 2;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hucard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckShowHuCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 HuCard = 2;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckShowHuCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckShowHuCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckShowHuCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckShowHuCard::MergeFrom(const AckShowHuCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckShowHuCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckShowHuCard::CopyFrom(const AckShowHuCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckShowHuCard::IsInitialized() const {

  return true;
}

void AckShowHuCard::Swap(AckShowHuCard* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(hucard_, other->hucard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckShowHuCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckShowHuCard_descriptor_;
  metadata.reflection = AckShowHuCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckQingInfo::kSitidFieldNumber;
const int AckQingInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

AckQingInfo::AckQingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckQingInfo::InitAsDefaultInstance() {
}

AckQingInfo::AckQingInfo(const AckQingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckQingInfo::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckQingInfo::~AckQingInfo() {
  SharedDtor();
}

void AckQingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckQingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckQingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckQingInfo_descriptor_;
}

const AckQingInfo& AckQingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qionglaigameproto_2eproto();
  return *default_instance_;
}

AckQingInfo* AckQingInfo::default_instance_ = NULL;

AckQingInfo* AckQingInfo::New() const {
  return new AckQingInfo;
}

void AckQingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckQingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckQingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckQingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckQingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckQingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckQingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckQingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckQingInfo::MergeFrom(const AckQingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckQingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQingInfo::CopyFrom(const AckQingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQingInfo::IsInitialized() const {

  return true;
}

void AckQingInfo::Swap(AckQingInfo* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckQingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckQingInfo_descriptor_;
  metadata.reflection = AckQingInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qionglaimj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
