// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: changtaimajiang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "changtaimajiang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace changtaimajiang {

namespace {

const ::google::protobuf::Descriptor* RspGameLaiziInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGameLaiziInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGameHuapaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGameHuapaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGameHuapaiInitCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGameHuapaiInitCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndPlayerScoresInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndPlayerScoresInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGenZhuang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGenZhuang_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_changtaimajiang_2eproto() {
  protobuf_AddDesc_changtaimajiang_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "changtaimajiang.proto");
  GOOGLE_CHECK(file != NULL);
  RspGameLaiziInfo_descriptor_ = file->message_type(0);
  static const int RspGameLaiziInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, laizishowlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, laizisignlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, dicelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, laizireplacelist_),
  };
  RspGameLaiziInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGameLaiziInfo_descriptor_,
      RspGameLaiziInfo::default_instance_,
      RspGameLaiziInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameLaiziInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGameLaiziInfo));
  RspGameHuapaiInfo_descriptor_ = file->message_type(1);
  static const int RspGameHuapaiInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInfo, huapailist_),
  };
  RspGameHuapaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGameHuapaiInfo_descriptor_,
      RspGameHuapaiInfo::default_instance_,
      RspGameHuapaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGameHuapaiInfo));
  RspGameHuapaiInitCardInfo_descriptor_ = file->message_type(2);
  static const int RspGameHuapaiInitCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInitCardInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInitCardInfo, cards_),
  };
  RspGameHuapaiInitCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGameHuapaiInitCardInfo_descriptor_,
      RspGameHuapaiInitCardInfo::default_instance_,
      RspGameHuapaiInitCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInitCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGameHuapaiInitCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGameHuapaiInitCardInfo));
  GameEndPlayerScoresInfo_descriptor_ = file->message_type(3);
  static const int GameEndPlayerScoresInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, gangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, dianscroe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, fanscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, zengscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, gangshangpaoscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, extra_dianscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, total_dianscore_),
  };
  GameEndPlayerScoresInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndPlayerScoresInfo_descriptor_,
      GameEndPlayerScoresInfo::default_instance_,
      GameEndPlayerScoresInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndPlayerScoresInfo));
  RspGenZhuang_descriptor_ = file->message_type(4);
  static const int RspGenZhuang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGenZhuang, gengzhaungflag_),
  };
  RspGenZhuang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGenZhuang_descriptor_,
      RspGenZhuang::default_instance_,
      RspGenZhuang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGenZhuang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGenZhuang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGenZhuang));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_changtaimajiang_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGameLaiziInfo_descriptor_, &RspGameLaiziInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGameHuapaiInfo_descriptor_, &RspGameHuapaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGameHuapaiInitCardInfo_descriptor_, &RspGameHuapaiInitCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndPlayerScoresInfo_descriptor_, &GameEndPlayerScoresInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGenZhuang_descriptor_, &RspGenZhuang::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_changtaimajiang_2eproto() {
  delete RspGameLaiziInfo::default_instance_;
  delete RspGameLaiziInfo_reflection_;
  delete RspGameHuapaiInfo::default_instance_;
  delete RspGameHuapaiInfo_reflection_;
  delete RspGameHuapaiInitCardInfo::default_instance_;
  delete RspGameHuapaiInitCardInfo_reflection_;
  delete GameEndPlayerScoresInfo::default_instance_;
  delete GameEndPlayerScoresInfo_reflection_;
  delete RspGenZhuang::default_instance_;
  delete RspGenZhuang_reflection_;
}

void protobuf_AddDesc_changtaimajiang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025changtaimajiang.proto\022\032proto.game.chan"
    "gtaimajiang\"z\n\020RspGameLaiziInfo\022\025\n\rlaizi"
    "ShowList\030\001 \003(\005\022\025\n\rlaiziSignList\030\002 \003(\005\022\020\n"
    "\010diceList\030\003 \003(\005\022\014\n\004flag\030\004 \001(\010\022\030\n\020laiziRe"
    "placeList\030\005 \003(\005\"\'\n\021RspGameHuapaiInfo\022\022\n\n"
    "huapaiList\030\001 \003(\005\":\n\031RspGameHuapaiInitCar"
    "dInfo\022\016\n\006seatid\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005\"\322\001\n"
    "\027GameEndPlayerScoresInfo\022\016\n\006seatid\030\001 \001(\005"
    "\022\021\n\tgangscore\030\002 \001(\005\022\017\n\007huscore\030\003 \001(\005\022\021\n\t"
    "dianscroe\030\004 \001(\005\022\020\n\010fanscore\030\005 \001(\005\022\021\n\tzen"
    "gscore\030\006 \001(\005\022\031\n\021gangshangpaoscore\030\007 \001(\005\022"
    "\027\n\017extra_dianscore\030\010 \001(\005\022\027\n\017total_diansc"
    "ore\030\t \001(\005\"&\n\014RspGenZhuang\022\026\n\016gengzhaungf"
    "lag\030\001 \001(\010", 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "changtaimajiang.proto", &protobuf_RegisterTypes);
  RspGameLaiziInfo::default_instance_ = new RspGameLaiziInfo();
  RspGameHuapaiInfo::default_instance_ = new RspGameHuapaiInfo();
  RspGameHuapaiInitCardInfo::default_instance_ = new RspGameHuapaiInitCardInfo();
  GameEndPlayerScoresInfo::default_instance_ = new GameEndPlayerScoresInfo();
  RspGenZhuang::default_instance_ = new RspGenZhuang();
  RspGameLaiziInfo::default_instance_->InitAsDefaultInstance();
  RspGameHuapaiInfo::default_instance_->InitAsDefaultInstance();
  RspGameHuapaiInitCardInfo::default_instance_->InitAsDefaultInstance();
  GameEndPlayerScoresInfo::default_instance_->InitAsDefaultInstance();
  RspGenZhuang::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_changtaimajiang_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_changtaimajiang_2eproto {
  StaticDescriptorInitializer_changtaimajiang_2eproto() {
    protobuf_AddDesc_changtaimajiang_2eproto();
  }
} static_descriptor_initializer_changtaimajiang_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RspGameLaiziInfo::kLaiziShowListFieldNumber;
const int RspGameLaiziInfo::kLaiziSignListFieldNumber;
const int RspGameLaiziInfo::kDiceListFieldNumber;
const int RspGameLaiziInfo::kFlagFieldNumber;
const int RspGameLaiziInfo::kLaiziReplaceListFieldNumber;
#endif  // !_MSC_VER

RspGameLaiziInfo::RspGameLaiziInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGameLaiziInfo::InitAsDefaultInstance() {
}

RspGameLaiziInfo::RspGameLaiziInfo(const RspGameLaiziInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGameLaiziInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGameLaiziInfo::~RspGameLaiziInfo() {
  SharedDtor();
}

void RspGameLaiziInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGameLaiziInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGameLaiziInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGameLaiziInfo_descriptor_;
}

const RspGameLaiziInfo& RspGameLaiziInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changtaimajiang_2eproto();
  return *default_instance_;
}

RspGameLaiziInfo* RspGameLaiziInfo::default_instance_ = NULL;

RspGameLaiziInfo* RspGameLaiziInfo::New() const {
  return new RspGameLaiziInfo;
}

void RspGameLaiziInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    flag_ = false;
  }
  laizishowlist_.Clear();
  laizisignlist_.Clear();
  dicelist_.Clear();
  laizireplacelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGameLaiziInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 laiziShowList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziShowList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_laizishowlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizishowlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_laiziShowList;
        if (input->ExpectTag(16)) goto parse_laiziSignList;
        break;
      }

      // repeated int32 laiziSignList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziSignList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_laizisignlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizisignlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laiziSignList;
        if (input->ExpectTag(24)) goto parse_diceList;
        break;
      }

      // repeated int32 diceList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dicelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diceList;
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_laiziReplaceList;
        break;
      }

      // repeated int32 laiziReplaceList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziReplaceList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_laizireplacelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizireplacelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_laiziReplaceList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGameLaiziInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 laiziShowList = 1;
  for (int i = 0; i < this->laizishowlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->laizishowlist(i), output);
  }

  // repeated int32 laiziSignList = 2;
  for (int i = 0; i < this->laizisignlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->laizisignlist(i), output);
  }

  // repeated int32 diceList = 3;
  for (int i = 0; i < this->dicelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dicelist(i), output);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }

  // repeated int32 laiziReplaceList = 5;
  for (int i = 0; i < this->laizireplacelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->laizireplacelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGameLaiziInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 laiziShowList = 1;
  for (int i = 0; i < this->laizishowlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->laizishowlist(i), target);
  }

  // repeated int32 laiziSignList = 2;
  for (int i = 0; i < this->laizisignlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->laizisignlist(i), target);
  }

  // repeated int32 diceList = 3;
  for (int i = 0; i < this->dicelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->dicelist(i), target);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }

  // repeated int32 laiziReplaceList = 5;
  for (int i = 0; i < this->laizireplacelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->laizireplacelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGameLaiziInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 laiziShowList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizishowlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizishowlist(i));
    }
    total_size += 1 * this->laizishowlist_size() + data_size;
  }

  // repeated int32 laiziSignList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizisignlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizisignlist(i));
    }
    total_size += 1 * this->laizisignlist_size() + data_size;
  }

  // repeated int32 diceList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicelist(i));
    }
    total_size += 1 * this->dicelist_size() + data_size;
  }

  // repeated int32 laiziReplaceList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizireplacelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizireplacelist(i));
    }
    total_size += 1 * this->laizireplacelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGameLaiziInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGameLaiziInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGameLaiziInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGameLaiziInfo::MergeFrom(const RspGameLaiziInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  laizishowlist_.MergeFrom(from.laizishowlist_);
  laizisignlist_.MergeFrom(from.laizisignlist_);
  dicelist_.MergeFrom(from.dicelist_);
  laizireplacelist_.MergeFrom(from.laizireplacelist_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGameLaiziInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGameLaiziInfo::CopyFrom(const RspGameLaiziInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGameLaiziInfo::IsInitialized() const {

  return true;
}

void RspGameLaiziInfo::Swap(RspGameLaiziInfo* other) {
  if (other != this) {
    laizishowlist_.Swap(&other->laizishowlist_);
    laizisignlist_.Swap(&other->laizisignlist_);
    dicelist_.Swap(&other->dicelist_);
    std::swap(flag_, other->flag_);
    laizireplacelist_.Swap(&other->laizireplacelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGameLaiziInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGameLaiziInfo_descriptor_;
  metadata.reflection = RspGameLaiziInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGameHuapaiInfo::kHuapaiListFieldNumber;
#endif  // !_MSC_VER

RspGameHuapaiInfo::RspGameHuapaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGameHuapaiInfo::InitAsDefaultInstance() {
}

RspGameHuapaiInfo::RspGameHuapaiInfo(const RspGameHuapaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGameHuapaiInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGameHuapaiInfo::~RspGameHuapaiInfo() {
  SharedDtor();
}

void RspGameHuapaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGameHuapaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGameHuapaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGameHuapaiInfo_descriptor_;
}

const RspGameHuapaiInfo& RspGameHuapaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changtaimajiang_2eproto();
  return *default_instance_;
}

RspGameHuapaiInfo* RspGameHuapaiInfo::default_instance_ = NULL;

RspGameHuapaiInfo* RspGameHuapaiInfo::New() const {
  return new RspGameHuapaiInfo;
}

void RspGameHuapaiInfo::Clear() {
  huapailist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGameHuapaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 huapaiList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huapaiList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_huapailist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huapailist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_huapaiList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGameHuapaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 huapaiList = 1;
  for (int i = 0; i < this->huapailist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->huapailist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGameHuapaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 huapaiList = 1;
  for (int i = 0; i < this->huapailist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->huapailist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGameHuapaiInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 huapaiList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->huapailist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huapailist(i));
    }
    total_size += 1 * this->huapailist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGameHuapaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGameHuapaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGameHuapaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGameHuapaiInfo::MergeFrom(const RspGameHuapaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huapailist_.MergeFrom(from.huapailist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGameHuapaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGameHuapaiInfo::CopyFrom(const RspGameHuapaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGameHuapaiInfo::IsInitialized() const {

  return true;
}

void RspGameHuapaiInfo::Swap(RspGameHuapaiInfo* other) {
  if (other != this) {
    huapailist_.Swap(&other->huapailist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGameHuapaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGameHuapaiInfo_descriptor_;
  metadata.reflection = RspGameHuapaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGameHuapaiInitCardInfo::kSeatidFieldNumber;
const int RspGameHuapaiInitCardInfo::kCardsFieldNumber;
#endif  // !_MSC_VER

RspGameHuapaiInitCardInfo::RspGameHuapaiInitCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGameHuapaiInitCardInfo::InitAsDefaultInstance() {
}

RspGameHuapaiInitCardInfo::RspGameHuapaiInitCardInfo(const RspGameHuapaiInitCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGameHuapaiInitCardInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGameHuapaiInitCardInfo::~RspGameHuapaiInitCardInfo() {
  SharedDtor();
}

void RspGameHuapaiInitCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGameHuapaiInitCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGameHuapaiInitCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGameHuapaiInitCardInfo_descriptor_;
}

const RspGameHuapaiInitCardInfo& RspGameHuapaiInitCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changtaimajiang_2eproto();
  return *default_instance_;
}

RspGameHuapaiInitCardInfo* RspGameHuapaiInitCardInfo::default_instance_ = NULL;

RspGameHuapaiInitCardInfo* RspGameHuapaiInitCardInfo::New() const {
  return new RspGameHuapaiInitCardInfo;
}

void RspGameHuapaiInitCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGameHuapaiInitCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGameHuapaiInitCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGameHuapaiInitCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGameHuapaiInitCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGameHuapaiInitCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGameHuapaiInitCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGameHuapaiInitCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGameHuapaiInitCardInfo::MergeFrom(const RspGameHuapaiInitCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGameHuapaiInitCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGameHuapaiInitCardInfo::CopyFrom(const RspGameHuapaiInitCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGameHuapaiInitCardInfo::IsInitialized() const {

  return true;
}

void RspGameHuapaiInitCardInfo::Swap(RspGameHuapaiInitCardInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGameHuapaiInitCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGameHuapaiInitCardInfo_descriptor_;
  metadata.reflection = RspGameHuapaiInitCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndPlayerScoresInfo::kSeatidFieldNumber;
const int GameEndPlayerScoresInfo::kGangscoreFieldNumber;
const int GameEndPlayerScoresInfo::kHuscoreFieldNumber;
const int GameEndPlayerScoresInfo::kDianscroeFieldNumber;
const int GameEndPlayerScoresInfo::kFanscoreFieldNumber;
const int GameEndPlayerScoresInfo::kZengscoreFieldNumber;
const int GameEndPlayerScoresInfo::kGangshangpaoscoreFieldNumber;
const int GameEndPlayerScoresInfo::kExtraDianscoreFieldNumber;
const int GameEndPlayerScoresInfo::kTotalDianscoreFieldNumber;
#endif  // !_MSC_VER

GameEndPlayerScoresInfo::GameEndPlayerScoresInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndPlayerScoresInfo::InitAsDefaultInstance() {
}

GameEndPlayerScoresInfo::GameEndPlayerScoresInfo(const GameEndPlayerScoresInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndPlayerScoresInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  gangscore_ = 0;
  huscore_ = 0;
  dianscroe_ = 0;
  fanscore_ = 0;
  zengscore_ = 0;
  gangshangpaoscore_ = 0;
  extra_dianscore_ = 0;
  total_dianscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndPlayerScoresInfo::~GameEndPlayerScoresInfo() {
  SharedDtor();
}

void GameEndPlayerScoresInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndPlayerScoresInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndPlayerScoresInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndPlayerScoresInfo_descriptor_;
}

const GameEndPlayerScoresInfo& GameEndPlayerScoresInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changtaimajiang_2eproto();
  return *default_instance_;
}

GameEndPlayerScoresInfo* GameEndPlayerScoresInfo::default_instance_ = NULL;

GameEndPlayerScoresInfo* GameEndPlayerScoresInfo::New() const {
  return new GameEndPlayerScoresInfo;
}

void GameEndPlayerScoresInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    gangscore_ = 0;
    huscore_ = 0;
    dianscroe_ = 0;
    fanscore_ = 0;
    zengscore_ = 0;
    gangshangpaoscore_ = 0;
    extra_dianscore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_dianscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndPlayerScoresInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangscore;
        break;
      }

      // optional int32 gangscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangscore_)));
          set_has_gangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_huscore;
        break;
      }

      // optional int32 huscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huscore_)));
          set_has_huscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dianscroe;
        break;
      }

      // optional int32 dianscroe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dianscroe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dianscroe_)));
          set_has_dianscroe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fanscore;
        break;
      }

      // optional int32 fanscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fanscore_)));
          set_has_fanscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zengscore;
        break;
      }

      // optional int32 zengscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zengscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zengscore_)));
          set_has_zengscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gangshangpaoscore;
        break;
      }

      // optional int32 gangshangpaoscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangshangpaoscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangshangpaoscore_)));
          set_has_gangshangpaoscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_extra_dianscore;
        break;
      }

      // optional int32 extra_dianscore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_dianscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_dianscore_)));
          set_has_extra_dianscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_dianscore;
        break;
      }

      // optional int32 total_dianscore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_dianscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dianscore_)));
          set_has_total_dianscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndPlayerScoresInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 gangscore = 2;
  if (has_gangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangscore(), output);
  }

  // optional int32 huscore = 3;
  if (has_huscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huscore(), output);
  }

  // optional int32 dianscroe = 4;
  if (has_dianscroe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dianscroe(), output);
  }

  // optional int32 fanscore = 5;
  if (has_fanscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fanscore(), output);
  }

  // optional int32 zengscore = 6;
  if (has_zengscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zengscore(), output);
  }

  // optional int32 gangshangpaoscore = 7;
  if (has_gangshangpaoscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangshangpaoscore(), output);
  }

  // optional int32 extra_dianscore = 8;
  if (has_extra_dianscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extra_dianscore(), output);
  }

  // optional int32 total_dianscore = 9;
  if (has_total_dianscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_dianscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndPlayerScoresInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 gangscore = 2;
  if (has_gangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangscore(), target);
  }

  // optional int32 huscore = 3;
  if (has_huscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huscore(), target);
  }

  // optional int32 dianscroe = 4;
  if (has_dianscroe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dianscroe(), target);
  }

  // optional int32 fanscore = 5;
  if (has_fanscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fanscore(), target);
  }

  // optional int32 zengscore = 6;
  if (has_zengscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zengscore(), target);
  }

  // optional int32 gangshangpaoscore = 7;
  if (has_gangshangpaoscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangshangpaoscore(), target);
  }

  // optional int32 extra_dianscore = 8;
  if (has_extra_dianscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extra_dianscore(), target);
  }

  // optional int32 total_dianscore = 9;
  if (has_total_dianscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_dianscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndPlayerScoresInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 gangscore = 2;
    if (has_gangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangscore());
    }

    // optional int32 huscore = 3;
    if (has_huscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huscore());
    }

    // optional int32 dianscroe = 4;
    if (has_dianscroe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dianscroe());
    }

    // optional int32 fanscore = 5;
    if (has_fanscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fanscore());
    }

    // optional int32 zengscore = 6;
    if (has_zengscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zengscore());
    }

    // optional int32 gangshangpaoscore = 7;
    if (has_gangshangpaoscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangshangpaoscore());
    }

    // optional int32 extra_dianscore = 8;
    if (has_extra_dianscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_dianscore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_dianscore = 9;
    if (has_total_dianscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_dianscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndPlayerScoresInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndPlayerScoresInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndPlayerScoresInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndPlayerScoresInfo::MergeFrom(const GameEndPlayerScoresInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_gangscore()) {
      set_gangscore(from.gangscore());
    }
    if (from.has_huscore()) {
      set_huscore(from.huscore());
    }
    if (from.has_dianscroe()) {
      set_dianscroe(from.dianscroe());
    }
    if (from.has_fanscore()) {
      set_fanscore(from.fanscore());
    }
    if (from.has_zengscore()) {
      set_zengscore(from.zengscore());
    }
    if (from.has_gangshangpaoscore()) {
      set_gangshangpaoscore(from.gangshangpaoscore());
    }
    if (from.has_extra_dianscore()) {
      set_extra_dianscore(from.extra_dianscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_dianscore()) {
      set_total_dianscore(from.total_dianscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndPlayerScoresInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndPlayerScoresInfo::CopyFrom(const GameEndPlayerScoresInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndPlayerScoresInfo::IsInitialized() const {

  return true;
}

void GameEndPlayerScoresInfo::Swap(GameEndPlayerScoresInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(gangscore_, other->gangscore_);
    std::swap(huscore_, other->huscore_);
    std::swap(dianscroe_, other->dianscroe_);
    std::swap(fanscore_, other->fanscore_);
    std::swap(zengscore_, other->zengscore_);
    std::swap(gangshangpaoscore_, other->gangshangpaoscore_);
    std::swap(extra_dianscore_, other->extra_dianscore_);
    std::swap(total_dianscore_, other->total_dianscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndPlayerScoresInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndPlayerScoresInfo_descriptor_;
  metadata.reflection = GameEndPlayerScoresInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGenZhuang::kGengzhaungflagFieldNumber;
#endif  // !_MSC_VER

RspGenZhuang::RspGenZhuang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGenZhuang::InitAsDefaultInstance() {
}

RspGenZhuang::RspGenZhuang(const RspGenZhuang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGenZhuang::SharedCtor() {
  _cached_size_ = 0;
  gengzhaungflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGenZhuang::~RspGenZhuang() {
  SharedDtor();
}

void RspGenZhuang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGenZhuang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGenZhuang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGenZhuang_descriptor_;
}

const RspGenZhuang& RspGenZhuang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changtaimajiang_2eproto();
  return *default_instance_;
}

RspGenZhuang* RspGenZhuang::default_instance_ = NULL;

RspGenZhuang* RspGenZhuang::New() const {
  return new RspGenZhuang;
}

void RspGenZhuang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gengzhaungflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGenZhuang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool gengzhaungflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gengzhaungflag_)));
          set_has_gengzhaungflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGenZhuang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool gengzhaungflag = 1;
  if (has_gengzhaungflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gengzhaungflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGenZhuang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool gengzhaungflag = 1;
  if (has_gengzhaungflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gengzhaungflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGenZhuang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool gengzhaungflag = 1;
    if (has_gengzhaungflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGenZhuang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGenZhuang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGenZhuang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGenZhuang::MergeFrom(const RspGenZhuang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gengzhaungflag()) {
      set_gengzhaungflag(from.gengzhaungflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGenZhuang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGenZhuang::CopyFrom(const RspGenZhuang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGenZhuang::IsInitialized() const {

  return true;
}

void RspGenZhuang::Swap(RspGenZhuang* other) {
  if (other != this) {
    std::swap(gengzhaungflag_, other->gengzhaungflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGenZhuang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGenZhuang_descriptor_;
  metadata.reflection = RspGenZhuang_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace changtaimajiang
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
