// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chengdugameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chengdugameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace chengdumj {

namespace {

const ::google::protobuf::Descriptor* AckUserChangeCardStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserChangeCardStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeCardOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeCardOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserLackStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserLackStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserLackTypeOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserLackTypeOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserLackType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserLackType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChooseLackType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChooseLackType_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagCDGameScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagCDGameScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* DianPaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DianPaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCDGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCDGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaJiaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaJiaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangFenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangFenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuPaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuPaiInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chengdugameproto_2eproto() {
  protobuf_AddDesc_chengdugameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chengdugameproto.proto");
  GOOGLE_CHECK(file != NULL);
  AckUserChangeCardStart_descriptor_ = file->message_type(0);
  static const int AckUserChangeCardStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserChangeCardStart, istimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserChangeCardStart, remain_time_),
  };
  AckUserChangeCardStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserChangeCardStart_descriptor_,
      AckUserChangeCardStart::default_instance_,
      AckUserChangeCardStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserChangeCardStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserChangeCardStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserChangeCardStart));
  AckChangeCardOk_descriptor_ = file->message_type(1);
  static const int AckChangeCardOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCardOk, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCardOk, isok_),
  };
  AckChangeCardOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeCardOk_descriptor_,
      AckChangeCardOk::default_instance_,
      AckChangeCardOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCardOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCardOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeCardOk));
  AckChangeCard_descriptor_ = file->message_type(2);
  static const int AckChangeCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, oldcard_),
  };
  AckChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeCard_descriptor_,
      AckChangeCard::default_instance_,
      AckChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeCard));
  ReqChangeCard_descriptor_ = file->message_type(3);
  static const int ReqChangeCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, ischange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, card_),
  };
  ReqChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeCard_descriptor_,
      ReqChangeCard::default_instance_,
      ReqChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeCard));
  AckUserLackStart_descriptor_ = file->message_type(4);
  static const int AckUserLackStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackStart, istimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackStart, remain_time_),
  };
  AckUserLackStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserLackStart_descriptor_,
      AckUserLackStart::default_instance_,
      AckUserLackStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserLackStart));
  AckUserLackTypeOk_descriptor_ = file->message_type(5);
  static const int AckUserLackTypeOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, isok_),
  };
  AckUserLackTypeOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserLackTypeOk_descriptor_,
      AckUserLackTypeOk::default_instance_,
      AckUserLackTypeOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserLackTypeOk));
  AckUserLackType_descriptor_ = file->message_type(6);
  static const int AckUserLackType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, lacktype_),
  };
  AckUserLackType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserLackType_descriptor_,
      AckUserLackType::default_instance_,
      AckUserLackType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserLackType));
  ReqChooseLackType_descriptor_ = file->message_type(7);
  static const int ReqChooseLackType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, type_),
  };
  ReqChooseLackType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChooseLackType_descriptor_,
      ReqChooseLackType::default_instance_,
      ReqChooseLackType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChooseLackType));
  tagCDGameScence_descriptor_ = file->message_type(8);
  static const int tagCDGameScence_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, gamesence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, dingqueing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, dingque_remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, huanzhanging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, huanzhang_remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, dingqueisok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, dingquese_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, huanzhangisok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, huanzhangpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, byipaoduoxiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bhuansanzhang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, balldianganghua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bzimojiafanjiadi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bhufanfengding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, byaojiujiangdui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bmenqingzhongzhang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, btiandihu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bdianpaokepinghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, byitiaolong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bguaca_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, nplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, npaizhangshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, ntianhufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, ndihufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, nduiduihufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, nhutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, nzimohucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bjiaxinwu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, stdianpaoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, ndianpaohucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bhaidihuajiafan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bhaidipaojiafan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, bdifen_),
  };
  tagCDGameScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagCDGameScence_descriptor_,
      tagCDGameScence::default_instance_,
      tagCDGameScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCDGameScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagCDGameScence));
  DianPaoInfo_descriptor_ = file->message_type(9);
  static const int DianPaoInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianPaoInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianPaoInfo, ndianpaocardshunxu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianPaoInfo, ndianpaocard_),
  };
  DianPaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DianPaoInfo_descriptor_,
      DianPaoInfo::default_instance_,
      DianPaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianPaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DianPaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DianPaoInfo));
  AckCDGameEnd_descriptor_ = file->message_type(10);
  static const int AckCDGameEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, gameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, husocore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, hupaiinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, dajiaoinfo_),
  };
  AckCDGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCDGameEnd_descriptor_,
      AckCDGameEnd::default_instance_,
      AckCDGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCDGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCDGameEnd));
  DaJiaoInfo_descriptor_ = file->message_type(11);
  static const int DaJiaoInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaofenshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaopai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaofan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaoleixing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, dajiaoleixingfan_),
  };
  DaJiaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaJiaoInfo_descriptor_,
      DaJiaoInfo::default_instance_,
      DaJiaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaJiaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaJiaoInfo));
  GangFenInfo_descriptor_ = file->message_type(12);
  static const int GangFenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangFenInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangFenInfo, gangfen_),
  };
  GangFenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangFenInfo_descriptor_,
      GangFenInfo::default_instance_,
      GangFenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangFenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangFenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangFenInfo));
  GangInfo_descriptor_ = file->message_type(13);
  static const int GangInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangyingfen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, diangangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangfeninfo_),
  };
  GangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangInfo_descriptor_,
      GangInfo::default_instance_,
      GangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangInfo));
  HuPaiInfo_descriptor_ = file->message_type(14);
  static const int HuPaiInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, totalhufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, hutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, hushunxu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, dianpaoseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, totalgangfen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, totalzhuanyufen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, hufanleixing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, hufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, beihuseatid_),
  };
  HuPaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuPaiInfo_descriptor_,
      HuPaiInfo::default_instance_,
      HuPaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuPaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuPaiInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chengdugameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserChangeCardStart_descriptor_, &AckUserChangeCardStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeCardOk_descriptor_, &AckChangeCardOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeCard_descriptor_, &AckChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeCard_descriptor_, &ReqChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserLackStart_descriptor_, &AckUserLackStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserLackTypeOk_descriptor_, &AckUserLackTypeOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserLackType_descriptor_, &AckUserLackType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChooseLackType_descriptor_, &ReqChooseLackType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagCDGameScence_descriptor_, &tagCDGameScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DianPaoInfo_descriptor_, &DianPaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCDGameEnd_descriptor_, &AckCDGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaJiaoInfo_descriptor_, &DaJiaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangFenInfo_descriptor_, &GangFenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangInfo_descriptor_, &GangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuPaiInfo_descriptor_, &HuPaiInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chengdugameproto_2eproto() {
  delete AckUserChangeCardStart::default_instance_;
  delete AckUserChangeCardStart_reflection_;
  delete AckChangeCardOk::default_instance_;
  delete AckChangeCardOk_reflection_;
  delete AckChangeCard::default_instance_;
  delete AckChangeCard_reflection_;
  delete ReqChangeCard::default_instance_;
  delete ReqChangeCard_reflection_;
  delete AckUserLackStart::default_instance_;
  delete AckUserLackStart_reflection_;
  delete AckUserLackTypeOk::default_instance_;
  delete AckUserLackTypeOk_reflection_;
  delete AckUserLackType::default_instance_;
  delete AckUserLackType_reflection_;
  delete ReqChooseLackType::default_instance_;
  delete ReqChooseLackType_reflection_;
  delete tagCDGameScence::default_instance_;
  delete tagCDGameScence_reflection_;
  delete DianPaoInfo::default_instance_;
  delete DianPaoInfo_reflection_;
  delete AckCDGameEnd::default_instance_;
  delete AckCDGameEnd_reflection_;
  delete DaJiaoInfo::default_instance_;
  delete DaJiaoInfo_reflection_;
  delete GangFenInfo::default_instance_;
  delete GangFenInfo_reflection_;
  delete GangInfo::default_instance_;
  delete GangInfo_reflection_;
  delete HuPaiInfo::default_instance_;
  delete HuPaiInfo_reflection_;
}

void protobuf_AddDesc_chengdugameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::game::protobuf_AddDesc_gameproto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026chengdugameproto.proto\022\024proto.game.che"
    "ngdumj\032\017gameproto.proto\"@\n\026AckUserChange"
    "CardStart\022\021\n\tisTimeOut\030\001 \001(\005\022\023\n\013remain_t"
    "ime\030\002 \001(\005\"0\n\017AckChangeCardOk\022\017\n\007chairID\030"
    "\001 \003(\005\022\014\n\004isOk\030\002 \003(\005\"\?\n\rAckChangeCard\022\017\n\007"
    "chairID\030\001 \001(\005\022\014\n\004Card\030\002 \003(\005\022\017\n\007oldCard\030\003"
    " \003(\005\"/\n\rReqChangeCard\022\020\n\010ischange\030\001 \001(\005\022"
    "\014\n\004Card\030\002 \003(\005\":\n\020AckUserLackStart\022\021\n\tisT"
    "imeOut\030\001 \001(\005\022\023\n\013remain_time\030\002 \001(\005\"2\n\021Ack"
    "UserLackTypeOk\022\017\n\007chairID\030\001 \003(\005\022\014\n\004isOk\030"
    "\002 \003(\005\"#\n\017AckUserLackType\022\020\n\010LackType\030\001 \003"
    "(\005\"!\n\021ReqChooseLackType\022\014\n\004Type\030\001 \002(\005\"\370\006"
    "\n\017tagCDGameScence\022+\n\tGameSence\030\001 \001(\0132\030.p"
    "roto.game.AckGameScene\022\022\n\ndingqueing\030\002 \001"
    "(\010\022\033\n\023dingque_remain_time\030\003 \001(\005\022\024\n\014huanz"
    "hanging\030\004 \001(\010\022\035\n\025huanzhang_remain_time\030\005"
    " \001(\005\022\023\n\013dingqueisok\030\006 \003(\005\022\021\n\tdingquese\030\007"
    " \003(\005\022\025\n\rhuanzhangisok\030\010 \003(\005\0229\n\014huanzhang"
    "pai\030\t \003(\0132#.proto.game.chengdumj.ReqChan"
    "geCard\022\020\n\010GameType\030\n \001(\005\022\026\n\016bYiPaoDuoXia"
    "ng\030\013 \001(\005\022\024\n\014bQiangGangHu\030\014 \001(\005\022\025\n\rbHuanS"
    "anZhang\030\r \001(\005\022\027\n\017bAllDianGangHua\030\016 \001(\005\022\030"
    "\n\020bZiMoJiaFanJiaDi\030\017 \001(\005\022\026\n\016bHuFanFengDi"
    "ng\030\020 \001(\005\022\027\n\017bYaoJiuJiangDui\030\021 \001(\005\022\032\n\022bMe"
    "nQingZhongZhang\030\022 \001(\005\022\021\n\tbTianDiHu\030\023 \001(\005"
    "\022\030\n\020bDianPaoKePingHu\030\024 \001(\005\022\023\n\013bYiTiaoLon"
    "g\030\025 \001(\005\022\016\n\006bGuaCa\030\026 \001(\005\022\020\n\010nPlayNum\030\027 \001("
    "\005\022\024\n\014nPaiZhangShu\030\030 \001(\005\022\022\n\nnTianHuFan\030\031 "
    "\001(\005\022\020\n\010nDiHuFan\030\032 \001(\005\022\024\n\014nDuiDuiHuFan\030\033 "
    "\001(\005\022\017\n\007nHuType\030\034 \003(\005\022\023\n\013nZiMoHuCard\030\035 \003("
    "\005\022\021\n\tbJiaXinWu\030\036 \001(\005\0228\n\rstdianpaoinfo\030\037 "
    "\003(\0132!.proto.game.chengdumj.DianPaoInfo\022\026"
    "\n\016nDianPaoHuCard\030  \003(\005\022\027\n\017bHaiDiHuaJiaFa"
    "n\030! \001(\005\022\027\n\017bHaiDiPaoJiaFan\030\" \001(\005\022\016\n\006bDiF"
    "en\030# \001(\005\"O\n\013DianPaoInfo\022\016\n\006seatid\030\001 \001(\005\022"
    "\032\n\022nDianPaoCardShunXu\030\002 \001(\005\022\024\n\014nDianPaoC"
    "ard\030\003 \001(\005\"\273\001\n\014AckCDGameEnd\022/\n\007gameend\030\001 "
    "\001(\0132\036.proto.game.AckGameEnd_Chengdu\022\020\n\010h"
    "usocore\030\002 \003(\005\0222\n\thupaiinfo\030\003 \003(\0132\037.proto"
    ".game.chengdumj.HuPaiInfo\0224\n\ndajiaoinfo\030"
    "\004 \003(\0132 .proto.game.chengdumj.DaJiaoInfo\""
    "\235\001\n\nDaJiaoInfo\022\016\n\006seatid\030\001 \001(\005\022\022\n\ndajiao"
    "type\030\002 \001(\005\022\024\n\014dajiaofenshu\030\003 \001(\005\022\021\n\tdaji"
    "aopai\030\004 \001(\005\022\021\n\tdajiaofan\030\005 \001(\005\022\025\n\rdajiao"
    "leixing\030\006 \003(\005\022\030\n\020dajiaoleixingfan\030\007 \003(\005\""
    ".\n\013GangFenInfo\022\016\n\006seatid\030\001 \001(\005\022\017\n\007gangfe"
    "n\030\002 \001(\005\"\216\001\n\010GangInfo\022\017\n\007gangpai\030\001 \001(\005\022\020\n"
    "\010gangtype\030\002 \001(\005\022\023\n\013gangyingfen\030\003 \001(\005\022\022\n\n"
    "diangangid\030\004 \001(\005\0226\n\013gangfeninfo\030\005 \003(\0132!."
    "proto.game.chengdumj.GangFenInfo\"\223\002\n\tHuP"
    "aiInfo\022\016\n\006seatid\030\001 \001(\005\022\022\n\ntotalhufan\030\002 \001"
    "(\005\022\016\n\006hutype\030\003 \001(\005\022\020\n\010hushunxu\030\004 \001(\005\022\016\n\006"
    "hucard\030\005 \001(\005\022\025\n\rdianpaoseatid\030\006 \001(\005\022\024\n\014t"
    "otalgangfen\030\007 \001(\005\022\027\n\017totalzhuanyufen\030\010 \001"
    "(\005\022\024\n\014hufanleixing\030\t \003(\005\022\r\n\005hufan\030\n \003(\005\022"
    "0\n\010ganginfo\030\013 \003(\0132\036.proto.game.chengdumj"
    ".GangInfo\022\023\n\013beihuseatid\030\014 \003(\005", 2270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chengdugameproto.proto", &protobuf_RegisterTypes);
  AckUserChangeCardStart::default_instance_ = new AckUserChangeCardStart();
  AckChangeCardOk::default_instance_ = new AckChangeCardOk();
  AckChangeCard::default_instance_ = new AckChangeCard();
  ReqChangeCard::default_instance_ = new ReqChangeCard();
  AckUserLackStart::default_instance_ = new AckUserLackStart();
  AckUserLackTypeOk::default_instance_ = new AckUserLackTypeOk();
  AckUserLackType::default_instance_ = new AckUserLackType();
  ReqChooseLackType::default_instance_ = new ReqChooseLackType();
  tagCDGameScence::default_instance_ = new tagCDGameScence();
  DianPaoInfo::default_instance_ = new DianPaoInfo();
  AckCDGameEnd::default_instance_ = new AckCDGameEnd();
  DaJiaoInfo::default_instance_ = new DaJiaoInfo();
  GangFenInfo::default_instance_ = new GangFenInfo();
  GangInfo::default_instance_ = new GangInfo();
  HuPaiInfo::default_instance_ = new HuPaiInfo();
  AckUserChangeCardStart::default_instance_->InitAsDefaultInstance();
  AckChangeCardOk::default_instance_->InitAsDefaultInstance();
  AckChangeCard::default_instance_->InitAsDefaultInstance();
  ReqChangeCard::default_instance_->InitAsDefaultInstance();
  AckUserLackStart::default_instance_->InitAsDefaultInstance();
  AckUserLackTypeOk::default_instance_->InitAsDefaultInstance();
  AckUserLackType::default_instance_->InitAsDefaultInstance();
  ReqChooseLackType::default_instance_->InitAsDefaultInstance();
  tagCDGameScence::default_instance_->InitAsDefaultInstance();
  DianPaoInfo::default_instance_->InitAsDefaultInstance();
  AckCDGameEnd::default_instance_->InitAsDefaultInstance();
  DaJiaoInfo::default_instance_->InitAsDefaultInstance();
  GangFenInfo::default_instance_->InitAsDefaultInstance();
  GangInfo::default_instance_->InitAsDefaultInstance();
  HuPaiInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chengdugameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chengdugameproto_2eproto {
  StaticDescriptorInitializer_chengdugameproto_2eproto() {
    protobuf_AddDesc_chengdugameproto_2eproto();
  }
} static_descriptor_initializer_chengdugameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckUserChangeCardStart::kIsTimeOutFieldNumber;
const int AckUserChangeCardStart::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

AckUserChangeCardStart::AckUserChangeCardStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserChangeCardStart::InitAsDefaultInstance() {
}

AckUserChangeCardStart::AckUserChangeCardStart(const AckUserChangeCardStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserChangeCardStart::SharedCtor() {
  _cached_size_ = 0;
  istimeout_ = 0;
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserChangeCardStart::~AckUserChangeCardStart() {
  SharedDtor();
}

void AckUserChangeCardStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserChangeCardStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserChangeCardStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserChangeCardStart_descriptor_;
}

const AckUserChangeCardStart& AckUserChangeCardStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckUserChangeCardStart* AckUserChangeCardStart::default_instance_ = NULL;

AckUserChangeCardStart* AckUserChangeCardStart::New() const {
  return new AckUserChangeCardStart;
}

void AckUserChangeCardStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istimeout_ = 0;
    remain_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserChangeCardStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isTimeOut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istimeout_)));
          set_has_istimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserChangeCardStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isTimeOut = 1;
  if (has_istimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->istimeout(), output);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserChangeCardStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isTimeOut = 1;
  if (has_istimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->istimeout(), target);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserChangeCardStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isTimeOut = 1;
    if (has_istimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istimeout());
    }

    // optional int32 remain_time = 2;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserChangeCardStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserChangeCardStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserChangeCardStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserChangeCardStart::MergeFrom(const AckUserChangeCardStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istimeout()) {
      set_istimeout(from.istimeout());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserChangeCardStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserChangeCardStart::CopyFrom(const AckUserChangeCardStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserChangeCardStart::IsInitialized() const {

  return true;
}

void AckUserChangeCardStart::Swap(AckUserChangeCardStart* other) {
  if (other != this) {
    std::swap(istimeout_, other->istimeout_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserChangeCardStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserChangeCardStart_descriptor_;
  metadata.reflection = AckUserChangeCardStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeCardOk::kChairIDFieldNumber;
const int AckChangeCardOk::kIsOkFieldNumber;
#endif  // !_MSC_VER

AckChangeCardOk::AckChangeCardOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChangeCardOk::InitAsDefaultInstance() {
}

AckChangeCardOk::AckChangeCardOk(const AckChangeCardOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChangeCardOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeCardOk::~AckChangeCardOk() {
  SharedDtor();
}

void AckChangeCardOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeCardOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeCardOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeCardOk_descriptor_;
}

const AckChangeCardOk& AckChangeCardOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckChangeCardOk* AckChangeCardOk::default_instance_ = NULL;

AckChangeCardOk* AckChangeCardOk::New() const {
  return new AckChangeCardOk;
}

void AckChangeCardOk::Clear() {
  chairid_.Clear();
  isok_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeCardOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_chairID;
        if (input->ExpectTag(16)) goto parse_isOk;
        break;
      }

      // repeated int32 isOk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_isok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOk;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChangeCardOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->chairid(i), output);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->isok(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChangeCardOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->chairid(i), target);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->isok(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChangeCardOk::ByteSize() const {
  int total_size = 0;

  // repeated int32 chairID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chairid(i));
    }
    total_size += 1 * this->chairid_size() + data_size;
  }

  // repeated int32 isOk = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->isok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isok(i));
    }
    total_size += 1 * this->isok_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeCardOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeCardOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeCardOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeCardOk::MergeFrom(const AckChangeCardOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairid_.MergeFrom(from.chairid_);
  isok_.MergeFrom(from.isok_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeCardOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeCardOk::CopyFrom(const AckChangeCardOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeCardOk::IsInitialized() const {

  return true;
}

void AckChangeCardOk::Swap(AckChangeCardOk* other) {
  if (other != this) {
    chairid_.Swap(&other->chairid_);
    isok_.Swap(&other->isok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeCardOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeCardOk_descriptor_;
  metadata.reflection = AckChangeCardOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeCard::kChairIDFieldNumber;
const int AckChangeCard::kCardFieldNumber;
const int AckChangeCard::kOldCardFieldNumber;
#endif  // !_MSC_VER

AckChangeCard::AckChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChangeCard::InitAsDefaultInstance() {
}

AckChangeCard::AckChangeCard(const AckChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChangeCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeCard::~AckChangeCard() {
  SharedDtor();
}

void AckChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeCard_descriptor_;
}

const AckChangeCard& AckChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckChangeCard* AckChangeCard::default_instance_ = NULL;

AckChangeCard* AckChangeCard::New() const {
  return new AckChangeCard;
}

void AckChangeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  card_.Clear();
  oldcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectTag(24)) goto parse_oldCard;
        break;
      }

      // repeated int32 oldCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_oldcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_oldcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated int32 oldCard = 3;
  for (int i = 0; i < this->oldcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->oldcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated int32 oldCard = 3;
  for (int i = 0; i < this->oldcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->oldcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChangeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 oldCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->oldcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->oldcard(i));
    }
    total_size += 1 * this->oldcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeCard::MergeFrom(const AckChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  oldcard_.MergeFrom(from.oldcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeCard::CopyFrom(const AckChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeCard::IsInitialized() const {

  return true;
}

void AckChangeCard::Swap(AckChangeCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    card_.Swap(&other->card_);
    oldcard_.Swap(&other->oldcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeCard_descriptor_;
  metadata.reflection = AckChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeCard::kIschangeFieldNumber;
const int ReqChangeCard::kCardFieldNumber;
#endif  // !_MSC_VER

ReqChangeCard::ReqChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeCard::InitAsDefaultInstance() {
}

ReqChangeCard::ReqChangeCard(const ReqChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeCard::SharedCtor() {
  _cached_size_ = 0;
  ischange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeCard::~ReqChangeCard() {
  SharedDtor();
}

void ReqChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeCard_descriptor_;
}

const ReqChangeCard& ReqChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

ReqChangeCard* ReqChangeCard::default_instance_ = NULL;

ReqChangeCard* ReqChangeCard::New() const {
  return new ReqChangeCard;
}

void ReqChangeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ischange_ = 0;
  }
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ischange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischange_)));
          set_has_ischange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ischange = 1;
  if (has_ischange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ischange(), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ischange = 1;
  if (has_ischange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ischange(), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ischange = 1;
    if (has_ischange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischange());
    }

  }
  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeCard::MergeFrom(const ReqChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischange()) {
      set_ischange(from.ischange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeCard::CopyFrom(const ReqChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeCard::IsInitialized() const {

  return true;
}

void ReqChangeCard::Swap(ReqChangeCard* other) {
  if (other != this) {
    std::swap(ischange_, other->ischange_);
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeCard_descriptor_;
  metadata.reflection = ReqChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserLackStart::kIsTimeOutFieldNumber;
const int AckUserLackStart::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

AckUserLackStart::AckUserLackStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserLackStart::InitAsDefaultInstance() {
}

AckUserLackStart::AckUserLackStart(const AckUserLackStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserLackStart::SharedCtor() {
  _cached_size_ = 0;
  istimeout_ = 0;
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserLackStart::~AckUserLackStart() {
  SharedDtor();
}

void AckUserLackStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserLackStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserLackStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserLackStart_descriptor_;
}

const AckUserLackStart& AckUserLackStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckUserLackStart* AckUserLackStart::default_instance_ = NULL;

AckUserLackStart* AckUserLackStart::New() const {
  return new AckUserLackStart;
}

void AckUserLackStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    istimeout_ = 0;
    remain_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserLackStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isTimeOut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istimeout_)));
          set_has_istimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserLackStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isTimeOut = 1;
  if (has_istimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->istimeout(), output);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserLackStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isTimeOut = 1;
  if (has_istimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->istimeout(), target);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserLackStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isTimeOut = 1;
    if (has_istimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istimeout());
    }

    // optional int32 remain_time = 2;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserLackStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserLackStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserLackStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserLackStart::MergeFrom(const AckUserLackStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_istimeout()) {
      set_istimeout(from.istimeout());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserLackStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserLackStart::CopyFrom(const AckUserLackStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserLackStart::IsInitialized() const {

  return true;
}

void AckUserLackStart::Swap(AckUserLackStart* other) {
  if (other != this) {
    std::swap(istimeout_, other->istimeout_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserLackStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserLackStart_descriptor_;
  metadata.reflection = AckUserLackStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserLackTypeOk::kChairIDFieldNumber;
const int AckUserLackTypeOk::kIsOkFieldNumber;
#endif  // !_MSC_VER

AckUserLackTypeOk::AckUserLackTypeOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserLackTypeOk::InitAsDefaultInstance() {
}

AckUserLackTypeOk::AckUserLackTypeOk(const AckUserLackTypeOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserLackTypeOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserLackTypeOk::~AckUserLackTypeOk() {
  SharedDtor();
}

void AckUserLackTypeOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserLackTypeOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserLackTypeOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserLackTypeOk_descriptor_;
}

const AckUserLackTypeOk& AckUserLackTypeOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckUserLackTypeOk* AckUserLackTypeOk::default_instance_ = NULL;

AckUserLackTypeOk* AckUserLackTypeOk::New() const {
  return new AckUserLackTypeOk;
}

void AckUserLackTypeOk::Clear() {
  chairid_.Clear();
  isok_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserLackTypeOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_chairID;
        if (input->ExpectTag(16)) goto parse_isOk;
        break;
      }

      // repeated int32 isOk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_isok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOk;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserLackTypeOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->chairid(i), output);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->isok(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserLackTypeOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->chairid(i), target);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->isok(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserLackTypeOk::ByteSize() const {
  int total_size = 0;

  // repeated int32 chairID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chairid(i));
    }
    total_size += 1 * this->chairid_size() + data_size;
  }

  // repeated int32 isOk = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->isok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isok(i));
    }
    total_size += 1 * this->isok_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserLackTypeOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserLackTypeOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserLackTypeOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserLackTypeOk::MergeFrom(const AckUserLackTypeOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairid_.MergeFrom(from.chairid_);
  isok_.MergeFrom(from.isok_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserLackTypeOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserLackTypeOk::CopyFrom(const AckUserLackTypeOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserLackTypeOk::IsInitialized() const {

  return true;
}

void AckUserLackTypeOk::Swap(AckUserLackTypeOk* other) {
  if (other != this) {
    chairid_.Swap(&other->chairid_);
    isok_.Swap(&other->isok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserLackTypeOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserLackTypeOk_descriptor_;
  metadata.reflection = AckUserLackTypeOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserLackType::kLackTypeFieldNumber;
#endif  // !_MSC_VER

AckUserLackType::AckUserLackType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserLackType::InitAsDefaultInstance() {
}

AckUserLackType::AckUserLackType(const AckUserLackType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserLackType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserLackType::~AckUserLackType() {
  SharedDtor();
}

void AckUserLackType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserLackType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserLackType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserLackType_descriptor_;
}

const AckUserLackType& AckUserLackType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckUserLackType* AckUserLackType::default_instance_ = NULL;

AckUserLackType* AckUserLackType::New() const {
  return new AckUserLackType;
}

void AckUserLackType::Clear() {
  lacktype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserLackType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 LackType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_lacktype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lacktype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_LackType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserLackType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 LackType = 1;
  for (int i = 0; i < this->lacktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->lacktype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserLackType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 LackType = 1;
  for (int i = 0; i < this->lacktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->lacktype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserLackType::ByteSize() const {
  int total_size = 0;

  // repeated int32 LackType = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lacktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lacktype(i));
    }
    total_size += 1 * this->lacktype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserLackType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserLackType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserLackType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserLackType::MergeFrom(const AckUserLackType& from) {
  GOOGLE_CHECK_NE(&from, this);
  lacktype_.MergeFrom(from.lacktype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserLackType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserLackType::CopyFrom(const AckUserLackType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserLackType::IsInitialized() const {

  return true;
}

void AckUserLackType::Swap(AckUserLackType* other) {
  if (other != this) {
    lacktype_.Swap(&other->lacktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserLackType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserLackType_descriptor_;
  metadata.reflection = AckUserLackType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChooseLackType::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqChooseLackType::ReqChooseLackType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChooseLackType::InitAsDefaultInstance() {
}

ReqChooseLackType::ReqChooseLackType(const ReqChooseLackType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChooseLackType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChooseLackType::~ReqChooseLackType() {
  SharedDtor();
}

void ReqChooseLackType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChooseLackType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChooseLackType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChooseLackType_descriptor_;
}

const ReqChooseLackType& ReqChooseLackType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

ReqChooseLackType* ReqChooseLackType::default_instance_ = NULL;

ReqChooseLackType* ReqChooseLackType::New() const {
  return new ReqChooseLackType;
}

void ReqChooseLackType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChooseLackType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChooseLackType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChooseLackType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChooseLackType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChooseLackType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChooseLackType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChooseLackType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChooseLackType::MergeFrom(const ReqChooseLackType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChooseLackType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChooseLackType::CopyFrom(const ReqChooseLackType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChooseLackType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChooseLackType::Swap(ReqChooseLackType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChooseLackType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChooseLackType_descriptor_;
  metadata.reflection = ReqChooseLackType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagCDGameScence::kGameSenceFieldNumber;
const int tagCDGameScence::kDingqueingFieldNumber;
const int tagCDGameScence::kDingqueRemainTimeFieldNumber;
const int tagCDGameScence::kHuanzhangingFieldNumber;
const int tagCDGameScence::kHuanzhangRemainTimeFieldNumber;
const int tagCDGameScence::kDingqueisokFieldNumber;
const int tagCDGameScence::kDingqueseFieldNumber;
const int tagCDGameScence::kHuanzhangisokFieldNumber;
const int tagCDGameScence::kHuanzhangpaiFieldNumber;
const int tagCDGameScence::kGameTypeFieldNumber;
const int tagCDGameScence::kBYiPaoDuoXiangFieldNumber;
const int tagCDGameScence::kBQiangGangHuFieldNumber;
const int tagCDGameScence::kBHuanSanZhangFieldNumber;
const int tagCDGameScence::kBAllDianGangHuaFieldNumber;
const int tagCDGameScence::kBZiMoJiaFanJiaDiFieldNumber;
const int tagCDGameScence::kBHuFanFengDingFieldNumber;
const int tagCDGameScence::kBYaoJiuJiangDuiFieldNumber;
const int tagCDGameScence::kBMenQingZhongZhangFieldNumber;
const int tagCDGameScence::kBTianDiHuFieldNumber;
const int tagCDGameScence::kBDianPaoKePingHuFieldNumber;
const int tagCDGameScence::kBYiTiaoLongFieldNumber;
const int tagCDGameScence::kBGuaCaFieldNumber;
const int tagCDGameScence::kNPlayNumFieldNumber;
const int tagCDGameScence::kNPaiZhangShuFieldNumber;
const int tagCDGameScence::kNTianHuFanFieldNumber;
const int tagCDGameScence::kNDiHuFanFieldNumber;
const int tagCDGameScence::kNDuiDuiHuFanFieldNumber;
const int tagCDGameScence::kNHuTypeFieldNumber;
const int tagCDGameScence::kNZiMoHuCardFieldNumber;
const int tagCDGameScence::kBJiaXinWuFieldNumber;
const int tagCDGameScence::kStdianpaoinfoFieldNumber;
const int tagCDGameScence::kNDianPaoHuCardFieldNumber;
const int tagCDGameScence::kBHaiDiHuaJiaFanFieldNumber;
const int tagCDGameScence::kBHaiDiPaoJiaFanFieldNumber;
const int tagCDGameScence::kBDiFenFieldNumber;
#endif  // !_MSC_VER

tagCDGameScence::tagCDGameScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagCDGameScence::InitAsDefaultInstance() {
  gamesence_ = const_cast< ::proto::game::AckGameScene*>(&::proto::game::AckGameScene::default_instance());
}

tagCDGameScence::tagCDGameScence(const tagCDGameScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagCDGameScence::SharedCtor() {
  _cached_size_ = 0;
  gamesence_ = NULL;
  dingqueing_ = false;
  dingque_remain_time_ = 0;
  huanzhanging_ = false;
  huanzhang_remain_time_ = 0;
  gametype_ = 0;
  byipaoduoxiang_ = 0;
  bqiangganghu_ = 0;
  bhuansanzhang_ = 0;
  balldianganghua_ = 0;
  bzimojiafanjiadi_ = 0;
  bhufanfengding_ = 0;
  byaojiujiangdui_ = 0;
  bmenqingzhongzhang_ = 0;
  btiandihu_ = 0;
  bdianpaokepinghu_ = 0;
  byitiaolong_ = 0;
  bguaca_ = 0;
  nplaynum_ = 0;
  npaizhangshu_ = 0;
  ntianhufan_ = 0;
  ndihufan_ = 0;
  nduiduihufan_ = 0;
  bjiaxinwu_ = 0;
  bhaidihuajiafan_ = 0;
  bhaidipaojiafan_ = 0;
  bdifen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagCDGameScence::~tagCDGameScence() {
  SharedDtor();
}

void tagCDGameScence::SharedDtor() {
  if (this != default_instance_) {
    delete gamesence_;
  }
}

void tagCDGameScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagCDGameScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagCDGameScence_descriptor_;
}

const tagCDGameScence& tagCDGameScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

tagCDGameScence* tagCDGameScence::default_instance_ = NULL;

tagCDGameScence* tagCDGameScence::New() const {
  return new tagCDGameScence;
}

void tagCDGameScence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamesence()) {
      if (gamesence_ != NULL) gamesence_->::proto::game::AckGameScene::Clear();
    }
    dingqueing_ = false;
    dingque_remain_time_ = 0;
    huanzhanging_ = false;
    huanzhang_remain_time_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    gametype_ = 0;
    byipaoduoxiang_ = 0;
    bqiangganghu_ = 0;
    bhuansanzhang_ = 0;
    balldianganghua_ = 0;
    bzimojiafanjiadi_ = 0;
    bhufanfengding_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    byaojiujiangdui_ = 0;
    bmenqingzhongzhang_ = 0;
    btiandihu_ = 0;
    bdianpaokepinghu_ = 0;
    byitiaolong_ = 0;
    bguaca_ = 0;
    nplaynum_ = 0;
    npaizhangshu_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ntianhufan_ = 0;
    ndihufan_ = 0;
    nduiduihufan_ = 0;
    bjiaxinwu_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    bhaidihuajiafan_ = 0;
    bhaidipaojiafan_ = 0;
    bdifen_ = 0;
  }
  dingqueisok_.Clear();
  dingquese_.Clear();
  huanzhangisok_.Clear();
  huanzhangpai_.Clear();
  nhutype_.Clear();
  nzimohucard_.Clear();
  stdianpaoinfo_.Clear();
  ndianpaohucard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagCDGameScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.AckGameScene GameSence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dingqueing;
        break;
      }

      // optional bool dingqueing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dingqueing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dingqueing_)));
          set_has_dingqueing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dingque_remain_time;
        break;
      }

      // optional int32 dingque_remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dingque_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dingque_remain_time_)));
          set_has_dingque_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_huanzhanging;
        break;
      }

      // optional bool huanzhanging = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huanzhanging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &huanzhanging_)));
          set_has_huanzhanging();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_huanzhang_remain_time;
        break;
      }

      // optional int32 huanzhang_remain_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huanzhang_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huanzhang_remain_time_)));
          set_has_huanzhang_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dingqueisok;
        break;
      }

      // repeated int32 dingqueisok = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dingqueisok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_dingqueisok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dingqueisok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dingqueisok;
        if (input->ExpectTag(56)) goto parse_dingquese;
        break;
      }

      // repeated int32 dingquese = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dingquese:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dingquese())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dingquese())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dingquese;
        if (input->ExpectTag(64)) goto parse_huanzhangisok;
        break;
      }

      // repeated int32 huanzhangisok = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huanzhangisok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_huanzhangisok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huanzhangisok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_huanzhangisok;
        if (input->ExpectTag(74)) goto parse_huanzhangpai;
        break;
      }

      // repeated .proto.game.chengdumj.ReqChangeCard huanzhangpai = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huanzhangpai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huanzhangpai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_huanzhangpai;
        if (input->ExpectTag(80)) goto parse_GameType;
        break;
      }

      // optional int32 GameType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bYiPaoDuoXiang;
        break;
      }

      // optional int32 bYiPaoDuoXiang = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bYiPaoDuoXiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byipaoduoxiang_)));
          set_has_byipaoduoxiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bQiangGangHu;
        break;
      }

      // optional int32 bQiangGangHu = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bQiangGangHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bqiangganghu_)));
          set_has_bqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bHuanSanZhang;
        break;
      }

      // optional int32 bHuanSanZhang = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHuanSanZhang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhuansanzhang_)));
          set_has_bhuansanzhang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bAllDianGangHua;
        break;
      }

      // optional int32 bAllDianGangHua = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAllDianGangHua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balldianganghua_)));
          set_has_balldianganghua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bZiMoJiaFanJiaDi;
        break;
      }

      // optional int32 bZiMoJiaFanJiaDi = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZiMoJiaFanJiaDi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bzimojiafanjiadi_)));
          set_has_bzimojiafanjiadi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bHuFanFengDing;
        break;
      }

      // optional int32 bHuFanFengDing = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHuFanFengDing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhufanfengding_)));
          set_has_bhufanfengding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bYaoJiuJiangDui;
        break;
      }

      // optional int32 bYaoJiuJiangDui = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bYaoJiuJiangDui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byaojiujiangdui_)));
          set_has_byaojiujiangdui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bMenQingZhongZhang;
        break;
      }

      // optional int32 bMenQingZhongZhang = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bMenQingZhongZhang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bmenqingzhongzhang_)));
          set_has_bmenqingzhongzhang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bTianDiHu;
        break;
      }

      // optional int32 bTianDiHu = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bTianDiHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btiandihu_)));
          set_has_btiandihu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bDianPaoKePingHu;
        break;
      }

      // optional int32 bDianPaoKePingHu = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bDianPaoKePingHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdianpaokepinghu_)));
          set_has_bdianpaokepinghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_bYiTiaoLong;
        break;
      }

      // optional int32 bYiTiaoLong = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bYiTiaoLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byitiaolong_)));
          set_has_byitiaolong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bGuaCa;
        break;
      }

      // optional int32 bGuaCa = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bGuaCa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bguaca_)));
          set_has_bguaca();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nPlayNum;
        break;
      }

      // optional int32 nPlayNum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplaynum_)));
          set_has_nplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nPaiZhangShu;
        break;
      }

      // optional int32 nPaiZhangShu = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPaiZhangShu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npaizhangshu_)));
          set_has_npaizhangshu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nTianHuFan;
        break;
      }

      // optional int32 nTianHuFan = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTianHuFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntianhufan_)));
          set_has_ntianhufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_nDiHuFan;
        break;
      }

      // optional int32 nDiHuFan = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDiHuFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndihufan_)));
          set_has_ndihufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nDuiDuiHuFan;
        break;
      }

      // optional int32 nDuiDuiHuFan = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDuiDuiHuFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nduiduihufan_)));
          set_has_nduiduihufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nHuType;
        break;
      }

      // repeated int32 nHuType = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_nhutype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nhutype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nHuType;
        if (input->ExpectTag(232)) goto parse_nZiMoHuCard;
        break;
      }

      // repeated int32 nZiMoHuCard = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nZiMoHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 232, input, this->mutable_nzimohucard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nzimohucard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_nZiMoHuCard;
        if (input->ExpectTag(240)) goto parse_bJiaXinWu;
        break;
      }

      // optional int32 bJiaXinWu = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bJiaXinWu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bjiaxinwu_)));
          set_has_bjiaxinwu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_stdianpaoinfo;
        break;
      }

      // repeated .proto.game.chengdumj.DianPaoInfo stdianpaoinfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stdianpaoinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdianpaoinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_stdianpaoinfo;
        if (input->ExpectTag(256)) goto parse_nDianPaoHuCard;
        break;
      }

      // repeated int32 nDianPaoHuCard = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDianPaoHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_ndianpaohucard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ndianpaohucard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_nDianPaoHuCard;
        if (input->ExpectTag(264)) goto parse_bHaiDiHuaJiaFan;
        break;
      }

      // optional int32 bHaiDiHuaJiaFan = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHaiDiHuaJiaFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhaidihuajiafan_)));
          set_has_bhaidihuajiafan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_bHaiDiPaoJiaFan;
        break;
      }

      // optional int32 bHaiDiPaoJiaFan = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHaiDiPaoJiaFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhaidipaojiafan_)));
          set_has_bhaidipaojiafan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_bDiFen;
        break;
      }

      // optional int32 bDiFen = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bDiFen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdifen_)));
          set_has_bdifen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagCDGameScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.game.AckGameScene GameSence = 1;
  if (has_gamesence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamesence(), output);
  }

  // optional bool dingqueing = 2;
  if (has_dingqueing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dingqueing(), output);
  }

  // optional int32 dingque_remain_time = 3;
  if (has_dingque_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dingque_remain_time(), output);
  }

  // optional bool huanzhanging = 4;
  if (has_huanzhanging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->huanzhanging(), output);
  }

  // optional int32 huanzhang_remain_time = 5;
  if (has_huanzhang_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->huanzhang_remain_time(), output);
  }

  // repeated int32 dingqueisok = 6;
  for (int i = 0; i < this->dingqueisok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->dingqueisok(i), output);
  }

  // repeated int32 dingquese = 7;
  for (int i = 0; i < this->dingquese_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dingquese(i), output);
  }

  // repeated int32 huanzhangisok = 8;
  for (int i = 0; i < this->huanzhangisok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->huanzhangisok(i), output);
  }

  // repeated .proto.game.chengdumj.ReqChangeCard huanzhangpai = 9;
  for (int i = 0; i < this->huanzhangpai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->huanzhangpai(i), output);
  }

  // optional int32 GameType = 10;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gametype(), output);
  }

  // optional int32 bYiPaoDuoXiang = 11;
  if (has_byipaoduoxiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->byipaoduoxiang(), output);
  }

  // optional int32 bQiangGangHu = 12;
  if (has_bqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bqiangganghu(), output);
  }

  // optional int32 bHuanSanZhang = 13;
  if (has_bhuansanzhang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bhuansanzhang(), output);
  }

  // optional int32 bAllDianGangHua = 14;
  if (has_balldianganghua()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->balldianganghua(), output);
  }

  // optional int32 bZiMoJiaFanJiaDi = 15;
  if (has_bzimojiafanjiadi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bzimojiafanjiadi(), output);
  }

  // optional int32 bHuFanFengDing = 16;
  if (has_bhufanfengding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bhufanfengding(), output);
  }

  // optional int32 bYaoJiuJiangDui = 17;
  if (has_byaojiujiangdui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->byaojiujiangdui(), output);
  }

  // optional int32 bMenQingZhongZhang = 18;
  if (has_bmenqingzhongzhang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bmenqingzhongzhang(), output);
  }

  // optional int32 bTianDiHu = 19;
  if (has_btiandihu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->btiandihu(), output);
  }

  // optional int32 bDianPaoKePingHu = 20;
  if (has_bdianpaokepinghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bdianpaokepinghu(), output);
  }

  // optional int32 bYiTiaoLong = 21;
  if (has_byitiaolong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->byitiaolong(), output);
  }

  // optional int32 bGuaCa = 22;
  if (has_bguaca()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->bguaca(), output);
  }

  // optional int32 nPlayNum = 23;
  if (has_nplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nplaynum(), output);
  }

  // optional int32 nPaiZhangShu = 24;
  if (has_npaizhangshu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->npaizhangshu(), output);
  }

  // optional int32 nTianHuFan = 25;
  if (has_ntianhufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ntianhufan(), output);
  }

  // optional int32 nDiHuFan = 26;
  if (has_ndihufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ndihufan(), output);
  }

  // optional int32 nDuiDuiHuFan = 27;
  if (has_nduiduihufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nduiduihufan(), output);
  }

  // repeated int32 nHuType = 28;
  for (int i = 0; i < this->nhutype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->nhutype(i), output);
  }

  // repeated int32 nZiMoHuCard = 29;
  for (int i = 0; i < this->nzimohucard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->nzimohucard(i), output);
  }

  // optional int32 bJiaXinWu = 30;
  if (has_bjiaxinwu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->bjiaxinwu(), output);
  }

  // repeated .proto.game.chengdumj.DianPaoInfo stdianpaoinfo = 31;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->stdianpaoinfo(i), output);
  }

  // repeated int32 nDianPaoHuCard = 32;
  for (int i = 0; i < this->ndianpaohucard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->ndianpaohucard(i), output);
  }

  // optional int32 bHaiDiHuaJiaFan = 33;
  if (has_bhaidihuajiafan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->bhaidihuajiafan(), output);
  }

  // optional int32 bHaiDiPaoJiaFan = 34;
  if (has_bhaidipaojiafan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->bhaidipaojiafan(), output);
  }

  // optional int32 bDiFen = 35;
  if (has_bdifen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->bdifen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagCDGameScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.game.AckGameScene GameSence = 1;
  if (has_gamesence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamesence(), target);
  }

  // optional bool dingqueing = 2;
  if (has_dingqueing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dingqueing(), target);
  }

  // optional int32 dingque_remain_time = 3;
  if (has_dingque_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dingque_remain_time(), target);
  }

  // optional bool huanzhanging = 4;
  if (has_huanzhanging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->huanzhanging(), target);
  }

  // optional int32 huanzhang_remain_time = 5;
  if (has_huanzhang_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->huanzhang_remain_time(), target);
  }

  // repeated int32 dingqueisok = 6;
  for (int i = 0; i < this->dingqueisok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->dingqueisok(i), target);
  }

  // repeated int32 dingquese = 7;
  for (int i = 0; i < this->dingquese_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dingquese(i), target);
  }

  // repeated int32 huanzhangisok = 8;
  for (int i = 0; i < this->huanzhangisok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->huanzhangisok(i), target);
  }

  // repeated .proto.game.chengdumj.ReqChangeCard huanzhangpai = 9;
  for (int i = 0; i < this->huanzhangpai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->huanzhangpai(i), target);
  }

  // optional int32 GameType = 10;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gametype(), target);
  }

  // optional int32 bYiPaoDuoXiang = 11;
  if (has_byipaoduoxiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->byipaoduoxiang(), target);
  }

  // optional int32 bQiangGangHu = 12;
  if (has_bqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bqiangganghu(), target);
  }

  // optional int32 bHuanSanZhang = 13;
  if (has_bhuansanzhang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bhuansanzhang(), target);
  }

  // optional int32 bAllDianGangHua = 14;
  if (has_balldianganghua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->balldianganghua(), target);
  }

  // optional int32 bZiMoJiaFanJiaDi = 15;
  if (has_bzimojiafanjiadi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bzimojiafanjiadi(), target);
  }

  // optional int32 bHuFanFengDing = 16;
  if (has_bhufanfengding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bhufanfengding(), target);
  }

  // optional int32 bYaoJiuJiangDui = 17;
  if (has_byaojiujiangdui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->byaojiujiangdui(), target);
  }

  // optional int32 bMenQingZhongZhang = 18;
  if (has_bmenqingzhongzhang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bmenqingzhongzhang(), target);
  }

  // optional int32 bTianDiHu = 19;
  if (has_btiandihu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->btiandihu(), target);
  }

  // optional int32 bDianPaoKePingHu = 20;
  if (has_bdianpaokepinghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bdianpaokepinghu(), target);
  }

  // optional int32 bYiTiaoLong = 21;
  if (has_byitiaolong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->byitiaolong(), target);
  }

  // optional int32 bGuaCa = 22;
  if (has_bguaca()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->bguaca(), target);
  }

  // optional int32 nPlayNum = 23;
  if (has_nplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nplaynum(), target);
  }

  // optional int32 nPaiZhangShu = 24;
  if (has_npaizhangshu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->npaizhangshu(), target);
  }

  // optional int32 nTianHuFan = 25;
  if (has_ntianhufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ntianhufan(), target);
  }

  // optional int32 nDiHuFan = 26;
  if (has_ndihufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ndihufan(), target);
  }

  // optional int32 nDuiDuiHuFan = 27;
  if (has_nduiduihufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nduiduihufan(), target);
  }

  // repeated int32 nHuType = 28;
  for (int i = 0; i < this->nhutype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->nhutype(i), target);
  }

  // repeated int32 nZiMoHuCard = 29;
  for (int i = 0; i < this->nzimohucard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->nzimohucard(i), target);
  }

  // optional int32 bJiaXinWu = 30;
  if (has_bjiaxinwu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->bjiaxinwu(), target);
  }

  // repeated .proto.game.chengdumj.DianPaoInfo stdianpaoinfo = 31;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->stdianpaoinfo(i), target);
  }

  // repeated int32 nDianPaoHuCard = 32;
  for (int i = 0; i < this->ndianpaohucard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->ndianpaohucard(i), target);
  }

  // optional int32 bHaiDiHuaJiaFan = 33;
  if (has_bhaidihuajiafan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->bhaidihuajiafan(), target);
  }

  // optional int32 bHaiDiPaoJiaFan = 34;
  if (has_bhaidipaojiafan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->bhaidipaojiafan(), target);
  }

  // optional int32 bDiFen = 35;
  if (has_bdifen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->bdifen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagCDGameScence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.AckGameScene GameSence = 1;
    if (has_gamesence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesence());
    }

    // optional bool dingqueing = 2;
    if (has_dingqueing()) {
      total_size += 1 + 1;
    }

    // optional int32 dingque_remain_time = 3;
    if (has_dingque_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dingque_remain_time());
    }

    // optional bool huanzhanging = 4;
    if (has_huanzhanging()) {
      total_size += 1 + 1;
    }

    // optional int32 huanzhang_remain_time = 5;
    if (has_huanzhang_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huanzhang_remain_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 GameType = 10;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional int32 bYiPaoDuoXiang = 11;
    if (has_byipaoduoxiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byipaoduoxiang());
    }

    // optional int32 bQiangGangHu = 12;
    if (has_bqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bqiangganghu());
    }

    // optional int32 bHuanSanZhang = 13;
    if (has_bhuansanzhang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhuansanzhang());
    }

    // optional int32 bAllDianGangHua = 14;
    if (has_balldianganghua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balldianganghua());
    }

    // optional int32 bZiMoJiaFanJiaDi = 15;
    if (has_bzimojiafanjiadi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bzimojiafanjiadi());
    }

    // optional int32 bHuFanFengDing = 16;
    if (has_bhufanfengding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhufanfengding());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bYaoJiuJiangDui = 17;
    if (has_byaojiujiangdui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byaojiujiangdui());
    }

    // optional int32 bMenQingZhongZhang = 18;
    if (has_bmenqingzhongzhang()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bmenqingzhongzhang());
    }

    // optional int32 bTianDiHu = 19;
    if (has_btiandihu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btiandihu());
    }

    // optional int32 bDianPaoKePingHu = 20;
    if (has_bdianpaokepinghu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdianpaokepinghu());
    }

    // optional int32 bYiTiaoLong = 21;
    if (has_byitiaolong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byitiaolong());
    }

    // optional int32 bGuaCa = 22;
    if (has_bguaca()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bguaca());
    }

    // optional int32 nPlayNum = 23;
    if (has_nplaynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplaynum());
    }

    // optional int32 nPaiZhangShu = 24;
    if (has_npaizhangshu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npaizhangshu());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nTianHuFan = 25;
    if (has_ntianhufan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntianhufan());
    }

    // optional int32 nDiHuFan = 26;
    if (has_ndihufan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndihufan());
    }

    // optional int32 nDuiDuiHuFan = 27;
    if (has_nduiduihufan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nduiduihufan());
    }

    // optional int32 bJiaXinWu = 30;
    if (has_bjiaxinwu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bjiaxinwu());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 bHaiDiHuaJiaFan = 33;
    if (has_bhaidihuajiafan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhaidihuajiafan());
    }

    // optional int32 bHaiDiPaoJiaFan = 34;
    if (has_bhaidipaojiafan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhaidipaojiafan());
    }

    // optional int32 bDiFen = 35;
    if (has_bdifen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdifen());
    }

  }
  // repeated int32 dingqueisok = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->dingqueisok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dingqueisok(i));
    }
    total_size += 1 * this->dingqueisok_size() + data_size;
  }

  // repeated int32 dingquese = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dingquese_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dingquese(i));
    }
    total_size += 1 * this->dingquese_size() + data_size;
  }

  // repeated int32 huanzhangisok = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->huanzhangisok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huanzhangisok(i));
    }
    total_size += 1 * this->huanzhangisok_size() + data_size;
  }

  // repeated .proto.game.chengdumj.ReqChangeCard huanzhangpai = 9;
  total_size += 1 * this->huanzhangpai_size();
  for (int i = 0; i < this->huanzhangpai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huanzhangpai(i));
  }

  // repeated int32 nHuType = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->nhutype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nhutype(i));
    }
    total_size += 2 * this->nhutype_size() + data_size;
  }

  // repeated int32 nZiMoHuCard = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->nzimohucard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nzimohucard(i));
    }
    total_size += 2 * this->nzimohucard_size() + data_size;
  }

  // repeated .proto.game.chengdumj.DianPaoInfo stdianpaoinfo = 31;
  total_size += 2 * this->stdianpaoinfo_size();
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdianpaoinfo(i));
  }

  // repeated int32 nDianPaoHuCard = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->ndianpaohucard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ndianpaohucard(i));
    }
    total_size += 2 * this->ndianpaohucard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagCDGameScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagCDGameScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagCDGameScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagCDGameScence::MergeFrom(const tagCDGameScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  dingqueisok_.MergeFrom(from.dingqueisok_);
  dingquese_.MergeFrom(from.dingquese_);
  huanzhangisok_.MergeFrom(from.huanzhangisok_);
  huanzhangpai_.MergeFrom(from.huanzhangpai_);
  nhutype_.MergeFrom(from.nhutype_);
  nzimohucard_.MergeFrom(from.nzimohucard_);
  stdianpaoinfo_.MergeFrom(from.stdianpaoinfo_);
  ndianpaohucard_.MergeFrom(from.ndianpaohucard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesence()) {
      mutable_gamesence()->::proto::game::AckGameScene::MergeFrom(from.gamesence());
    }
    if (from.has_dingqueing()) {
      set_dingqueing(from.dingqueing());
    }
    if (from.has_dingque_remain_time()) {
      set_dingque_remain_time(from.dingque_remain_time());
    }
    if (from.has_huanzhanging()) {
      set_huanzhanging(from.huanzhanging());
    }
    if (from.has_huanzhang_remain_time()) {
      set_huanzhang_remain_time(from.huanzhang_remain_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_byipaoduoxiang()) {
      set_byipaoduoxiang(from.byipaoduoxiang());
    }
    if (from.has_bqiangganghu()) {
      set_bqiangganghu(from.bqiangganghu());
    }
    if (from.has_bhuansanzhang()) {
      set_bhuansanzhang(from.bhuansanzhang());
    }
    if (from.has_balldianganghua()) {
      set_balldianganghua(from.balldianganghua());
    }
    if (from.has_bzimojiafanjiadi()) {
      set_bzimojiafanjiadi(from.bzimojiafanjiadi());
    }
    if (from.has_bhufanfengding()) {
      set_bhufanfengding(from.bhufanfengding());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_byaojiujiangdui()) {
      set_byaojiujiangdui(from.byaojiujiangdui());
    }
    if (from.has_bmenqingzhongzhang()) {
      set_bmenqingzhongzhang(from.bmenqingzhongzhang());
    }
    if (from.has_btiandihu()) {
      set_btiandihu(from.btiandihu());
    }
    if (from.has_bdianpaokepinghu()) {
      set_bdianpaokepinghu(from.bdianpaokepinghu());
    }
    if (from.has_byitiaolong()) {
      set_byitiaolong(from.byitiaolong());
    }
    if (from.has_bguaca()) {
      set_bguaca(from.bguaca());
    }
    if (from.has_nplaynum()) {
      set_nplaynum(from.nplaynum());
    }
    if (from.has_npaizhangshu()) {
      set_npaizhangshu(from.npaizhangshu());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ntianhufan()) {
      set_ntianhufan(from.ntianhufan());
    }
    if (from.has_ndihufan()) {
      set_ndihufan(from.ndihufan());
    }
    if (from.has_nduiduihufan()) {
      set_nduiduihufan(from.nduiduihufan());
    }
    if (from.has_bjiaxinwu()) {
      set_bjiaxinwu(from.bjiaxinwu());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bhaidihuajiafan()) {
      set_bhaidihuajiafan(from.bhaidihuajiafan());
    }
    if (from.has_bhaidipaojiafan()) {
      set_bhaidipaojiafan(from.bhaidipaojiafan());
    }
    if (from.has_bdifen()) {
      set_bdifen(from.bdifen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagCDGameScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagCDGameScence::CopyFrom(const tagCDGameScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagCDGameScence::IsInitialized() const {

  if (has_gamesence()) {
    if (!this->gamesence().IsInitialized()) return false;
  }
  return true;
}

void tagCDGameScence::Swap(tagCDGameScence* other) {
  if (other != this) {
    std::swap(gamesence_, other->gamesence_);
    std::swap(dingqueing_, other->dingqueing_);
    std::swap(dingque_remain_time_, other->dingque_remain_time_);
    std::swap(huanzhanging_, other->huanzhanging_);
    std::swap(huanzhang_remain_time_, other->huanzhang_remain_time_);
    dingqueisok_.Swap(&other->dingqueisok_);
    dingquese_.Swap(&other->dingquese_);
    huanzhangisok_.Swap(&other->huanzhangisok_);
    huanzhangpai_.Swap(&other->huanzhangpai_);
    std::swap(gametype_, other->gametype_);
    std::swap(byipaoduoxiang_, other->byipaoduoxiang_);
    std::swap(bqiangganghu_, other->bqiangganghu_);
    std::swap(bhuansanzhang_, other->bhuansanzhang_);
    std::swap(balldianganghua_, other->balldianganghua_);
    std::swap(bzimojiafanjiadi_, other->bzimojiafanjiadi_);
    std::swap(bhufanfengding_, other->bhufanfengding_);
    std::swap(byaojiujiangdui_, other->byaojiujiangdui_);
    std::swap(bmenqingzhongzhang_, other->bmenqingzhongzhang_);
    std::swap(btiandihu_, other->btiandihu_);
    std::swap(bdianpaokepinghu_, other->bdianpaokepinghu_);
    std::swap(byitiaolong_, other->byitiaolong_);
    std::swap(bguaca_, other->bguaca_);
    std::swap(nplaynum_, other->nplaynum_);
    std::swap(npaizhangshu_, other->npaizhangshu_);
    std::swap(ntianhufan_, other->ntianhufan_);
    std::swap(ndihufan_, other->ndihufan_);
    std::swap(nduiduihufan_, other->nduiduihufan_);
    nhutype_.Swap(&other->nhutype_);
    nzimohucard_.Swap(&other->nzimohucard_);
    std::swap(bjiaxinwu_, other->bjiaxinwu_);
    stdianpaoinfo_.Swap(&other->stdianpaoinfo_);
    ndianpaohucard_.Swap(&other->ndianpaohucard_);
    std::swap(bhaidihuajiafan_, other->bhaidihuajiafan_);
    std::swap(bhaidipaojiafan_, other->bhaidipaojiafan_);
    std::swap(bdifen_, other->bdifen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagCDGameScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagCDGameScence_descriptor_;
  metadata.reflection = tagCDGameScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DianPaoInfo::kSeatidFieldNumber;
const int DianPaoInfo::kNDianPaoCardShunXuFieldNumber;
const int DianPaoInfo::kNDianPaoCardFieldNumber;
#endif  // !_MSC_VER

DianPaoInfo::DianPaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DianPaoInfo::InitAsDefaultInstance() {
}

DianPaoInfo::DianPaoInfo(const DianPaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DianPaoInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ndianpaocardshunxu_ = 0;
  ndianpaocard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DianPaoInfo::~DianPaoInfo() {
  SharedDtor();
}

void DianPaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DianPaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DianPaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DianPaoInfo_descriptor_;
}

const DianPaoInfo& DianPaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

DianPaoInfo* DianPaoInfo::default_instance_ = NULL;

DianPaoInfo* DianPaoInfo::New() const {
  return new DianPaoInfo;
}

void DianPaoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    ndianpaocardshunxu_ = 0;
    ndianpaocard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DianPaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nDianPaoCardShunXu;
        break;
      }

      // optional int32 nDianPaoCardShunXu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDianPaoCardShunXu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndianpaocardshunxu_)));
          set_has_ndianpaocardshunxu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nDianPaoCard;
        break;
      }

      // optional int32 nDianPaoCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDianPaoCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndianpaocard_)));
          set_has_ndianpaocard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DianPaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 nDianPaoCardShunXu = 2;
  if (has_ndianpaocardshunxu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ndianpaocardshunxu(), output);
  }

  // optional int32 nDianPaoCard = 3;
  if (has_ndianpaocard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ndianpaocard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DianPaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 nDianPaoCardShunXu = 2;
  if (has_ndianpaocardshunxu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ndianpaocardshunxu(), target);
  }

  // optional int32 nDianPaoCard = 3;
  if (has_ndianpaocard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ndianpaocard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DianPaoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 nDianPaoCardShunXu = 2;
    if (has_ndianpaocardshunxu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndianpaocardshunxu());
    }

    // optional int32 nDianPaoCard = 3;
    if (has_ndianpaocard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndianpaocard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DianPaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DianPaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DianPaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DianPaoInfo::MergeFrom(const DianPaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ndianpaocardshunxu()) {
      set_ndianpaocardshunxu(from.ndianpaocardshunxu());
    }
    if (from.has_ndianpaocard()) {
      set_ndianpaocard(from.ndianpaocard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DianPaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DianPaoInfo::CopyFrom(const DianPaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DianPaoInfo::IsInitialized() const {

  return true;
}

void DianPaoInfo::Swap(DianPaoInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(ndianpaocardshunxu_, other->ndianpaocardshunxu_);
    std::swap(ndianpaocard_, other->ndianpaocard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DianPaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DianPaoInfo_descriptor_;
  metadata.reflection = DianPaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCDGameEnd::kGameendFieldNumber;
const int AckCDGameEnd::kHusocoreFieldNumber;
const int AckCDGameEnd::kHupaiinfoFieldNumber;
const int AckCDGameEnd::kDajiaoinfoFieldNumber;
#endif  // !_MSC_VER

AckCDGameEnd::AckCDGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCDGameEnd::InitAsDefaultInstance() {
  gameend_ = const_cast< ::proto::game::AckGameEnd_Chengdu*>(&::proto::game::AckGameEnd_Chengdu::default_instance());
}

AckCDGameEnd::AckCDGameEnd(const AckCDGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCDGameEnd::SharedCtor() {
  _cached_size_ = 0;
  gameend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCDGameEnd::~AckCDGameEnd() {
  SharedDtor();
}

void AckCDGameEnd::SharedDtor() {
  if (this != default_instance_) {
    delete gameend_;
  }
}

void AckCDGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCDGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCDGameEnd_descriptor_;
}

const AckCDGameEnd& AckCDGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

AckCDGameEnd* AckCDGameEnd::default_instance_ = NULL;

AckCDGameEnd* AckCDGameEnd::New() const {
  return new AckCDGameEnd;
}

void AckCDGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameend()) {
      if (gameend_ != NULL) gameend_->::proto::game::AckGameEnd_Chengdu::Clear();
    }
  }
  husocore_.Clear();
  hupaiinfo_.Clear();
  dajiaoinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCDGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.AckGameEnd_Chengdu gameend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_husocore;
        break;
      }

      // repeated int32 husocore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_husocore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_husocore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_husocore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_husocore;
        if (input->ExpectTag(26)) goto parse_hupaiinfo;
        break;
      }

      // repeated .proto.game.chengdumj.HuPaiInfo hupaiinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hupaiinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hupaiinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hupaiinfo;
        if (input->ExpectTag(34)) goto parse_dajiaoinfo;
        break;
      }

      // repeated .proto.game.chengdumj.DaJiaoInfo dajiaoinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dajiaoinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dajiaoinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dajiaoinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCDGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.game.AckGameEnd_Chengdu gameend = 1;
  if (has_gameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameend(), output);
  }

  // repeated int32 husocore = 2;
  for (int i = 0; i < this->husocore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->husocore(i), output);
  }

  // repeated .proto.game.chengdumj.HuPaiInfo hupaiinfo = 3;
  for (int i = 0; i < this->hupaiinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hupaiinfo(i), output);
  }

  // repeated .proto.game.chengdumj.DaJiaoInfo dajiaoinfo = 4;
  for (int i = 0; i < this->dajiaoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dajiaoinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCDGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.game.AckGameEnd_Chengdu gameend = 1;
  if (has_gameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameend(), target);
  }

  // repeated int32 husocore = 2;
  for (int i = 0; i < this->husocore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->husocore(i), target);
  }

  // repeated .proto.game.chengdumj.HuPaiInfo hupaiinfo = 3;
  for (int i = 0; i < this->hupaiinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hupaiinfo(i), target);
  }

  // repeated .proto.game.chengdumj.DaJiaoInfo dajiaoinfo = 4;
  for (int i = 0; i < this->dajiaoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dajiaoinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCDGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.AckGameEnd_Chengdu gameend = 1;
    if (has_gameend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameend());
    }

  }
  // repeated int32 husocore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->husocore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->husocore(i));
    }
    total_size += 1 * this->husocore_size() + data_size;
  }

  // repeated .proto.game.chengdumj.HuPaiInfo hupaiinfo = 3;
  total_size += 1 * this->hupaiinfo_size();
  for (int i = 0; i < this->hupaiinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hupaiinfo(i));
  }

  // repeated .proto.game.chengdumj.DaJiaoInfo dajiaoinfo = 4;
  total_size += 1 * this->dajiaoinfo_size();
  for (int i = 0; i < this->dajiaoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dajiaoinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCDGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCDGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCDGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCDGameEnd::MergeFrom(const AckCDGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  husocore_.MergeFrom(from.husocore_);
  hupaiinfo_.MergeFrom(from.hupaiinfo_);
  dajiaoinfo_.MergeFrom(from.dajiaoinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameend()) {
      mutable_gameend()->::proto::game::AckGameEnd_Chengdu::MergeFrom(from.gameend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCDGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCDGameEnd::CopyFrom(const AckCDGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCDGameEnd::IsInitialized() const {

  if (has_gameend()) {
    if (!this->gameend().IsInitialized()) return false;
  }
  return true;
}

void AckCDGameEnd::Swap(AckCDGameEnd* other) {
  if (other != this) {
    std::swap(gameend_, other->gameend_);
    husocore_.Swap(&other->husocore_);
    hupaiinfo_.Swap(&other->hupaiinfo_);
    dajiaoinfo_.Swap(&other->dajiaoinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCDGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCDGameEnd_descriptor_;
  metadata.reflection = AckCDGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaJiaoInfo::kSeatidFieldNumber;
const int DaJiaoInfo::kDajiaotypeFieldNumber;
const int DaJiaoInfo::kDajiaofenshuFieldNumber;
const int DaJiaoInfo::kDajiaopaiFieldNumber;
const int DaJiaoInfo::kDajiaofanFieldNumber;
const int DaJiaoInfo::kDajiaoleixingFieldNumber;
const int DaJiaoInfo::kDajiaoleixingfanFieldNumber;
#endif  // !_MSC_VER

DaJiaoInfo::DaJiaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DaJiaoInfo::InitAsDefaultInstance() {
}

DaJiaoInfo::DaJiaoInfo(const DaJiaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DaJiaoInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  dajiaotype_ = 0;
  dajiaofenshu_ = 0;
  dajiaopai_ = 0;
  dajiaofan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaJiaoInfo::~DaJiaoInfo() {
  SharedDtor();
}

void DaJiaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DaJiaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaJiaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaJiaoInfo_descriptor_;
}

const DaJiaoInfo& DaJiaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

DaJiaoInfo* DaJiaoInfo::default_instance_ = NULL;

DaJiaoInfo* DaJiaoInfo::New() const {
  return new DaJiaoInfo;
}

void DaJiaoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    dajiaotype_ = 0;
    dajiaofenshu_ = 0;
    dajiaopai_ = 0;
    dajiaofan_ = 0;
  }
  dajiaoleixing_.Clear();
  dajiaoleixingfan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaJiaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dajiaotype;
        break;
      }

      // optional int32 dajiaotype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaotype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dajiaotype_)));
          set_has_dajiaotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dajiaofenshu;
        break;
      }

      // optional int32 dajiaofenshu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaofenshu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dajiaofenshu_)));
          set_has_dajiaofenshu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dajiaopai;
        break;
      }

      // optional int32 dajiaopai = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaopai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dajiaopai_)));
          set_has_dajiaopai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dajiaofan;
        break;
      }

      // optional int32 dajiaofan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaofan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dajiaofan_)));
          set_has_dajiaofan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dajiaoleixing;
        break;
      }

      // repeated int32 dajiaoleixing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaoleixing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_dajiaoleixing())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dajiaoleixing())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dajiaoleixing;
        if (input->ExpectTag(56)) goto parse_dajiaoleixingfan;
        break;
      }

      // repeated int32 dajiaoleixingfan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dajiaoleixingfan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dajiaoleixingfan())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dajiaoleixingfan())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dajiaoleixingfan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DaJiaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 dajiaotype = 2;
  if (has_dajiaotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dajiaotype(), output);
  }

  // optional int32 dajiaofenshu = 3;
  if (has_dajiaofenshu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dajiaofenshu(), output);
  }

  // optional int32 dajiaopai = 4;
  if (has_dajiaopai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dajiaopai(), output);
  }

  // optional int32 dajiaofan = 5;
  if (has_dajiaofan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dajiaofan(), output);
  }

  // repeated int32 dajiaoleixing = 6;
  for (int i = 0; i < this->dajiaoleixing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->dajiaoleixing(i), output);
  }

  // repeated int32 dajiaoleixingfan = 7;
  for (int i = 0; i < this->dajiaoleixingfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dajiaoleixingfan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DaJiaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 dajiaotype = 2;
  if (has_dajiaotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dajiaotype(), target);
  }

  // optional int32 dajiaofenshu = 3;
  if (has_dajiaofenshu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dajiaofenshu(), target);
  }

  // optional int32 dajiaopai = 4;
  if (has_dajiaopai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dajiaopai(), target);
  }

  // optional int32 dajiaofan = 5;
  if (has_dajiaofan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dajiaofan(), target);
  }

  // repeated int32 dajiaoleixing = 6;
  for (int i = 0; i < this->dajiaoleixing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->dajiaoleixing(i), target);
  }

  // repeated int32 dajiaoleixingfan = 7;
  for (int i = 0; i < this->dajiaoleixingfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dajiaoleixingfan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DaJiaoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 dajiaotype = 2;
    if (has_dajiaotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dajiaotype());
    }

    // optional int32 dajiaofenshu = 3;
    if (has_dajiaofenshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dajiaofenshu());
    }

    // optional int32 dajiaopai = 4;
    if (has_dajiaopai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dajiaopai());
    }

    // optional int32 dajiaofan = 5;
    if (has_dajiaofan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dajiaofan());
    }

  }
  // repeated int32 dajiaoleixing = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->dajiaoleixing_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dajiaoleixing(i));
    }
    total_size += 1 * this->dajiaoleixing_size() + data_size;
  }

  // repeated int32 dajiaoleixingfan = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dajiaoleixingfan_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dajiaoleixingfan(i));
    }
    total_size += 1 * this->dajiaoleixingfan_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaJiaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaJiaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaJiaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaJiaoInfo::MergeFrom(const DaJiaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dajiaoleixing_.MergeFrom(from.dajiaoleixing_);
  dajiaoleixingfan_.MergeFrom(from.dajiaoleixingfan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_dajiaotype()) {
      set_dajiaotype(from.dajiaotype());
    }
    if (from.has_dajiaofenshu()) {
      set_dajiaofenshu(from.dajiaofenshu());
    }
    if (from.has_dajiaopai()) {
      set_dajiaopai(from.dajiaopai());
    }
    if (from.has_dajiaofan()) {
      set_dajiaofan(from.dajiaofan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaJiaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaJiaoInfo::CopyFrom(const DaJiaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaJiaoInfo::IsInitialized() const {

  return true;
}

void DaJiaoInfo::Swap(DaJiaoInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(dajiaotype_, other->dajiaotype_);
    std::swap(dajiaofenshu_, other->dajiaofenshu_);
    std::swap(dajiaopai_, other->dajiaopai_);
    std::swap(dajiaofan_, other->dajiaofan_);
    dajiaoleixing_.Swap(&other->dajiaoleixing_);
    dajiaoleixingfan_.Swap(&other->dajiaoleixingfan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaJiaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaJiaoInfo_descriptor_;
  metadata.reflection = DaJiaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangFenInfo::kSeatidFieldNumber;
const int GangFenInfo::kGangfenFieldNumber;
#endif  // !_MSC_VER

GangFenInfo::GangFenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GangFenInfo::InitAsDefaultInstance() {
}

GangFenInfo::GangFenInfo(const GangFenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GangFenInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  gangfen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangFenInfo::~GangFenInfo() {
  SharedDtor();
}

void GangFenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GangFenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangFenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangFenInfo_descriptor_;
}

const GangFenInfo& GangFenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

GangFenInfo* GangFenInfo::default_instance_ = NULL;

GangFenInfo* GangFenInfo::New() const {
  return new GangFenInfo;
}

void GangFenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    gangfen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangFenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangfen;
        break;
      }

      // optional int32 gangfen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangfen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangfen_)));
          set_has_gangfen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GangFenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 gangfen = 2;
  if (has_gangfen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangfen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GangFenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 gangfen = 2;
  if (has_gangfen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangfen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GangFenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 gangfen = 2;
    if (has_gangfen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangfen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangFenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangFenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangFenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangFenInfo::MergeFrom(const GangFenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_gangfen()) {
      set_gangfen(from.gangfen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangFenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangFenInfo::CopyFrom(const GangFenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangFenInfo::IsInitialized() const {

  return true;
}

void GangFenInfo::Swap(GangFenInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(gangfen_, other->gangfen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangFenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangFenInfo_descriptor_;
  metadata.reflection = GangFenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangInfo::kGangpaiFieldNumber;
const int GangInfo::kGangtypeFieldNumber;
const int GangInfo::kGangyingfenFieldNumber;
const int GangInfo::kDiangangidFieldNumber;
const int GangInfo::kGangfeninfoFieldNumber;
#endif  // !_MSC_VER

GangInfo::GangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GangInfo::InitAsDefaultInstance() {
}

GangInfo::GangInfo(const GangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GangInfo::SharedCtor() {
  _cached_size_ = 0;
  gangpai_ = 0;
  gangtype_ = 0;
  gangyingfen_ = 0;
  diangangid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangInfo::~GangInfo() {
  SharedDtor();
}

void GangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangInfo_descriptor_;
}

const GangInfo& GangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

GangInfo* GangInfo::default_instance_ = NULL;

GangInfo* GangInfo::New() const {
  return new GangInfo;
}

void GangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gangpai_ = 0;
    gangtype_ = 0;
    gangyingfen_ = 0;
    diangangid_ = 0;
  }
  gangfeninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gangpai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangpai_)));
          set_has_gangpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangtype;
        break;
      }

      // optional int32 gangtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtype_)));
          set_has_gangtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gangyingfen;
        break;
      }

      // optional int32 gangyingfen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangyingfen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangyingfen_)));
          set_has_gangyingfen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diangangid;
        break;
      }

      // optional int32 diangangid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diangangid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangid_)));
          set_has_diangangid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gangfeninfo;
        break;
      }

      // repeated .proto.game.chengdumj.GangFenInfo gangfeninfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gangfeninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangfeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gangfeninfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gangpai = 1;
  if (has_gangpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gangpai(), output);
  }

  // optional int32 gangtype = 2;
  if (has_gangtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangtype(), output);
  }

  // optional int32 gangyingfen = 3;
  if (has_gangyingfen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gangyingfen(), output);
  }

  // optional int32 diangangid = 4;
  if (has_diangangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diangangid(), output);
  }

  // repeated .proto.game.chengdumj.GangFenInfo gangfeninfo = 5;
  for (int i = 0; i < this->gangfeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gangfeninfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gangpai = 1;
  if (has_gangpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gangpai(), target);
  }

  // optional int32 gangtype = 2;
  if (has_gangtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangtype(), target);
  }

  // optional int32 gangyingfen = 3;
  if (has_gangyingfen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gangyingfen(), target);
  }

  // optional int32 diangangid = 4;
  if (has_diangangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diangangid(), target);
  }

  // repeated .proto.game.chengdumj.GangFenInfo gangfeninfo = 5;
  for (int i = 0; i < this->gangfeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gangfeninfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gangpai = 1;
    if (has_gangpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangpai());
    }

    // optional int32 gangtype = 2;
    if (has_gangtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtype());
    }

    // optional int32 gangyingfen = 3;
    if (has_gangyingfen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangyingfen());
    }

    // optional int32 diangangid = 4;
    if (has_diangangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangid());
    }

  }
  // repeated .proto.game.chengdumj.GangFenInfo gangfeninfo = 5;
  total_size += 1 * this->gangfeninfo_size();
  for (int i = 0; i < this->gangfeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangfeninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangInfo::MergeFrom(const GangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangfeninfo_.MergeFrom(from.gangfeninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangpai()) {
      set_gangpai(from.gangpai());
    }
    if (from.has_gangtype()) {
      set_gangtype(from.gangtype());
    }
    if (from.has_gangyingfen()) {
      set_gangyingfen(from.gangyingfen());
    }
    if (from.has_diangangid()) {
      set_diangangid(from.diangangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangInfo::CopyFrom(const GangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangInfo::IsInitialized() const {

  return true;
}

void GangInfo::Swap(GangInfo* other) {
  if (other != this) {
    std::swap(gangpai_, other->gangpai_);
    std::swap(gangtype_, other->gangtype_);
    std::swap(gangyingfen_, other->gangyingfen_);
    std::swap(diangangid_, other->diangangid_);
    gangfeninfo_.Swap(&other->gangfeninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangInfo_descriptor_;
  metadata.reflection = GangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuPaiInfo::kSeatidFieldNumber;
const int HuPaiInfo::kTotalhufanFieldNumber;
const int HuPaiInfo::kHutypeFieldNumber;
const int HuPaiInfo::kHushunxuFieldNumber;
const int HuPaiInfo::kHucardFieldNumber;
const int HuPaiInfo::kDianpaoseatidFieldNumber;
const int HuPaiInfo::kTotalgangfenFieldNumber;
const int HuPaiInfo::kTotalzhuanyufenFieldNumber;
const int HuPaiInfo::kHufanleixingFieldNumber;
const int HuPaiInfo::kHufanFieldNumber;
const int HuPaiInfo::kGanginfoFieldNumber;
const int HuPaiInfo::kBeihuseatidFieldNumber;
#endif  // !_MSC_VER

HuPaiInfo::HuPaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuPaiInfo::InitAsDefaultInstance() {
}

HuPaiInfo::HuPaiInfo(const HuPaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuPaiInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  totalhufan_ = 0;
  hutype_ = 0;
  hushunxu_ = 0;
  hucard_ = 0;
  dianpaoseatid_ = 0;
  totalgangfen_ = 0;
  totalzhuanyufen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuPaiInfo::~HuPaiInfo() {
  SharedDtor();
}

void HuPaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuPaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuPaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuPaiInfo_descriptor_;
}

const HuPaiInfo& HuPaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chengdugameproto_2eproto();
  return *default_instance_;
}

HuPaiInfo* HuPaiInfo::default_instance_ = NULL;

HuPaiInfo* HuPaiInfo::New() const {
  return new HuPaiInfo;
}

void HuPaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    totalhufan_ = 0;
    hutype_ = 0;
    hushunxu_ = 0;
    hucard_ = 0;
    dianpaoseatid_ = 0;
    totalgangfen_ = 0;
    totalzhuanyufen_ = 0;
  }
  hufanleixing_.Clear();
  hufan_.Clear();
  ganginfo_.Clear();
  beihuseatid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuPaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalhufan;
        break;
      }

      // optional int32 totalhufan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalhufan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalhufan_)));
          set_has_totalhufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hutype;
        break;
      }

      // optional int32 hutype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hutype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hutype_)));
          set_has_hutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hushunxu;
        break;
      }

      // optional int32 hushunxu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hushunxu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hushunxu_)));
          set_has_hushunxu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hucard;
        break;
      }

      // optional int32 hucard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hucard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dianpaoseatid;
        break;
      }

      // optional int32 dianpaoseatid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dianpaoseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dianpaoseatid_)));
          set_has_dianpaoseatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalgangfen;
        break;
      }

      // optional int32 totalgangfen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalgangfen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgangfen_)));
          set_has_totalgangfen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_totalzhuanyufen;
        break;
      }

      // optional int32 totalzhuanyufen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalzhuanyufen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalzhuanyufen_)));
          set_has_totalzhuanyufen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hufanleixing;
        break;
      }

      // repeated int32 hufanleixing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hufanleixing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_hufanleixing())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hufanleixing())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hufanleixing;
        if (input->ExpectTag(80)) goto parse_hufan;
        break;
      }

      // repeated int32 hufan = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hufan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_hufan())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hufan())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hufan;
        if (input->ExpectTag(90)) goto parse_ganginfo;
        break;
      }

      // repeated .proto.game.chengdumj.GangInfo ganginfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ganginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ganginfo;
        if (input->ExpectTag(96)) goto parse_beihuseatid;
        break;
      }

      // repeated int32 beihuseatid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beihuseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_beihuseatid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_beihuseatid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_beihuseatid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuPaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 totalhufan = 2;
  if (has_totalhufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalhufan(), output);
  }

  // optional int32 hutype = 3;
  if (has_hutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hutype(), output);
  }

  // optional int32 hushunxu = 4;
  if (has_hushunxu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hushunxu(), output);
  }

  // optional int32 hucard = 5;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hucard(), output);
  }

  // optional int32 dianpaoseatid = 6;
  if (has_dianpaoseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dianpaoseatid(), output);
  }

  // optional int32 totalgangfen = 7;
  if (has_totalgangfen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalgangfen(), output);
  }

  // optional int32 totalzhuanyufen = 8;
  if (has_totalzhuanyufen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalzhuanyufen(), output);
  }

  // repeated int32 hufanleixing = 9;
  for (int i = 0; i < this->hufanleixing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->hufanleixing(i), output);
  }

  // repeated int32 hufan = 10;
  for (int i = 0; i < this->hufan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->hufan(i), output);
  }

  // repeated .proto.game.chengdumj.GangInfo ganginfo = 11;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ganginfo(i), output);
  }

  // repeated int32 beihuseatid = 12;
  for (int i = 0; i < this->beihuseatid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->beihuseatid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuPaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 totalhufan = 2;
  if (has_totalhufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalhufan(), target);
  }

  // optional int32 hutype = 3;
  if (has_hutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hutype(), target);
  }

  // optional int32 hushunxu = 4;
  if (has_hushunxu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hushunxu(), target);
  }

  // optional int32 hucard = 5;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hucard(), target);
  }

  // optional int32 dianpaoseatid = 6;
  if (has_dianpaoseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dianpaoseatid(), target);
  }

  // optional int32 totalgangfen = 7;
  if (has_totalgangfen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalgangfen(), target);
  }

  // optional int32 totalzhuanyufen = 8;
  if (has_totalzhuanyufen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalzhuanyufen(), target);
  }

  // repeated int32 hufanleixing = 9;
  for (int i = 0; i < this->hufanleixing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->hufanleixing(i), target);
  }

  // repeated int32 hufan = 10;
  for (int i = 0; i < this->hufan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->hufan(i), target);
  }

  // repeated .proto.game.chengdumj.GangInfo ganginfo = 11;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ganginfo(i), target);
  }

  // repeated int32 beihuseatid = 12;
  for (int i = 0; i < this->beihuseatid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->beihuseatid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuPaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 totalhufan = 2;
    if (has_totalhufan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalhufan());
    }

    // optional int32 hutype = 3;
    if (has_hutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hutype());
    }

    // optional int32 hushunxu = 4;
    if (has_hushunxu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hushunxu());
    }

    // optional int32 hucard = 5;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 dianpaoseatid = 6;
    if (has_dianpaoseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dianpaoseatid());
    }

    // optional int32 totalgangfen = 7;
    if (has_totalgangfen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgangfen());
    }

    // optional int32 totalzhuanyufen = 8;
    if (has_totalzhuanyufen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalzhuanyufen());
    }

  }
  // repeated int32 hufanleixing = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->hufanleixing_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hufanleixing(i));
    }
    total_size += 1 * this->hufanleixing_size() + data_size;
  }

  // repeated int32 hufan = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hufan_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hufan(i));
    }
    total_size += 1 * this->hufan_size() + data_size;
  }

  // repeated .proto.game.chengdumj.GangInfo ganginfo = 11;
  total_size += 1 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated int32 beihuseatid = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->beihuseatid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->beihuseatid(i));
    }
    total_size += 1 * this->beihuseatid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuPaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuPaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuPaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuPaiInfo::MergeFrom(const HuPaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hufanleixing_.MergeFrom(from.hufanleixing_);
  hufan_.MergeFrom(from.hufan_);
  ganginfo_.MergeFrom(from.ganginfo_);
  beihuseatid_.MergeFrom(from.beihuseatid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_totalhufan()) {
      set_totalhufan(from.totalhufan());
    }
    if (from.has_hutype()) {
      set_hutype(from.hutype());
    }
    if (from.has_hushunxu()) {
      set_hushunxu(from.hushunxu());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_dianpaoseatid()) {
      set_dianpaoseatid(from.dianpaoseatid());
    }
    if (from.has_totalgangfen()) {
      set_totalgangfen(from.totalgangfen());
    }
    if (from.has_totalzhuanyufen()) {
      set_totalzhuanyufen(from.totalzhuanyufen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuPaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuPaiInfo::CopyFrom(const HuPaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuPaiInfo::IsInitialized() const {

  return true;
}

void HuPaiInfo::Swap(HuPaiInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(totalhufan_, other->totalhufan_);
    std::swap(hutype_, other->hutype_);
    std::swap(hushunxu_, other->hushunxu_);
    std::swap(hucard_, other->hucard_);
    std::swap(dianpaoseatid_, other->dianpaoseatid_);
    std::swap(totalgangfen_, other->totalgangfen_);
    std::swap(totalzhuanyufen_, other->totalzhuanyufen_);
    hufanleixing_.Swap(&other->hufanleixing_);
    hufan_.Swap(&other->hufan_);
    ganginfo_.Swap(&other->ganginfo_);
    beihuseatid_.Swap(&other->beihuseatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuPaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuPaiInfo_descriptor_;
  metadata.reflection = HuPaiInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chengdumj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
