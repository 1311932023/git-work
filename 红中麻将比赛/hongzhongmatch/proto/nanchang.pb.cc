// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanchang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nanchang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace nanchang {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuiTouXiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuiTouXiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* Animation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Animation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndNanChang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndNanChang_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nanchang_2eproto() {
  protobuf_AddDesc_nanchang_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nanchang.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, jingsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, jingfen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, chongguan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, jingba_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  HuiTouXiao_descriptor_ = file->message_type(1);
  static const int HuiTouXiao_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuiTouXiao, jingcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuiTouXiao, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuiTouXiao, type_),
  };
  HuiTouXiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuiTouXiao_descriptor_,
      HuiTouXiao::default_instance_,
      HuiTouXiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuiTouXiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuiTouXiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuiTouXiao));
  Animation_descriptor_ = file->message_type(2);
  static const int Animation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, animation_),
  };
  Animation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Animation_descriptor_,
      Animation::default_instance_,
      Animation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Animation));
  GameEndNanChang_descriptor_ = file->message_type(3);
  static const int GameEndNanChang_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, hufen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, shangjin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, mutable_fen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, gangfen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, huitou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, xiajing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, palou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, animation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, baoting_),
  };
  GameEndNanChang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndNanChang_descriptor_,
      GameEndNanChang::default_instance_,
      GameEndNanChang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndNanChang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndNanChang));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nanchang_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuiTouXiao_descriptor_, &HuiTouXiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Animation_descriptor_, &Animation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndNanChang_descriptor_, &GameEndNanChang::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nanchang_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete HuiTouXiao::default_instance_;
  delete HuiTouXiao_reflection_;
  delete Animation::default_instance_;
  delete Animation_reflection_;
  delete GameEndNanChang::default_instance_;
  delete GameEndNanChang_reflection_;
}

void protobuf_AddDesc_nanchang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016nanchang.proto\022\023proto.game.nanchang\"Q\n"
    "\nPlayerInfo\022\017\n\007jingsum\030\001 \003(\005\022\017\n\007jingfen\030"
    "\002 \002(\005\022\021\n\tchongguan\030\003 \002(\005\022\016\n\006jingba\030\004 \002(\005"
    "\"[\n\nHuiTouXiao\022\020\n\010jingcard\030\001 \003(\005\022-\n\004info"
    "\030\002 \003(\0132\037.proto.game.nanchang.PlayerInfo\022"
    "\014\n\004type\030\003 \002(\005\"\?\n\tAnimation\0222\n\tanimation\030"
    "\001 \003(\0132\037.proto.game.nanchang.HuiTouXiao\"\314"
    "\001\n\017GameEndNanChang\022\r\n\005hufen\030\001 \003(\005\022\020\n\010sha"
    "ngjin\030\002 \003(\005\022\023\n\013mutable_fen\030\003 \003(\005\022\017\n\007gang"
    "fen\030\004 \003(\005\022\016\n\006huitou\030\005 \003(\005\022\017\n\007xiajing\030\006 \002"
    "(\005\022\r\n\005palou\030\007 \002(\005\0221\n\tanimation\030\010 \001(\0132\036.p"
    "roto.game.nanchang.Animation\022\017\n\007baoting\030"
    "\t \003(\005", 485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nanchang.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  HuiTouXiao::default_instance_ = new HuiTouXiao();
  Animation::default_instance_ = new Animation();
  GameEndNanChang::default_instance_ = new GameEndNanChang();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  HuiTouXiao::default_instance_->InitAsDefaultInstance();
  Animation::default_instance_->InitAsDefaultInstance();
  GameEndNanChang::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nanchang_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nanchang_2eproto {
  StaticDescriptorInitializer_nanchang_2eproto() {
    protobuf_AddDesc_nanchang_2eproto();
  }
} static_descriptor_initializer_nanchang_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kJingsumFieldNumber;
const int PlayerInfo::kJingfenFieldNumber;
const int PlayerInfo::kChongguanFieldNumber;
const int PlayerInfo::kJingbaFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  jingfen_ = 0;
  chongguan_ = 0;
  jingba_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanchang_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    jingfen_ = 0;
    chongguan_ = 0;
    jingba_ = 0;
  }
  jingsum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jingsum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jingsum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jingsum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jingsum;
        if (input->ExpectTag(16)) goto parse_jingfen;
        break;
      }

      // required int32 jingfen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingfen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingfen_)));
          set_has_jingfen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chongguan;
        break;
      }

      // required int32 chongguan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chongguan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chongguan_)));
          set_has_chongguan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jingba;
        break;
      }

      // required int32 jingba = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingba:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jingba_)));
          set_has_jingba();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jingsum = 1;
  for (int i = 0; i < this->jingsum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jingsum(i), output);
  }

  // required int32 jingfen = 2;
  if (has_jingfen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jingfen(), output);
  }

  // required int32 chongguan = 3;
  if (has_chongguan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chongguan(), output);
  }

  // required int32 jingba = 4;
  if (has_jingba()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jingba(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jingsum = 1;
  for (int i = 0; i < this->jingsum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jingsum(i), target);
  }

  // required int32 jingfen = 2;
  if (has_jingfen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jingfen(), target);
  }

  // required int32 chongguan = 3;
  if (has_chongguan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chongguan(), target);
  }

  // required int32 jingba = 4;
  if (has_jingba()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jingba(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 jingfen = 2;
    if (has_jingfen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingfen());
    }

    // required int32 chongguan = 3;
    if (has_chongguan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chongguan());
    }

    // required int32 jingba = 4;
    if (has_jingba()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jingba());
    }

  }
  // repeated int32 jingsum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jingsum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jingsum(i));
    }
    total_size += 1 * this->jingsum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  jingsum_.MergeFrom(from.jingsum_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_jingfen()) {
      set_jingfen(from.jingfen());
    }
    if (from.has_chongguan()) {
      set_chongguan(from.chongguan());
    }
    if (from.has_jingba()) {
      set_jingba(from.jingba());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    jingsum_.Swap(&other->jingsum_);
    std::swap(jingfen_, other->jingfen_);
    std::swap(chongguan_, other->chongguan_);
    std::swap(jingba_, other->jingba_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuiTouXiao::kJingcardFieldNumber;
const int HuiTouXiao::kInfoFieldNumber;
const int HuiTouXiao::kTypeFieldNumber;
#endif  // !_MSC_VER

HuiTouXiao::HuiTouXiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuiTouXiao::InitAsDefaultInstance() {
}

HuiTouXiao::HuiTouXiao(const HuiTouXiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuiTouXiao::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuiTouXiao::~HuiTouXiao() {
  SharedDtor();
}

void HuiTouXiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuiTouXiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuiTouXiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuiTouXiao_descriptor_;
}

const HuiTouXiao& HuiTouXiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanchang_2eproto();
  return *default_instance_;
}

HuiTouXiao* HuiTouXiao::default_instance_ = NULL;

HuiTouXiao* HuiTouXiao::New() const {
  return new HuiTouXiao;
}

void HuiTouXiao::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    type_ = 0;
  }
  jingcard_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuiTouXiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jingcard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jingcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jingcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jingcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jingcard;
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.game.nanchang.PlayerInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuiTouXiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jingcard = 1;
  for (int i = 0; i < this->jingcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jingcard(i), output);
  }

  // repeated .proto.game.nanchang.PlayerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuiTouXiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jingcard = 1;
  for (int i = 0; i < this->jingcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jingcard(i), target);
  }

  // repeated .proto.game.nanchang.PlayerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuiTouXiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 jingcard = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jingcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jingcard(i));
    }
    total_size += 1 * this->jingcard_size() + data_size;
  }

  // repeated .proto.game.nanchang.PlayerInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuiTouXiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuiTouXiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuiTouXiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuiTouXiao::MergeFrom(const HuiTouXiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  jingcard_.MergeFrom(from.jingcard_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuiTouXiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuiTouXiao::CopyFrom(const HuiTouXiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuiTouXiao::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void HuiTouXiao::Swap(HuiTouXiao* other) {
  if (other != this) {
    jingcard_.Swap(&other->jingcard_);
    info_.Swap(&other->info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuiTouXiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuiTouXiao_descriptor_;
  metadata.reflection = HuiTouXiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Animation::kAnimationFieldNumber;
#endif  // !_MSC_VER

Animation::Animation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Animation::InitAsDefaultInstance() {
}

Animation::Animation(const Animation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Animation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Animation::~Animation() {
  SharedDtor();
}

void Animation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Animation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Animation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Animation_descriptor_;
}

const Animation& Animation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanchang_2eproto();
  return *default_instance_;
}

Animation* Animation::default_instance_ = NULL;

Animation* Animation::New() const {
  return new Animation;
}

void Animation::Clear() {
  animation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Animation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.nanchang.HuiTouXiao animation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_animation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Animation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.nanchang.HuiTouXiao animation = 1;
  for (int i = 0; i < this->animation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Animation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.nanchang.HuiTouXiao animation = 1;
  for (int i = 0; i < this->animation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Animation::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.nanchang.HuiTouXiao animation = 1;
  total_size += 1 * this->animation_size();
  for (int i = 0; i < this->animation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Animation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Animation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Animation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Animation::MergeFrom(const Animation& from) {
  GOOGLE_CHECK_NE(&from, this);
  animation_.MergeFrom(from.animation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Animation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Animation::CopyFrom(const Animation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {

  for (int i = 0; i < animation_size(); i++) {
    if (!this->animation(i).IsInitialized()) return false;
  }
  return true;
}

void Animation::Swap(Animation* other) {
  if (other != this) {
    animation_.Swap(&other->animation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Animation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Animation_descriptor_;
  metadata.reflection = Animation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndNanChang::kHufenFieldNumber;
const int GameEndNanChang::kShangjinFieldNumber;
const int GameEndNanChang::kMutableFenFieldNumber;
const int GameEndNanChang::kGangfenFieldNumber;
const int GameEndNanChang::kHuitouFieldNumber;
const int GameEndNanChang::kXiajingFieldNumber;
const int GameEndNanChang::kPalouFieldNumber;
const int GameEndNanChang::kAnimationFieldNumber;
const int GameEndNanChang::kBaotingFieldNumber;
#endif  // !_MSC_VER

GameEndNanChang::GameEndNanChang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndNanChang::InitAsDefaultInstance() {
  animation_ = const_cast< ::proto::game::nanchang::Animation*>(&::proto::game::nanchang::Animation::default_instance());
}

GameEndNanChang::GameEndNanChang(const GameEndNanChang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndNanChang::SharedCtor() {
  _cached_size_ = 0;
  xiajing_ = 0;
  palou_ = 0;
  animation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndNanChang::~GameEndNanChang() {
  SharedDtor();
}

void GameEndNanChang::SharedDtor() {
  if (this != default_instance_) {
    delete animation_;
  }
}

void GameEndNanChang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndNanChang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndNanChang_descriptor_;
}

const GameEndNanChang& GameEndNanChang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanchang_2eproto();
  return *default_instance_;
}

GameEndNanChang* GameEndNanChang::default_instance_ = NULL;

GameEndNanChang* GameEndNanChang::New() const {
  return new GameEndNanChang;
}

void GameEndNanChang::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    xiajing_ = 0;
    palou_ = 0;
    if (has_animation()) {
      if (animation_ != NULL) animation_->::proto::game::nanchang::Animation::Clear();
    }
  }
  hufen_.Clear();
  shangjin_.Clear();
  mutable_fen_.Clear();
  gangfen_.Clear();
  huitou_.Clear();
  baoting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndNanChang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hufen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hufen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hufen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hufen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hufen;
        if (input->ExpectTag(16)) goto parse_shangjin;
        break;
      }

      // repeated int32 shangjin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangjin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shangjin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shangjin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shangjin;
        if (input->ExpectTag(24)) goto parse_mutable_fen;
        break;
      }

      // repeated int32 mutable_fen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mutable_fen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mutable_fen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mutable_fen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mutable_fen;
        if (input->ExpectTag(32)) goto parse_gangfen;
        break;
      }

      // repeated int32 gangfen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangfen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_gangfen())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gangfen())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gangfen;
        if (input->ExpectTag(40)) goto parse_huitou;
        break;
      }

      // repeated int32 huitou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huitou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_huitou())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huitou())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_huitou;
        if (input->ExpectTag(48)) goto parse_xiajing;
        break;
      }

      // required int32 xiajing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xiajing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xiajing_)));
          set_has_xiajing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_palou;
        break;
      }

      // required int32 palou = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palou_)));
          set_has_palou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_animation;
        break;
      }

      // optional .proto.game.nanchang.Animation animation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_baoting;
        break;
      }

      // repeated int32 baoting = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baoting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_baoting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_baoting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_baoting;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndNanChang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 hufen = 1;
  for (int i = 0; i < this->hufen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hufen(i), output);
  }

  // repeated int32 shangjin = 2;
  for (int i = 0; i < this->shangjin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shangjin(i), output);
  }

  // repeated int32 mutable_fen = 3;
  for (int i = 0; i < this->mutable_fen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mutable_fen(i), output);
  }

  // repeated int32 gangfen = 4;
  for (int i = 0; i < this->gangfen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->gangfen(i), output);
  }

  // repeated int32 huitou = 5;
  for (int i = 0; i < this->huitou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->huitou(i), output);
  }

  // required int32 xiajing = 6;
  if (has_xiajing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xiajing(), output);
  }

  // required int32 palou = 7;
  if (has_palou()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->palou(), output);
  }

  // optional .proto.game.nanchang.Animation animation = 8;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->animation(), output);
  }

  // repeated int32 baoting = 9;
  for (int i = 0; i < this->baoting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->baoting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndNanChang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 hufen = 1;
  for (int i = 0; i < this->hufen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hufen(i), target);
  }

  // repeated int32 shangjin = 2;
  for (int i = 0; i < this->shangjin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shangjin(i), target);
  }

  // repeated int32 mutable_fen = 3;
  for (int i = 0; i < this->mutable_fen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mutable_fen(i), target);
  }

  // repeated int32 gangfen = 4;
  for (int i = 0; i < this->gangfen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->gangfen(i), target);
  }

  // repeated int32 huitou = 5;
  for (int i = 0; i < this->huitou_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->huitou(i), target);
  }

  // required int32 xiajing = 6;
  if (has_xiajing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xiajing(), target);
  }

  // required int32 palou = 7;
  if (has_palou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->palou(), target);
  }

  // optional .proto.game.nanchang.Animation animation = 8;
  if (has_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->animation(), target);
  }

  // repeated int32 baoting = 9;
  for (int i = 0; i < this->baoting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->baoting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndNanChang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // required int32 xiajing = 6;
    if (has_xiajing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xiajing());
    }

    // required int32 palou = 7;
    if (has_palou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palou());
    }

    // optional .proto.game.nanchang.Animation animation = 8;
    if (has_animation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animation());
    }

  }
  // repeated int32 hufen = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hufen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hufen(i));
    }
    total_size += 1 * this->hufen_size() + data_size;
  }

  // repeated int32 shangjin = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shangjin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shangjin(i));
    }
    total_size += 1 * this->shangjin_size() + data_size;
  }

  // repeated int32 mutable_fen = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mutable_fen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mutable_fen(i));
    }
    total_size += 1 * this->mutable_fen_size() + data_size;
  }

  // repeated int32 gangfen = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangfen_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gangfen(i));
    }
    total_size += 1 * this->gangfen_size() + data_size;
  }

  // repeated int32 huitou = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->huitou_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huitou(i));
    }
    total_size += 1 * this->huitou_size() + data_size;
  }

  // repeated int32 baoting = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->baoting_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->baoting(i));
    }
    total_size += 1 * this->baoting_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndNanChang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndNanChang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndNanChang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndNanChang::MergeFrom(const GameEndNanChang& from) {
  GOOGLE_CHECK_NE(&from, this);
  hufen_.MergeFrom(from.hufen_);
  shangjin_.MergeFrom(from.shangjin_);
  mutable_fen_.MergeFrom(from.mutable_fen_);
  gangfen_.MergeFrom(from.gangfen_);
  huitou_.MergeFrom(from.huitou_);
  baoting_.MergeFrom(from.baoting_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_xiajing()) {
      set_xiajing(from.xiajing());
    }
    if (from.has_palou()) {
      set_palou(from.palou());
    }
    if (from.has_animation()) {
      mutable_animation()->::proto::game::nanchang::Animation::MergeFrom(from.animation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndNanChang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndNanChang::CopyFrom(const GameEndNanChang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndNanChang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;

  if (has_animation()) {
    if (!this->animation().IsInitialized()) return false;
  }
  return true;
}

void GameEndNanChang::Swap(GameEndNanChang* other) {
  if (other != this) {
    hufen_.Swap(&other->hufen_);
    shangjin_.Swap(&other->shangjin_);
    mutable_fen_.Swap(&other->mutable_fen_);
    gangfen_.Swap(&other->gangfen_);
    huitou_.Swap(&other->huitou_);
    std::swap(xiajing_, other->xiajing_);
    std::swap(palou_, other->palou_);
    std::swap(animation_, other->animation_);
    baoting_.Swap(&other->baoting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndNanChang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndNanChang_descriptor_;
  metadata.reflection = GameEndNanChang_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nanchang
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
