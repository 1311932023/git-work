// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xianningmj.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xianningmj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace xianningmj {

namespace {

const ::google::protobuf::Descriptor* GameLaiziInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLaiziInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHongZhongLaiZiGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHongZhongLaiZiGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndXianNing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndXianNing_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGamePlayerAlertingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGamePlayerAlertingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGameScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGameScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMapaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMapaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMapaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMapaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndPlayerScoresInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndPlayerScoresInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBcOpResultAnGangScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBcOpResultAnGangScore_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xianningmj_2eproto() {
  protobuf_AddDesc_xianningmj_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xianningmj.proto");
  GOOGLE_CHECK(file != NULL);
  GameLaiziInfo_descriptor_ = file->message_type(0);
  static const int GameLaiziInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, laizishow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, laizisign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, dicelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, flag_),
  };
  GameLaiziInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLaiziInfo_descriptor_,
      GameLaiziInfo::default_instance_,
      GameLaiziInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLaiziInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLaiziInfo));
  tagHongZhongLaiZiGang_descriptor_ = file->message_type(1);
  static const int tagHongZhongLaiZiGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHongZhongLaiZiGang, hongzhonggang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHongZhongLaiZiGang, laizegang_),
  };
  tagHongZhongLaiZiGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHongZhongLaiZiGang_descriptor_,
      tagHongZhongLaiZiGang::default_instance_,
      tagHongZhongLaiZiGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHongZhongLaiZiGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHongZhongLaiZiGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHongZhongLaiZiGang));
  GameEndXianNing_descriptor_ = file->message_type(2);
  static const int GameEndXianNing_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, hongzhonglaizigang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, playerscoreinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, gamemapaiinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, laizisign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, remaindercards_),
  };
  GameEndXianNing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndXianNing_descriptor_,
      GameEndXianNing::default_instance_,
      GameEndXianNing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndXianNing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndXianNing));
  RspGamePlayerAlertingInfo_descriptor_ = file->message_type(3);
  static const int RspGamePlayerAlertingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGamePlayerAlertingInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGamePlayerAlertingInfo, flag_),
  };
  RspGamePlayerAlertingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGamePlayerAlertingInfo_descriptor_,
      RspGamePlayerAlertingInfo::default_instance_,
      RspGamePlayerAlertingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGamePlayerAlertingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGamePlayerAlertingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGamePlayerAlertingInfo));
  tagGameScene_descriptor_ = file->message_type(4);
  static const int tagGameScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, laizi_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, playeralertinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, bangangting_),
  };
  tagGameScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGameScene_descriptor_,
      tagGameScene::default_instance_,
      tagGameScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGameScene));
  PlayerMapaiInfo_descriptor_ = file->message_type(5);
  static const int PlayerMapaiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMapaiInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMapaiInfo, mapailist_),
  };
  PlayerMapaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMapaiInfo_descriptor_,
      PlayerMapaiInfo::default_instance_,
      PlayerMapaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMapaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMapaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMapaiInfo));
  GameMapaiInfo_descriptor_ = file->message_type(6);
  static const int GameMapaiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMapaiInfo, publicmapailist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMapaiInfo, playermapaiinfolist_),
  };
  GameMapaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMapaiInfo_descriptor_,
      GameMapaiInfo::default_instance_,
      GameMapaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMapaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMapaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMapaiInfo));
  GameEndPlayerScoresInfo_descriptor_ = file->message_type(7);
  static const int GameEndPlayerScoresInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, gangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, huscroe_),
  };
  GameEndPlayerScoresInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndPlayerScoresInfo_descriptor_,
      GameEndPlayerScoresInfo::default_instance_,
      GameEndPlayerScoresInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndPlayerScoresInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndPlayerScoresInfo));
  AckBcOpResultAnGangScore_descriptor_ = file->message_type(8);
  static const int AckBcOpResultAnGangScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResultAnGangScore, score_),
  };
  AckBcOpResultAnGangScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBcOpResultAnGangScore_descriptor_,
      AckBcOpResultAnGangScore::default_instance_,
      AckBcOpResultAnGangScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResultAnGangScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResultAnGangScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBcOpResultAnGangScore));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xianningmj_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLaiziInfo_descriptor_, &GameLaiziInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHongZhongLaiZiGang_descriptor_, &tagHongZhongLaiZiGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndXianNing_descriptor_, &GameEndXianNing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGamePlayerAlertingInfo_descriptor_, &RspGamePlayerAlertingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGameScene_descriptor_, &tagGameScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMapaiInfo_descriptor_, &PlayerMapaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMapaiInfo_descriptor_, &GameMapaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndPlayerScoresInfo_descriptor_, &GameEndPlayerScoresInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBcOpResultAnGangScore_descriptor_, &AckBcOpResultAnGangScore::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xianningmj_2eproto() {
  delete GameLaiziInfo::default_instance_;
  delete GameLaiziInfo_reflection_;
  delete tagHongZhongLaiZiGang::default_instance_;
  delete tagHongZhongLaiZiGang_reflection_;
  delete GameEndXianNing::default_instance_;
  delete GameEndXianNing_reflection_;
  delete RspGamePlayerAlertingInfo::default_instance_;
  delete RspGamePlayerAlertingInfo_reflection_;
  delete tagGameScene::default_instance_;
  delete tagGameScene_reflection_;
  delete PlayerMapaiInfo::default_instance_;
  delete PlayerMapaiInfo_reflection_;
  delete GameMapaiInfo::default_instance_;
  delete GameMapaiInfo_reflection_;
  delete GameEndPlayerScoresInfo::default_instance_;
  delete GameEndPlayerScoresInfo_reflection_;
  delete AckBcOpResultAnGangScore::default_instance_;
  delete AckBcOpResultAnGangScore_reflection_;
}

void protobuf_AddDesc_xianningmj_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020xianningmj.proto\022\025proto.game.xianningm"
    "j\"U\n\rGameLaiziInfo\022\021\n\tlaiziShow\030\001 \003(\005\022\021\n"
    "\tlaiziSign\030\002 \003(\005\022\020\n\010diceList\030\003 \003(\005\022\014\n\004fl"
    "ag\030\004 \001(\010\"A\n\025tagHongZhongLaiZiGang\022\025\n\rhon"
    "gzhonggang\030\001 \001(\005\022\021\n\tlaizegang\030\002 \001(\005\"\220\002\n\017"
    "GameEndXianNing\022H\n\022hongzhonglaizigang\030\001 "
    "\003(\0132,.proto.game.xianningmj.tagHongZhong"
    "LaiZiGang\022K\n\023playerScoreInfoList\030\002 \003(\0132."
    ".proto.game.xianningmj.GameEndPlayerScor"
    "esInfo\022;\n\rgameMapaiInfo\030\003 \001(\0132$.proto.ga"
    "me.xianningmj.GameMapaiInfo\022\021\n\tlaiziSign"
    "\030\004 \001(\005\022\026\n\016remainderCards\030\005 \003(\005\"9\n\031RspGam"
    "ePlayerAlertingInfo\022\016\n\006seatid\030\001 \001(\005\022\014\n\004f"
    "lag\030\002 \001(\010\"\253\001\n\014tagGameScene\0228\n\nlaizi_info"
    "\030\001 \001(\0132$.proto.game.xianningmj.GameLaizi"
    "Info\022L\n\022PlayerAlertingInfo\030\002 \003(\01320.proto"
    ".game.xianningmj.RspGamePlayerAlertingIn"
    "fo\022\023\n\013bAnGangTing\030\003 \003(\005\"5\n\017PlayerMapaiIn"
    "fo\022\017\n\007chairId\030\001 \001(\005\022\021\n\tmapaiList\030\002 \003(\005\"m"
    "\n\rGameMapaiInfo\022\027\n\017publicMapaiList\030\001 \003(\005"
    "\022C\n\023playerMapaiInfoList\030\002 \003(\0132&.proto.ga"
    "me.xianningmj.PlayerMapaiInfo\"N\n\027GameEnd"
    "PlayerScoresInfo\022\017\n\007chairid\030\001 \002(\005\022\021\n\tgan"
    "gscore\030\002 \002(\005\022\017\n\007huscroe\030\003 \002(\005\")\n\030AckBcOp"
    "ResultAnGangScore\022\r\n\005Score\030\001 \003(\005", 992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xianningmj.proto", &protobuf_RegisterTypes);
  GameLaiziInfo::default_instance_ = new GameLaiziInfo();
  tagHongZhongLaiZiGang::default_instance_ = new tagHongZhongLaiZiGang();
  GameEndXianNing::default_instance_ = new GameEndXianNing();
  RspGamePlayerAlertingInfo::default_instance_ = new RspGamePlayerAlertingInfo();
  tagGameScene::default_instance_ = new tagGameScene();
  PlayerMapaiInfo::default_instance_ = new PlayerMapaiInfo();
  GameMapaiInfo::default_instance_ = new GameMapaiInfo();
  GameEndPlayerScoresInfo::default_instance_ = new GameEndPlayerScoresInfo();
  AckBcOpResultAnGangScore::default_instance_ = new AckBcOpResultAnGangScore();
  GameLaiziInfo::default_instance_->InitAsDefaultInstance();
  tagHongZhongLaiZiGang::default_instance_->InitAsDefaultInstance();
  GameEndXianNing::default_instance_->InitAsDefaultInstance();
  RspGamePlayerAlertingInfo::default_instance_->InitAsDefaultInstance();
  tagGameScene::default_instance_->InitAsDefaultInstance();
  PlayerMapaiInfo::default_instance_->InitAsDefaultInstance();
  GameMapaiInfo::default_instance_->InitAsDefaultInstance();
  GameEndPlayerScoresInfo::default_instance_->InitAsDefaultInstance();
  AckBcOpResultAnGangScore::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xianningmj_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xianningmj_2eproto {
  StaticDescriptorInitializer_xianningmj_2eproto() {
    protobuf_AddDesc_xianningmj_2eproto();
  }
} static_descriptor_initializer_xianningmj_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameLaiziInfo::kLaiziShowFieldNumber;
const int GameLaiziInfo::kLaiziSignFieldNumber;
const int GameLaiziInfo::kDiceListFieldNumber;
const int GameLaiziInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

GameLaiziInfo::GameLaiziInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameLaiziInfo::InitAsDefaultInstance() {
}

GameLaiziInfo::GameLaiziInfo(const GameLaiziInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameLaiziInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLaiziInfo::~GameLaiziInfo() {
  SharedDtor();
}

void GameLaiziInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameLaiziInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLaiziInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLaiziInfo_descriptor_;
}

const GameLaiziInfo& GameLaiziInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

GameLaiziInfo* GameLaiziInfo::default_instance_ = NULL;

GameLaiziInfo* GameLaiziInfo::New() const {
  return new GameLaiziInfo;
}

void GameLaiziInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    flag_ = false;
  }
  laizishow_.Clear();
  laizisign_.Clear();
  dicelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameLaiziInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 laiziShow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_laizishow())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizishow())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_laiziShow;
        if (input->ExpectTag(16)) goto parse_laiziSign;
        break;
      }

      // repeated int32 laiziSign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_laizisign())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizisign())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laiziSign;
        if (input->ExpectTag(24)) goto parse_diceList;
        break;
      }

      // repeated int32 diceList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dicelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diceList;
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameLaiziInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 laiziShow = 1;
  for (int i = 0; i < this->laizishow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->laizishow(i), output);
  }

  // repeated int32 laiziSign = 2;
  for (int i = 0; i < this->laizisign_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->laizisign(i), output);
  }

  // repeated int32 diceList = 3;
  for (int i = 0; i < this->dicelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dicelist(i), output);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameLaiziInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 laiziShow = 1;
  for (int i = 0; i < this->laizishow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->laizishow(i), target);
  }

  // repeated int32 laiziSign = 2;
  for (int i = 0; i < this->laizisign_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->laizisign(i), target);
  }

  // repeated int32 diceList = 3;
  for (int i = 0; i < this->dicelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->dicelist(i), target);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameLaiziInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 laiziShow = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizishow_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizishow(i));
    }
    total_size += 1 * this->laizishow_size() + data_size;
  }

  // repeated int32 laiziSign = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizisign_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizisign(i));
    }
    total_size += 1 * this->laizisign_size() + data_size;
  }

  // repeated int32 diceList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicelist(i));
    }
    total_size += 1 * this->dicelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLaiziInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameLaiziInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameLaiziInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameLaiziInfo::MergeFrom(const GameLaiziInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  laizishow_.MergeFrom(from.laizishow_);
  laizisign_.MergeFrom(from.laizisign_);
  dicelist_.MergeFrom(from.dicelist_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameLaiziInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLaiziInfo::CopyFrom(const GameLaiziInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLaiziInfo::IsInitialized() const {

  return true;
}

void GameLaiziInfo::Swap(GameLaiziInfo* other) {
  if (other != this) {
    laizishow_.Swap(&other->laizishow_);
    laizisign_.Swap(&other->laizisign_);
    dicelist_.Swap(&other->dicelist_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameLaiziInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLaiziInfo_descriptor_;
  metadata.reflection = GameLaiziInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHongZhongLaiZiGang::kHongzhonggangFieldNumber;
const int tagHongZhongLaiZiGang::kLaizegangFieldNumber;
#endif  // !_MSC_VER

tagHongZhongLaiZiGang::tagHongZhongLaiZiGang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHongZhongLaiZiGang::InitAsDefaultInstance() {
}

tagHongZhongLaiZiGang::tagHongZhongLaiZiGang(const tagHongZhongLaiZiGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHongZhongLaiZiGang::SharedCtor() {
  _cached_size_ = 0;
  hongzhonggang_ = 0;
  laizegang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHongZhongLaiZiGang::~tagHongZhongLaiZiGang() {
  SharedDtor();
}

void tagHongZhongLaiZiGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHongZhongLaiZiGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHongZhongLaiZiGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHongZhongLaiZiGang_descriptor_;
}

const tagHongZhongLaiZiGang& tagHongZhongLaiZiGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

tagHongZhongLaiZiGang* tagHongZhongLaiZiGang::default_instance_ = NULL;

tagHongZhongLaiZiGang* tagHongZhongLaiZiGang::New() const {
  return new tagHongZhongLaiZiGang;
}

void tagHongZhongLaiZiGang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hongzhonggang_ = 0;
    laizegang_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHongZhongLaiZiGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hongzhonggang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hongzhonggang_)));
          set_has_hongzhonggang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laizegang;
        break;
      }

      // optional int32 laizegang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizegang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizegang_)));
          set_has_laizegang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHongZhongLaiZiGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hongzhonggang = 1;
  if (has_hongzhonggang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hongzhonggang(), output);
  }

  // optional int32 laizegang = 2;
  if (has_laizegang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->laizegang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHongZhongLaiZiGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hongzhonggang = 1;
  if (has_hongzhonggang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hongzhonggang(), target);
  }

  // optional int32 laizegang = 2;
  if (has_laizegang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->laizegang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHongZhongLaiZiGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hongzhonggang = 1;
    if (has_hongzhonggang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hongzhonggang());
    }

    // optional int32 laizegang = 2;
    if (has_laizegang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizegang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHongZhongLaiZiGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHongZhongLaiZiGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHongZhongLaiZiGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHongZhongLaiZiGang::MergeFrom(const tagHongZhongLaiZiGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hongzhonggang()) {
      set_hongzhonggang(from.hongzhonggang());
    }
    if (from.has_laizegang()) {
      set_laizegang(from.laizegang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHongZhongLaiZiGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHongZhongLaiZiGang::CopyFrom(const tagHongZhongLaiZiGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHongZhongLaiZiGang::IsInitialized() const {

  return true;
}

void tagHongZhongLaiZiGang::Swap(tagHongZhongLaiZiGang* other) {
  if (other != this) {
    std::swap(hongzhonggang_, other->hongzhonggang_);
    std::swap(laizegang_, other->laizegang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHongZhongLaiZiGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHongZhongLaiZiGang_descriptor_;
  metadata.reflection = tagHongZhongLaiZiGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndXianNing::kHongzhonglaizigangFieldNumber;
const int GameEndXianNing::kPlayerScoreInfoListFieldNumber;
const int GameEndXianNing::kGameMapaiInfoFieldNumber;
const int GameEndXianNing::kLaiziSignFieldNumber;
const int GameEndXianNing::kRemainderCardsFieldNumber;
#endif  // !_MSC_VER

GameEndXianNing::GameEndXianNing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndXianNing::InitAsDefaultInstance() {
  gamemapaiinfo_ = const_cast< ::proto::game::xianningmj::GameMapaiInfo*>(&::proto::game::xianningmj::GameMapaiInfo::default_instance());
}

GameEndXianNing::GameEndXianNing(const GameEndXianNing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndXianNing::SharedCtor() {
  _cached_size_ = 0;
  gamemapaiinfo_ = NULL;
  laizisign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndXianNing::~GameEndXianNing() {
  SharedDtor();
}

void GameEndXianNing::SharedDtor() {
  if (this != default_instance_) {
    delete gamemapaiinfo_;
  }
}

void GameEndXianNing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndXianNing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndXianNing_descriptor_;
}

const GameEndXianNing& GameEndXianNing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

GameEndXianNing* GameEndXianNing::default_instance_ = NULL;

GameEndXianNing* GameEndXianNing::New() const {
  return new GameEndXianNing;
}

void GameEndXianNing::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_gamemapaiinfo()) {
      if (gamemapaiinfo_ != NULL) gamemapaiinfo_->::proto::game::xianningmj::GameMapaiInfo::Clear();
    }
    laizisign_ = 0;
  }
  hongzhonglaizigang_.Clear();
  playerscoreinfolist_.Clear();
  remaindercards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndXianNing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.xianningmj.tagHongZhongLaiZiGang hongzhonglaizigang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hongzhonglaizigang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hongzhonglaizigang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hongzhonglaizigang;
        if (input->ExpectTag(18)) goto parse_playerScoreInfoList;
        break;
      }

      // repeated .proto.game.xianningmj.GameEndPlayerScoresInfo playerScoreInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerScoreInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerscoreinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerScoreInfoList;
        if (input->ExpectTag(26)) goto parse_gameMapaiInfo;
        break;
      }

      // optional .proto.game.xianningmj.GameMapaiInfo gameMapaiInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameMapaiInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamemapaiinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_laiziSign;
        break;
      }

      // optional int32 laiziSign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laiziSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizisign_)));
          set_has_laizisign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainderCards;
        break;
      }

      // repeated int32 remainderCards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainderCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_remaindercards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remaindercards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainderCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndXianNing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.xianningmj.tagHongZhongLaiZiGang hongzhonglaizigang = 1;
  for (int i = 0; i < this->hongzhonglaizigang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hongzhonglaizigang(i), output);
  }

  // repeated .proto.game.xianningmj.GameEndPlayerScoresInfo playerScoreInfoList = 2;
  for (int i = 0; i < this->playerscoreinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerscoreinfolist(i), output);
  }

  // optional .proto.game.xianningmj.GameMapaiInfo gameMapaiInfo = 3;
  if (has_gamemapaiinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gamemapaiinfo(), output);
  }

  // optional int32 laiziSign = 4;
  if (has_laizisign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->laizisign(), output);
  }

  // repeated int32 remainderCards = 5;
  for (int i = 0; i < this->remaindercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->remaindercards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndXianNing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.xianningmj.tagHongZhongLaiZiGang hongzhonglaizigang = 1;
  for (int i = 0; i < this->hongzhonglaizigang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hongzhonglaizigang(i), target);
  }

  // repeated .proto.game.xianningmj.GameEndPlayerScoresInfo playerScoreInfoList = 2;
  for (int i = 0; i < this->playerscoreinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerscoreinfolist(i), target);
  }

  // optional .proto.game.xianningmj.GameMapaiInfo gameMapaiInfo = 3;
  if (has_gamemapaiinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gamemapaiinfo(), target);
  }

  // optional int32 laiziSign = 4;
  if (has_laizisign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->laizisign(), target);
  }

  // repeated int32 remainderCards = 5;
  for (int i = 0; i < this->remaindercards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->remaindercards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndXianNing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .proto.game.xianningmj.GameMapaiInfo gameMapaiInfo = 3;
    if (has_gamemapaiinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamemapaiinfo());
    }

    // optional int32 laiziSign = 4;
    if (has_laizisign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizisign());
    }

  }
  // repeated .proto.game.xianningmj.tagHongZhongLaiZiGang hongzhonglaizigang = 1;
  total_size += 1 * this->hongzhonglaizigang_size();
  for (int i = 0; i < this->hongzhonglaizigang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hongzhonglaizigang(i));
  }

  // repeated .proto.game.xianningmj.GameEndPlayerScoresInfo playerScoreInfoList = 2;
  total_size += 1 * this->playerscoreinfolist_size();
  for (int i = 0; i < this->playerscoreinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerscoreinfolist(i));
  }

  // repeated int32 remainderCards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaindercards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remaindercards(i));
    }
    total_size += 1 * this->remaindercards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndXianNing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndXianNing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndXianNing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndXianNing::MergeFrom(const GameEndXianNing& from) {
  GOOGLE_CHECK_NE(&from, this);
  hongzhonglaizigang_.MergeFrom(from.hongzhonglaizigang_);
  playerscoreinfolist_.MergeFrom(from.playerscoreinfolist_);
  remaindercards_.MergeFrom(from.remaindercards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_gamemapaiinfo()) {
      mutable_gamemapaiinfo()->::proto::game::xianningmj::GameMapaiInfo::MergeFrom(from.gamemapaiinfo());
    }
    if (from.has_laizisign()) {
      set_laizisign(from.laizisign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndXianNing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndXianNing::CopyFrom(const GameEndXianNing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndXianNing::IsInitialized() const {

  for (int i = 0; i < playerscoreinfolist_size(); i++) {
    if (!this->playerscoreinfolist(i).IsInitialized()) return false;
  }
  return true;
}

void GameEndXianNing::Swap(GameEndXianNing* other) {
  if (other != this) {
    hongzhonglaizigang_.Swap(&other->hongzhonglaizigang_);
    playerscoreinfolist_.Swap(&other->playerscoreinfolist_);
    std::swap(gamemapaiinfo_, other->gamemapaiinfo_);
    std::swap(laizisign_, other->laizisign_);
    remaindercards_.Swap(&other->remaindercards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndXianNing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndXianNing_descriptor_;
  metadata.reflection = GameEndXianNing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGamePlayerAlertingInfo::kSeatidFieldNumber;
const int RspGamePlayerAlertingInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

RspGamePlayerAlertingInfo::RspGamePlayerAlertingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGamePlayerAlertingInfo::InitAsDefaultInstance() {
}

RspGamePlayerAlertingInfo::RspGamePlayerAlertingInfo(const RspGamePlayerAlertingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGamePlayerAlertingInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGamePlayerAlertingInfo::~RspGamePlayerAlertingInfo() {
  SharedDtor();
}

void RspGamePlayerAlertingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGamePlayerAlertingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGamePlayerAlertingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGamePlayerAlertingInfo_descriptor_;
}

const RspGamePlayerAlertingInfo& RspGamePlayerAlertingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

RspGamePlayerAlertingInfo* RspGamePlayerAlertingInfo::default_instance_ = NULL;

RspGamePlayerAlertingInfo* RspGamePlayerAlertingInfo::New() const {
  return new RspGamePlayerAlertingInfo;
}

void RspGamePlayerAlertingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGamePlayerAlertingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGamePlayerAlertingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGamePlayerAlertingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGamePlayerAlertingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGamePlayerAlertingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGamePlayerAlertingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGamePlayerAlertingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGamePlayerAlertingInfo::MergeFrom(const RspGamePlayerAlertingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGamePlayerAlertingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGamePlayerAlertingInfo::CopyFrom(const RspGamePlayerAlertingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGamePlayerAlertingInfo::IsInitialized() const {

  return true;
}

void RspGamePlayerAlertingInfo::Swap(RspGamePlayerAlertingInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGamePlayerAlertingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGamePlayerAlertingInfo_descriptor_;
  metadata.reflection = RspGamePlayerAlertingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGameScene::kLaiziInfoFieldNumber;
const int tagGameScene::kPlayerAlertingInfoFieldNumber;
const int tagGameScene::kBAnGangTingFieldNumber;
#endif  // !_MSC_VER

tagGameScene::tagGameScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGameScene::InitAsDefaultInstance() {
  laizi_info_ = const_cast< ::proto::game::xianningmj::GameLaiziInfo*>(&::proto::game::xianningmj::GameLaiziInfo::default_instance());
}

tagGameScene::tagGameScene(const tagGameScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGameScene::SharedCtor() {
  _cached_size_ = 0;
  laizi_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGameScene::~tagGameScene() {
  SharedDtor();
}

void tagGameScene::SharedDtor() {
  if (this != default_instance_) {
    delete laizi_info_;
  }
}

void tagGameScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGameScene_descriptor_;
}

const tagGameScene& tagGameScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

tagGameScene* tagGameScene::default_instance_ = NULL;

tagGameScene* tagGameScene::New() const {
  return new tagGameScene;
}

void tagGameScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_laizi_info()) {
      if (laizi_info_ != NULL) laizi_info_->::proto::game::xianningmj::GameLaiziInfo::Clear();
    }
  }
  playeralertinginfo_.Clear();
  bangangting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGameScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.xianningmj.GameLaiziInfo laizi_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laizi_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerAlertingInfo;
        break;
      }

      // repeated .proto.game.xianningmj.RspGamePlayerAlertingInfo PlayerAlertingInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerAlertingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playeralertinginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerAlertingInfo;
        if (input->ExpectTag(24)) goto parse_bAnGangTing;
        break;
      }

      // repeated int32 bAnGangTing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAnGangTing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_bangangting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bangangting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bAnGangTing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGameScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.game.xianningmj.GameLaiziInfo laizi_info = 1;
  if (has_laizi_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->laizi_info(), output);
  }

  // repeated .proto.game.xianningmj.RspGamePlayerAlertingInfo PlayerAlertingInfo = 2;
  for (int i = 0; i < this->playeralertinginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playeralertinginfo(i), output);
  }

  // repeated int32 bAnGangTing = 3;
  for (int i = 0; i < this->bangangting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->bangangting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGameScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.game.xianningmj.GameLaiziInfo laizi_info = 1;
  if (has_laizi_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->laizi_info(), target);
  }

  // repeated .proto.game.xianningmj.RspGamePlayerAlertingInfo PlayerAlertingInfo = 2;
  for (int i = 0; i < this->playeralertinginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playeralertinginfo(i), target);
  }

  // repeated int32 bAnGangTing = 3;
  for (int i = 0; i < this->bangangting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->bangangting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGameScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.xianningmj.GameLaiziInfo laizi_info = 1;
    if (has_laizi_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laizi_info());
    }

  }
  // repeated .proto.game.xianningmj.RspGamePlayerAlertingInfo PlayerAlertingInfo = 2;
  total_size += 1 * this->playeralertinginfo_size();
  for (int i = 0; i < this->playeralertinginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playeralertinginfo(i));
  }

  // repeated int32 bAnGangTing = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bangangting_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bangangting(i));
    }
    total_size += 1 * this->bangangting_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGameScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGameScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGameScene::MergeFrom(const tagGameScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeralertinginfo_.MergeFrom(from.playeralertinginfo_);
  bangangting_.MergeFrom(from.bangangting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laizi_info()) {
      mutable_laizi_info()->::proto::game::xianningmj::GameLaiziInfo::MergeFrom(from.laizi_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGameScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameScene::CopyFrom(const tagGameScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameScene::IsInitialized() const {

  return true;
}

void tagGameScene::Swap(tagGameScene* other) {
  if (other != this) {
    std::swap(laizi_info_, other->laizi_info_);
    playeralertinginfo_.Swap(&other->playeralertinginfo_);
    bangangting_.Swap(&other->bangangting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGameScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGameScene_descriptor_;
  metadata.reflection = tagGameScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMapaiInfo::kChairIdFieldNumber;
const int PlayerMapaiInfo::kMapaiListFieldNumber;
#endif  // !_MSC_VER

PlayerMapaiInfo::PlayerMapaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMapaiInfo::InitAsDefaultInstance() {
}

PlayerMapaiInfo::PlayerMapaiInfo(const PlayerMapaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMapaiInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMapaiInfo::~PlayerMapaiInfo() {
  SharedDtor();
}

void PlayerMapaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMapaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMapaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMapaiInfo_descriptor_;
}

const PlayerMapaiInfo& PlayerMapaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

PlayerMapaiInfo* PlayerMapaiInfo::default_instance_ = NULL;

PlayerMapaiInfo* PlayerMapaiInfo::New() const {
  return new PlayerMapaiInfo;
}

void PlayerMapaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  mapailist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMapaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapaiList;
        break;
      }

      // repeated int32 mapaiList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapaiList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mapailist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mapailist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapaiList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMapaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 mapaiList = 2;
  for (int i = 0; i < this->mapailist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mapailist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMapaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 mapaiList = 2;
  for (int i = 0; i < this->mapailist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mapailist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMapaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 mapaiList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapailist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mapailist(i));
    }
    total_size += 1 * this->mapailist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMapaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMapaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMapaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMapaiInfo::MergeFrom(const PlayerMapaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapailist_.MergeFrom(from.mapailist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMapaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMapaiInfo::CopyFrom(const PlayerMapaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMapaiInfo::IsInitialized() const {

  return true;
}

void PlayerMapaiInfo::Swap(PlayerMapaiInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    mapailist_.Swap(&other->mapailist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMapaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMapaiInfo_descriptor_;
  metadata.reflection = PlayerMapaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameMapaiInfo::kPublicMapaiListFieldNumber;
const int GameMapaiInfo::kPlayerMapaiInfoListFieldNumber;
#endif  // !_MSC_VER

GameMapaiInfo::GameMapaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMapaiInfo::InitAsDefaultInstance() {
}

GameMapaiInfo::GameMapaiInfo(const GameMapaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMapaiInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMapaiInfo::~GameMapaiInfo() {
  SharedDtor();
}

void GameMapaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMapaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMapaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMapaiInfo_descriptor_;
}

const GameMapaiInfo& GameMapaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

GameMapaiInfo* GameMapaiInfo::default_instance_ = NULL;

GameMapaiInfo* GameMapaiInfo::New() const {
  return new GameMapaiInfo;
}

void GameMapaiInfo::Clear() {
  publicmapailist_.Clear();
  playermapaiinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMapaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 publicMapaiList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publicMapaiList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_publicmapailist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_publicmapailist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_publicMapaiList;
        if (input->ExpectTag(18)) goto parse_playerMapaiInfoList;
        break;
      }

      // repeated .proto.game.xianningmj.PlayerMapaiInfo playerMapaiInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerMapaiInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playermapaiinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerMapaiInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMapaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 publicMapaiList = 1;
  for (int i = 0; i < this->publicmapailist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->publicmapailist(i), output);
  }

  // repeated .proto.game.xianningmj.PlayerMapaiInfo playerMapaiInfoList = 2;
  for (int i = 0; i < this->playermapaiinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playermapaiinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMapaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 publicMapaiList = 1;
  for (int i = 0; i < this->publicmapailist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->publicmapailist(i), target);
  }

  // repeated .proto.game.xianningmj.PlayerMapaiInfo playerMapaiInfoList = 2;
  for (int i = 0; i < this->playermapaiinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playermapaiinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMapaiInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 publicMapaiList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->publicmapailist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->publicmapailist(i));
    }
    total_size += 1 * this->publicmapailist_size() + data_size;
  }

  // repeated .proto.game.xianningmj.PlayerMapaiInfo playerMapaiInfoList = 2;
  total_size += 1 * this->playermapaiinfolist_size();
  for (int i = 0; i < this->playermapaiinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playermapaiinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMapaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMapaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMapaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMapaiInfo::MergeFrom(const GameMapaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  publicmapailist_.MergeFrom(from.publicmapailist_);
  playermapaiinfolist_.MergeFrom(from.playermapaiinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMapaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMapaiInfo::CopyFrom(const GameMapaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMapaiInfo::IsInitialized() const {

  return true;
}

void GameMapaiInfo::Swap(GameMapaiInfo* other) {
  if (other != this) {
    publicmapailist_.Swap(&other->publicmapailist_);
    playermapaiinfolist_.Swap(&other->playermapaiinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMapaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMapaiInfo_descriptor_;
  metadata.reflection = GameMapaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndPlayerScoresInfo::kChairidFieldNumber;
const int GameEndPlayerScoresInfo::kGangscoreFieldNumber;
const int GameEndPlayerScoresInfo::kHuscroeFieldNumber;
#endif  // !_MSC_VER

GameEndPlayerScoresInfo::GameEndPlayerScoresInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndPlayerScoresInfo::InitAsDefaultInstance() {
}

GameEndPlayerScoresInfo::GameEndPlayerScoresInfo(const GameEndPlayerScoresInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndPlayerScoresInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  gangscore_ = 0;
  huscroe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndPlayerScoresInfo::~GameEndPlayerScoresInfo() {
  SharedDtor();
}

void GameEndPlayerScoresInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndPlayerScoresInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndPlayerScoresInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndPlayerScoresInfo_descriptor_;
}

const GameEndPlayerScoresInfo& GameEndPlayerScoresInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

GameEndPlayerScoresInfo* GameEndPlayerScoresInfo::default_instance_ = NULL;

GameEndPlayerScoresInfo* GameEndPlayerScoresInfo::New() const {
  return new GameEndPlayerScoresInfo;
}

void GameEndPlayerScoresInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    gangscore_ = 0;
    huscroe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndPlayerScoresInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gangscore;
        break;
      }

      // required int32 gangscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangscore_)));
          set_has_gangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_huscroe;
        break;
      }

      // required int32 huscroe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huscroe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huscroe_)));
          set_has_huscroe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndPlayerScoresInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 gangscore = 2;
  if (has_gangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangscore(), output);
  }

  // required int32 huscroe = 3;
  if (has_huscroe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huscroe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndPlayerScoresInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required int32 gangscore = 2;
  if (has_gangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangscore(), target);
  }

  // required int32 huscroe = 3;
  if (has_huscroe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huscroe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndPlayerScoresInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 gangscore = 2;
    if (has_gangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangscore());
    }

    // required int32 huscroe = 3;
    if (has_huscroe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huscroe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndPlayerScoresInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndPlayerScoresInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndPlayerScoresInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndPlayerScoresInfo::MergeFrom(const GameEndPlayerScoresInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_gangscore()) {
      set_gangscore(from.gangscore());
    }
    if (from.has_huscroe()) {
      set_huscroe(from.huscroe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndPlayerScoresInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndPlayerScoresInfo::CopyFrom(const GameEndPlayerScoresInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndPlayerScoresInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameEndPlayerScoresInfo::Swap(GameEndPlayerScoresInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(gangscore_, other->gangscore_);
    std::swap(huscroe_, other->huscroe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndPlayerScoresInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndPlayerScoresInfo_descriptor_;
  metadata.reflection = GameEndPlayerScoresInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBcOpResultAnGangScore::kScoreFieldNumber;
#endif  // !_MSC_VER

AckBcOpResultAnGangScore::AckBcOpResultAnGangScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBcOpResultAnGangScore::InitAsDefaultInstance() {
}

AckBcOpResultAnGangScore::AckBcOpResultAnGangScore(const AckBcOpResultAnGangScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBcOpResultAnGangScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBcOpResultAnGangScore::~AckBcOpResultAnGangScore() {
  SharedDtor();
}

void AckBcOpResultAnGangScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBcOpResultAnGangScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBcOpResultAnGangScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBcOpResultAnGangScore_descriptor_;
}

const AckBcOpResultAnGangScore& AckBcOpResultAnGangScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xianningmj_2eproto();
  return *default_instance_;
}

AckBcOpResultAnGangScore* AckBcOpResultAnGangScore::default_instance_ = NULL;

AckBcOpResultAnGangScore* AckBcOpResultAnGangScore::New() const {
  return new AckBcOpResultAnGangScore;
}

void AckBcOpResultAnGangScore::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBcOpResultAnGangScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBcOpResultAnGangScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBcOpResultAnGangScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBcOpResultAnGangScore::ByteSize() const {
  int total_size = 0;

  // repeated int32 Score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBcOpResultAnGangScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBcOpResultAnGangScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBcOpResultAnGangScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBcOpResultAnGangScore::MergeFrom(const AckBcOpResultAnGangScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBcOpResultAnGangScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBcOpResultAnGangScore::CopyFrom(const AckBcOpResultAnGangScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBcOpResultAnGangScore::IsInitialized() const {

  return true;
}

void AckBcOpResultAnGangScore::Swap(AckBcOpResultAnGangScore* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBcOpResultAnGangScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBcOpResultAnGangScore_descriptor_;
  metadata.reflection = AckBcOpResultAnGangScore_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xianningmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
