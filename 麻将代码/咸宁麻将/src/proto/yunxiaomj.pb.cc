// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yunxiaomj.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yunxiaomj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace yunxiaomj {

namespace {

const ::google::protobuf::Descriptor* JinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleYouJin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleYouJin_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutDoubleJinFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutDoubleJinFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEnSureJoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEnSureJoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndGangHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndGangHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagJiangma_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagJiangma_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDaShai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDaShai_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBanPai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBanPai_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBanPaiEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBanPaiEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangAckOpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangAckOpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGang_Zhuapai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGang_Zhuapai_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBuinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBuinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBuZhang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBuZhang_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCustomiedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCustomiedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagYunXiaomjGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagYunXiaomjGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagMultiHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagMultiHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBuZhangOpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBuZhangOpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalRoundScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalRoundScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserHuYouJin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserHuYouJin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* E_BUZHANG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_GUI_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JiangmaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HunanLocation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_yunxiaomj_2eproto() {
  protobuf_AddDesc_yunxiaomj_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yunxiaomj.proto");
  GOOGLE_CHECK(file != NULL);
  JinInfo_descriptor_ = file->message_type(0);
  static const int JinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinInfo, kaijincard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinInfo, gamestartjinflag_),
  };
  JinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinInfo_descriptor_,
      JinInfo::default_instance_,
      JinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinInfo));
  DoubleYouJin_descriptor_ = file->message_type(1);
  static const int DoubleYouJin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleYouJin, doubleyoujinflag_),
  };
  DoubleYouJin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleYouJin_descriptor_,
      DoubleYouJin::default_instance_,
      DoubleYouJin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleYouJin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleYouJin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleYouJin));
  OutDoubleJinFlag_descriptor_ = file->message_type(2);
  static const int OutDoubleJinFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutDoubleJinFlag, outdoublejinflag_),
  };
  OutDoubleJinFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutDoubleJinFlag_descriptor_,
      OutDoubleJinFlag::default_instance_,
      OutDoubleJinFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutDoubleJinFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutDoubleJinFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutDoubleJinFlag));
  AckEnSureJoker_descriptor_ = file->message_type(3);
  static const int AckEnSureJoker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, opencard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, curjokercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, jokertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, curjokercard2_),
  };
  AckEnSureJoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEnSureJoker_descriptor_,
      AckEnSureJoker::default_instance_,
      AckEnSureJoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEnSureJoker));
  ReqChoosePiao_descriptor_ = file->message_type(4);
  static const int ReqChoosePiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  AckStartPiao_descriptor_ = file->message_type(5);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  AckBroadPiao_descriptor_ = file->message_type(6);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, userpiao_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
  tagGangHu_descriptor_ = file->message_type(7);
  static const int tagGangHu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, score_),
  };
  tagGangHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangHu_descriptor_,
      tagGangHu::default_instance_,
      tagGangHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangHu));
  tagEndGangHu_descriptor_ = file->message_type(8);
  static const int tagEndGangHu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, ganghu_),
  };
  tagEndGangHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndGangHu_descriptor_,
      tagEndGangHu::default_instance_,
      tagEndGangHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndGangHu));
  tagHu_descriptor_ = file->message_type(9);
  static const int tagHu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, pashuchairid_),
  };
  tagHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHu_descriptor_,
      tagHu::default_instance_,
      tagHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHu));
  tagUserHuInfo_descriptor_ = file->message_type(10);
  static const int tagUserHuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hutotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthuinfo_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  ReturnGangInfo_descriptor_ = file->message_type(11);
  static const int ReturnGangInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, returngangscore_),
  };
  ReturnGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnGangInfo_descriptor_,
      ReturnGangInfo::default_instance_,
      ReturnGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnGangInfo));
  tagJiangma_descriptor_ = file->message_type(12);
  static const int tagJiangma_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, zhongchairid_),
  };
  tagJiangma_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagJiangma_descriptor_,
      tagJiangma::default_instance_,
      tagJiangma_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiangma, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagJiangma));
  tagDaShai_descriptor_ = file->message_type(13);
  static const int tagDaShai_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, shai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, zhongchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, zhongpai_),
  };
  tagDaShai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDaShai_descriptor_,
      tagDaShai::default_instance_,
      tagDaShai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDaShai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDaShai));
  tagBanInfo_descriptor_ = file->message_type(14);
  static const int tagBanInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanInfo, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanInfo, addfan_),
  };
  tagBanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBanInfo_descriptor_,
      tagBanInfo::default_instance_,
      tagBanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBanInfo));
  tagBanPai_descriptor_ = file->message_type(15);
  static const int tagBanPai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPai, banpai_),
  };
  tagBanPai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBanPai_descriptor_,
      tagBanPai::default_instance_,
      tagBanPai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBanPai));
  tagBanPaiEnd_descriptor_ = file->message_type(16);
  static const int tagBanPaiEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPaiEnd, chairid_),
  };
  tagBanPaiEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBanPaiEnd_descriptor_,
      tagBanPaiEnd::default_instance_,
      tagBanPaiEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPaiEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBanPaiEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBanPaiEnd));
  tagGangInfo_descriptor_ = file->message_type(17);
  static const int tagGangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, state_),
  };
  tagGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangInfo_descriptor_,
      tagGangInfo::default_instance_,
      tagGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangInfo));
  GangAckOpNotify_descriptor_ = file->message_type(18);
  static const int GangAckOpNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, bu_),
  };
  GangAckOpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangAckOpNotify_descriptor_,
      GangAckOpNotify::default_instance_,
      GangAckOpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAckOpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangAckOpNotify));
  tagHuInfo_descriptor_ = file->message_type(19);
  static const int tagHuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, hufannum_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  tagGang_Zhuapai_descriptor_ = file->message_type(20);
  static const int tagGang_Zhuapai_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, opnotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, leftcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, huinfo_),
  };
  tagGang_Zhuapai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGang_Zhuapai_descriptor_,
      tagGang_Zhuapai::default_instance_,
      tagGang_Zhuapai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGang_Zhuapai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGang_Zhuapai));
  tagBuinfo_descriptor_ = file->message_type(21);
  static const int tagBuinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuinfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuinfo, state_),
  };
  tagBuinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBuinfo_descriptor_,
      tagBuinfo::default_instance_,
      tagBuinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBuinfo));
  tagBuZhang_descriptor_ = file->message_type(22);
  static const int tagBuZhang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhang, bu_),
  };
  tagBuZhang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBuZhang_descriptor_,
      tagBuZhang::default_instance_,
      tagBuZhang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBuZhang));
  AckCustomiedInfo_descriptor_ = file->message_type(23);
  static const int AckCustomiedInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ishavepiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, jiangma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, laizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, piaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, userpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ispiaoyet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, jinzhihuanpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, bu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, roomconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, banpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, zhuapai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, joker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, gangcalcimm_),
  };
  AckCustomiedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCustomiedInfo_descriptor_,
      AckCustomiedInfo::default_instance_,
      AckCustomiedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCustomiedInfo));
  tagYunXiaomjGameEnd_descriptor_ = file->message_type(24);
  static const int tagYunXiaomjGameEnd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, faninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, piaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, niao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, huinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, leftcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, continuousbankernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, remaindercards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, youjintype_),
  };
  tagYunXiaomjGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagYunXiaomjGameEnd_descriptor_,
      tagYunXiaomjGameEnd::default_instance_,
      tagYunXiaomjGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagYunXiaomjGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagYunXiaomjGameEnd));
  tagMultiHuInfo_descriptor_ = file->message_type(25);
  static const int tagMultiHuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMultiHuInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMultiHuInfo, hucard_),
  };
  tagMultiHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagMultiHuInfo_descriptor_,
      tagMultiHuInfo::default_instance_,
      tagMultiHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMultiHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMultiHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagMultiHuInfo));
  AddFanInfo_descriptor_ = file->message_type(26);
  static const int AddFanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addnum_),
  };
  AddFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFanInfo_descriptor_,
      AddFanInfo::default_instance_,
      AddFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFanInfo));
  FanInfo_descriptor_ = file->message_type(27);
  static const int FanInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, addfan_),
  };
  FanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FanInfo_descriptor_,
      FanInfo::default_instance_,
      FanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FanInfo));
  tagBuZhangOpResult_descriptor_ = file->message_type(28);
  static const int tagBuZhangOpResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhangOpResult, buzhangoptype_),
  };
  tagBuZhangOpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBuZhangOpResult_descriptor_,
      tagBuZhangOpResult::default_instance_,
      tagBuZhangOpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhangOpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBuZhangOpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBuZhangOpResult));
  ReordInfo_descriptor_ = file->message_type(29);
  static const int ReordInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, banker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, piaolaizi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, outtime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, wincounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, gangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, diangangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex2_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(30);
  static const int GameEndRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
  RoundScore_descriptor_ = file->message_type(31);
  static const int RoundScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, score_),
  };
  RoundScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundScore_descriptor_,
      RoundScore::default_instance_,
      RoundScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundScore));
  TotalRoundScore_descriptor_ = file->message_type(32);
  static const int TotalRoundScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, roundcount_),
  };
  TotalRoundScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalRoundScore_descriptor_,
      TotalRoundScore::default_instance_,
      TotalRoundScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalRoundScore));
  AckUserHuYouJin_descriptor_ = file->message_type(33);
  static const int AckUserHuYouJin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHuYouJin, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHuYouJin, optype_),
  };
  AckUserHuYouJin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserHuYouJin_descriptor_,
      AckUserHuYouJin::default_instance_,
      AckUserHuYouJin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHuYouJin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHuYouJin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserHuYouJin));
  E_BUZHANG_descriptor_ = file->enum_type(0);
  E_GUI_descriptor_ = file->enum_type(1);
  HUGANG_descriptor_ = file->enum_type(2);
  JiangmaType_descriptor_ = file->enum_type(3);
  HunanLocation_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yunxiaomj_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinInfo_descriptor_, &JinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleYouJin_descriptor_, &DoubleYouJin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutDoubleJinFlag_descriptor_, &OutDoubleJinFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEnSureJoker_descriptor_, &AckEnSureJoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangHu_descriptor_, &tagGangHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndGangHu_descriptor_, &tagEndGangHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHu_descriptor_, &tagHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnGangInfo_descriptor_, &ReturnGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagJiangma_descriptor_, &tagJiangma::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDaShai_descriptor_, &tagDaShai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBanInfo_descriptor_, &tagBanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBanPai_descriptor_, &tagBanPai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBanPaiEnd_descriptor_, &tagBanPaiEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangInfo_descriptor_, &tagGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangAckOpNotify_descriptor_, &GangAckOpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGang_Zhuapai_descriptor_, &tagGang_Zhuapai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBuinfo_descriptor_, &tagBuinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBuZhang_descriptor_, &tagBuZhang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCustomiedInfo_descriptor_, &AckCustomiedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagYunXiaomjGameEnd_descriptor_, &tagYunXiaomjGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagMultiHuInfo_descriptor_, &tagMultiHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFanInfo_descriptor_, &AddFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FanInfo_descriptor_, &FanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBuZhangOpResult_descriptor_, &tagBuZhangOpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundScore_descriptor_, &RoundScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalRoundScore_descriptor_, &TotalRoundScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserHuYouJin_descriptor_, &AckUserHuYouJin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yunxiaomj_2eproto() {
  delete JinInfo::default_instance_;
  delete JinInfo_reflection_;
  delete DoubleYouJin::default_instance_;
  delete DoubleYouJin_reflection_;
  delete OutDoubleJinFlag::default_instance_;
  delete OutDoubleJinFlag_reflection_;
  delete AckEnSureJoker::default_instance_;
  delete AckEnSureJoker_reflection_;
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
  delete tagGangHu::default_instance_;
  delete tagGangHu_reflection_;
  delete tagEndGangHu::default_instance_;
  delete tagEndGangHu_reflection_;
  delete tagHu::default_instance_;
  delete tagHu_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete ReturnGangInfo::default_instance_;
  delete ReturnGangInfo_reflection_;
  delete tagJiangma::default_instance_;
  delete tagJiangma_reflection_;
  delete tagDaShai::default_instance_;
  delete tagDaShai_reflection_;
  delete tagBanInfo::default_instance_;
  delete tagBanInfo_reflection_;
  delete tagBanPai::default_instance_;
  delete tagBanPai_reflection_;
  delete tagBanPaiEnd::default_instance_;
  delete tagBanPaiEnd_reflection_;
  delete tagGangInfo::default_instance_;
  delete tagGangInfo_reflection_;
  delete GangAckOpNotify::default_instance_;
  delete GangAckOpNotify_reflection_;
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete tagGang_Zhuapai::default_instance_;
  delete tagGang_Zhuapai_reflection_;
  delete tagBuinfo::default_instance_;
  delete tagBuinfo_reflection_;
  delete tagBuZhang::default_instance_;
  delete tagBuZhang_reflection_;
  delete AckCustomiedInfo::default_instance_;
  delete AckCustomiedInfo_reflection_;
  delete tagYunXiaomjGameEnd::default_instance_;
  delete tagYunXiaomjGameEnd_reflection_;
  delete tagMultiHuInfo::default_instance_;
  delete tagMultiHuInfo_reflection_;
  delete AddFanInfo::default_instance_;
  delete AddFanInfo_reflection_;
  delete FanInfo::default_instance_;
  delete FanInfo_reflection_;
  delete tagBuZhangOpResult::default_instance_;
  delete tagBuZhangOpResult_reflection_;
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
  delete RoundScore::default_instance_;
  delete RoundScore_reflection_;
  delete TotalRoundScore::default_instance_;
  delete TotalRoundScore_reflection_;
  delete AckUserHuYouJin::default_instance_;
  delete AckUserHuYouJin_reflection_;
}

void protobuf_AddDesc_yunxiaomj_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017yunxiaomj.proto\022\024proto.game.yunxiaomj\""
    "7\n\007JinInfo\022\022\n\nKaiJinCard\030\001 \001(\005\022\030\n\020GameSt"
    "artJinFlag\030\002 \001(\010\"(\n\014DoubleYouJin\022\030\n\020Doub"
    "leYouJinFlag\030\001 \001(\010\",\n\020OutDoubleJinFlag\022\030"
    "\n\020OutDoubleJinFlag\030\001 \001(\010\"b\n\016AckEnSureJok"
    "er\022\020\n\010OpenCard\030\001 \001(\005\022\024\n\014CurJokerCard\030\002 \001"
    "(\005\022\021\n\tJokerType\030\003 \001(\005\022\025\n\rCurJokerCard2\030\004"
    " \001(\005\" \n\rReqChoosePiao\022\017\n\007PiaoNum\030\001 \001(\005\"\037"
    "\n\014AckStartPiao\022\017\n\007piaoNum\030\001 \003(\005\"1\n\014AckBr"
    "oadPiao\022\017\n\007chariid\030\001 \001(\005\022\020\n\010UserPiao\030\002 \001"
    "(\005\"G\n\ttagGangHu\022\014\n\004Type\030\001 \001(\005\022\017\n\007Chairid"
    "\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\"\?\n\014t"
    "agEndGangHu\022/\n\006GangHu\030\001 \003(\0132\037.proto.game"
    ".yunxiaomj.tagGangHu\"-\n\005tagHu\022\016\n\006Hucard\030"
    "\001 \001(\005\022\024\n\014pasHuchairid\030\002 \001(\005\"T\n\rtagUserHu"
    "Info\022\024\n\014HuTotalscore\030\001 \001(\005\022-\n\010stHuinfo\030\002"
    " \003(\0132\033.proto.game.yunxiaomj.tagHu\"F\n\016Ret"
    "urnGangInfo\022\r\n\005State\030\001 \003(\005\022\014\n\004Card\030\002 \003(\005"
    "\022\027\n\017Returngangscore\030\003 \003(\005\"`\n\ntagJiangma\022"
    "\013\n\003Num\030\001 \002(\005\022\020\n\010CardType\030\002 \002(\005\022\017\n\007Chairi"
    "d\030\003 \002(\005\022\014\n\004Card\030\004 \003(\005\022\024\n\014ZhongChairID\030\005 "
    "\003(\005\"o\n\ttagDaShai\022\014\n\004Shai\030\001 \003(\005\022\017\n\007Chairi"
    "d\030\002 \002(\005\022\014\n\004Type\030\003 \002(\005\022\024\n\014ZhongChairID\030\004 "
    "\003(\005\022\r\n\005Score\030\005 \003(\005\022\020\n\010ZhongPai\030\006 \001(\005\"a\n\n"
    "tagBanInfo\022\017\n\007Chairid\030\001 \002(\005\022\020\n\010ShowCard\030"
    "\002 \003(\005\0220\n\006addfan\030\003 \003(\0132 .proto.game.yunxi"
    "aomj.AddFanInfo\"=\n\ttagBanPai\0220\n\006banpai\030\001"
    " \003(\0132 .proto.game.yunxiaomj.tagBanInfo\"\037"
    "\n\014tagBanPaiEnd\022\017\n\007Chairid\030\001 \002(\005\"*\n\013tagGa"
    "ngInfo\022\014\n\004Card\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\"\237\001\n\017"
    "GangAckOpNotify\022\017\n\007ChairID\030\001 \002(\005\022\016\n\006OpTy"
    "pe\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022/\n\004Gang\030\004 \003(\0132!.p"
    "roto.game.yunxiaomj.tagGangInfo\022,\n\002bu\030\005 "
    "\001(\0132 .proto.game.yunxiaomj.tagBuZhang\"<\n"
    "\ttagHuInfo\022\014\n\004Card\030\001 \002(\005\022\017\n\007LeftNum\030\002 \001("
    "\005\022\020\n\010HuFanNum\030\003 \001(\005\"\257\001\n\017tagGang_Zhuapai\022"
    "\017\n\007Chairid\030\001 \002(\005\022\014\n\004Card\030\002 \003(\005\0227\n\010OpNoti"
    "fy\030\003 \003(\0132%.proto.game.yunxiaomj.GangAckO"
    "pNotify\022\023\n\013LeftCardNum\030\004 \001(\005\022/\n\006HuInfo\030\005"
    " \003(\0132\037.proto.game.yunxiaomj.tagHuInfo\"(\n"
    "\ttagBuinfo\022\014\n\004Card\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\""
    "9\n\ntagBuZhang\022+\n\002bu\030\001 \003(\0132\037.proto.game.y"
    "unxiaomj.tagBuinfo\"\235\003\n\020AckCustomiedInfo\022"
    "\020\n\010gametype\030\001 \002(\005\022\022\n\nisHavePiao\030\002 \002(\005\022\017\n"
    "\007Jiangma\030\003 \002(\005\022\r\n\005Laizi\030\004 \002(\005\022\020\n\010piaoTim"
    "e\030\005 \001(\005\022\020\n\010UserPiao\030\006 \003(\005\022\021\n\tIsPiaoyet\030\007"
    " \001(\005\022\025\n\rJinZhiHuanPai\030\010 \003(\005\022,\n\002bu\030\t \001(\0132"
    " .proto.game.yunxiaomj.tagBuZhang\022\024\n\014Roo"
    "mConfigID\030\n \003(\005\022/\n\006banpai\030\013 \001(\0132\037.proto."
    "game.yunxiaomj.tagBanPai\0226\n\007zhuapai\030\014 \001("
    "\0132%.proto.game.yunxiaomj.tagGang_Zhuapai"
    "\0223\n\005Joker\030\r \001(\0132$.proto.game.yunxiaomj.A"
    "ckEnSureJoker\022\023\n\013GangCalcImm\030\016 \001(\010\"\232\002\n\023t"
    "agYunXiaomjGameEnd\022.\n\007faninfo\030\001 \003(\0132\035.pr"
    "oto.game.yunxiaomj.FanInfo\022\017\n\007piaoNum\030\002 "
    "\003(\005\022.\n\004Niao\030\003 \001(\0132 .proto.game.yunxiaomj"
    ".tagJiangma\0224\n\006huinfo\030\004 \003(\0132$.proto.game"
    ".yunxiaomj.tagMultiHuInfo\022\023\n\013LeftCardNum"
    "\030\005 \001(\005\022\033\n\023ContinuousBankerNum\030\006 \003(\005\022\026\n\016R"
    "emainderCards\030\007 \003(\005\022\022\n\nYouJinType\030\010 \001(\005\""
    "1\n\016tagMultiHuInfo\022\017\n\007Chairid\030\001 \002(\005\022\016\n\006Hu"
    "Card\030\002 \003(\005\"-\n\nAddFanInfo\022\017\n\007AddType\030\001 \001("
    "\005\022\016\n\006AddNum\030\002 \001(\005\"q\n\007FanInfo\022\017\n\007chairID\030"
    "\001 \002(\005\022\023\n\013SpecialType\030\002 \002(\005\022\016\n\006FanNum\030\003 \002"
    "(\005\0220\n\006addfan\030\004 \003(\0132 .proto.game.yunxiaom"
    "j.AddFanInfo\"+\n\022tagBuZhangOpResult\022\025\n\rBu"
    "zhangOpType\030\001 \002(\005\"\306\001\n\tReordInfo\022\022\n\nbanke"
    "r_num\030\001 \001(\005\022\016\n\006hu_num\030\002 \001(\005\022\025\n\rpiaolaizi"
    "_num\030\003 \001(\005\022\023\n\013outtime_num\030\004 \001(\005\022\022\n\ntotal"
    "score\030\005 \001(\005\022\021\n\tWinCounts\030\006 \001(\005\022\021\n\tGangTi"
    "mes\030\007 \001(\005\022\025\n\rDianGangTimes\030\010 \001(\005\022\013\n\003Ex1\030"
    "\t \001(\005\022\013\n\003Ex2\030\n \001(\005\"\215\001\n\rGameEndRecord\0227\n\016"
    "UserRecoreInfo\030\001 \003(\0132\037.proto.game.yunxia"
    "omj.ReordInfo\022\027\n\017MostDianPaoUser\030\002 \003(\005\022\030"
    "\n\020MostWinScoreUser\030\003 \003(\005\022\020\n\010DataTime\030\004 \001"
    "(\005\"\033\n\nRoundScore\022\r\n\005Score\030\001 \003(\005\"V\n\017Total"
    "RoundScore\022/\n\005round\030\001 \003(\0132 .proto.game.y"
    "unxiaomj.RoundScore\022\022\n\nroundcount\030\002 \001(\005\""
    "2\n\017AckUserHuYouJin\022\017\n\007ChairID\030\001 \002(\005\022\016\n\006O"
    "pType\030\002 \001(\005*I\n\tE_BUZHANG\022\023\n\017BUZHANG_ZHIG"
    "ANG\020\002\022\023\n\017BUZHANG_WANGANG\020\004\022\022\n\016BUZHANG_AN"
    "GANG\020\010*\277\001\n\005E_GUI\022\021\n\rLAIZI_NOJOKER\020\000\022\026\n\022L"
    "AIZI_COMMON_JOKER\020\001\022\023\n\017LAIZI_FAN_JOKER\020\002"
    "\022\032\n\026LAIZI_FAN_DOUBLE_JOKER\020\003\022\025\n\021LAIZI_HU"
    "A_JOKER_4\020\004\022\025\n\021LAIZI_HUA_JOKER_8\020\005\022\025\n\021LA"
    "IZI_HUA_JOKER_2\020\006\022\025\n\021LAIZI_HUA_JOKER_6\020\007"
    "*\272\001\n\006HUGANG\022\017\n\013HUGANG_PENG\020\001\022\022\n\016HUGANG_Z"
    "HIGANG\020\002\022\022\n\016HUGANG_WANGANG\020\004\022\021\n\rHUGANG_A"
    "NGANG\020\010\022\r\n\tHUGANG_HU\020\020\022\021\n\rHUGANG_LISTEN\020"
    " \022\023\n\017HUGANG_LEFT_CHI\020@\022\026\n\021HUGANG_CENTER_"
    "CHI\020\200\001\022\025\n\020HUGANG_RIGHT_CHI\020\200\002*T\n\013Jiangma"
    "Type\022\013\n\007JIANGMA\020\001\022\017\n\013MOJIJIANGJI\020\002\022\014\n\010ZH"
    "UANIAO\020\003\022\014\n\010ZHUA_159\020\004\022\013\n\007JINNIAO\020\005*\211\001\n\r"
    "HunanLocation\022\022\n\016HUNAN_CHANGSHA\020\001\022\022\n\016HUN"
    "AN_CHENZHOU\020\002\022\022\n\016HUNAN_SHAOYANG\020\003\022\021\n\rHUN"
    "AN_CHANGDE\020\004\022\023\n\017HUNAN_HONGZHONG\020\005\022\024\n\020HUN"
    "AN_ZHUANZHUAN\020\006", 3855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yunxiaomj.proto", &protobuf_RegisterTypes);
  JinInfo::default_instance_ = new JinInfo();
  DoubleYouJin::default_instance_ = new DoubleYouJin();
  OutDoubleJinFlag::default_instance_ = new OutDoubleJinFlag();
  AckEnSureJoker::default_instance_ = new AckEnSureJoker();
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  AckStartPiao::default_instance_ = new AckStartPiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  tagGangHu::default_instance_ = new tagGangHu();
  tagEndGangHu::default_instance_ = new tagEndGangHu();
  tagHu::default_instance_ = new tagHu();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  ReturnGangInfo::default_instance_ = new ReturnGangInfo();
  tagJiangma::default_instance_ = new tagJiangma();
  tagDaShai::default_instance_ = new tagDaShai();
  tagBanInfo::default_instance_ = new tagBanInfo();
  tagBanPai::default_instance_ = new tagBanPai();
  tagBanPaiEnd::default_instance_ = new tagBanPaiEnd();
  tagGangInfo::default_instance_ = new tagGangInfo();
  GangAckOpNotify::default_instance_ = new GangAckOpNotify();
  tagHuInfo::default_instance_ = new tagHuInfo();
  tagGang_Zhuapai::default_instance_ = new tagGang_Zhuapai();
  tagBuinfo::default_instance_ = new tagBuinfo();
  tagBuZhang::default_instance_ = new tagBuZhang();
  AckCustomiedInfo::default_instance_ = new AckCustomiedInfo();
  tagYunXiaomjGameEnd::default_instance_ = new tagYunXiaomjGameEnd();
  tagMultiHuInfo::default_instance_ = new tagMultiHuInfo();
  AddFanInfo::default_instance_ = new AddFanInfo();
  FanInfo::default_instance_ = new FanInfo();
  tagBuZhangOpResult::default_instance_ = new tagBuZhangOpResult();
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  RoundScore::default_instance_ = new RoundScore();
  TotalRoundScore::default_instance_ = new TotalRoundScore();
  AckUserHuYouJin::default_instance_ = new AckUserHuYouJin();
  JinInfo::default_instance_->InitAsDefaultInstance();
  DoubleYouJin::default_instance_->InitAsDefaultInstance();
  OutDoubleJinFlag::default_instance_->InitAsDefaultInstance();
  AckEnSureJoker::default_instance_->InitAsDefaultInstance();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  tagGangHu::default_instance_->InitAsDefaultInstance();
  tagEndGangHu::default_instance_->InitAsDefaultInstance();
  tagHu::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  ReturnGangInfo::default_instance_->InitAsDefaultInstance();
  tagJiangma::default_instance_->InitAsDefaultInstance();
  tagDaShai::default_instance_->InitAsDefaultInstance();
  tagBanInfo::default_instance_->InitAsDefaultInstance();
  tagBanPai::default_instance_->InitAsDefaultInstance();
  tagBanPaiEnd::default_instance_->InitAsDefaultInstance();
  tagGangInfo::default_instance_->InitAsDefaultInstance();
  GangAckOpNotify::default_instance_->InitAsDefaultInstance();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  tagGang_Zhuapai::default_instance_->InitAsDefaultInstance();
  tagBuinfo::default_instance_->InitAsDefaultInstance();
  tagBuZhang::default_instance_->InitAsDefaultInstance();
  AckCustomiedInfo::default_instance_->InitAsDefaultInstance();
  tagYunXiaomjGameEnd::default_instance_->InitAsDefaultInstance();
  tagMultiHuInfo::default_instance_->InitAsDefaultInstance();
  AddFanInfo::default_instance_->InitAsDefaultInstance();
  FanInfo::default_instance_->InitAsDefaultInstance();
  tagBuZhangOpResult::default_instance_->InitAsDefaultInstance();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  RoundScore::default_instance_->InitAsDefaultInstance();
  TotalRoundScore::default_instance_->InitAsDefaultInstance();
  AckUserHuYouJin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yunxiaomj_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yunxiaomj_2eproto {
  StaticDescriptorInitializer_yunxiaomj_2eproto() {
    protobuf_AddDesc_yunxiaomj_2eproto();
  }
} static_descriptor_initializer_yunxiaomj_2eproto_;
const ::google::protobuf::EnumDescriptor* E_BUZHANG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BUZHANG_descriptor_;
}
bool E_BUZHANG_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* E_GUI_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GUI_descriptor_;
}
bool E_GUI_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HUGANG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HUGANG_descriptor_;
}
bool HUGANG_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JiangmaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JiangmaType_descriptor_;
}
bool JiangmaType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HunanLocation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HunanLocation_descriptor_;
}
bool HunanLocation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int JinInfo::kKaiJinCardFieldNumber;
const int JinInfo::kGameStartJinFlagFieldNumber;
#endif  // !_MSC_VER

JinInfo::JinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinInfo::InitAsDefaultInstance() {
}

JinInfo::JinInfo(const JinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinInfo::SharedCtor() {
  _cached_size_ = 0;
  kaijincard_ = 0;
  gamestartjinflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinInfo::~JinInfo() {
  SharedDtor();
}

void JinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinInfo_descriptor_;
}

const JinInfo& JinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

JinInfo* JinInfo::default_instance_ = NULL;

JinInfo* JinInfo::New() const {
  return new JinInfo;
}

void JinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kaijincard_ = 0;
    gamestartjinflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 KaiJinCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kaijincard_)));
          set_has_kaijincard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GameStartJinFlag;
        break;
      }

      // optional bool GameStartJinFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameStartJinFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gamestartjinflag_)));
          set_has_gamestartjinflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 KaiJinCard = 1;
  if (has_kaijincard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kaijincard(), output);
  }

  // optional bool GameStartJinFlag = 2;
  if (has_gamestartjinflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->gamestartjinflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 KaiJinCard = 1;
  if (has_kaijincard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kaijincard(), target);
  }

  // optional bool GameStartJinFlag = 2;
  if (has_gamestartjinflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->gamestartjinflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 KaiJinCard = 1;
    if (has_kaijincard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kaijincard());
    }

    // optional bool GameStartJinFlag = 2;
    if (has_gamestartjinflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinInfo::MergeFrom(const JinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kaijincard()) {
      set_kaijincard(from.kaijincard());
    }
    if (from.has_gamestartjinflag()) {
      set_gamestartjinflag(from.gamestartjinflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinInfo::CopyFrom(const JinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinInfo::IsInitialized() const {

  return true;
}

void JinInfo::Swap(JinInfo* other) {
  if (other != this) {
    std::swap(kaijincard_, other->kaijincard_);
    std::swap(gamestartjinflag_, other->gamestartjinflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinInfo_descriptor_;
  metadata.reflection = JinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleYouJin::kDoubleYouJinFlagFieldNumber;
#endif  // !_MSC_VER

DoubleYouJin::DoubleYouJin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleYouJin::InitAsDefaultInstance() {
}

DoubleYouJin::DoubleYouJin(const DoubleYouJin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleYouJin::SharedCtor() {
  _cached_size_ = 0;
  doubleyoujinflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleYouJin::~DoubleYouJin() {
  SharedDtor();
}

void DoubleYouJin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleYouJin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleYouJin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleYouJin_descriptor_;
}

const DoubleYouJin& DoubleYouJin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

DoubleYouJin* DoubleYouJin::default_instance_ = NULL;

DoubleYouJin* DoubleYouJin::New() const {
  return new DoubleYouJin;
}

void DoubleYouJin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    doubleyoujinflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleYouJin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool DoubleYouJinFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doubleyoujinflag_)));
          set_has_doubleyoujinflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleYouJin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool DoubleYouJinFlag = 1;
  if (has_doubleyoujinflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->doubleyoujinflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleYouJin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool DoubleYouJinFlag = 1;
  if (has_doubleyoujinflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->doubleyoujinflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleYouJin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool DoubleYouJinFlag = 1;
    if (has_doubleyoujinflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleYouJin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleYouJin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleYouJin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleYouJin::MergeFrom(const DoubleYouJin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doubleyoujinflag()) {
      set_doubleyoujinflag(from.doubleyoujinflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleYouJin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleYouJin::CopyFrom(const DoubleYouJin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleYouJin::IsInitialized() const {

  return true;
}

void DoubleYouJin::Swap(DoubleYouJin* other) {
  if (other != this) {
    std::swap(doubleyoujinflag_, other->doubleyoujinflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleYouJin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleYouJin_descriptor_;
  metadata.reflection = DoubleYouJin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutDoubleJinFlag::kOutDoubleJinFlagFieldNumber;
#endif  // !_MSC_VER

OutDoubleJinFlag::OutDoubleJinFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutDoubleJinFlag::InitAsDefaultInstance() {
}

OutDoubleJinFlag::OutDoubleJinFlag(const OutDoubleJinFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutDoubleJinFlag::SharedCtor() {
  _cached_size_ = 0;
  outdoublejinflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutDoubleJinFlag::~OutDoubleJinFlag() {
  SharedDtor();
}

void OutDoubleJinFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutDoubleJinFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutDoubleJinFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutDoubleJinFlag_descriptor_;
}

const OutDoubleJinFlag& OutDoubleJinFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

OutDoubleJinFlag* OutDoubleJinFlag::default_instance_ = NULL;

OutDoubleJinFlag* OutDoubleJinFlag::New() const {
  return new OutDoubleJinFlag;
}

void OutDoubleJinFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outdoublejinflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutDoubleJinFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool OutDoubleJinFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &outdoublejinflag_)));
          set_has_outdoublejinflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutDoubleJinFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool OutDoubleJinFlag = 1;
  if (has_outdoublejinflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->outdoublejinflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutDoubleJinFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool OutDoubleJinFlag = 1;
  if (has_outdoublejinflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->outdoublejinflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutDoubleJinFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool OutDoubleJinFlag = 1;
    if (has_outdoublejinflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutDoubleJinFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutDoubleJinFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutDoubleJinFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutDoubleJinFlag::MergeFrom(const OutDoubleJinFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outdoublejinflag()) {
      set_outdoublejinflag(from.outdoublejinflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutDoubleJinFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutDoubleJinFlag::CopyFrom(const OutDoubleJinFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutDoubleJinFlag::IsInitialized() const {

  return true;
}

void OutDoubleJinFlag::Swap(OutDoubleJinFlag* other) {
  if (other != this) {
    std::swap(outdoublejinflag_, other->outdoublejinflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutDoubleJinFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutDoubleJinFlag_descriptor_;
  metadata.reflection = OutDoubleJinFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEnSureJoker::kOpenCardFieldNumber;
const int AckEnSureJoker::kCurJokerCardFieldNumber;
const int AckEnSureJoker::kJokerTypeFieldNumber;
const int AckEnSureJoker::kCurJokerCard2FieldNumber;
#endif  // !_MSC_VER

AckEnSureJoker::AckEnSureJoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEnSureJoker::InitAsDefaultInstance() {
}

AckEnSureJoker::AckEnSureJoker(const AckEnSureJoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEnSureJoker::SharedCtor() {
  _cached_size_ = 0;
  opencard_ = 0;
  curjokercard_ = 0;
  jokertype_ = 0;
  curjokercard2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEnSureJoker::~AckEnSureJoker() {
  SharedDtor();
}

void AckEnSureJoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEnSureJoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEnSureJoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEnSureJoker_descriptor_;
}

const AckEnSureJoker& AckEnSureJoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AckEnSureJoker* AckEnSureJoker::default_instance_ = NULL;

AckEnSureJoker* AckEnSureJoker::New() const {
  return new AckEnSureJoker;
}

void AckEnSureJoker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opencard_ = 0;
    curjokercard_ = 0;
    jokertype_ = 0;
    curjokercard2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEnSureJoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OpenCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opencard_)));
          set_has_opencard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurJokerCard;
        break;
      }

      // optional int32 CurJokerCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJokerCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjokercard_)));
          set_has_curjokercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JokerType;
        break;
      }

      // optional int32 JokerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JokerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jokertype_)));
          set_has_jokertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurJokerCard2;
        break;
      }

      // optional int32 CurJokerCard2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJokerCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjokercard2_)));
          set_has_curjokercard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEnSureJoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OpenCard = 1;
  if (has_opencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opencard(), output);
  }

  // optional int32 CurJokerCard = 2;
  if (has_curjokercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curjokercard(), output);
  }

  // optional int32 JokerType = 3;
  if (has_jokertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jokertype(), output);
  }

  // optional int32 CurJokerCard2 = 4;
  if (has_curjokercard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curjokercard2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEnSureJoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OpenCard = 1;
  if (has_opencard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opencard(), target);
  }

  // optional int32 CurJokerCard = 2;
  if (has_curjokercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curjokercard(), target);
  }

  // optional int32 JokerType = 3;
  if (has_jokertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jokertype(), target);
  }

  // optional int32 CurJokerCard2 = 4;
  if (has_curjokercard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curjokercard2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEnSureJoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OpenCard = 1;
    if (has_opencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opencard());
    }

    // optional int32 CurJokerCard = 2;
    if (has_curjokercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjokercard());
    }

    // optional int32 JokerType = 3;
    if (has_jokertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jokertype());
    }

    // optional int32 CurJokerCard2 = 4;
    if (has_curjokercard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjokercard2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEnSureJoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEnSureJoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEnSureJoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEnSureJoker::MergeFrom(const AckEnSureJoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opencard()) {
      set_opencard(from.opencard());
    }
    if (from.has_curjokercard()) {
      set_curjokercard(from.curjokercard());
    }
    if (from.has_jokertype()) {
      set_jokertype(from.jokertype());
    }
    if (from.has_curjokercard2()) {
      set_curjokercard2(from.curjokercard2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEnSureJoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEnSureJoker::CopyFrom(const AckEnSureJoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEnSureJoker::IsInitialized() const {

  return true;
}

void AckEnSureJoker::Swap(AckEnSureJoker* other) {
  if (other != this) {
    std::swap(opencard_, other->opencard_);
    std::swap(curjokercard_, other->curjokercard_);
    std::swap(jokertype_, other->jokertype_);
    std::swap(curjokercard2_, other->curjokercard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEnSureJoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEnSureJoker_descriptor_;
  metadata.reflection = AckEnSureJoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaonum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PiaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PiaoNum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaoNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChariidFieldNumber;
const int AckBroadPiao::kUserPiaoFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  userpiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    userpiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserPiao;
        break;
      }

      // optional int32 UserPiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userpiao_)));
          set_has_userpiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userpiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userpiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 UserPiao = 2;
    if (has_userpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_userpiao()) {
      set_userpiao(from.userpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(userpiao_, other->userpiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangHu::kTypeFieldNumber;
const int tagGangHu::kChairidFieldNumber;
const int tagGangHu::kCardFieldNumber;
const int tagGangHu::kScoreFieldNumber;
#endif  // !_MSC_VER

tagGangHu::tagGangHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangHu::InitAsDefaultInstance() {
}

tagGangHu::tagGangHu(const tagGangHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangHu::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  chairid_ = 0;
  card_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangHu::~tagGangHu() {
  SharedDtor();
}

void tagGangHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangHu_descriptor_;
}

const tagGangHu& tagGangHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagGangHu* tagGangHu::default_instance_ = NULL;

tagGangHu* tagGangHu::New() const {
  return new tagGangHu;
}

void tagGangHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    chairid_ = 0;
    card_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Chairid;
        break;
      }

      // optional int32 Chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangHu::MergeFrom(const tagGangHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangHu::CopyFrom(const tagGangHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangHu::IsInitialized() const {

  return true;
}

void tagGangHu::Swap(tagGangHu* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(chairid_, other->chairid_);
    std::swap(card_, other->card_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangHu_descriptor_;
  metadata.reflection = tagGangHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndGangHu::kGangHuFieldNumber;
#endif  // !_MSC_VER

tagEndGangHu::tagEndGangHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagEndGangHu::InitAsDefaultInstance() {
}

tagEndGangHu::tagEndGangHu(const tagEndGangHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagEndGangHu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndGangHu::~tagEndGangHu() {
  SharedDtor();
}

void tagEndGangHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndGangHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndGangHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndGangHu_descriptor_;
}

const tagEndGangHu& tagEndGangHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagEndGangHu* tagEndGangHu::default_instance_ = NULL;

tagEndGangHu* tagEndGangHu::New() const {
  return new tagEndGangHu;
}

void tagEndGangHu::Clear() {
  ganghu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndGangHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.tagGangHu GangHu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GangHu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganghu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GangHu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagEndGangHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.tagGangHu GangHu = 1;
  for (int i = 0; i < this->ganghu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ganghu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagEndGangHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.tagGangHu GangHu = 1;
  for (int i = 0; i < this->ganghu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ganghu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagEndGangHu::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.yunxiaomj.tagGangHu GangHu = 1;
  total_size += 1 * this->ganghu_size();
  for (int i = 0; i < this->ganghu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganghu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndGangHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndGangHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndGangHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndGangHu::MergeFrom(const tagEndGangHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganghu_.MergeFrom(from.ganghu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndGangHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndGangHu::CopyFrom(const tagEndGangHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndGangHu::IsInitialized() const {

  return true;
}

void tagEndGangHu::Swap(tagEndGangHu* other) {
  if (other != this) {
    ganghu_.Swap(&other->ganghu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndGangHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndGangHu_descriptor_;
  metadata.reflection = tagEndGangHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHu::kHucardFieldNumber;
const int tagHu::kPasHuchairidFieldNumber;
#endif  // !_MSC_VER

tagHu::tagHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHu::InitAsDefaultInstance() {
}

tagHu::tagHu(const tagHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHu::SharedCtor() {
  _cached_size_ = 0;
  hucard_ = 0;
  pashuchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHu::~tagHu() {
  SharedDtor();
}

void tagHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHu_descriptor_;
}

const tagHu& tagHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagHu* tagHu::default_instance_ = NULL;

tagHu* tagHu::New() const {
  return new tagHu;
}

void tagHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hucard_ = 0;
    pashuchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Hucard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pasHuchairid;
        break;
      }

      // optional int32 pasHuchairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pasHuchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchairid_)));
          set_has_pashuchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Hucard = 1;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hucard(), output);
  }

  // optional int32 pasHuchairid = 2;
  if (has_pashuchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Hucard = 1;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hucard(), target);
  }

  // optional int32 pasHuchairid = 2;
  if (has_pashuchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Hucard = 1;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 pasHuchairid = 2;
    if (has_pashuchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHu::MergeFrom(const tagHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_pashuchairid()) {
      set_pashuchairid(from.pashuchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHu::CopyFrom(const tagHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHu::IsInitialized() const {

  return true;
}

void tagHu::Swap(tagHu* other) {
  if (other != this) {
    std::swap(hucard_, other->hucard_);
    std::swap(pashuchairid_, other->pashuchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHu_descriptor_;
  metadata.reflection = tagHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuTotalscoreFieldNumber;
const int tagUserHuInfo::kStHuinfoFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  hutotalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hutotalscore_ = 0;
  }
  sthuinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuTotalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hutotalscore_)));
          set_has_hutotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        break;
      }

      // repeated .proto.game.yunxiaomj.tagHu stHuinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hutotalscore(), output);
  }

  // repeated .proto.game.yunxiaomj.tagHu stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sthuinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hutotalscore(), target);
  }

  // repeated .proto.game.yunxiaomj.tagHu stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sthuinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuTotalscore = 1;
    if (has_hutotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hutotalscore());
    }

  }
  // repeated .proto.game.yunxiaomj.tagHu stHuinfo = 2;
  total_size += 1 * this->sthuinfo_size();
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthuinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sthuinfo_.MergeFrom(from.sthuinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hutotalscore()) {
      set_hutotalscore(from.hutotalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    std::swap(hutotalscore_, other->hutotalscore_);
    sthuinfo_.Swap(&other->sthuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnGangInfo::kStateFieldNumber;
const int ReturnGangInfo::kCardFieldNumber;
const int ReturnGangInfo::kReturngangscoreFieldNumber;
#endif  // !_MSC_VER

ReturnGangInfo::ReturnGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnGangInfo::InitAsDefaultInstance() {
}

ReturnGangInfo::ReturnGangInfo(const ReturnGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnGangInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnGangInfo::~ReturnGangInfo() {
  SharedDtor();
}

void ReturnGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnGangInfo_descriptor_;
}

const ReturnGangInfo& ReturnGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

ReturnGangInfo* ReturnGangInfo::default_instance_ = NULL;

ReturnGangInfo* ReturnGangInfo::New() const {
  return new ReturnGangInfo;
}

void ReturnGangInfo::Clear() {
  state_.Clear();
  card_.Clear();
  returngangscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 State = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_State;
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectTag(24)) goto parse_Returngangscore;
        break;
      }

      // repeated int32 Returngangscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Returngangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_returngangscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_returngangscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Returngangscore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 State = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->state(i), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated int32 Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->returngangscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 State = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->state(i), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated int32 Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->returngangscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnGangInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 State = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 Returngangscore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->returngangscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->returngangscore(i));
    }
    total_size += 1 * this->returngangscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnGangInfo::MergeFrom(const ReturnGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  card_.MergeFrom(from.card_);
  returngangscore_.MergeFrom(from.returngangscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnGangInfo::CopyFrom(const ReturnGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnGangInfo::IsInitialized() const {

  return true;
}

void ReturnGangInfo::Swap(ReturnGangInfo* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    card_.Swap(&other->card_);
    returngangscore_.Swap(&other->returngangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnGangInfo_descriptor_;
  metadata.reflection = ReturnGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagJiangma::kNumFieldNumber;
const int tagJiangma::kCardTypeFieldNumber;
const int tagJiangma::kChairidFieldNumber;
const int tagJiangma::kCardFieldNumber;
const int tagJiangma::kZhongChairIDFieldNumber;
#endif  // !_MSC_VER

tagJiangma::tagJiangma()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagJiangma::InitAsDefaultInstance() {
}

tagJiangma::tagJiangma(const tagJiangma& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagJiangma::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  cardtype_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagJiangma::~tagJiangma() {
  SharedDtor();
}

void tagJiangma::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagJiangma::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagJiangma::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagJiangma_descriptor_;
}

const tagJiangma& tagJiangma::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagJiangma* tagJiangma::default_instance_ = NULL;

tagJiangma* tagJiangma::New() const {
  return new tagJiangma;
}

void tagJiangma::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    cardtype_ = 0;
    chairid_ = 0;
  }
  card_.Clear();
  zhongchairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagJiangma::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardType;
        break;
      }

      // required int32 CardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Chairid;
        break;
      }

      // required int32 Chairid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Card;
        if (input->ExpectTag(40)) goto parse_ZhongChairID;
        break;
      }

      // repeated int32 ZhongChairID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhongChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_zhongchairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhongchairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ZhongChairID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagJiangma::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardtype(), output);
  }

  // required int32 Chairid = 3;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  // repeated int32 Card = 4;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->card(i), output);
  }

  // repeated int32 ZhongChairID = 5;
  for (int i = 0; i < this->zhongchairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->zhongchairid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagJiangma::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required int32 CardType = 2;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardtype(), target);
  }

  // required int32 Chairid = 3;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  // repeated int32 Card = 4;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->card(i), target);
  }

  // repeated int32 ZhongChairID = 5;
  for (int i = 0; i < this->zhongchairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->zhongchairid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagJiangma::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 CardType = 2;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // required int32 Chairid = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 Card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 ZhongChairID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhongchairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhongchairid(i));
    }
    total_size += 1 * this->zhongchairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagJiangma::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagJiangma* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagJiangma*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagJiangma::MergeFrom(const tagJiangma& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  zhongchairid_.MergeFrom(from.zhongchairid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagJiangma::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagJiangma::CopyFrom(const tagJiangma& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagJiangma::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tagJiangma::Swap(tagJiangma* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(chairid_, other->chairid_);
    card_.Swap(&other->card_);
    zhongchairid_.Swap(&other->zhongchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagJiangma::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagJiangma_descriptor_;
  metadata.reflection = tagJiangma_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDaShai::kShaiFieldNumber;
const int tagDaShai::kChairidFieldNumber;
const int tagDaShai::kTypeFieldNumber;
const int tagDaShai::kZhongChairIDFieldNumber;
const int tagDaShai::kScoreFieldNumber;
const int tagDaShai::kZhongPaiFieldNumber;
#endif  // !_MSC_VER

tagDaShai::tagDaShai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDaShai::InitAsDefaultInstance() {
}

tagDaShai::tagDaShai(const tagDaShai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDaShai::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  type_ = 0;
  zhongpai_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDaShai::~tagDaShai() {
  SharedDtor();
}

void tagDaShai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDaShai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDaShai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDaShai_descriptor_;
}

const tagDaShai& tagDaShai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagDaShai* tagDaShai::default_instance_ = NULL;

tagDaShai* tagDaShai::New() const {
  return new tagDaShai;
}

void tagDaShai::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chairid_ = 0;
    type_ = 0;
    zhongpai_ = 0;
  }
  shai_.Clear();
  zhongchairid_.Clear();
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDaShai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Shai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Shai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_shai())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shai())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Shai;
        if (input->ExpectTag(16)) goto parse_Chairid;
        break;
      }

      // required int32 Chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // required int32 Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ZhongChairID;
        break;
      }

      // repeated int32 ZhongChairID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhongChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_zhongchairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhongchairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ZhongChairID;
        if (input->ExpectTag(40)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Score;
        if (input->ExpectTag(48)) goto parse_ZhongPai;
        break;
      }

      // optional int32 ZhongPai = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhongPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhongpai_)));
          set_has_zhongpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDaShai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Shai = 1;
  for (int i = 0; i < this->shai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->shai(i), output);
  }

  // required int32 Chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // required int32 Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated int32 ZhongChairID = 4;
  for (int i = 0; i < this->zhongchairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->zhongchairid(i), output);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->score(i), output);
  }

  // optional int32 ZhongPai = 6;
  if (has_zhongpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zhongpai(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDaShai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Shai = 1;
  for (int i = 0; i < this->shai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->shai(i), target);
  }

  // required int32 Chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // required int32 Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated int32 ZhongChairID = 4;
  for (int i = 0; i < this->zhongchairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->zhongchairid(i), target);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->score(i), target);
  }

  // optional int32 ZhongPai = 6;
  if (has_zhongpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zhongpai(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDaShai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 Chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ZhongPai = 6;
    if (has_zhongpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhongpai());
    }

  }
  // repeated int32 Shai = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shai(i));
    }
    total_size += 1 * this->shai_size() + data_size;
  }

  // repeated int32 ZhongChairID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhongchairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhongchairid(i));
    }
    total_size += 1 * this->zhongchairid_size() + data_size;
  }

  // repeated int32 Score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDaShai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDaShai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDaShai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDaShai::MergeFrom(const tagDaShai& from) {
  GOOGLE_CHECK_NE(&from, this);
  shai_.MergeFrom(from.shai_);
  zhongchairid_.MergeFrom(from.zhongchairid_);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_zhongpai()) {
      set_zhongpai(from.zhongpai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDaShai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDaShai::CopyFrom(const tagDaShai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDaShai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void tagDaShai::Swap(tagDaShai* other) {
  if (other != this) {
    shai_.Swap(&other->shai_);
    std::swap(chairid_, other->chairid_);
    std::swap(type_, other->type_);
    zhongchairid_.Swap(&other->zhongchairid_);
    score_.Swap(&other->score_);
    std::swap(zhongpai_, other->zhongpai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDaShai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDaShai_descriptor_;
  metadata.reflection = tagDaShai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBanInfo::kChairidFieldNumber;
const int tagBanInfo::kShowCardFieldNumber;
const int tagBanInfo::kAddfanFieldNumber;
#endif  // !_MSC_VER

tagBanInfo::tagBanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBanInfo::InitAsDefaultInstance() {
}

tagBanInfo::tagBanInfo(const tagBanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBanInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBanInfo::~tagBanInfo() {
  SharedDtor();
}

void tagBanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBanInfo_descriptor_;
}

const tagBanInfo& tagBanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBanInfo* tagBanInfo::default_instance_ = NULL;

tagBanInfo* tagBanInfo::New() const {
  return new tagBanInfo;
}

void tagBanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  showcard_.Clear();
  addfan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        break;
      }

      // repeated int32 ShowCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_showcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_showcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        if (input->ExpectTag(26)) goto parse_addfan;
        break;
      }

      // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addfan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addfan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addfan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 ShowCard = 2;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->showcard(i), output);
  }

  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 3;
  for (int i = 0; i < this->addfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addfan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 ShowCard = 2;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->showcard(i), target);
  }

  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 3;
  for (int i = 0; i < this->addfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->addfan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 ShowCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->showcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showcard(i));
    }
    total_size += 1 * this->showcard_size() + data_size;
  }

  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 3;
  total_size += 1 * this->addfan_size();
  for (int i = 0; i < this->addfan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addfan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBanInfo::MergeFrom(const tagBanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcard_.MergeFrom(from.showcard_);
  addfan_.MergeFrom(from.addfan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBanInfo::CopyFrom(const tagBanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagBanInfo::Swap(tagBanInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    showcard_.Swap(&other->showcard_);
    addfan_.Swap(&other->addfan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBanInfo_descriptor_;
  metadata.reflection = tagBanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBanPai::kBanpaiFieldNumber;
#endif  // !_MSC_VER

tagBanPai::tagBanPai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBanPai::InitAsDefaultInstance() {
}

tagBanPai::tagBanPai(const tagBanPai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBanPai::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBanPai::~tagBanPai() {
  SharedDtor();
}

void tagBanPai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBanPai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBanPai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBanPai_descriptor_;
}

const tagBanPai& tagBanPai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBanPai* tagBanPai::default_instance_ = NULL;

tagBanPai* tagBanPai::New() const {
  return new tagBanPai;
}

void tagBanPai::Clear() {
  banpai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBanPai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.tagBanInfo banpai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banpai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banpai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_banpai;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBanPai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.tagBanInfo banpai = 1;
  for (int i = 0; i < this->banpai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->banpai(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBanPai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.tagBanInfo banpai = 1;
  for (int i = 0; i < this->banpai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->banpai(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBanPai::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.yunxiaomj.tagBanInfo banpai = 1;
  total_size += 1 * this->banpai_size();
  for (int i = 0; i < this->banpai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banpai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBanPai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBanPai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBanPai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBanPai::MergeFrom(const tagBanPai& from) {
  GOOGLE_CHECK_NE(&from, this);
  banpai_.MergeFrom(from.banpai_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBanPai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBanPai::CopyFrom(const tagBanPai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBanPai::IsInitialized() const {

  for (int i = 0; i < banpai_size(); i++) {
    if (!this->banpai(i).IsInitialized()) return false;
  }
  return true;
}

void tagBanPai::Swap(tagBanPai* other) {
  if (other != this) {
    banpai_.Swap(&other->banpai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBanPai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBanPai_descriptor_;
  metadata.reflection = tagBanPai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBanPaiEnd::kChairidFieldNumber;
#endif  // !_MSC_VER

tagBanPaiEnd::tagBanPaiEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBanPaiEnd::InitAsDefaultInstance() {
}

tagBanPaiEnd::tagBanPaiEnd(const tagBanPaiEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBanPaiEnd::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBanPaiEnd::~tagBanPaiEnd() {
  SharedDtor();
}

void tagBanPaiEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBanPaiEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBanPaiEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBanPaiEnd_descriptor_;
}

const tagBanPaiEnd& tagBanPaiEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBanPaiEnd* tagBanPaiEnd::default_instance_ = NULL;

tagBanPaiEnd* tagBanPaiEnd::New() const {
  return new tagBanPaiEnd;
}

void tagBanPaiEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBanPaiEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBanPaiEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBanPaiEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBanPaiEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBanPaiEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBanPaiEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBanPaiEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBanPaiEnd::MergeFrom(const tagBanPaiEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBanPaiEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBanPaiEnd::CopyFrom(const tagBanPaiEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBanPaiEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagBanPaiEnd::Swap(tagBanPaiEnd* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBanPaiEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBanPaiEnd_descriptor_;
  metadata.reflection = tagBanPaiEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangInfo::kCardFieldNumber;
const int tagGangInfo::kStateFieldNumber;
#endif  // !_MSC_VER

tagGangInfo::tagGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangInfo::InitAsDefaultInstance() {
}

tagGangInfo::tagGangInfo(const tagGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangInfo::~tagGangInfo() {
  SharedDtor();
}

void tagGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangInfo_descriptor_;
}

const tagGangInfo& tagGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagGangInfo* tagGangInfo::default_instance_ = NULL;

tagGangInfo* tagGangInfo::New() const {
  return new tagGangInfo;
}

void tagGangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangInfo::MergeFrom(const tagGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangInfo::CopyFrom(const tagGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagGangInfo::Swap(tagGangInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangInfo_descriptor_;
  metadata.reflection = tagGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangAckOpNotify::kChairIDFieldNumber;
const int GangAckOpNotify::kOpTypeFieldNumber;
const int GangAckOpNotify::kCardFieldNumber;
const int GangAckOpNotify::kGangFieldNumber;
const int GangAckOpNotify::kBuFieldNumber;
#endif  // !_MSC_VER

GangAckOpNotify::GangAckOpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GangAckOpNotify::InitAsDefaultInstance() {
  bu_ = const_cast< ::proto::game::yunxiaomj::tagBuZhang*>(&::proto::game::yunxiaomj::tagBuZhang::default_instance());
}

GangAckOpNotify::GangAckOpNotify(const GangAckOpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GangAckOpNotify::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  optype_ = 0;
  card_ = 0;
  bu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangAckOpNotify::~GangAckOpNotify() {
  SharedDtor();
}

void GangAckOpNotify::SharedDtor() {
  if (this != default_instance_) {
    delete bu_;
  }
}

void GangAckOpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangAckOpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangAckOpNotify_descriptor_;
}

const GangAckOpNotify& GangAckOpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

GangAckOpNotify* GangAckOpNotify::default_instance_ = NULL;

GangAckOpNotify* GangAckOpNotify::New() const {
  return new GangAckOpNotify;
}

void GangAckOpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    optype_ = 0;
    card_ = 0;
    if (has_bu()) {
      if (bu_ != NULL) bu_->::proto::game::yunxiaomj::tagBuZhang::Clear();
    }
  }
  gang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangAckOpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        break;
      }

      // repeated .proto.game.yunxiaomj.tagGangInfo Gang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        if (input->ExpectTag(42)) goto parse_bu;
        break;
      }

      // optional .proto.game.yunxiaomj.tagBuZhang bu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GangAckOpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // repeated .proto.game.yunxiaomj.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gang(i), output);
  }

  // optional .proto.game.yunxiaomj.tagBuZhang bu = 5;
  if (has_bu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GangAckOpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // repeated .proto.game.yunxiaomj.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gang(i), target);
  }

  // optional .proto.game.yunxiaomj.tagBuZhang bu = 5;
  if (has_bu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GangAckOpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional .proto.game.yunxiaomj.tagBuZhang bu = 5;
    if (has_bu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bu());
    }

  }
  // repeated .proto.game.yunxiaomj.tagGangInfo Gang = 4;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangAckOpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangAckOpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangAckOpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangAckOpNotify::MergeFrom(const GangAckOpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_bu()) {
      mutable_bu()->::proto::game::yunxiaomj::tagBuZhang::MergeFrom(from.bu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangAckOpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangAckOpNotify::CopyFrom(const GangAckOpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangAckOpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gang_size(); i++) {
    if (!this->gang(i).IsInitialized()) return false;
  }
  if (has_bu()) {
    if (!this->bu().IsInitialized()) return false;
  }
  return true;
}

void GangAckOpNotify::Swap(GangAckOpNotify* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(optype_, other->optype_);
    std::swap(card_, other->card_);
    gang_.Swap(&other->gang_);
    std::swap(bu_, other->bu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangAckOpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangAckOpNotify_descriptor_;
  metadata.reflection = GangAckOpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kCardFieldNumber;
const int tagHuInfo::kLeftNumFieldNumber;
const int tagHuInfo::kHuFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  leftnum_ = 0;
  hufannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    leftnum_ = 0;
    hufannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftNum;
        break;
      }

      // optional int32 LeftNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnum_)));
          set_has_leftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuFanNum;
        break;
      }

      // optional int32 HuFanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufannum_)));
          set_has_hufannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftnum(), output);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hufannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftnum(), target);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hufannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 LeftNum = 2;
    if (has_leftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnum());
    }

    // optional int32 HuFanNum = 3;
    if (has_hufannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_leftnum()) {
      set_leftnum(from.leftnum());
    }
    if (from.has_hufannum()) {
      set_hufannum(from.hufannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(leftnum_, other->leftnum_);
    std::swap(hufannum_, other->hufannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGang_Zhuapai::kChairidFieldNumber;
const int tagGang_Zhuapai::kCardFieldNumber;
const int tagGang_Zhuapai::kOpNotifyFieldNumber;
const int tagGang_Zhuapai::kLeftCardNumFieldNumber;
const int tagGang_Zhuapai::kHuInfoFieldNumber;
#endif  // !_MSC_VER

tagGang_Zhuapai::tagGang_Zhuapai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGang_Zhuapai::InitAsDefaultInstance() {
}

tagGang_Zhuapai::tagGang_Zhuapai(const tagGang_Zhuapai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGang_Zhuapai::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  leftcardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGang_Zhuapai::~tagGang_Zhuapai() {
  SharedDtor();
}

void tagGang_Zhuapai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGang_Zhuapai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGang_Zhuapai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGang_Zhuapai_descriptor_;
}

const tagGang_Zhuapai& tagGang_Zhuapai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagGang_Zhuapai* tagGang_Zhuapai::default_instance_ = NULL;

tagGang_Zhuapai* tagGang_Zhuapai::New() const {
  return new tagGang_Zhuapai;
}

void tagGang_Zhuapai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    leftcardnum_ = 0;
  }
  card_.Clear();
  opnotify_.Clear();
  huinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGang_Zhuapai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectTag(26)) goto parse_OpNotify;
        break;
      }

      // repeated .proto.game.yunxiaomj.GangAckOpNotify OpNotify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpNotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opnotify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OpNotify;
        if (input->ExpectTag(32)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.yunxiaomj.tagHuInfo HuInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGang_Zhuapai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated .proto.game.yunxiaomj.GangAckOpNotify OpNotify = 3;
  for (int i = 0; i < this->opnotify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opnotify(i), output);
  }

  // optional int32 LeftCardNum = 4;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leftcardnum(), output);
  }

  // repeated .proto.game.yunxiaomj.tagHuInfo HuInfo = 5;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->huinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGang_Zhuapai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated .proto.game.yunxiaomj.GangAckOpNotify OpNotify = 3;
  for (int i = 0; i < this->opnotify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opnotify(i), target);
  }

  // optional int32 LeftCardNum = 4;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leftcardnum(), target);
  }

  // repeated .proto.game.yunxiaomj.tagHuInfo HuInfo = 5;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->huinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGang_Zhuapai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 LeftCardNum = 4;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

  }
  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated .proto.game.yunxiaomj.GangAckOpNotify OpNotify = 3;
  total_size += 1 * this->opnotify_size();
  for (int i = 0; i < this->opnotify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opnotify(i));
  }

  // repeated .proto.game.yunxiaomj.tagHuInfo HuInfo = 5;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGang_Zhuapai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGang_Zhuapai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGang_Zhuapai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGang_Zhuapai::MergeFrom(const tagGang_Zhuapai& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  opnotify_.MergeFrom(from.opnotify_);
  huinfo_.MergeFrom(from.huinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGang_Zhuapai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGang_Zhuapai::CopyFrom(const tagGang_Zhuapai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGang_Zhuapai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < opnotify_size(); i++) {
    if (!this->opnotify(i).IsInitialized()) return false;
  }
  for (int i = 0; i < huinfo_size(); i++) {
    if (!this->huinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagGang_Zhuapai::Swap(tagGang_Zhuapai* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    card_.Swap(&other->card_);
    opnotify_.Swap(&other->opnotify_);
    std::swap(leftcardnum_, other->leftcardnum_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGang_Zhuapai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGang_Zhuapai_descriptor_;
  metadata.reflection = tagGang_Zhuapai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBuinfo::kCardFieldNumber;
const int tagBuinfo::kStateFieldNumber;
#endif  // !_MSC_VER

tagBuinfo::tagBuinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBuinfo::InitAsDefaultInstance() {
}

tagBuinfo::tagBuinfo(const tagBuinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBuinfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBuinfo::~tagBuinfo() {
  SharedDtor();
}

void tagBuinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBuinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBuinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBuinfo_descriptor_;
}

const tagBuinfo& tagBuinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBuinfo* tagBuinfo::default_instance_ = NULL;

tagBuinfo* tagBuinfo::New() const {
  return new tagBuinfo;
}

void tagBuinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBuinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBuinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBuinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBuinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBuinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBuinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBuinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBuinfo::MergeFrom(const tagBuinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBuinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBuinfo::CopyFrom(const tagBuinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBuinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagBuinfo::Swap(tagBuinfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBuinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBuinfo_descriptor_;
  metadata.reflection = tagBuinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBuZhang::kBuFieldNumber;
#endif  // !_MSC_VER

tagBuZhang::tagBuZhang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBuZhang::InitAsDefaultInstance() {
}

tagBuZhang::tagBuZhang(const tagBuZhang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBuZhang::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBuZhang::~tagBuZhang() {
  SharedDtor();
}

void tagBuZhang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBuZhang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBuZhang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBuZhang_descriptor_;
}

const tagBuZhang& tagBuZhang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBuZhang* tagBuZhang::default_instance_ = NULL;

tagBuZhang* tagBuZhang::New() const {
  return new tagBuZhang;
}

void tagBuZhang::Clear() {
  bu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBuZhang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.tagBuinfo bu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBuZhang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.tagBuinfo bu = 1;
  for (int i = 0; i < this->bu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBuZhang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.tagBuinfo bu = 1;
  for (int i = 0; i < this->bu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBuZhang::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.yunxiaomj.tagBuinfo bu = 1;
  total_size += 1 * this->bu_size();
  for (int i = 0; i < this->bu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBuZhang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBuZhang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBuZhang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBuZhang::MergeFrom(const tagBuZhang& from) {
  GOOGLE_CHECK_NE(&from, this);
  bu_.MergeFrom(from.bu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBuZhang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBuZhang::CopyFrom(const tagBuZhang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBuZhang::IsInitialized() const {

  for (int i = 0; i < bu_size(); i++) {
    if (!this->bu(i).IsInitialized()) return false;
  }
  return true;
}

void tagBuZhang::Swap(tagBuZhang* other) {
  if (other != this) {
    bu_.Swap(&other->bu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBuZhang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBuZhang_descriptor_;
  metadata.reflection = tagBuZhang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCustomiedInfo::kGametypeFieldNumber;
const int AckCustomiedInfo::kIsHavePiaoFieldNumber;
const int AckCustomiedInfo::kJiangmaFieldNumber;
const int AckCustomiedInfo::kLaiziFieldNumber;
const int AckCustomiedInfo::kPiaoTimeFieldNumber;
const int AckCustomiedInfo::kUserPiaoFieldNumber;
const int AckCustomiedInfo::kIsPiaoyetFieldNumber;
const int AckCustomiedInfo::kJinZhiHuanPaiFieldNumber;
const int AckCustomiedInfo::kBuFieldNumber;
const int AckCustomiedInfo::kRoomConfigIDFieldNumber;
const int AckCustomiedInfo::kBanpaiFieldNumber;
const int AckCustomiedInfo::kZhuapaiFieldNumber;
const int AckCustomiedInfo::kJokerFieldNumber;
const int AckCustomiedInfo::kGangCalcImmFieldNumber;
#endif  // !_MSC_VER

AckCustomiedInfo::AckCustomiedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCustomiedInfo::InitAsDefaultInstance() {
  bu_ = const_cast< ::proto::game::yunxiaomj::tagBuZhang*>(&::proto::game::yunxiaomj::tagBuZhang::default_instance());
  banpai_ = const_cast< ::proto::game::yunxiaomj::tagBanPai*>(&::proto::game::yunxiaomj::tagBanPai::default_instance());
  zhuapai_ = const_cast< ::proto::game::yunxiaomj::tagGang_Zhuapai*>(&::proto::game::yunxiaomj::tagGang_Zhuapai::default_instance());
  joker_ = const_cast< ::proto::game::yunxiaomj::AckEnSureJoker*>(&::proto::game::yunxiaomj::AckEnSureJoker::default_instance());
}

AckCustomiedInfo::AckCustomiedInfo(const AckCustomiedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCustomiedInfo::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  ishavepiao_ = 0;
  jiangma_ = 0;
  laizi_ = 0;
  piaotime_ = 0;
  ispiaoyet_ = 0;
  bu_ = NULL;
  banpai_ = NULL;
  zhuapai_ = NULL;
  joker_ = NULL;
  gangcalcimm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCustomiedInfo::~AckCustomiedInfo() {
  SharedDtor();
}

void AckCustomiedInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bu_;
    delete banpai_;
    delete zhuapai_;
    delete joker_;
  }
}

void AckCustomiedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCustomiedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCustomiedInfo_descriptor_;
}

const AckCustomiedInfo& AckCustomiedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AckCustomiedInfo* AckCustomiedInfo::default_instance_ = NULL;

AckCustomiedInfo* AckCustomiedInfo::New() const {
  return new AckCustomiedInfo;
}

void AckCustomiedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    ishavepiao_ = 0;
    jiangma_ = 0;
    laizi_ = 0;
    piaotime_ = 0;
    ispiaoyet_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bu()) {
      if (bu_ != NULL) bu_->::proto::game::yunxiaomj::tagBuZhang::Clear();
    }
    if (has_banpai()) {
      if (banpai_ != NULL) banpai_->::proto::game::yunxiaomj::tagBanPai::Clear();
    }
    if (has_zhuapai()) {
      if (zhuapai_ != NULL) zhuapai_->::proto::game::yunxiaomj::tagGang_Zhuapai::Clear();
    }
    if (has_joker()) {
      if (joker_ != NULL) joker_->::proto::game::yunxiaomj::AckEnSureJoker::Clear();
    }
    gangcalcimm_ = false;
  }
  userpiao_.Clear();
  jinzhihuanpai_.Clear();
  roomconfigid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCustomiedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isHavePiao;
        break;
      }

      // required int32 isHavePiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHavePiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishavepiao_)));
          set_has_ishavepiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Jiangma;
        break;
      }

      // required int32 Jiangma = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Jiangma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jiangma_)));
          set_has_jiangma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Laizi;
        break;
      }

      // required int32 Laizi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Laizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizi_)));
          set_has_laizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_piaoTime;
        break;
      }

      // optional int32 piaoTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaotime_)));
          set_has_piaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UserPiao;
        break;
      }

      // repeated int32 UserPiao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_userpiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UserPiao;
        if (input->ExpectTag(56)) goto parse_IsPiaoyet;
        break;
      }

      // optional int32 IsPiaoyet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPiaoyet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispiaoyet_)));
          set_has_ispiaoyet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_JinZhiHuanPai;
        break;
      }

      // repeated int32 JinZhiHuanPai = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JinZhiHuanPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_jinzhihuanpai())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jinzhihuanpai())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_JinZhiHuanPai;
        if (input->ExpectTag(74)) goto parse_bu;
        break;
      }

      // optional .proto.game.yunxiaomj.tagBuZhang bu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomConfigID;
        break;
      }

      // repeated int32 RoomConfigID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_roomconfigid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roomconfigid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomConfigID;
        if (input->ExpectTag(90)) goto parse_banpai;
        break;
      }

      // optional .proto.game.yunxiaomj.tagBanPai banpai = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banpai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banpai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_zhuapai;
        break;
      }

      // optional .proto.game.yunxiaomj.tagGang_Zhuapai zhuapai = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhuapai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhuapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Joker;
        break;
      }

      // optional .proto.game.yunxiaomj.AckEnSureJoker Joker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Joker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_GangCalcImm;
        break;
      }

      // optional bool GangCalcImm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangCalcImm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gangcalcimm_)));
          set_has_gangcalcimm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCustomiedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }

  // required int32 isHavePiao = 2;
  if (has_ishavepiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ishavepiao(), output);
  }

  // required int32 Jiangma = 3;
  if (has_jiangma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jiangma(), output);
  }

  // required int32 Laizi = 4;
  if (has_laizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->laizi(), output);
  }

  // optional int32 piaoTime = 5;
  if (has_piaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->piaotime(), output);
  }

  // repeated int32 UserPiao = 6;
  for (int i = 0; i < this->userpiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->userpiao(i), output);
  }

  // optional int32 IsPiaoyet = 7;
  if (has_ispiaoyet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ispiaoyet(), output);
  }

  // repeated int32 JinZhiHuanPai = 8;
  for (int i = 0; i < this->jinzhihuanpai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->jinzhihuanpai(i), output);
  }

  // optional .proto.game.yunxiaomj.tagBuZhang bu = 9;
  if (has_bu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bu(), output);
  }

  // repeated int32 RoomConfigID = 10;
  for (int i = 0; i < this->roomconfigid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->roomconfigid(i), output);
  }

  // optional .proto.game.yunxiaomj.tagBanPai banpai = 11;
  if (has_banpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->banpai(), output);
  }

  // optional .proto.game.yunxiaomj.tagGang_Zhuapai zhuapai = 12;
  if (has_zhuapai()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->zhuapai(), output);
  }

  // optional .proto.game.yunxiaomj.AckEnSureJoker Joker = 13;
  if (has_joker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->joker(), output);
  }

  // optional bool GangCalcImm = 14;
  if (has_gangcalcimm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->gangcalcimm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCustomiedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }

  // required int32 isHavePiao = 2;
  if (has_ishavepiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ishavepiao(), target);
  }

  // required int32 Jiangma = 3;
  if (has_jiangma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jiangma(), target);
  }

  // required int32 Laizi = 4;
  if (has_laizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->laizi(), target);
  }

  // optional int32 piaoTime = 5;
  if (has_piaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->piaotime(), target);
  }

  // repeated int32 UserPiao = 6;
  for (int i = 0; i < this->userpiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->userpiao(i), target);
  }

  // optional int32 IsPiaoyet = 7;
  if (has_ispiaoyet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ispiaoyet(), target);
  }

  // repeated int32 JinZhiHuanPai = 8;
  for (int i = 0; i < this->jinzhihuanpai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->jinzhihuanpai(i), target);
  }

  // optional .proto.game.yunxiaomj.tagBuZhang bu = 9;
  if (has_bu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bu(), target);
  }

  // repeated int32 RoomConfigID = 10;
  for (int i = 0; i < this->roomconfigid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->roomconfigid(i), target);
  }

  // optional .proto.game.yunxiaomj.tagBanPai banpai = 11;
  if (has_banpai()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->banpai(), target);
  }

  // optional .proto.game.yunxiaomj.tagGang_Zhuapai zhuapai = 12;
  if (has_zhuapai()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->zhuapai(), target);
  }

  // optional .proto.game.yunxiaomj.AckEnSureJoker Joker = 13;
  if (has_joker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->joker(), target);
  }

  // optional bool GangCalcImm = 14;
  if (has_gangcalcimm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->gangcalcimm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCustomiedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // required int32 isHavePiao = 2;
    if (has_ishavepiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishavepiao());
    }

    // required int32 Jiangma = 3;
    if (has_jiangma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jiangma());
    }

    // required int32 Laizi = 4;
    if (has_laizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizi());
    }

    // optional int32 piaoTime = 5;
    if (has_piaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaotime());
    }

    // optional int32 IsPiaoyet = 7;
    if (has_ispiaoyet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispiaoyet());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.game.yunxiaomj.tagBuZhang bu = 9;
    if (has_bu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bu());
    }

    // optional .proto.game.yunxiaomj.tagBanPai banpai = 11;
    if (has_banpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banpai());
    }

    // optional .proto.game.yunxiaomj.tagGang_Zhuapai zhuapai = 12;
    if (has_zhuapai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhuapai());
    }

    // optional .proto.game.yunxiaomj.AckEnSureJoker Joker = 13;
    if (has_joker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joker());
    }

    // optional bool GangCalcImm = 14;
    if (has_gangcalcimm()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 UserPiao = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpiao(i));
    }
    total_size += 1 * this->userpiao_size() + data_size;
  }

  // repeated int32 JinZhiHuanPai = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->jinzhihuanpai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jinzhihuanpai(i));
    }
    total_size += 1 * this->jinzhihuanpai_size() + data_size;
  }

  // repeated int32 RoomConfigID = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->roomconfigid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roomconfigid(i));
    }
    total_size += 1 * this->roomconfigid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCustomiedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCustomiedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCustomiedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCustomiedInfo::MergeFrom(const AckCustomiedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpiao_.MergeFrom(from.userpiao_);
  jinzhihuanpai_.MergeFrom(from.jinzhihuanpai_);
  roomconfigid_.MergeFrom(from.roomconfigid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_ishavepiao()) {
      set_ishavepiao(from.ishavepiao());
    }
    if (from.has_jiangma()) {
      set_jiangma(from.jiangma());
    }
    if (from.has_laizi()) {
      set_laizi(from.laizi());
    }
    if (from.has_piaotime()) {
      set_piaotime(from.piaotime());
    }
    if (from.has_ispiaoyet()) {
      set_ispiaoyet(from.ispiaoyet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bu()) {
      mutable_bu()->::proto::game::yunxiaomj::tagBuZhang::MergeFrom(from.bu());
    }
    if (from.has_banpai()) {
      mutable_banpai()->::proto::game::yunxiaomj::tagBanPai::MergeFrom(from.banpai());
    }
    if (from.has_zhuapai()) {
      mutable_zhuapai()->::proto::game::yunxiaomj::tagGang_Zhuapai::MergeFrom(from.zhuapai());
    }
    if (from.has_joker()) {
      mutable_joker()->::proto::game::yunxiaomj::AckEnSureJoker::MergeFrom(from.joker());
    }
    if (from.has_gangcalcimm()) {
      set_gangcalcimm(from.gangcalcimm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCustomiedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCustomiedInfo::CopyFrom(const AckCustomiedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCustomiedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_bu()) {
    if (!this->bu().IsInitialized()) return false;
  }
  if (has_banpai()) {
    if (!this->banpai().IsInitialized()) return false;
  }
  if (has_zhuapai()) {
    if (!this->zhuapai().IsInitialized()) return false;
  }
  return true;
}

void AckCustomiedInfo::Swap(AckCustomiedInfo* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(ishavepiao_, other->ishavepiao_);
    std::swap(jiangma_, other->jiangma_);
    std::swap(laizi_, other->laizi_);
    std::swap(piaotime_, other->piaotime_);
    userpiao_.Swap(&other->userpiao_);
    std::swap(ispiaoyet_, other->ispiaoyet_);
    jinzhihuanpai_.Swap(&other->jinzhihuanpai_);
    std::swap(bu_, other->bu_);
    roomconfigid_.Swap(&other->roomconfigid_);
    std::swap(banpai_, other->banpai_);
    std::swap(zhuapai_, other->zhuapai_);
    std::swap(joker_, other->joker_);
    std::swap(gangcalcimm_, other->gangcalcimm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCustomiedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCustomiedInfo_descriptor_;
  metadata.reflection = AckCustomiedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagYunXiaomjGameEnd::kFaninfoFieldNumber;
const int tagYunXiaomjGameEnd::kPiaoNumFieldNumber;
const int tagYunXiaomjGameEnd::kNiaoFieldNumber;
const int tagYunXiaomjGameEnd::kHuinfoFieldNumber;
const int tagYunXiaomjGameEnd::kLeftCardNumFieldNumber;
const int tagYunXiaomjGameEnd::kContinuousBankerNumFieldNumber;
const int tagYunXiaomjGameEnd::kRemainderCardsFieldNumber;
const int tagYunXiaomjGameEnd::kYouJinTypeFieldNumber;
#endif  // !_MSC_VER

tagYunXiaomjGameEnd::tagYunXiaomjGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagYunXiaomjGameEnd::InitAsDefaultInstance() {
  niao_ = const_cast< ::proto::game::yunxiaomj::tagJiangma*>(&::proto::game::yunxiaomj::tagJiangma::default_instance());
}

tagYunXiaomjGameEnd::tagYunXiaomjGameEnd(const tagYunXiaomjGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagYunXiaomjGameEnd::SharedCtor() {
  _cached_size_ = 0;
  niao_ = NULL;
  leftcardnum_ = 0;
  youjintype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagYunXiaomjGameEnd::~tagYunXiaomjGameEnd() {
  SharedDtor();
}

void tagYunXiaomjGameEnd::SharedDtor() {
  if (this != default_instance_) {
    delete niao_;
  }
}

void tagYunXiaomjGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagYunXiaomjGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagYunXiaomjGameEnd_descriptor_;
}

const tagYunXiaomjGameEnd& tagYunXiaomjGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagYunXiaomjGameEnd* tagYunXiaomjGameEnd::default_instance_ = NULL;

tagYunXiaomjGameEnd* tagYunXiaomjGameEnd::New() const {
  return new tagYunXiaomjGameEnd;
}

void tagYunXiaomjGameEnd::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_niao()) {
      if (niao_ != NULL) niao_->::proto::game::yunxiaomj::tagJiangma::Clear();
    }
    leftcardnum_ = 0;
    youjintype_ = 0;
  }
  faninfo_.Clear();
  piaonum_.Clear();
  huinfo_.Clear();
  continuousbankernum_.Clear();
  remaindercards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagYunXiaomjGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.FanInfo faninfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_faninfo;
        if (input->ExpectTag(16)) goto parse_piaoNum;
        break;
      }

      // repeated int32 piaoNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piaoNum;
        if (input->ExpectTag(26)) goto parse_Niao;
        break;
      }

      // optional .proto.game.yunxiaomj.tagJiangma Niao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Niao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_niao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_huinfo;
        break;
      }

      // repeated .proto.game.yunxiaomj.tagMultiHuInfo huinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_huinfo;
        if (input->ExpectTag(40)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ContinuousBankerNum;
        break;
      }

      // repeated int32 ContinuousBankerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContinuousBankerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_continuousbankernum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_continuousbankernum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ContinuousBankerNum;
        if (input->ExpectTag(56)) goto parse_RemainderCards;
        break;
      }

      // repeated int32 RemainderCards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainderCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_remaindercards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remaindercards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RemainderCards;
        if (input->ExpectTag(64)) goto parse_YouJinType;
        break;
      }

      // optional int32 YouJinType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YouJinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youjintype_)));
          set_has_youjintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagYunXiaomjGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.FanInfo faninfo = 1;
  for (int i = 0; i < this->faninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faninfo(i), output);
  }

  // repeated int32 piaoNum = 2;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->piaonum(i), output);
  }

  // optional .proto.game.yunxiaomj.tagJiangma Niao = 3;
  if (has_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->niao(), output);
  }

  // repeated .proto.game.yunxiaomj.tagMultiHuInfo huinfo = 4;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->huinfo(i), output);
  }

  // optional int32 LeftCardNum = 5;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leftcardnum(), output);
  }

  // repeated int32 ContinuousBankerNum = 6;
  for (int i = 0; i < this->continuousbankernum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->continuousbankernum(i), output);
  }

  // repeated int32 RemainderCards = 7;
  for (int i = 0; i < this->remaindercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->remaindercards(i), output);
  }

  // optional int32 YouJinType = 8;
  if (has_youjintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->youjintype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagYunXiaomjGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.FanInfo faninfo = 1;
  for (int i = 0; i < this->faninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faninfo(i), target);
  }

  // repeated int32 piaoNum = 2;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->piaonum(i), target);
  }

  // optional .proto.game.yunxiaomj.tagJiangma Niao = 3;
  if (has_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->niao(), target);
  }

  // repeated .proto.game.yunxiaomj.tagMultiHuInfo huinfo = 4;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->huinfo(i), target);
  }

  // optional int32 LeftCardNum = 5;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leftcardnum(), target);
  }

  // repeated int32 ContinuousBankerNum = 6;
  for (int i = 0; i < this->continuousbankernum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->continuousbankernum(i), target);
  }

  // repeated int32 RemainderCards = 7;
  for (int i = 0; i < this->remaindercards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->remaindercards(i), target);
  }

  // optional int32 YouJinType = 8;
  if (has_youjintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->youjintype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagYunXiaomjGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .proto.game.yunxiaomj.tagJiangma Niao = 3;
    if (has_niao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->niao());
    }

    // optional int32 LeftCardNum = 5;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

    // optional int32 YouJinType = 8;
    if (has_youjintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youjintype());
    }

  }
  // repeated .proto.game.yunxiaomj.FanInfo faninfo = 1;
  total_size += 1 * this->faninfo_size();
  for (int i = 0; i < this->faninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faninfo(i));
  }

  // repeated int32 piaoNum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  // repeated .proto.game.yunxiaomj.tagMultiHuInfo huinfo = 4;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  // repeated int32 ContinuousBankerNum = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->continuousbankernum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->continuousbankernum(i));
    }
    total_size += 1 * this->continuousbankernum_size() + data_size;
  }

  // repeated int32 RemainderCards = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->remaindercards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remaindercards(i));
    }
    total_size += 1 * this->remaindercards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagYunXiaomjGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagYunXiaomjGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagYunXiaomjGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagYunXiaomjGameEnd::MergeFrom(const tagYunXiaomjGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  faninfo_.MergeFrom(from.faninfo_);
  piaonum_.MergeFrom(from.piaonum_);
  huinfo_.MergeFrom(from.huinfo_);
  continuousbankernum_.MergeFrom(from.continuousbankernum_);
  remaindercards_.MergeFrom(from.remaindercards_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_niao()) {
      mutable_niao()->::proto::game::yunxiaomj::tagJiangma::MergeFrom(from.niao());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
    if (from.has_youjintype()) {
      set_youjintype(from.youjintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagYunXiaomjGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagYunXiaomjGameEnd::CopyFrom(const tagYunXiaomjGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagYunXiaomjGameEnd::IsInitialized() const {

  for (int i = 0; i < faninfo_size(); i++) {
    if (!this->faninfo(i).IsInitialized()) return false;
  }
  if (has_niao()) {
    if (!this->niao().IsInitialized()) return false;
  }
  for (int i = 0; i < huinfo_size(); i++) {
    if (!this->huinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagYunXiaomjGameEnd::Swap(tagYunXiaomjGameEnd* other) {
  if (other != this) {
    faninfo_.Swap(&other->faninfo_);
    piaonum_.Swap(&other->piaonum_);
    std::swap(niao_, other->niao_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(leftcardnum_, other->leftcardnum_);
    continuousbankernum_.Swap(&other->continuousbankernum_);
    remaindercards_.Swap(&other->remaindercards_);
    std::swap(youjintype_, other->youjintype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagYunXiaomjGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagYunXiaomjGameEnd_descriptor_;
  metadata.reflection = tagYunXiaomjGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagMultiHuInfo::kChairidFieldNumber;
const int tagMultiHuInfo::kHuCardFieldNumber;
#endif  // !_MSC_VER

tagMultiHuInfo::tagMultiHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagMultiHuInfo::InitAsDefaultInstance() {
}

tagMultiHuInfo::tagMultiHuInfo(const tagMultiHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagMultiHuInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagMultiHuInfo::~tagMultiHuInfo() {
  SharedDtor();
}

void tagMultiHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagMultiHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagMultiHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagMultiHuInfo_descriptor_;
}

const tagMultiHuInfo& tagMultiHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagMultiHuInfo* tagMultiHuInfo::default_instance_ = NULL;

tagMultiHuInfo* tagMultiHuInfo::New() const {
  return new tagMultiHuInfo;
}

void tagMultiHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  hucard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagMultiHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuCard;
        break;
      }

      // repeated int32 HuCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hucard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hucard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagMultiHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 HuCard = 2;
  for (int i = 0; i < this->hucard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hucard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagMultiHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 HuCard = 2;
  for (int i = 0; i < this->hucard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hucard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagMultiHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 HuCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hucard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hucard(i));
    }
    total_size += 1 * this->hucard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagMultiHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagMultiHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagMultiHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagMultiHuInfo::MergeFrom(const tagMultiHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hucard_.MergeFrom(from.hucard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagMultiHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagMultiHuInfo::CopyFrom(const tagMultiHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagMultiHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagMultiHuInfo::Swap(tagMultiHuInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    hucard_.Swap(&other->hucard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagMultiHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagMultiHuInfo_descriptor_;
  metadata.reflection = tagMultiHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFanInfo::kAddTypeFieldNumber;
const int AddFanInfo::kAddNumFieldNumber;
#endif  // !_MSC_VER

AddFanInfo::AddFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFanInfo::InitAsDefaultInstance() {
}

AddFanInfo::AddFanInfo(const AddFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFanInfo::SharedCtor() {
  _cached_size_ = 0;
  addtype_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFanInfo::~AddFanInfo() {
  SharedDtor();
}

void AddFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFanInfo_descriptor_;
}

const AddFanInfo& AddFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AddFanInfo* AddFanInfo::default_instance_ = NULL;

AddFanInfo* AddFanInfo::New() const {
  return new AddFanInfo;
}

void AddFanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addtype_ = 0;
    addnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AddType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AddNum;
        break;
      }

      // optional int32 AddNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addtype(), output);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addtype(), target);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AddType = 1;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 AddNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFanInfo::MergeFrom(const AddFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFanInfo::CopyFrom(const AddFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFanInfo::IsInitialized() const {

  return true;
}

void AddFanInfo::Swap(AddFanInfo* other) {
  if (other != this) {
    std::swap(addtype_, other->addtype_);
    std::swap(addnum_, other->addnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFanInfo_descriptor_;
  metadata.reflection = AddFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FanInfo::kChairIDFieldNumber;
const int FanInfo::kSpecialTypeFieldNumber;
const int FanInfo::kFanNumFieldNumber;
const int FanInfo::kAddfanFieldNumber;
#endif  // !_MSC_VER

FanInfo::FanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FanInfo::InitAsDefaultInstance() {
}

FanInfo::FanInfo(const FanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FanInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  specialtype_ = 0;
  fannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FanInfo::~FanInfo() {
  SharedDtor();
}

void FanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FanInfo_descriptor_;
}

const FanInfo& FanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

FanInfo* FanInfo::default_instance_ = NULL;

FanInfo* FanInfo::New() const {
  return new FanInfo;
}

void FanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    specialtype_ = 0;
    fannum_ = 0;
  }
  addfan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SpecialType;
        break;
      }

      // required int32 SpecialType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpecialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialtype_)));
          set_has_specialtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FanNum;
        break;
      }

      // required int32 FanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addfan;
        break;
      }

      // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addfan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addfan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addfan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 SpecialType = 2;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->specialtype(), output);
  }

  // required int32 FanNum = 3;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fannum(), output);
  }

  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 4;
  for (int i = 0; i < this->addfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->addfan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required int32 SpecialType = 2;
  if (has_specialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->specialtype(), target);
  }

  // required int32 FanNum = 3;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fannum(), target);
  }

  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 4;
  for (int i = 0; i < this->addfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->addfan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 SpecialType = 2;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialtype());
    }

    // required int32 FanNum = 3;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

  }
  // repeated .proto.game.yunxiaomj.AddFanInfo addfan = 4;
  total_size += 1 * this->addfan_size();
  for (int i = 0; i < this->addfan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addfan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FanInfo::MergeFrom(const FanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  addfan_.MergeFrom(from.addfan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanInfo::CopyFrom(const FanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FanInfo::Swap(FanInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(fannum_, other->fannum_);
    addfan_.Swap(&other->addfan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FanInfo_descriptor_;
  metadata.reflection = FanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBuZhangOpResult::kBuzhangOpTypeFieldNumber;
#endif  // !_MSC_VER

tagBuZhangOpResult::tagBuZhangOpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBuZhangOpResult::InitAsDefaultInstance() {
}

tagBuZhangOpResult::tagBuZhangOpResult(const tagBuZhangOpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBuZhangOpResult::SharedCtor() {
  _cached_size_ = 0;
  buzhangoptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBuZhangOpResult::~tagBuZhangOpResult() {
  SharedDtor();
}

void tagBuZhangOpResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBuZhangOpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBuZhangOpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBuZhangOpResult_descriptor_;
}

const tagBuZhangOpResult& tagBuZhangOpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

tagBuZhangOpResult* tagBuZhangOpResult::default_instance_ = NULL;

tagBuZhangOpResult* tagBuZhangOpResult::New() const {
  return new tagBuZhangOpResult;
}

void tagBuZhangOpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buzhangoptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBuZhangOpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BuzhangOpType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buzhangoptype_)));
          set_has_buzhangoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBuZhangOpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BuzhangOpType = 1;
  if (has_buzhangoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buzhangoptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBuZhangOpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 BuzhangOpType = 1;
  if (has_buzhangoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buzhangoptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBuZhangOpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BuzhangOpType = 1;
    if (has_buzhangoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buzhangoptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBuZhangOpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBuZhangOpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBuZhangOpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBuZhangOpResult::MergeFrom(const tagBuZhangOpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buzhangoptype()) {
      set_buzhangoptype(from.buzhangoptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBuZhangOpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBuZhangOpResult::CopyFrom(const tagBuZhangOpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBuZhangOpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagBuZhangOpResult::Swap(tagBuZhangOpResult* other) {
  if (other != this) {
    std::swap(buzhangoptype_, other->buzhangoptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBuZhangOpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBuZhangOpResult_descriptor_;
  metadata.reflection = tagBuZhangOpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kBankerNumFieldNumber;
const int ReordInfo::kHuNumFieldNumber;
const int ReordInfo::kPiaolaiziNumFieldNumber;
const int ReordInfo::kOuttimeNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
const int ReordInfo::kWinCountsFieldNumber;
const int ReordInfo::kGangTimesFieldNumber;
const int ReordInfo::kDianGangTimesFieldNumber;
const int ReordInfo::kEx1FieldNumber;
const int ReordInfo::kEx2FieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  banker_num_ = 0;
  hu_num_ = 0;
  piaolaizi_num_ = 0;
  outtime_num_ = 0;
  totalscore_ = 0;
  wincounts_ = 0;
  gangtimes_ = 0;
  diangangtimes_ = 0;
  ex1_ = 0;
  ex2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_num_ = 0;
    hu_num_ = 0;
    piaolaizi_num_ = 0;
    outtime_num_ = 0;
    totalscore_ = 0;
    wincounts_ = 0;
    gangtimes_ = 0;
    diangangtimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ex1_ = 0;
    ex2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_)));
          set_has_banker_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hu_num;
        break;
      }

      // optional int32 hu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_num_)));
          set_has_hu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaolaizi_num;
        break;
      }

      // optional int32 piaolaizi_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaolaizi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaolaizi_num_)));
          set_has_piaolaizi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outtime_num;
        break;
      }

      // optional int32 outtime_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_num_)));
          set_has_outtime_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WinCounts;
        break;
      }

      // optional int32 WinCounts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincounts_)));
          set_has_wincounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GangTimes;
        break;
      }

      // optional int32 GangTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtimes_)));
          set_has_gangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DianGangTimes;
        break;
      }

      // optional int32 DianGangTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DianGangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangtimes_)));
          set_has_diangangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Ex1;
        break;
      }

      // optional int32 Ex1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ex1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex1_)));
          set_has_ex1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Ex2;
        break;
      }

      // optional int32 Ex2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex2_)));
          set_has_ex2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num(), output);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hu_num(), output);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaolaizi_num(), output);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outtime_num(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wincounts(), output);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangtimes(), output);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diangangtimes(), output);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ex1(), output);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ex2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num(), target);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hu_num(), target);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaolaizi_num(), target);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outtime_num(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wincounts(), target);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangtimes(), target);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diangangtimes(), target);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ex1(), target);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ex2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_num = 1;
    if (has_banker_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_num());
    }

    // optional int32 hu_num = 2;
    if (has_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_num());
    }

    // optional int32 piaolaizi_num = 3;
    if (has_piaolaizi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaolaizi_num());
    }

    // optional int32 outtime_num = 4;
    if (has_outtime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime_num());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 WinCounts = 6;
    if (has_wincounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincounts());
    }

    // optional int32 GangTimes = 7;
    if (has_gangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtimes());
    }

    // optional int32 DianGangTimes = 8;
    if (has_diangangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Ex1 = 9;
    if (has_ex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex1());
    }

    // optional int32 Ex2 = 10;
    if (has_ex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_num()) {
      set_banker_num(from.banker_num());
    }
    if (from.has_hu_num()) {
      set_hu_num(from.hu_num());
    }
    if (from.has_piaolaizi_num()) {
      set_piaolaizi_num(from.piaolaizi_num());
    }
    if (from.has_outtime_num()) {
      set_outtime_num(from.outtime_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_wincounts()) {
      set_wincounts(from.wincounts());
    }
    if (from.has_gangtimes()) {
      set_gangtimes(from.gangtimes());
    }
    if (from.has_diangangtimes()) {
      set_diangangtimes(from.diangangtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ex1()) {
      set_ex1(from.ex1());
    }
    if (from.has_ex2()) {
      set_ex2(from.ex2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(banker_num_, other->banker_num_);
    std::swap(hu_num_, other->hu_num_);
    std::swap(piaolaizi_num_, other->piaolaizi_num_);
    std::swap(outtime_num_, other->outtime_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(wincounts_, other->wincounts_);
    std::swap(gangtimes_, other->gangtimes_);
    std::swap(diangangtimes_, other->diangangtimes_);
    std::swap(ex1_, other->ex1_);
    std::swap(ex2_, other->ex2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    datatime_ = 0;
  }
  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

  }
  // repeated .proto.game.yunxiaomj.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundScore::kScoreFieldNumber;
#endif  // !_MSC_VER

RoundScore::RoundScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoundScore::InitAsDefaultInstance() {
}

RoundScore::RoundScore(const RoundScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoundScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundScore::~RoundScore() {
  SharedDtor();
}

void RoundScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundScore_descriptor_;
}

const RoundScore& RoundScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

RoundScore* RoundScore::default_instance_ = NULL;

RoundScore* RoundScore::New() const {
  return new RoundScore;
}

void RoundScore::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoundScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoundScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoundScore::ByteSize() const {
  int total_size = 0;

  // repeated int32 Score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundScore::MergeFrom(const RoundScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundScore::CopyFrom(const RoundScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundScore::IsInitialized() const {

  return true;
}

void RoundScore::Swap(RoundScore* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundScore_descriptor_;
  metadata.reflection = RoundScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalRoundScore::kRoundFieldNumber;
const int TotalRoundScore::kRoundcountFieldNumber;
#endif  // !_MSC_VER

TotalRoundScore::TotalRoundScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TotalRoundScore::InitAsDefaultInstance() {
}

TotalRoundScore::TotalRoundScore(const TotalRoundScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TotalRoundScore::SharedCtor() {
  _cached_size_ = 0;
  roundcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalRoundScore::~TotalRoundScore() {
  SharedDtor();
}

void TotalRoundScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalRoundScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalRoundScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalRoundScore_descriptor_;
}

const TotalRoundScore& TotalRoundScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

TotalRoundScore* TotalRoundScore::default_instance_ = NULL;

TotalRoundScore* TotalRoundScore::New() const {
  return new TotalRoundScore;
}

void TotalRoundScore::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    roundcount_ = 0;
  }
  round_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalRoundScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.yunxiaomj.RoundScore round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_round()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_round;
        if (input->ExpectTag(16)) goto parse_roundcount;
        break;
      }

      // optional int32 roundcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TotalRoundScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.yunxiaomj.RoundScore round = 1;
  for (int i = 0; i < this->round_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->round(i), output);
  }

  // optional int32 roundcount = 2;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TotalRoundScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.yunxiaomj.RoundScore round = 1;
  for (int i = 0; i < this->round_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->round(i), target);
  }

  // optional int32 roundcount = 2;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TotalRoundScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 roundcount = 2;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundcount());
    }

  }
  // repeated .proto.game.yunxiaomj.RoundScore round = 1;
  total_size += 1 * this->round_size();
  for (int i = 0; i < this->round_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->round(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalRoundScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalRoundScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalRoundScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalRoundScore::MergeFrom(const TotalRoundScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  round_.MergeFrom(from.round_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalRoundScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalRoundScore::CopyFrom(const TotalRoundScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalRoundScore::IsInitialized() const {

  return true;
}

void TotalRoundScore::Swap(TotalRoundScore* other) {
  if (other != this) {
    round_.Swap(&other->round_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalRoundScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalRoundScore_descriptor_;
  metadata.reflection = TotalRoundScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserHuYouJin::kChairIDFieldNumber;
const int AckUserHuYouJin::kOpTypeFieldNumber;
#endif  // !_MSC_VER

AckUserHuYouJin::AckUserHuYouJin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserHuYouJin::InitAsDefaultInstance() {
}

AckUserHuYouJin::AckUserHuYouJin(const AckUserHuYouJin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserHuYouJin::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserHuYouJin::~AckUserHuYouJin() {
  SharedDtor();
}

void AckUserHuYouJin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserHuYouJin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserHuYouJin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserHuYouJin_descriptor_;
}

const AckUserHuYouJin& AckUserHuYouJin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yunxiaomj_2eproto();
  return *default_instance_;
}

AckUserHuYouJin* AckUserHuYouJin::default_instance_ = NULL;

AckUserHuYouJin* AckUserHuYouJin::New() const {
  return new AckUserHuYouJin;
}

void AckUserHuYouJin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserHuYouJin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserHuYouJin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserHuYouJin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserHuYouJin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserHuYouJin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserHuYouJin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserHuYouJin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserHuYouJin::MergeFrom(const AckUserHuYouJin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserHuYouJin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserHuYouJin::CopyFrom(const AckUserHuYouJin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserHuYouJin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserHuYouJin::Swap(AckUserHuYouJin* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserHuYouJin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserHuYouJin_descriptor_;
  metadata.reflection = AckUserHuYouJin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace yunxiaomj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
