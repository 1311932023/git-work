// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guizhougameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guizhougameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace guizhou {

namespace {

const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckJiPaiOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckJiPaiOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagJiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagJiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagSimpleJiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagSimpleJiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagAllJiPais_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagAllJiPais_reflection_ = NULL;
const ::google::protobuf::Descriptor* JiEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JiEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGuiZhouEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGuiZhouEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBaoTingSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBaoTingSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagBaoTing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagBaoTing_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagLockCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagLockCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGuiZhouTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGuiZhouTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGuiZhouGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGuiZhouGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGuiZhouOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGuiZhouOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGuiZhouOpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGuiZhouOpResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TianTingState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JiType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_guizhougameproto_2eproto() {
  protobuf_AddDesc_guizhougameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guizhougameproto.proto");
  GOOGLE_CHECK(file != NULL);
  tagHuInfo_descriptor_ = file->message_type(0);
  static const int tagHuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, hufannum_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  tagListenInfo_descriptor_ = file->message_type(1);
  static const int tagListenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, huinfo_),
  };
  tagListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagListenInfo_descriptor_,
      tagListenInfo::default_instance_,
      tagListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagListenInfo));
  AckJiPaiOp_descriptor_ = file->message_type(2);
  static const int AckJiPaiOp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJiPaiOp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJiPaiOp, jistate_),
  };
  AckJiPaiOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckJiPaiOp_descriptor_,
      AckJiPaiOp::default_instance_,
      AckJiPaiOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJiPaiOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJiPaiOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckJiPaiOp));
  tagJiInfo_descriptor_ = file->message_type(3);
  static const int tagJiInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, jistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, score_),
  };
  tagJiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagJiInfo_descriptor_,
      tagJiInfo::default_instance_,
      tagJiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagJiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagJiInfo));
  tagSimpleJiInfo_descriptor_ = file->message_type(4);
  static const int tagSimpleJiInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSimpleJiInfo, card_),
  };
  tagSimpleJiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagSimpleJiInfo_descriptor_,
      tagSimpleJiInfo::default_instance_,
      tagSimpleJiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSimpleJiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSimpleJiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagSimpleJiInfo));
  tagAllJiPais_descriptor_ = file->message_type(5);
  static const int tagAllJiPais_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAllJiPais, jipais_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAllJiPais, isjinji_),
  };
  tagAllJiPais_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagAllJiPais_descriptor_,
      tagAllJiPais::default_instance_,
      tagAllJiPais_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAllJiPais, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAllJiPais, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagAllJiPais));
  JiEndInfo_descriptor_ = file->message_type(6);
  static const int JiEndInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JiEndInfo, jiinfo_),
  };
  JiEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JiEndInfo_descriptor_,
      JiEndInfo::default_instance_,
      JiEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JiEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JiEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JiEndInfo));
  tagGuiZhouEndInfo_descriptor_ = file->message_type(7);
  static const int tagGuiZhouEndInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, jinums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, jiscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, ischeckdajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, hufantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, hufannums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, alljipais_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, chongfengjiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, zerenjiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, isbaoji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, isjiaopai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, fanjipai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, showji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, jiinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, isshowjipai_),
  };
  tagGuiZhouEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGuiZhouEndInfo_descriptor_,
      tagGuiZhouEndInfo::default_instance_,
      tagGuiZhouEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGuiZhouEndInfo));
  AckBaoTingSucc_descriptor_ = file->message_type(8);
  static const int AckBaoTingSucc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBaoTingSucc, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBaoTingSucc, tingstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBaoTingSucc, listeninfo_),
  };
  AckBaoTingSucc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBaoTingSucc_descriptor_,
      AckBaoTingSucc::default_instance_,
      AckBaoTingSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBaoTingSucc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBaoTingSucc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBaoTingSucc));
  tagBaoTing_descriptor_ = file->message_type(9);
  static const int tagBaoTing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBaoTing, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBaoTing, tingstate_),
  };
  tagBaoTing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagBaoTing_descriptor_,
      tagBaoTing::default_instance_,
      tagBaoTing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBaoTing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagBaoTing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagBaoTing));
  tagLockCard_descriptor_ = file->message_type(10);
  static const int tagLockCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLockCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLockCard, locked_),
  };
  tagLockCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagLockCard_descriptor_,
      tagLockCard::default_instance_,
      tagLockCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLockCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLockCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagLockCard));
  tagGuiZhouTableInfo_descriptor_ = file->message_type(11);
  static const int tagGuiZhouTableInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, ismantangji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, isbaoting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, playerji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, lockcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, tingop_),
  };
  tagGuiZhouTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGuiZhouTableInfo_descriptor_,
      tagGuiZhouTableInfo::default_instance_,
      tagGuiZhouTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGuiZhouTableInfo));
  tagGuiZhouGang_descriptor_ = file->message_type(12);
  static const int tagGuiZhouGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouGang, ishanbaodou_),
  };
  tagGuiZhouGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGuiZhouGang_descriptor_,
      tagGuiZhouGang::default_instance_,
      tagGuiZhouGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGuiZhouGang));
  tagGuiZhouOutCard_descriptor_ = file->message_type(13);
  static const int tagGuiZhouOutCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOutCard, ischongfengji_),
  };
  tagGuiZhouOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGuiZhouOutCard_descriptor_,
      tagGuiZhouOutCard::default_instance_,
      tagGuiZhouOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGuiZhouOutCard));
  tagGuiZhouOpResult_descriptor_ = file->message_type(14);
  static const int tagGuiZhouOpResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOpResult, iszerenji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOpResult, zerenjitype_),
  };
  tagGuiZhouOpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGuiZhouOpResult_descriptor_,
      tagGuiZhouOpResult::default_instance_,
      tagGuiZhouOpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGuiZhouOpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGuiZhouOpResult));
  TianTingState_descriptor_ = file->enum_type(0);
  JiType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guizhougameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagListenInfo_descriptor_, &tagListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckJiPaiOp_descriptor_, &AckJiPaiOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagJiInfo_descriptor_, &tagJiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagSimpleJiInfo_descriptor_, &tagSimpleJiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagAllJiPais_descriptor_, &tagAllJiPais::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JiEndInfo_descriptor_, &JiEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGuiZhouEndInfo_descriptor_, &tagGuiZhouEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBaoTingSucc_descriptor_, &AckBaoTingSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagBaoTing_descriptor_, &tagBaoTing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagLockCard_descriptor_, &tagLockCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGuiZhouTableInfo_descriptor_, &tagGuiZhouTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGuiZhouGang_descriptor_, &tagGuiZhouGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGuiZhouOutCard_descriptor_, &tagGuiZhouOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGuiZhouOpResult_descriptor_, &tagGuiZhouOpResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guizhougameproto_2eproto() {
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete tagListenInfo::default_instance_;
  delete tagListenInfo_reflection_;
  delete AckJiPaiOp::default_instance_;
  delete AckJiPaiOp_reflection_;
  delete tagJiInfo::default_instance_;
  delete tagJiInfo_reflection_;
  delete tagSimpleJiInfo::default_instance_;
  delete tagSimpleJiInfo_reflection_;
  delete tagAllJiPais::default_instance_;
  delete tagAllJiPais_reflection_;
  delete JiEndInfo::default_instance_;
  delete JiEndInfo_reflection_;
  delete tagGuiZhouEndInfo::default_instance_;
  delete tagGuiZhouEndInfo_reflection_;
  delete AckBaoTingSucc::default_instance_;
  delete AckBaoTingSucc_reflection_;
  delete tagBaoTing::default_instance_;
  delete tagBaoTing_reflection_;
  delete tagLockCard::default_instance_;
  delete tagLockCard_reflection_;
  delete tagGuiZhouTableInfo::default_instance_;
  delete tagGuiZhouTableInfo_reflection_;
  delete tagGuiZhouGang::default_instance_;
  delete tagGuiZhouGang_reflection_;
  delete tagGuiZhouOutCard::default_instance_;
  delete tagGuiZhouOutCard_reflection_;
  delete tagGuiZhouOpResult::default_instance_;
  delete tagGuiZhouOpResult_reflection_;
}

void protobuf_AddDesc_guizhougameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026guizhougameproto.proto\022\022proto.game.gui"
    "zhou\"<\n\ttagHuInfo\022\014\n\004Card\030\001 \002(\005\022\017\n\007LeftN"
    "um\030\002 \001(\005\022\020\n\010HuFanNum\030\003 \001(\005\"O\n\rtagListenI"
    "nfo\022\017\n\007OutCard\030\001 \002(\005\022-\n\006HuInfo\030\002 \003(\0132\035.p"
    "roto.game.guizhou.tagHuInfo\"J\n\nAckJiPaiO"
    "p\022\017\n\007ChairID\030\001 \002(\005\022+\n\007JiState\030\002 \002(\0162\032.pr"
    "oto.game.guizhou.JiType\"f\n\ttagJiInfo\022\014\n\004"
    "Card\030\001 \002(\005\022\017\n\007ChairID\030\002 \002(\005\022+\n\007JiState\030\003"
    " \001(\0162\032.proto.game.guizhou.JiType\022\r\n\005Scor"
    "e\030\004 \001(\005\"\037\n\017tagSimpleJiInfo\022\014\n\004Card\030\001 \003(\005"
    "\"/\n\014tagAllJiPais\022\016\n\006JiPais\030\001 \003(\005\022\017\n\007IsJi"
    "nJi\030\002 \003(\010\":\n\tJiEndInfo\022-\n\006JiInfo\030\001 \003(\0132\035"
    ".proto.game.guizhou.tagJiInfo\"\200\003\n\021tagGui"
    "ZhouEndInfo\022\016\n\006JiNums\030\001 \003(\005\022\020\n\010JiScores\030"
    "\002 \003(\005\022\025\n\rIsCheckDaJiao\030\003 \001(\010\022\021\n\tHuFanTyp"
    "e\030\004 \003(\005\022\021\n\tHuFanNums\030\005 \003(\005\0223\n\tAllJiPais\030"
    "\006 \003(\0132 .proto.game.guizhou.tagAllJiPais\022"
    "\025\n\rChongFengJiID\030\007 \001(\005\022\021\n\tZeRenJiID\030\010 \001("
    "\005\022\017\n\007IsBaoJi\030\t \001(\010\022\021\n\tIsJiaoPai\030\n \003(\010\022\020\n"
    "\010FanJipai\030\013 \001(\005\0223\n\006ShowJi\030\014 \003(\0132#.proto."
    "game.guizhou.tagSimpleJiInfo\022-\n\006JiInfo\030\r"
    " \003(\0132\035.proto.game.guizhou.JiEndInfo\022\023\n\013I"
    "sShowJiPai\030\016 \001(\005\"\216\001\n\016AckBaoTingSucc\022\017\n\007C"
    "hairID\030\001 \002(\005\0224\n\tTingState\030\002 \001(\0162!.proto."
    "game.guizhou.TianTingState\0225\n\nListenInfo"
    "\030\003 \003(\0132!.proto.game.guizhou.tagListenInf"
    "o\"S\n\ntagBaoTing\022\017\n\007ChairID\030\001 \002(\005\0224\n\tTing"
    "State\030\002 \001(\0162!.proto.game.guizhou.TianTin"
    "gState\".\n\013tagLockCard\022\017\n\007ChairID\030\001 \002(\005\022\016"
    "\n\006Locked\030\002 \002(\010\"\265\001\n\023tagGuiZhouTableInfo\022\023"
    "\n\013IsManTangJi\030\001 \001(\010\022\021\n\tIsBaoTing\030\002 \003(\010\0220"
    "\n\010PlayerJi\030\003 \003(\0132\036.proto.game.guizhou.Ac"
    "kJiPaiOp\022\020\n\010LockCard\030\004 \001(\010\0222\n\006TingOp\030\005 \001"
    "(\0132\".proto.game.guizhou.AckBaoTingSucc\"%"
    "\n\016tagGuiZhouGang\022\023\n\013IsHanBaoDou\030\001 \001(\010\"*\n"
    "\021tagGuiZhouOutCard\022\025\n\rIsChongFengJi\030\001 \001("
    "\010\"<\n\022tagGuiZhouOpResult\022\021\n\tIsZeRenJi\030\001 \001"
    "(\010\022\023\n\013ZeRenJiType\030\002 \001(\005*\220\001\n\rTianTingStat"
    "e\022\t\n\005BAO_0\020\000\022\021\n\rRUAN_BAO_TING\020\001\022\021\n\rYING_"
    "BAO_TING\020\002\022\021\n\rRUAN_BAO_SUCC\020\003\022\021\n\rYING_BA"
    "O_SUCC\020\004\022\023\n\017RUAN_BAO_CANCEL\020\005\022\023\n\017YING_BA"
    "O_CANCEL\020\006*\235\007\n\006JiType\022\010\n\004JI_0\020\000\022\021\n\rCHONG"
    "_FENG_JI\020\001\022\r\n\tZE_REN_JI\020\002\022\027\n\023CHONG_FENG_"
    "WU_GU_JI\020\003\022\023\n\017ZE_REN_WU_GU_JI\020\004\022\025\n\021JIN_C"
    "HONG_FENG_JI\020\005\022\021\n\rJIN_ZE_REN_JI\020\006\022\033\n\027JIN"
    "_CHONG_FENG_WU_GU_JI\020\007\022\027\n\023JIN_ZE_REN_WU_"
    "GU_JI\020\010\022\r\n\tXIN_QI_JI\020\t\022\016\n\nFAN_PAI_JI\020\n\022\017"
    "\n\013JI_DIAN_PAO\020\013\022\014\n\010JI_ZI_MO\020\014\022\022\n\016JI_LIAN"
    "_ZHUANG\020\r\022\017\n\013JI_ZHI_GANG\020\016\022\020\n\014JI_WANG_GA"
    "NG\020\017\022\016\n\nJI_AN_GANG\020\020\022\022\n\016JI_HAN_BAO_DOU\020\021"
    "\022\024\n\020JI_QIANG_GANG_HU\020\022\022\023\n\017JI_GANG_HOU_PA"
    "O\020\023\022\016\n\nJI_SHAO_JI\020\024\022\017\n\013JI_RUAN_BAO\020\025\022\017\n\013"
    "JI_YING_BAO\020\026\022\016\n\nJI_SHA_BAO\020\027\022\r\n\tJT_YAO_"
    "JI\020\030\022\017\n\013JT_WU_GU_JI\020\031\022\021\n\rJT_JIN_YAO_JI\020\032"
    "\022\023\n\017JT_JIN_WU_GU_JI\020\033\022\025\n\021JI_GANG_SHANG_H"
    "UA\020\034\022\021\n\rJT_YAO_BAI_JI\020\035\022\r\n\tJT_BEN_JI\020\036\022\032"
    "\n\026JT_ZE_REN_GANG_BAO_DOU\020\037\022 \n\034JT_ZE_REN_"
    "WU_GU_GANG_BAO_DOU\020 \022\022\n\016JIN_FAN_PAI_JI\020!"
    "\022\022\n\016JIN_YAO_BAI_JI\020\"\022\016\n\nJIN_BEN_JI\020#\022\021\n\r"
    "JIN_XIN_QI_JI\020$\022\022\n\016FAN_BIAN_ZHANG\020%\022\020\n\014F"
    "AN_KA_ZHANG\020&\022\025\n\021FAN_DA_KUAN_ZHANG\020\'\022\020\n\014"
    "FAN_YUAN_QUE\020(\022\026\n\022FAN_WEI_QUE_YI_MEN\020)\022\026"
    "\n\022FAN_HAI_DI_LAO_YUE\020*\022\022\n\016FAN_HAI_DI_PAO"
    "\020+\022\017\n\013FAN_TIAN_HU\020,\022\r\n\tFAN_DI_HU\020-\022\026\n\022FA"
    "N_DAN_DIAO_JIANG\020.", 2578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guizhougameproto.proto", &protobuf_RegisterTypes);
  tagHuInfo::default_instance_ = new tagHuInfo();
  tagListenInfo::default_instance_ = new tagListenInfo();
  AckJiPaiOp::default_instance_ = new AckJiPaiOp();
  tagJiInfo::default_instance_ = new tagJiInfo();
  tagSimpleJiInfo::default_instance_ = new tagSimpleJiInfo();
  tagAllJiPais::default_instance_ = new tagAllJiPais();
  JiEndInfo::default_instance_ = new JiEndInfo();
  tagGuiZhouEndInfo::default_instance_ = new tagGuiZhouEndInfo();
  AckBaoTingSucc::default_instance_ = new AckBaoTingSucc();
  tagBaoTing::default_instance_ = new tagBaoTing();
  tagLockCard::default_instance_ = new tagLockCard();
  tagGuiZhouTableInfo::default_instance_ = new tagGuiZhouTableInfo();
  tagGuiZhouGang::default_instance_ = new tagGuiZhouGang();
  tagGuiZhouOutCard::default_instance_ = new tagGuiZhouOutCard();
  tagGuiZhouOpResult::default_instance_ = new tagGuiZhouOpResult();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  tagListenInfo::default_instance_->InitAsDefaultInstance();
  AckJiPaiOp::default_instance_->InitAsDefaultInstance();
  tagJiInfo::default_instance_->InitAsDefaultInstance();
  tagSimpleJiInfo::default_instance_->InitAsDefaultInstance();
  tagAllJiPais::default_instance_->InitAsDefaultInstance();
  JiEndInfo::default_instance_->InitAsDefaultInstance();
  tagGuiZhouEndInfo::default_instance_->InitAsDefaultInstance();
  AckBaoTingSucc::default_instance_->InitAsDefaultInstance();
  tagBaoTing::default_instance_->InitAsDefaultInstance();
  tagLockCard::default_instance_->InitAsDefaultInstance();
  tagGuiZhouTableInfo::default_instance_->InitAsDefaultInstance();
  tagGuiZhouGang::default_instance_->InitAsDefaultInstance();
  tagGuiZhouOutCard::default_instance_->InitAsDefaultInstance();
  tagGuiZhouOpResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guizhougameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guizhougameproto_2eproto {
  StaticDescriptorInitializer_guizhougameproto_2eproto() {
    protobuf_AddDesc_guizhougameproto_2eproto();
  }
} static_descriptor_initializer_guizhougameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* TianTingState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TianTingState_descriptor_;
}
bool TianTingState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JiType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JiType_descriptor_;
}
bool JiType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kCardFieldNumber;
const int tagHuInfo::kLeftNumFieldNumber;
const int tagHuInfo::kHuFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  leftnum_ = 0;
  hufannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    leftnum_ = 0;
    hufannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftNum;
        break;
      }

      // optional int32 LeftNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnum_)));
          set_has_leftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuFanNum;
        break;
      }

      // optional int32 HuFanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufannum_)));
          set_has_hufannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftnum(), output);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hufannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftnum(), target);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hufannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 LeftNum = 2;
    if (has_leftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnum());
    }

    // optional int32 HuFanNum = 3;
    if (has_hufannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_leftnum()) {
      set_leftnum(from.leftnum());
    }
    if (from.has_hufannum()) {
      set_hufannum(from.hufannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(leftnum_, other->leftnum_);
    std::swap(hufannum_, other->hufannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagListenInfo::kOutCardFieldNumber;
const int tagListenInfo::kHuInfoFieldNumber;
#endif  // !_MSC_VER

tagListenInfo::tagListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagListenInfo::InitAsDefaultInstance() {
}

tagListenInfo::tagListenInfo(const tagListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagListenInfo::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagListenInfo::~tagListenInfo() {
  SharedDtor();
}

void tagListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagListenInfo_descriptor_;
}

const tagListenInfo& tagListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagListenInfo* tagListenInfo::default_instance_ = NULL;

tagListenInfo* tagListenInfo::New() const {
  return new tagListenInfo;
}

void tagListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcard_ = 0;
  }
  huinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.guizhou.tagHuInfo HuInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated .proto.game.guizhou.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated .proto.game.guizhou.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated .proto.game.guizhou.tagHuInfo HuInfo = 2;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagListenInfo::MergeFrom(const tagListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huinfo_.MergeFrom(from.huinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagListenInfo::CopyFrom(const tagListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagListenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < huinfo_size(); i++) {
    if (!this->huinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagListenInfo::Swap(tagListenInfo* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagListenInfo_descriptor_;
  metadata.reflection = tagListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckJiPaiOp::kChairIDFieldNumber;
const int AckJiPaiOp::kJiStateFieldNumber;
#endif  // !_MSC_VER

AckJiPaiOp::AckJiPaiOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckJiPaiOp::InitAsDefaultInstance() {
}

AckJiPaiOp::AckJiPaiOp(const AckJiPaiOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckJiPaiOp::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  jistate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckJiPaiOp::~AckJiPaiOp() {
  SharedDtor();
}

void AckJiPaiOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckJiPaiOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckJiPaiOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckJiPaiOp_descriptor_;
}

const AckJiPaiOp& AckJiPaiOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

AckJiPaiOp* AckJiPaiOp::default_instance_ = NULL;

AckJiPaiOp* AckJiPaiOp::New() const {
  return new AckJiPaiOp;
}

void AckJiPaiOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    jistate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckJiPaiOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JiState;
        break;
      }

      // required .proto.game.guizhou.JiType JiState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JiState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::game::guizhou::JiType_IsValid(value)) {
            set_jistate(static_cast< ::proto::game::guizhou::JiType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckJiPaiOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required .proto.game.guizhou.JiType JiState = 2;
  if (has_jistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->jistate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckJiPaiOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required .proto.game.guizhou.JiType JiState = 2;
  if (has_jistate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->jistate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckJiPaiOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required .proto.game.guizhou.JiType JiState = 2;
    if (has_jistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jistate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckJiPaiOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckJiPaiOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckJiPaiOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckJiPaiOp::MergeFrom(const AckJiPaiOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jistate()) {
      set_jistate(from.jistate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckJiPaiOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckJiPaiOp::CopyFrom(const AckJiPaiOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckJiPaiOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AckJiPaiOp::Swap(AckJiPaiOp* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(jistate_, other->jistate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckJiPaiOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckJiPaiOp_descriptor_;
  metadata.reflection = AckJiPaiOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagJiInfo::kCardFieldNumber;
const int tagJiInfo::kChairIDFieldNumber;
const int tagJiInfo::kJiStateFieldNumber;
const int tagJiInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

tagJiInfo::tagJiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagJiInfo::InitAsDefaultInstance() {
}

tagJiInfo::tagJiInfo(const tagJiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagJiInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  chairid_ = 0;
  jistate_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagJiInfo::~tagJiInfo() {
  SharedDtor();
}

void tagJiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagJiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagJiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagJiInfo_descriptor_;
}

const tagJiInfo& tagJiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagJiInfo* tagJiInfo::default_instance_ = NULL;

tagJiInfo* tagJiInfo::New() const {
  return new tagJiInfo;
}

void tagJiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    chairid_ = 0;
    jistate_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagJiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChairID;
        break;
      }

      // required int32 ChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JiState;
        break;
      }

      // optional .proto.game.guizhou.JiType JiState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JiState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::game::guizhou::JiType_IsValid(value)) {
            set_jistate(static_cast< ::proto::game::guizhou::JiType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // optional int32 Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagJiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // required int32 ChairID = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional .proto.game.guizhou.JiType JiState = 3;
  if (has_jistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->jistate(), output);
  }

  // optional int32 Score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagJiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // required int32 ChairID = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional .proto.game.guizhou.JiType JiState = 3;
  if (has_jistate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->jistate(), target);
  }

  // optional int32 Score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagJiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // required int32 ChairID = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional .proto.game.guizhou.JiType JiState = 3;
    if (has_jistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jistate());
    }

    // optional int32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagJiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagJiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagJiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagJiInfo::MergeFrom(const tagJiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jistate()) {
      set_jistate(from.jistate());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagJiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagJiInfo::CopyFrom(const tagJiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagJiInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tagJiInfo::Swap(tagJiInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(chairid_, other->chairid_);
    std::swap(jistate_, other->jistate_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagJiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagJiInfo_descriptor_;
  metadata.reflection = tagJiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagSimpleJiInfo::kCardFieldNumber;
#endif  // !_MSC_VER

tagSimpleJiInfo::tagSimpleJiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagSimpleJiInfo::InitAsDefaultInstance() {
}

tagSimpleJiInfo::tagSimpleJiInfo(const tagSimpleJiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagSimpleJiInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagSimpleJiInfo::~tagSimpleJiInfo() {
  SharedDtor();
}

void tagSimpleJiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagSimpleJiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagSimpleJiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagSimpleJiInfo_descriptor_;
}

const tagSimpleJiInfo& tagSimpleJiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagSimpleJiInfo* tagSimpleJiInfo::default_instance_ = NULL;

tagSimpleJiInfo* tagSimpleJiInfo::New() const {
  return new tagSimpleJiInfo;
}

void tagSimpleJiInfo::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagSimpleJiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagSimpleJiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagSimpleJiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagSimpleJiInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 Card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSimpleJiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagSimpleJiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagSimpleJiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagSimpleJiInfo::MergeFrom(const tagSimpleJiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagSimpleJiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagSimpleJiInfo::CopyFrom(const tagSimpleJiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSimpleJiInfo::IsInitialized() const {

  return true;
}

void tagSimpleJiInfo::Swap(tagSimpleJiInfo* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagSimpleJiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagSimpleJiInfo_descriptor_;
  metadata.reflection = tagSimpleJiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagAllJiPais::kJiPaisFieldNumber;
const int tagAllJiPais::kIsJinJiFieldNumber;
#endif  // !_MSC_VER

tagAllJiPais::tagAllJiPais()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagAllJiPais::InitAsDefaultInstance() {
}

tagAllJiPais::tagAllJiPais(const tagAllJiPais& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagAllJiPais::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagAllJiPais::~tagAllJiPais() {
  SharedDtor();
}

void tagAllJiPais::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagAllJiPais::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagAllJiPais::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagAllJiPais_descriptor_;
}

const tagAllJiPais& tagAllJiPais::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagAllJiPais* tagAllJiPais::default_instance_ = NULL;

tagAllJiPais* tagAllJiPais::New() const {
  return new tagAllJiPais;
}

void tagAllJiPais::Clear() {
  jipais_.Clear();
  isjinji_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagAllJiPais::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 JiPais = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JiPais:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jipais())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jipais())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_JiPais;
        if (input->ExpectTag(16)) goto parse_IsJinJi;
        break;
      }

      // repeated bool IsJinJi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsJinJi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_isjinji())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isjinji())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsJinJi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagAllJiPais::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 JiPais = 1;
  for (int i = 0; i < this->jipais_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jipais(i), output);
  }

  // repeated bool IsJinJi = 2;
  for (int i = 0; i < this->isjinji_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->isjinji(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagAllJiPais::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 JiPais = 1;
  for (int i = 0; i < this->jipais_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jipais(i), target);
  }

  // repeated bool IsJinJi = 2;
  for (int i = 0; i < this->isjinji_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->isjinji(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagAllJiPais::ByteSize() const {
  int total_size = 0;

  // repeated int32 JiPais = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jipais_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jipais(i));
    }
    total_size += 1 * this->jipais_size() + data_size;
  }

  // repeated bool IsJinJi = 2;
  {
    int data_size = 0;
    data_size = 1 * this->isjinji_size();
    total_size += 1 * this->isjinji_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagAllJiPais::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagAllJiPais* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagAllJiPais*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagAllJiPais::MergeFrom(const tagAllJiPais& from) {
  GOOGLE_CHECK_NE(&from, this);
  jipais_.MergeFrom(from.jipais_);
  isjinji_.MergeFrom(from.isjinji_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagAllJiPais::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagAllJiPais::CopyFrom(const tagAllJiPais& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagAllJiPais::IsInitialized() const {

  return true;
}

void tagAllJiPais::Swap(tagAllJiPais* other) {
  if (other != this) {
    jipais_.Swap(&other->jipais_);
    isjinji_.Swap(&other->isjinji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagAllJiPais::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagAllJiPais_descriptor_;
  metadata.reflection = tagAllJiPais_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JiEndInfo::kJiInfoFieldNumber;
#endif  // !_MSC_VER

JiEndInfo::JiEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JiEndInfo::InitAsDefaultInstance() {
}

JiEndInfo::JiEndInfo(const JiEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JiEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JiEndInfo::~JiEndInfo() {
  SharedDtor();
}

void JiEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JiEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JiEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JiEndInfo_descriptor_;
}

const JiEndInfo& JiEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

JiEndInfo* JiEndInfo::default_instance_ = NULL;

JiEndInfo* JiEndInfo::New() const {
  return new JiEndInfo;
}

void JiEndInfo::Clear() {
  jiinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JiEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.guizhou.tagJiInfo JiInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JiInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jiinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_JiInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JiEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.guizhou.tagJiInfo JiInfo = 1;
  for (int i = 0; i < this->jiinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jiinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JiEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.guizhou.tagJiInfo JiInfo = 1;
  for (int i = 0; i < this->jiinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jiinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JiEndInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.guizhou.tagJiInfo JiInfo = 1;
  total_size += 1 * this->jiinfo_size();
  for (int i = 0; i < this->jiinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jiinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JiEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JiEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JiEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JiEndInfo::MergeFrom(const JiEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  jiinfo_.MergeFrom(from.jiinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JiEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JiEndInfo::CopyFrom(const JiEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JiEndInfo::IsInitialized() const {

  for (int i = 0; i < jiinfo_size(); i++) {
    if (!this->jiinfo(i).IsInitialized()) return false;
  }
  return true;
}

void JiEndInfo::Swap(JiEndInfo* other) {
  if (other != this) {
    jiinfo_.Swap(&other->jiinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JiEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JiEndInfo_descriptor_;
  metadata.reflection = JiEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGuiZhouEndInfo::kJiNumsFieldNumber;
const int tagGuiZhouEndInfo::kJiScoresFieldNumber;
const int tagGuiZhouEndInfo::kIsCheckDaJiaoFieldNumber;
const int tagGuiZhouEndInfo::kHuFanTypeFieldNumber;
const int tagGuiZhouEndInfo::kHuFanNumsFieldNumber;
const int tagGuiZhouEndInfo::kAllJiPaisFieldNumber;
const int tagGuiZhouEndInfo::kChongFengJiIDFieldNumber;
const int tagGuiZhouEndInfo::kZeRenJiIDFieldNumber;
const int tagGuiZhouEndInfo::kIsBaoJiFieldNumber;
const int tagGuiZhouEndInfo::kIsJiaoPaiFieldNumber;
const int tagGuiZhouEndInfo::kFanJipaiFieldNumber;
const int tagGuiZhouEndInfo::kShowJiFieldNumber;
const int tagGuiZhouEndInfo::kJiInfoFieldNumber;
const int tagGuiZhouEndInfo::kIsShowJiPaiFieldNumber;
#endif  // !_MSC_VER

tagGuiZhouEndInfo::tagGuiZhouEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGuiZhouEndInfo::InitAsDefaultInstance() {
}

tagGuiZhouEndInfo::tagGuiZhouEndInfo(const tagGuiZhouEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGuiZhouEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ischeckdajiao_ = false;
  chongfengjiid_ = 0;
  zerenjiid_ = 0;
  isbaoji_ = false;
  fanjipai_ = 0;
  isshowjipai_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGuiZhouEndInfo::~tagGuiZhouEndInfo() {
  SharedDtor();
}

void tagGuiZhouEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGuiZhouEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGuiZhouEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGuiZhouEndInfo_descriptor_;
}

const tagGuiZhouEndInfo& tagGuiZhouEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagGuiZhouEndInfo* tagGuiZhouEndInfo::default_instance_ = NULL;

tagGuiZhouEndInfo* tagGuiZhouEndInfo::New() const {
  return new tagGuiZhouEndInfo;
}

void tagGuiZhouEndInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    ischeckdajiao_ = false;
    chongfengjiid_ = 0;
    zerenjiid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isbaoji_ = false;
    fanjipai_ = 0;
    isshowjipai_ = 0;
  }
  jinums_.Clear();
  jiscores_.Clear();
  hufantype_.Clear();
  hufannums_.Clear();
  alljipais_.Clear();
  isjiaopai_.Clear();
  showji_.Clear();
  jiinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGuiZhouEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 JiNums = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JiNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jinums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jinums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_JiNums;
        if (input->ExpectTag(16)) goto parse_JiScores;
        break;
      }

      // repeated int32 JiScores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JiScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_jiscores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jiscores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JiScores;
        if (input->ExpectTag(24)) goto parse_IsCheckDaJiao;
        break;
      }

      // optional bool IsCheckDaJiao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCheckDaJiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischeckdajiao_)));
          set_has_ischeckdajiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HuFanType;
        break;
      }

      // repeated int32 HuFanType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_hufantype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hufantype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HuFanType;
        if (input->ExpectTag(40)) goto parse_HuFanNums;
        break;
      }

      // repeated int32 HuFanNums = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_hufannums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hufannums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HuFanNums;
        if (input->ExpectTag(50)) goto parse_AllJiPais;
        break;
      }

      // repeated .proto.game.guizhou.tagAllJiPais AllJiPais = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllJiPais:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alljipais()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AllJiPais;
        if (input->ExpectTag(56)) goto parse_ChongFengJiID;
        break;
      }

      // optional int32 ChongFengJiID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChongFengJiID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chongfengjiid_)));
          set_has_chongfengjiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ZeRenJiID;
        break;
      }

      // optional int32 ZeRenJiID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZeRenJiID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zerenjiid_)));
          set_has_zerenjiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsBaoJi;
        break;
      }

      // optional bool IsBaoJi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBaoJi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbaoji_)));
          set_has_isbaoji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsJiaoPai;
        break;
      }

      // repeated bool IsJiaoPai = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsJiaoPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_isjiaopai())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isjiaopai())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsJiaoPai;
        if (input->ExpectTag(88)) goto parse_FanJipai;
        break;
      }

      // optional int32 FanJipai = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanJipai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fanjipai_)));
          set_has_fanjipai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ShowJi;
        break;
      }

      // repeated .proto.game.guizhou.tagSimpleJiInfo ShowJi = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowJi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showji()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ShowJi;
        if (input->ExpectTag(106)) goto parse_JiInfo;
        break;
      }

      // repeated .proto.game.guizhou.JiEndInfo JiInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JiInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jiinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_JiInfo;
        if (input->ExpectTag(112)) goto parse_IsShowJiPai;
        break;
      }

      // optional int32 IsShowJiPai = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsShowJiPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshowjipai_)));
          set_has_isshowjipai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGuiZhouEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 JiNums = 1;
  for (int i = 0; i < this->jinums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jinums(i), output);
  }

  // repeated int32 JiScores = 2;
  for (int i = 0; i < this->jiscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->jiscores(i), output);
  }

  // optional bool IsCheckDaJiao = 3;
  if (has_ischeckdajiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ischeckdajiao(), output);
  }

  // repeated int32 HuFanType = 4;
  for (int i = 0; i < this->hufantype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->hufantype(i), output);
  }

  // repeated int32 HuFanNums = 5;
  for (int i = 0; i < this->hufannums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->hufannums(i), output);
  }

  // repeated .proto.game.guizhou.tagAllJiPais AllJiPais = 6;
  for (int i = 0; i < this->alljipais_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->alljipais(i), output);
  }

  // optional int32 ChongFengJiID = 7;
  if (has_chongfengjiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chongfengjiid(), output);
  }

  // optional int32 ZeRenJiID = 8;
  if (has_zerenjiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zerenjiid(), output);
  }

  // optional bool IsBaoJi = 9;
  if (has_isbaoji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isbaoji(), output);
  }

  // repeated bool IsJiaoPai = 10;
  for (int i = 0; i < this->isjiaopai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->isjiaopai(i), output);
  }

  // optional int32 FanJipai = 11;
  if (has_fanjipai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fanjipai(), output);
  }

  // repeated .proto.game.guizhou.tagSimpleJiInfo ShowJi = 12;
  for (int i = 0; i < this->showji_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->showji(i), output);
  }

  // repeated .proto.game.guizhou.JiEndInfo JiInfo = 13;
  for (int i = 0; i < this->jiinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->jiinfo(i), output);
  }

  // optional int32 IsShowJiPai = 14;
  if (has_isshowjipai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isshowjipai(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGuiZhouEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 JiNums = 1;
  for (int i = 0; i < this->jinums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jinums(i), target);
  }

  // repeated int32 JiScores = 2;
  for (int i = 0; i < this->jiscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->jiscores(i), target);
  }

  // optional bool IsCheckDaJiao = 3;
  if (has_ischeckdajiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ischeckdajiao(), target);
  }

  // repeated int32 HuFanType = 4;
  for (int i = 0; i < this->hufantype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->hufantype(i), target);
  }

  // repeated int32 HuFanNums = 5;
  for (int i = 0; i < this->hufannums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->hufannums(i), target);
  }

  // repeated .proto.game.guizhou.tagAllJiPais AllJiPais = 6;
  for (int i = 0; i < this->alljipais_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->alljipais(i), target);
  }

  // optional int32 ChongFengJiID = 7;
  if (has_chongfengjiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chongfengjiid(), target);
  }

  // optional int32 ZeRenJiID = 8;
  if (has_zerenjiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->zerenjiid(), target);
  }

  // optional bool IsBaoJi = 9;
  if (has_isbaoji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isbaoji(), target);
  }

  // repeated bool IsJiaoPai = 10;
  for (int i = 0; i < this->isjiaopai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->isjiaopai(i), target);
  }

  // optional int32 FanJipai = 11;
  if (has_fanjipai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fanjipai(), target);
  }

  // repeated .proto.game.guizhou.tagSimpleJiInfo ShowJi = 12;
  for (int i = 0; i < this->showji_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->showji(i), target);
  }

  // repeated .proto.game.guizhou.JiEndInfo JiInfo = 13;
  for (int i = 0; i < this->jiinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->jiinfo(i), target);
  }

  // optional int32 IsShowJiPai = 14;
  if (has_isshowjipai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->isshowjipai(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGuiZhouEndInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool IsCheckDaJiao = 3;
    if (has_ischeckdajiao()) {
      total_size += 1 + 1;
    }

    // optional int32 ChongFengJiID = 7;
    if (has_chongfengjiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chongfengjiid());
    }

    // optional int32 ZeRenJiID = 8;
    if (has_zerenjiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zerenjiid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsBaoJi = 9;
    if (has_isbaoji()) {
      total_size += 1 + 1;
    }

    // optional int32 FanJipai = 11;
    if (has_fanjipai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fanjipai());
    }

    // optional int32 IsShowJiPai = 14;
    if (has_isshowjipai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshowjipai());
    }

  }
  // repeated int32 JiNums = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jinums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jinums(i));
    }
    total_size += 1 * this->jinums_size() + data_size;
  }

  // repeated int32 JiScores = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->jiscores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jiscores(i));
    }
    total_size += 1 * this->jiscores_size() + data_size;
  }

  // repeated int32 HuFanType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hufantype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hufantype(i));
    }
    total_size += 1 * this->hufantype_size() + data_size;
  }

  // repeated int32 HuFanNums = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hufannums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hufannums(i));
    }
    total_size += 1 * this->hufannums_size() + data_size;
  }

  // repeated .proto.game.guizhou.tagAllJiPais AllJiPais = 6;
  total_size += 1 * this->alljipais_size();
  for (int i = 0; i < this->alljipais_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alljipais(i));
  }

  // repeated bool IsJiaoPai = 10;
  {
    int data_size = 0;
    data_size = 1 * this->isjiaopai_size();
    total_size += 1 * this->isjiaopai_size() + data_size;
  }

  // repeated .proto.game.guizhou.tagSimpleJiInfo ShowJi = 12;
  total_size += 1 * this->showji_size();
  for (int i = 0; i < this->showji_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showji(i));
  }

  // repeated .proto.game.guizhou.JiEndInfo JiInfo = 13;
  total_size += 1 * this->jiinfo_size();
  for (int i = 0; i < this->jiinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jiinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGuiZhouEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGuiZhouEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGuiZhouEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGuiZhouEndInfo::MergeFrom(const tagGuiZhouEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  jinums_.MergeFrom(from.jinums_);
  jiscores_.MergeFrom(from.jiscores_);
  hufantype_.MergeFrom(from.hufantype_);
  hufannums_.MergeFrom(from.hufannums_);
  alljipais_.MergeFrom(from.alljipais_);
  isjiaopai_.MergeFrom(from.isjiaopai_);
  showji_.MergeFrom(from.showji_);
  jiinfo_.MergeFrom(from.jiinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ischeckdajiao()) {
      set_ischeckdajiao(from.ischeckdajiao());
    }
    if (from.has_chongfengjiid()) {
      set_chongfengjiid(from.chongfengjiid());
    }
    if (from.has_zerenjiid()) {
      set_zerenjiid(from.zerenjiid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isbaoji()) {
      set_isbaoji(from.isbaoji());
    }
    if (from.has_fanjipai()) {
      set_fanjipai(from.fanjipai());
    }
    if (from.has_isshowjipai()) {
      set_isshowjipai(from.isshowjipai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGuiZhouEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGuiZhouEndInfo::CopyFrom(const tagGuiZhouEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGuiZhouEndInfo::IsInitialized() const {

  for (int i = 0; i < jiinfo_size(); i++) {
    if (!this->jiinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagGuiZhouEndInfo::Swap(tagGuiZhouEndInfo* other) {
  if (other != this) {
    jinums_.Swap(&other->jinums_);
    jiscores_.Swap(&other->jiscores_);
    std::swap(ischeckdajiao_, other->ischeckdajiao_);
    hufantype_.Swap(&other->hufantype_);
    hufannums_.Swap(&other->hufannums_);
    alljipais_.Swap(&other->alljipais_);
    std::swap(chongfengjiid_, other->chongfengjiid_);
    std::swap(zerenjiid_, other->zerenjiid_);
    std::swap(isbaoji_, other->isbaoji_);
    isjiaopai_.Swap(&other->isjiaopai_);
    std::swap(fanjipai_, other->fanjipai_);
    showji_.Swap(&other->showji_);
    jiinfo_.Swap(&other->jiinfo_);
    std::swap(isshowjipai_, other->isshowjipai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGuiZhouEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGuiZhouEndInfo_descriptor_;
  metadata.reflection = tagGuiZhouEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBaoTingSucc::kChairIDFieldNumber;
const int AckBaoTingSucc::kTingStateFieldNumber;
const int AckBaoTingSucc::kListenInfoFieldNumber;
#endif  // !_MSC_VER

AckBaoTingSucc::AckBaoTingSucc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBaoTingSucc::InitAsDefaultInstance() {
}

AckBaoTingSucc::AckBaoTingSucc(const AckBaoTingSucc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBaoTingSucc::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  tingstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBaoTingSucc::~AckBaoTingSucc() {
  SharedDtor();
}

void AckBaoTingSucc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBaoTingSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBaoTingSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBaoTingSucc_descriptor_;
}

const AckBaoTingSucc& AckBaoTingSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

AckBaoTingSucc* AckBaoTingSucc::default_instance_ = NULL;

AckBaoTingSucc* AckBaoTingSucc::New() const {
  return new AckBaoTingSucc;
}

void AckBaoTingSucc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    tingstate_ = 0;
  }
  listeninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBaoTingSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TingState;
        break;
      }

      // optional .proto.game.guizhou.TianTingState TingState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TingState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::game::guizhou::TianTingState_IsValid(value)) {
            set_tingstate(static_cast< ::proto::game::guizhou::TianTingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.guizhou.tagListenInfo ListenInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ListenInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBaoTingSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional .proto.game.guizhou.TianTingState TingState = 2;
  if (has_tingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tingstate(), output);
  }

  // repeated .proto.game.guizhou.tagListenInfo ListenInfo = 3;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->listeninfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBaoTingSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional .proto.game.guizhou.TianTingState TingState = 2;
  if (has_tingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tingstate(), target);
  }

  // repeated .proto.game.guizhou.tagListenInfo ListenInfo = 3;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->listeninfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBaoTingSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional .proto.game.guizhou.TianTingState TingState = 2;
    if (has_tingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tingstate());
    }

  }
  // repeated .proto.game.guizhou.tagListenInfo ListenInfo = 3;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBaoTingSucc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBaoTingSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBaoTingSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBaoTingSucc::MergeFrom(const AckBaoTingSucc& from) {
  GOOGLE_CHECK_NE(&from, this);
  listeninfo_.MergeFrom(from.listeninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_tingstate()) {
      set_tingstate(from.tingstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBaoTingSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBaoTingSucc::CopyFrom(const AckBaoTingSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBaoTingSucc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckBaoTingSucc::Swap(AckBaoTingSucc* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(tingstate_, other->tingstate_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBaoTingSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBaoTingSucc_descriptor_;
  metadata.reflection = AckBaoTingSucc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagBaoTing::kChairIDFieldNumber;
const int tagBaoTing::kTingStateFieldNumber;
#endif  // !_MSC_VER

tagBaoTing::tagBaoTing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagBaoTing::InitAsDefaultInstance() {
}

tagBaoTing::tagBaoTing(const tagBaoTing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagBaoTing::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  tingstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagBaoTing::~tagBaoTing() {
  SharedDtor();
}

void tagBaoTing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagBaoTing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagBaoTing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagBaoTing_descriptor_;
}

const tagBaoTing& tagBaoTing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagBaoTing* tagBaoTing::default_instance_ = NULL;

tagBaoTing* tagBaoTing::New() const {
  return new tagBaoTing;
}

void tagBaoTing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    tingstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagBaoTing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TingState;
        break;
      }

      // optional .proto.game.guizhou.TianTingState TingState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TingState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::game::guizhou::TianTingState_IsValid(value)) {
            set_tingstate(static_cast< ::proto::game::guizhou::TianTingState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagBaoTing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional .proto.game.guizhou.TianTingState TingState = 2;
  if (has_tingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tingstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagBaoTing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional .proto.game.guizhou.TianTingState TingState = 2;
  if (has_tingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tingstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagBaoTing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional .proto.game.guizhou.TianTingState TingState = 2;
    if (has_tingstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tingstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagBaoTing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagBaoTing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagBaoTing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagBaoTing::MergeFrom(const tagBaoTing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_tingstate()) {
      set_tingstate(from.tingstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagBaoTing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagBaoTing::CopyFrom(const tagBaoTing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagBaoTing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagBaoTing::Swap(tagBaoTing* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(tingstate_, other->tingstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagBaoTing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagBaoTing_descriptor_;
  metadata.reflection = tagBaoTing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagLockCard::kChairIDFieldNumber;
const int tagLockCard::kLockedFieldNumber;
#endif  // !_MSC_VER

tagLockCard::tagLockCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagLockCard::InitAsDefaultInstance() {
}

tagLockCard::tagLockCard(const tagLockCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagLockCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagLockCard::~tagLockCard() {
  SharedDtor();
}

void tagLockCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagLockCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagLockCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagLockCard_descriptor_;
}

const tagLockCard& tagLockCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagLockCard* tagLockCard::default_instance_ = NULL;

tagLockCard* tagLockCard::New() const {
  return new tagLockCard;
}

void tagLockCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    locked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagLockCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Locked;
        break;
      }

      // required bool Locked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagLockCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required bool Locked = 2;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagLockCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required bool Locked = 2;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagLockCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required bool Locked = 2;
    if (has_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagLockCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagLockCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagLockCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagLockCard::MergeFrom(const tagLockCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagLockCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagLockCard::CopyFrom(const tagLockCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagLockCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tagLockCard::Swap(tagLockCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagLockCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagLockCard_descriptor_;
  metadata.reflection = tagLockCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGuiZhouTableInfo::kIsManTangJiFieldNumber;
const int tagGuiZhouTableInfo::kIsBaoTingFieldNumber;
const int tagGuiZhouTableInfo::kPlayerJiFieldNumber;
const int tagGuiZhouTableInfo::kLockCardFieldNumber;
const int tagGuiZhouTableInfo::kTingOpFieldNumber;
#endif  // !_MSC_VER

tagGuiZhouTableInfo::tagGuiZhouTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGuiZhouTableInfo::InitAsDefaultInstance() {
  tingop_ = const_cast< ::proto::game::guizhou::AckBaoTingSucc*>(&::proto::game::guizhou::AckBaoTingSucc::default_instance());
}

tagGuiZhouTableInfo::tagGuiZhouTableInfo(const tagGuiZhouTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGuiZhouTableInfo::SharedCtor() {
  _cached_size_ = 0;
  ismantangji_ = false;
  lockcard_ = false;
  tingop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGuiZhouTableInfo::~tagGuiZhouTableInfo() {
  SharedDtor();
}

void tagGuiZhouTableInfo::SharedDtor() {
  if (this != default_instance_) {
    delete tingop_;
  }
}

void tagGuiZhouTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGuiZhouTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGuiZhouTableInfo_descriptor_;
}

const tagGuiZhouTableInfo& tagGuiZhouTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagGuiZhouTableInfo* tagGuiZhouTableInfo::default_instance_ = NULL;

tagGuiZhouTableInfo* tagGuiZhouTableInfo::New() const {
  return new tagGuiZhouTableInfo;
}

void tagGuiZhouTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ismantangji_ = false;
    lockcard_ = false;
    if (has_tingop()) {
      if (tingop_ != NULL) tingop_->::proto::game::guizhou::AckBaoTingSucc::Clear();
    }
  }
  isbaoting_.Clear();
  playerji_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGuiZhouTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsManTangJi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismantangji_)));
          set_has_ismantangji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsBaoTing;
        break;
      }

      // repeated bool IsBaoTing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBaoTing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_isbaoting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isbaoting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsBaoTing;
        if (input->ExpectTag(26)) goto parse_PlayerJi;
        break;
      }

      // repeated .proto.game.guizhou.AckJiPaiOp PlayerJi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerJi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerji()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PlayerJi;
        if (input->ExpectTag(32)) goto parse_LockCard;
        break;
      }

      // optional bool LockCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockcard_)));
          set_has_lockcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TingOp;
        break;
      }

      // optional .proto.game.guizhou.AckBaoTingSucc TingOp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TingOp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tingop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGuiZhouTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsManTangJi = 1;
  if (has_ismantangji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ismantangji(), output);
  }

  // repeated bool IsBaoTing = 2;
  for (int i = 0; i < this->isbaoting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->isbaoting(i), output);
  }

  // repeated .proto.game.guizhou.AckJiPaiOp PlayerJi = 3;
  for (int i = 0; i < this->playerji_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerji(i), output);
  }

  // optional bool LockCard = 4;
  if (has_lockcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->lockcard(), output);
  }

  // optional .proto.game.guizhou.AckBaoTingSucc TingOp = 5;
  if (has_tingop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tingop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGuiZhouTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsManTangJi = 1;
  if (has_ismantangji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ismantangji(), target);
  }

  // repeated bool IsBaoTing = 2;
  for (int i = 0; i < this->isbaoting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->isbaoting(i), target);
  }

  // repeated .proto.game.guizhou.AckJiPaiOp PlayerJi = 3;
  for (int i = 0; i < this->playerji_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerji(i), target);
  }

  // optional bool LockCard = 4;
  if (has_lockcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lockcard(), target);
  }

  // optional .proto.game.guizhou.AckBaoTingSucc TingOp = 5;
  if (has_tingop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tingop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGuiZhouTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsManTangJi = 1;
    if (has_ismantangji()) {
      total_size += 1 + 1;
    }

    // optional bool LockCard = 4;
    if (has_lockcard()) {
      total_size += 1 + 1;
    }

    // optional .proto.game.guizhou.AckBaoTingSucc TingOp = 5;
    if (has_tingop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tingop());
    }

  }
  // repeated bool IsBaoTing = 2;
  {
    int data_size = 0;
    data_size = 1 * this->isbaoting_size();
    total_size += 1 * this->isbaoting_size() + data_size;
  }

  // repeated .proto.game.guizhou.AckJiPaiOp PlayerJi = 3;
  total_size += 1 * this->playerji_size();
  for (int i = 0; i < this->playerji_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerji(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGuiZhouTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGuiZhouTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGuiZhouTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGuiZhouTableInfo::MergeFrom(const tagGuiZhouTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  isbaoting_.MergeFrom(from.isbaoting_);
  playerji_.MergeFrom(from.playerji_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismantangji()) {
      set_ismantangji(from.ismantangji());
    }
    if (from.has_lockcard()) {
      set_lockcard(from.lockcard());
    }
    if (from.has_tingop()) {
      mutable_tingop()->::proto::game::guizhou::AckBaoTingSucc::MergeFrom(from.tingop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGuiZhouTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGuiZhouTableInfo::CopyFrom(const tagGuiZhouTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGuiZhouTableInfo::IsInitialized() const {

  for (int i = 0; i < playerji_size(); i++) {
    if (!this->playerji(i).IsInitialized()) return false;
  }
  if (has_tingop()) {
    if (!this->tingop().IsInitialized()) return false;
  }
  return true;
}

void tagGuiZhouTableInfo::Swap(tagGuiZhouTableInfo* other) {
  if (other != this) {
    std::swap(ismantangji_, other->ismantangji_);
    isbaoting_.Swap(&other->isbaoting_);
    playerji_.Swap(&other->playerji_);
    std::swap(lockcard_, other->lockcard_);
    std::swap(tingop_, other->tingop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGuiZhouTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGuiZhouTableInfo_descriptor_;
  metadata.reflection = tagGuiZhouTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGuiZhouGang::kIsHanBaoDouFieldNumber;
#endif  // !_MSC_VER

tagGuiZhouGang::tagGuiZhouGang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGuiZhouGang::InitAsDefaultInstance() {
}

tagGuiZhouGang::tagGuiZhouGang(const tagGuiZhouGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGuiZhouGang::SharedCtor() {
  _cached_size_ = 0;
  ishanbaodou_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGuiZhouGang::~tagGuiZhouGang() {
  SharedDtor();
}

void tagGuiZhouGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGuiZhouGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGuiZhouGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGuiZhouGang_descriptor_;
}

const tagGuiZhouGang& tagGuiZhouGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagGuiZhouGang* tagGuiZhouGang::default_instance_ = NULL;

tagGuiZhouGang* tagGuiZhouGang::New() const {
  return new tagGuiZhouGang;
}

void tagGuiZhouGang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishanbaodou_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGuiZhouGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsHanBaoDou = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishanbaodou_)));
          set_has_ishanbaodou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGuiZhouGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsHanBaoDou = 1;
  if (has_ishanbaodou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ishanbaodou(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGuiZhouGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsHanBaoDou = 1;
  if (has_ishanbaodou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ishanbaodou(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGuiZhouGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsHanBaoDou = 1;
    if (has_ishanbaodou()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGuiZhouGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGuiZhouGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGuiZhouGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGuiZhouGang::MergeFrom(const tagGuiZhouGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishanbaodou()) {
      set_ishanbaodou(from.ishanbaodou());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGuiZhouGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGuiZhouGang::CopyFrom(const tagGuiZhouGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGuiZhouGang::IsInitialized() const {

  return true;
}

void tagGuiZhouGang::Swap(tagGuiZhouGang* other) {
  if (other != this) {
    std::swap(ishanbaodou_, other->ishanbaodou_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGuiZhouGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGuiZhouGang_descriptor_;
  metadata.reflection = tagGuiZhouGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGuiZhouOutCard::kIsChongFengJiFieldNumber;
#endif  // !_MSC_VER

tagGuiZhouOutCard::tagGuiZhouOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGuiZhouOutCard::InitAsDefaultInstance() {
}

tagGuiZhouOutCard::tagGuiZhouOutCard(const tagGuiZhouOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGuiZhouOutCard::SharedCtor() {
  _cached_size_ = 0;
  ischongfengji_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGuiZhouOutCard::~tagGuiZhouOutCard() {
  SharedDtor();
}

void tagGuiZhouOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGuiZhouOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGuiZhouOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGuiZhouOutCard_descriptor_;
}

const tagGuiZhouOutCard& tagGuiZhouOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagGuiZhouOutCard* tagGuiZhouOutCard::default_instance_ = NULL;

tagGuiZhouOutCard* tagGuiZhouOutCard::New() const {
  return new tagGuiZhouOutCard;
}

void tagGuiZhouOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ischongfengji_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGuiZhouOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsChongFengJi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischongfengji_)));
          set_has_ischongfengji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGuiZhouOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsChongFengJi = 1;
  if (has_ischongfengji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ischongfengji(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGuiZhouOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsChongFengJi = 1;
  if (has_ischongfengji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ischongfengji(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGuiZhouOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsChongFengJi = 1;
    if (has_ischongfengji()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGuiZhouOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGuiZhouOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGuiZhouOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGuiZhouOutCard::MergeFrom(const tagGuiZhouOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischongfengji()) {
      set_ischongfengji(from.ischongfengji());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGuiZhouOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGuiZhouOutCard::CopyFrom(const tagGuiZhouOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGuiZhouOutCard::IsInitialized() const {

  return true;
}

void tagGuiZhouOutCard::Swap(tagGuiZhouOutCard* other) {
  if (other != this) {
    std::swap(ischongfengji_, other->ischongfengji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGuiZhouOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGuiZhouOutCard_descriptor_;
  metadata.reflection = tagGuiZhouOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGuiZhouOpResult::kIsZeRenJiFieldNumber;
const int tagGuiZhouOpResult::kZeRenJiTypeFieldNumber;
#endif  // !_MSC_VER

tagGuiZhouOpResult::tagGuiZhouOpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGuiZhouOpResult::InitAsDefaultInstance() {
}

tagGuiZhouOpResult::tagGuiZhouOpResult(const tagGuiZhouOpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGuiZhouOpResult::SharedCtor() {
  _cached_size_ = 0;
  iszerenji_ = false;
  zerenjitype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGuiZhouOpResult::~tagGuiZhouOpResult() {
  SharedDtor();
}

void tagGuiZhouOpResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGuiZhouOpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGuiZhouOpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGuiZhouOpResult_descriptor_;
}

const tagGuiZhouOpResult& tagGuiZhouOpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guizhougameproto_2eproto();
  return *default_instance_;
}

tagGuiZhouOpResult* tagGuiZhouOpResult::default_instance_ = NULL;

tagGuiZhouOpResult* tagGuiZhouOpResult::New() const {
  return new tagGuiZhouOpResult;
}

void tagGuiZhouOpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iszerenji_ = false;
    zerenjitype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGuiZhouOpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsZeRenJi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iszerenji_)));
          set_has_iszerenji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZeRenJiType;
        break;
      }

      // optional int32 ZeRenJiType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZeRenJiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zerenjitype_)));
          set_has_zerenjitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGuiZhouOpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsZeRenJi = 1;
  if (has_iszerenji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iszerenji(), output);
  }

  // optional int32 ZeRenJiType = 2;
  if (has_zerenjitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zerenjitype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGuiZhouOpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsZeRenJi = 1;
  if (has_iszerenji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iszerenji(), target);
  }

  // optional int32 ZeRenJiType = 2;
  if (has_zerenjitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zerenjitype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGuiZhouOpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsZeRenJi = 1;
    if (has_iszerenji()) {
      total_size += 1 + 1;
    }

    // optional int32 ZeRenJiType = 2;
    if (has_zerenjitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zerenjitype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGuiZhouOpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGuiZhouOpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGuiZhouOpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGuiZhouOpResult::MergeFrom(const tagGuiZhouOpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iszerenji()) {
      set_iszerenji(from.iszerenji());
    }
    if (from.has_zerenjitype()) {
      set_zerenjitype(from.zerenjitype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGuiZhouOpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGuiZhouOpResult::CopyFrom(const tagGuiZhouOpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGuiZhouOpResult::IsInitialized() const {

  return true;
}

void tagGuiZhouOpResult::Swap(tagGuiZhouOpResult* other) {
  if (other != this) {
    std::swap(iszerenji_, other->iszerenji_);
    std::swap(zerenjitype_, other->zerenjitype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGuiZhouOpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGuiZhouOpResult_descriptor_;
  metadata.reflection = tagGuiZhouOpResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guizhou
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
