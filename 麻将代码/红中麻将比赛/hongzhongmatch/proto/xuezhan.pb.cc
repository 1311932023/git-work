// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xuezhan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xuezhan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace xuezhan {

namespace {

const ::google::protobuf::Descriptor* XueZhanHuanPai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XueZhanHuanPai_reflection_ = NULL;
const ::google::protobuf::Descriptor* XueZhanHuanPaiAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XueZhanHuanPaiAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* XueZhanGameSence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XueZhanGameSence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xuezhan_2eproto() {
  protobuf_AddDesc_xuezhan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xuezhan.proto");
  GOOGLE_CHECK(file != NULL);
  XueZhanHuanPai_descriptor_ = file->message_type(0);
  static const int XueZhanHuanPai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPai, cards_),
  };
  XueZhanHuanPai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XueZhanHuanPai_descriptor_,
      XueZhanHuanPai::default_instance_,
      XueZhanHuanPai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XueZhanHuanPai));
  XueZhanHuanPaiAck_descriptor_ = file->message_type(1);
  static const int XueZhanHuanPaiAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPaiAck, my_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPaiAck, other_cards_),
  };
  XueZhanHuanPaiAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XueZhanHuanPaiAck_descriptor_,
      XueZhanHuanPaiAck::default_instance_,
      XueZhanHuanPaiAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPaiAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanHuanPaiAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XueZhanHuanPaiAck));
  XueZhanGameSence_descriptor_ = file->message_type(2);
  static const int XueZhanGameSence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanGameSence, ishuanpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanGameSence, isdingque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanGameSence, dingquecardtype_),
  };
  XueZhanGameSence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XueZhanGameSence_descriptor_,
      XueZhanGameSence::default_instance_,
      XueZhanGameSence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanGameSence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XueZhanGameSence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XueZhanGameSence));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xuezhan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XueZhanHuanPai_descriptor_, &XueZhanHuanPai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XueZhanHuanPaiAck_descriptor_, &XueZhanHuanPaiAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XueZhanGameSence_descriptor_, &XueZhanGameSence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xuezhan_2eproto() {
  delete XueZhanHuanPai::default_instance_;
  delete XueZhanHuanPai_reflection_;
  delete XueZhanHuanPaiAck::default_instance_;
  delete XueZhanHuanPaiAck_reflection_;
  delete XueZhanGameSence::default_instance_;
  delete XueZhanGameSence_reflection_;
}

void protobuf_AddDesc_xuezhan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rxuezhan.proto\022\022proto.game.xuezhan\"\037\n\016X"
    "ueZhanHuanPai\022\r\n\005cards\030\002 \003(\005\":\n\021XueZhanH"
    "uanPaiAck\022\020\n\010my_cards\030\001 \003(\005\022\023\n\013other_car"
    "ds\030\002 \003(\005\"Q\n\020XueZhanGameSence\022\021\n\tisHuanPa"
    "i\030\001 \002(\005\022\021\n\tisDingQue\030\002 \002(\005\022\027\n\017DingQueCar"
    "dType\030\003 \003(\005", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xuezhan.proto", &protobuf_RegisterTypes);
  XueZhanHuanPai::default_instance_ = new XueZhanHuanPai();
  XueZhanHuanPaiAck::default_instance_ = new XueZhanHuanPaiAck();
  XueZhanGameSence::default_instance_ = new XueZhanGameSence();
  XueZhanHuanPai::default_instance_->InitAsDefaultInstance();
  XueZhanHuanPaiAck::default_instance_->InitAsDefaultInstance();
  XueZhanGameSence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xuezhan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xuezhan_2eproto {
  StaticDescriptorInitializer_xuezhan_2eproto() {
    protobuf_AddDesc_xuezhan_2eproto();
  }
} static_descriptor_initializer_xuezhan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int XueZhanHuanPai::kCardsFieldNumber;
#endif  // !_MSC_VER

XueZhanHuanPai::XueZhanHuanPai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XueZhanHuanPai::InitAsDefaultInstance() {
}

XueZhanHuanPai::XueZhanHuanPai(const XueZhanHuanPai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XueZhanHuanPai::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XueZhanHuanPai::~XueZhanHuanPai() {
  SharedDtor();
}

void XueZhanHuanPai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XueZhanHuanPai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XueZhanHuanPai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XueZhanHuanPai_descriptor_;
}

const XueZhanHuanPai& XueZhanHuanPai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xuezhan_2eproto();
  return *default_instance_;
}

XueZhanHuanPai* XueZhanHuanPai::default_instance_ = NULL;

XueZhanHuanPai* XueZhanHuanPai::New() const {
  return new XueZhanHuanPai;
}

void XueZhanHuanPai::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XueZhanHuanPai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XueZhanHuanPai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XueZhanHuanPai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XueZhanHuanPai::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XueZhanHuanPai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XueZhanHuanPai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XueZhanHuanPai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XueZhanHuanPai::MergeFrom(const XueZhanHuanPai& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XueZhanHuanPai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XueZhanHuanPai::CopyFrom(const XueZhanHuanPai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XueZhanHuanPai::IsInitialized() const {

  return true;
}

void XueZhanHuanPai::Swap(XueZhanHuanPai* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XueZhanHuanPai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XueZhanHuanPai_descriptor_;
  metadata.reflection = XueZhanHuanPai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XueZhanHuanPaiAck::kMyCardsFieldNumber;
const int XueZhanHuanPaiAck::kOtherCardsFieldNumber;
#endif  // !_MSC_VER

XueZhanHuanPaiAck::XueZhanHuanPaiAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XueZhanHuanPaiAck::InitAsDefaultInstance() {
}

XueZhanHuanPaiAck::XueZhanHuanPaiAck(const XueZhanHuanPaiAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XueZhanHuanPaiAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XueZhanHuanPaiAck::~XueZhanHuanPaiAck() {
  SharedDtor();
}

void XueZhanHuanPaiAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XueZhanHuanPaiAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XueZhanHuanPaiAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XueZhanHuanPaiAck_descriptor_;
}

const XueZhanHuanPaiAck& XueZhanHuanPaiAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xuezhan_2eproto();
  return *default_instance_;
}

XueZhanHuanPaiAck* XueZhanHuanPaiAck::default_instance_ = NULL;

XueZhanHuanPaiAck* XueZhanHuanPaiAck::New() const {
  return new XueZhanHuanPaiAck;
}

void XueZhanHuanPaiAck::Clear() {
  my_cards_.Clear();
  other_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XueZhanHuanPaiAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 my_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_my_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_my_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_my_cards;
        if (input->ExpectTag(16)) goto parse_other_cards;
        break;
      }

      // repeated int32 other_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_other_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_other_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_other_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XueZhanHuanPaiAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 my_cards = 1;
  for (int i = 0; i < this->my_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->my_cards(i), output);
  }

  // repeated int32 other_cards = 2;
  for (int i = 0; i < this->other_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->other_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XueZhanHuanPaiAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 my_cards = 1;
  for (int i = 0; i < this->my_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->my_cards(i), target);
  }

  // repeated int32 other_cards = 2;
  for (int i = 0; i < this->other_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->other_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XueZhanHuanPaiAck::ByteSize() const {
  int total_size = 0;

  // repeated int32 my_cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->my_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->my_cards(i));
    }
    total_size += 1 * this->my_cards_size() + data_size;
  }

  // repeated int32 other_cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->other_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->other_cards(i));
    }
    total_size += 1 * this->other_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XueZhanHuanPaiAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XueZhanHuanPaiAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XueZhanHuanPaiAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XueZhanHuanPaiAck::MergeFrom(const XueZhanHuanPaiAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_cards_.MergeFrom(from.my_cards_);
  other_cards_.MergeFrom(from.other_cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XueZhanHuanPaiAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XueZhanHuanPaiAck::CopyFrom(const XueZhanHuanPaiAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XueZhanHuanPaiAck::IsInitialized() const {

  return true;
}

void XueZhanHuanPaiAck::Swap(XueZhanHuanPaiAck* other) {
  if (other != this) {
    my_cards_.Swap(&other->my_cards_);
    other_cards_.Swap(&other->other_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XueZhanHuanPaiAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XueZhanHuanPaiAck_descriptor_;
  metadata.reflection = XueZhanHuanPaiAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XueZhanGameSence::kIsHuanPaiFieldNumber;
const int XueZhanGameSence::kIsDingQueFieldNumber;
const int XueZhanGameSence::kDingQueCardTypeFieldNumber;
#endif  // !_MSC_VER

XueZhanGameSence::XueZhanGameSence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XueZhanGameSence::InitAsDefaultInstance() {
}

XueZhanGameSence::XueZhanGameSence(const XueZhanGameSence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XueZhanGameSence::SharedCtor() {
  _cached_size_ = 0;
  ishuanpai_ = 0;
  isdingque_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XueZhanGameSence::~XueZhanGameSence() {
  SharedDtor();
}

void XueZhanGameSence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XueZhanGameSence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XueZhanGameSence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XueZhanGameSence_descriptor_;
}

const XueZhanGameSence& XueZhanGameSence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xuezhan_2eproto();
  return *default_instance_;
}

XueZhanGameSence* XueZhanGameSence::default_instance_ = NULL;

XueZhanGameSence* XueZhanGameSence::New() const {
  return new XueZhanGameSence;
}

void XueZhanGameSence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishuanpai_ = 0;
    isdingque_ = 0;
  }
  dingquecardtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XueZhanGameSence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isHuanPai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishuanpai_)));
          set_has_ishuanpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isDingQue;
        break;
      }

      // required int32 isDingQue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDingQue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdingque_)));
          set_has_isdingque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DingQueCardType;
        break;
      }

      // repeated int32 DingQueCardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DingQueCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dingquecardtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dingquecardtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DingQueCardType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XueZhanGameSence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isHuanPai = 1;
  if (has_ishuanpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishuanpai(), output);
  }

  // required int32 isDingQue = 2;
  if (has_isdingque()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isdingque(), output);
  }

  // repeated int32 DingQueCardType = 3;
  for (int i = 0; i < this->dingquecardtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dingquecardtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XueZhanGameSence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isHuanPai = 1;
  if (has_ishuanpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishuanpai(), target);
  }

  // required int32 isDingQue = 2;
  if (has_isdingque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isdingque(), target);
  }

  // repeated int32 DingQueCardType = 3;
  for (int i = 0; i < this->dingquecardtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->dingquecardtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XueZhanGameSence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isHuanPai = 1;
    if (has_ishuanpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishuanpai());
    }

    // required int32 isDingQue = 2;
    if (has_isdingque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdingque());
    }

  }
  // repeated int32 DingQueCardType = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dingquecardtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dingquecardtype(i));
    }
    total_size += 1 * this->dingquecardtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XueZhanGameSence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XueZhanGameSence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XueZhanGameSence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XueZhanGameSence::MergeFrom(const XueZhanGameSence& from) {
  GOOGLE_CHECK_NE(&from, this);
  dingquecardtype_.MergeFrom(from.dingquecardtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishuanpai()) {
      set_ishuanpai(from.ishuanpai());
    }
    if (from.has_isdingque()) {
      set_isdingque(from.isdingque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XueZhanGameSence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XueZhanGameSence::CopyFrom(const XueZhanGameSence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XueZhanGameSence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void XueZhanGameSence::Swap(XueZhanGameSence* other) {
  if (other != this) {
    std::swap(ishuanpai_, other->ishuanpai_);
    std::swap(isdingque_, other->isdingque_);
    dingquecardtype_.Swap(&other->dingquecardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XueZhanGameSence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XueZhanGameSence_descriptor_;
  metadata.reflection = XueZhanGameSence_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xuezhan
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
