// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laibingameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "laibingameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace laibinmj {

namespace {

const ::google::protobuf::Descriptor* AckSanBi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSanBi_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFengHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFengHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* lbgamescene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lbgamescene_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagLaiBinGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagLaiBinGameEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_laibingameproto_2eproto() {
  protobuf_AddDesc_laibingameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "laibingameproto.proto");
  GOOGLE_CHECK(file != NULL);
  AckSanBi_descriptor_ = file->message_type(0);
  static const int AckSanBi_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSanBi, sanbi_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSanBi, sanbi_op_chairid_),
  };
  AckSanBi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSanBi_descriptor_,
      AckSanBi::default_instance_,
      AckSanBi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSanBi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSanBi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSanBi));
  AckFengHu_descriptor_ = file->message_type(1);
  static const int AckFengHu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFengHu, sibi_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFengHu, sibi_op_chairid_),
  };
  AckFengHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFengHu_descriptor_,
      AckFengHu::default_instance_,
      AckFengHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFengHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFengHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFengHu));
  lbgamescene_descriptor_ = file->message_type(2);
  static const int lbgamescene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lbgamescene, san_bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lbgamescene, feng_hu_),
  };
  lbgamescene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lbgamescene_descriptor_,
      lbgamescene::default_instance_,
      lbgamescene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lbgamescene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lbgamescene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lbgamescene));
  tagLaiBinGameEnd_descriptor_ = file->message_type(3);
  static const int tagLaiBinGameEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaiBinGameEnd, san_bi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaiBinGameEnd, feng_hu_),
  };
  tagLaiBinGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagLaiBinGameEnd_descriptor_,
      tagLaiBinGameEnd::default_instance_,
      tagLaiBinGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaiBinGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaiBinGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagLaiBinGameEnd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_laibingameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSanBi_descriptor_, &AckSanBi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFengHu_descriptor_, &AckFengHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lbgamescene_descriptor_, &lbgamescene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagLaiBinGameEnd_descriptor_, &tagLaiBinGameEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_laibingameproto_2eproto() {
  delete AckSanBi::default_instance_;
  delete AckSanBi_reflection_;
  delete AckFengHu::default_instance_;
  delete AckFengHu_reflection_;
  delete lbgamescene::default_instance_;
  delete lbgamescene_reflection_;
  delete tagLaiBinGameEnd::default_instance_;
  delete tagLaiBinGameEnd_reflection_;
}

void protobuf_AddDesc_laibingameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025laibingameproto.proto\022\023proto.game.laib"
    "inmj\";\n\010AckSanBi\022\025\n\rsanbi_chairid\030\001 \001(\005\022"
    "\030\n\020sanbi_op_chairid\030\002 \001(\005\":\n\tAckFengHu\022\024"
    "\n\014sibi_chairid\030\001 \001(\005\022\027\n\017sibi_op_chairid\030"
    "\002 \001(\005\".\n\013lbgamescene\022\016\n\006san_bi\030\001 \003(\005\022\017\n\007"
    "feng_hu\030\002 \003(\005\"3\n\020tagLaiBinGameEnd\022\016\n\006san"
    "_bi\030\001 \003(\005\022\017\n\007feng_hu\030\002 \003(\005", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "laibingameproto.proto", &protobuf_RegisterTypes);
  AckSanBi::default_instance_ = new AckSanBi();
  AckFengHu::default_instance_ = new AckFengHu();
  lbgamescene::default_instance_ = new lbgamescene();
  tagLaiBinGameEnd::default_instance_ = new tagLaiBinGameEnd();
  AckSanBi::default_instance_->InitAsDefaultInstance();
  AckFengHu::default_instance_->InitAsDefaultInstance();
  lbgamescene::default_instance_->InitAsDefaultInstance();
  tagLaiBinGameEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_laibingameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_laibingameproto_2eproto {
  StaticDescriptorInitializer_laibingameproto_2eproto() {
    protobuf_AddDesc_laibingameproto_2eproto();
  }
} static_descriptor_initializer_laibingameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckSanBi::kSanbiChairidFieldNumber;
const int AckSanBi::kSanbiOpChairidFieldNumber;
#endif  // !_MSC_VER

AckSanBi::AckSanBi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSanBi::InitAsDefaultInstance() {
}

AckSanBi::AckSanBi(const AckSanBi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSanBi::SharedCtor() {
  _cached_size_ = 0;
  sanbi_chairid_ = 0;
  sanbi_op_chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSanBi::~AckSanBi() {
  SharedDtor();
}

void AckSanBi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSanBi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSanBi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSanBi_descriptor_;
}

const AckSanBi& AckSanBi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laibingameproto_2eproto();
  return *default_instance_;
}

AckSanBi* AckSanBi::default_instance_ = NULL;

AckSanBi* AckSanBi::New() const {
  return new AckSanBi;
}

void AckSanBi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sanbi_chairid_ = 0;
    sanbi_op_chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSanBi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sanbi_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sanbi_chairid_)));
          set_has_sanbi_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sanbi_op_chairid;
        break;
      }

      // optional int32 sanbi_op_chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sanbi_op_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sanbi_op_chairid_)));
          set_has_sanbi_op_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSanBi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sanbi_chairid = 1;
  if (has_sanbi_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sanbi_chairid(), output);
  }

  // optional int32 sanbi_op_chairid = 2;
  if (has_sanbi_op_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sanbi_op_chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSanBi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sanbi_chairid = 1;
  if (has_sanbi_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sanbi_chairid(), target);
  }

  // optional int32 sanbi_op_chairid = 2;
  if (has_sanbi_op_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sanbi_op_chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSanBi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sanbi_chairid = 1;
    if (has_sanbi_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sanbi_chairid());
    }

    // optional int32 sanbi_op_chairid = 2;
    if (has_sanbi_op_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sanbi_op_chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSanBi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSanBi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSanBi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSanBi::MergeFrom(const AckSanBi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sanbi_chairid()) {
      set_sanbi_chairid(from.sanbi_chairid());
    }
    if (from.has_sanbi_op_chairid()) {
      set_sanbi_op_chairid(from.sanbi_op_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSanBi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSanBi::CopyFrom(const AckSanBi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSanBi::IsInitialized() const {

  return true;
}

void AckSanBi::Swap(AckSanBi* other) {
  if (other != this) {
    std::swap(sanbi_chairid_, other->sanbi_chairid_);
    std::swap(sanbi_op_chairid_, other->sanbi_op_chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSanBi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSanBi_descriptor_;
  metadata.reflection = AckSanBi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFengHu::kSibiChairidFieldNumber;
const int AckFengHu::kSibiOpChairidFieldNumber;
#endif  // !_MSC_VER

AckFengHu::AckFengHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFengHu::InitAsDefaultInstance() {
}

AckFengHu::AckFengHu(const AckFengHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFengHu::SharedCtor() {
  _cached_size_ = 0;
  sibi_chairid_ = 0;
  sibi_op_chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFengHu::~AckFengHu() {
  SharedDtor();
}

void AckFengHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFengHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFengHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFengHu_descriptor_;
}

const AckFengHu& AckFengHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laibingameproto_2eproto();
  return *default_instance_;
}

AckFengHu* AckFengHu::default_instance_ = NULL;

AckFengHu* AckFengHu::New() const {
  return new AckFengHu;
}

void AckFengHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sibi_chairid_ = 0;
    sibi_op_chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFengHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sibi_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sibi_chairid_)));
          set_has_sibi_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sibi_op_chairid;
        break;
      }

      // optional int32 sibi_op_chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sibi_op_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sibi_op_chairid_)));
          set_has_sibi_op_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFengHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sibi_chairid = 1;
  if (has_sibi_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sibi_chairid(), output);
  }

  // optional int32 sibi_op_chairid = 2;
  if (has_sibi_op_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sibi_op_chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFengHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sibi_chairid = 1;
  if (has_sibi_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sibi_chairid(), target);
  }

  // optional int32 sibi_op_chairid = 2;
  if (has_sibi_op_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sibi_op_chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFengHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sibi_chairid = 1;
    if (has_sibi_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sibi_chairid());
    }

    // optional int32 sibi_op_chairid = 2;
    if (has_sibi_op_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sibi_op_chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFengHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFengHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFengHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFengHu::MergeFrom(const AckFengHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sibi_chairid()) {
      set_sibi_chairid(from.sibi_chairid());
    }
    if (from.has_sibi_op_chairid()) {
      set_sibi_op_chairid(from.sibi_op_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFengHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFengHu::CopyFrom(const AckFengHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFengHu::IsInitialized() const {

  return true;
}

void AckFengHu::Swap(AckFengHu* other) {
  if (other != this) {
    std::swap(sibi_chairid_, other->sibi_chairid_);
    std::swap(sibi_op_chairid_, other->sibi_op_chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFengHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFengHu_descriptor_;
  metadata.reflection = AckFengHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lbgamescene::kSanBiFieldNumber;
const int lbgamescene::kFengHuFieldNumber;
#endif  // !_MSC_VER

lbgamescene::lbgamescene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lbgamescene::InitAsDefaultInstance() {
}

lbgamescene::lbgamescene(const lbgamescene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lbgamescene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lbgamescene::~lbgamescene() {
  SharedDtor();
}

void lbgamescene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lbgamescene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lbgamescene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lbgamescene_descriptor_;
}

const lbgamescene& lbgamescene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laibingameproto_2eproto();
  return *default_instance_;
}

lbgamescene* lbgamescene::default_instance_ = NULL;

lbgamescene* lbgamescene::New() const {
  return new lbgamescene;
}

void lbgamescene::Clear() {
  san_bi_.Clear();
  feng_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lbgamescene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 san_bi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_san_bi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_san_bi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_san_bi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_san_bi;
        if (input->ExpectTag(16)) goto parse_feng_hu;
        break;
      }

      // repeated int32 feng_hu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feng_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_feng_hu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feng_hu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feng_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lbgamescene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 san_bi = 1;
  for (int i = 0; i < this->san_bi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->san_bi(i), output);
  }

  // repeated int32 feng_hu = 2;
  for (int i = 0; i < this->feng_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->feng_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lbgamescene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 san_bi = 1;
  for (int i = 0; i < this->san_bi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->san_bi(i), target);
  }

  // repeated int32 feng_hu = 2;
  for (int i = 0; i < this->feng_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->feng_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lbgamescene::ByteSize() const {
  int total_size = 0;

  // repeated int32 san_bi = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->san_bi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->san_bi(i));
    }
    total_size += 1 * this->san_bi_size() + data_size;
  }

  // repeated int32 feng_hu = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->feng_hu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->feng_hu(i));
    }
    total_size += 1 * this->feng_hu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lbgamescene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lbgamescene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lbgamescene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lbgamescene::MergeFrom(const lbgamescene& from) {
  GOOGLE_CHECK_NE(&from, this);
  san_bi_.MergeFrom(from.san_bi_);
  feng_hu_.MergeFrom(from.feng_hu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lbgamescene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lbgamescene::CopyFrom(const lbgamescene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lbgamescene::IsInitialized() const {

  return true;
}

void lbgamescene::Swap(lbgamescene* other) {
  if (other != this) {
    san_bi_.Swap(&other->san_bi_);
    feng_hu_.Swap(&other->feng_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lbgamescene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lbgamescene_descriptor_;
  metadata.reflection = lbgamescene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagLaiBinGameEnd::kSanBiFieldNumber;
const int tagLaiBinGameEnd::kFengHuFieldNumber;
#endif  // !_MSC_VER

tagLaiBinGameEnd::tagLaiBinGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagLaiBinGameEnd::InitAsDefaultInstance() {
}

tagLaiBinGameEnd::tagLaiBinGameEnd(const tagLaiBinGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagLaiBinGameEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagLaiBinGameEnd::~tagLaiBinGameEnd() {
  SharedDtor();
}

void tagLaiBinGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagLaiBinGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagLaiBinGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagLaiBinGameEnd_descriptor_;
}

const tagLaiBinGameEnd& tagLaiBinGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laibingameproto_2eproto();
  return *default_instance_;
}

tagLaiBinGameEnd* tagLaiBinGameEnd::default_instance_ = NULL;

tagLaiBinGameEnd* tagLaiBinGameEnd::New() const {
  return new tagLaiBinGameEnd;
}

void tagLaiBinGameEnd::Clear() {
  san_bi_.Clear();
  feng_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagLaiBinGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 san_bi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_san_bi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_san_bi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_san_bi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_san_bi;
        if (input->ExpectTag(16)) goto parse_feng_hu;
        break;
      }

      // repeated int32 feng_hu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feng_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_feng_hu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feng_hu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feng_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagLaiBinGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 san_bi = 1;
  for (int i = 0; i < this->san_bi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->san_bi(i), output);
  }

  // repeated int32 feng_hu = 2;
  for (int i = 0; i < this->feng_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->feng_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagLaiBinGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 san_bi = 1;
  for (int i = 0; i < this->san_bi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->san_bi(i), target);
  }

  // repeated int32 feng_hu = 2;
  for (int i = 0; i < this->feng_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->feng_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagLaiBinGameEnd::ByteSize() const {
  int total_size = 0;

  // repeated int32 san_bi = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->san_bi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->san_bi(i));
    }
    total_size += 1 * this->san_bi_size() + data_size;
  }

  // repeated int32 feng_hu = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->feng_hu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->feng_hu(i));
    }
    total_size += 1 * this->feng_hu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagLaiBinGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagLaiBinGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagLaiBinGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagLaiBinGameEnd::MergeFrom(const tagLaiBinGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  san_bi_.MergeFrom(from.san_bi_);
  feng_hu_.MergeFrom(from.feng_hu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagLaiBinGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagLaiBinGameEnd::CopyFrom(const tagLaiBinGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagLaiBinGameEnd::IsInitialized() const {

  return true;
}

void tagLaiBinGameEnd::Swap(tagLaiBinGameEnd* other) {
  if (other != this) {
    san_bi_.Swap(&other->san_bi_);
    feng_hu_.Swap(&other->feng_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagLaiBinGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagLaiBinGameEnd_descriptor_;
  metadata.reflection = tagLaiBinGameEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace laibinmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
