// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pinghugameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pinghugameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace pinghumj {

namespace {

const ::google::protobuf::Descriptor* phgamescene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phgamescene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Horse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Horse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHorseCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHorseCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* phmjGameEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phmjGameEndInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pinghugameproto_2eproto() {
  protobuf_AddDesc_pinghugameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pinghugameproto.proto");
  GOOGLE_CHECK(file != NULL);
  phgamescene_descriptor_ = file->message_type(0);
  static const int phgamescene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phgamescene, roomtype_),
  };
  phgamescene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phgamescene_descriptor_,
      phgamescene::default_instance_,
      phgamescene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phgamescene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phgamescene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phgamescene));
  Horse_descriptor_ = file->message_type(1);
  static const int Horse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, horsenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, horsecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, horsetype_),
  };
  Horse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Horse_descriptor_,
      Horse::default_instance_,
      Horse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Horse));
  UserHorseCard_descriptor_ = file->message_type(2);
  static const int UserHorseCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, horsecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, bvalid_),
  };
  UserHorseCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserHorseCard_descriptor_,
      UserHorseCard::default_instance_,
      UserHorseCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserHorseCard));
  phmjGameEndInfo_descriptor_ = file->message_type(3);
  static const int phmjGameEndInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phmjGameEndInfo, horseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phmjGameEndInfo, userhorse_),
  };
  phmjGameEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phmjGameEndInfo_descriptor_,
      phmjGameEndInfo::default_instance_,
      phmjGameEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phmjGameEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phmjGameEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phmjGameEndInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pinghugameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phgamescene_descriptor_, &phgamescene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Horse_descriptor_, &Horse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserHorseCard_descriptor_, &UserHorseCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phmjGameEndInfo_descriptor_, &phmjGameEndInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pinghugameproto_2eproto() {
  delete phgamescene::default_instance_;
  delete phgamescene_reflection_;
  delete Horse::default_instance_;
  delete Horse_reflection_;
  delete UserHorseCard::default_instance_;
  delete UserHorseCard_reflection_;
  delete phmjGameEndInfo::default_instance_;
  delete phmjGameEndInfo_reflection_;
}

void protobuf_AddDesc_pinghugameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025pinghugameproto.proto\022\023proto.game.ping"
    "humj\"\037\n\013phgamescene\022\020\n\010roomType\030\001 \001(\005\"P\n"
    "\005Horse\022\017\n\007chairID\030\001 \001(\005\022\020\n\010HorseNum\030\002 \001("
    "\005\022\021\n\tHorseCard\030\003 \003(\005\022\021\n\tHorseType\030\004 \001(\005\""
    "P\n\rUserHorseCard\022\017\n\007chairID\030\001 \001(\005\022\013\n\003Num"
    "\030\002 \001(\005\022\021\n\tHorseCard\030\003 \003(\005\022\016\n\006bValid\030\004 \001("
    "\005\"w\n\017phmjGameEndInfo\022-\n\tHorseInfo\030\001 \003(\0132"
    "\032.proto.game.pinghumj.Horse\0225\n\tUserHorse"
    "\030\002 \003(\0132\".proto.game.pinghumj.UserHorseCa"
    "rd", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pinghugameproto.proto", &protobuf_RegisterTypes);
  phgamescene::default_instance_ = new phgamescene();
  Horse::default_instance_ = new Horse();
  UserHorseCard::default_instance_ = new UserHorseCard();
  phmjGameEndInfo::default_instance_ = new phmjGameEndInfo();
  phgamescene::default_instance_->InitAsDefaultInstance();
  Horse::default_instance_->InitAsDefaultInstance();
  UserHorseCard::default_instance_->InitAsDefaultInstance();
  phmjGameEndInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pinghugameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pinghugameproto_2eproto {
  StaticDescriptorInitializer_pinghugameproto_2eproto() {
    protobuf_AddDesc_pinghugameproto_2eproto();
  }
} static_descriptor_initializer_pinghugameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int phgamescene::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

phgamescene::phgamescene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phgamescene::InitAsDefaultInstance() {
}

phgamescene::phgamescene(const phgamescene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phgamescene::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phgamescene::~phgamescene() {
  SharedDtor();
}

void phgamescene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void phgamescene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phgamescene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phgamescene_descriptor_;
}

const phgamescene& phgamescene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pinghugameproto_2eproto();
  return *default_instance_;
}

phgamescene* phgamescene::default_instance_ = NULL;

phgamescene* phgamescene::New() const {
  return new phgamescene;
}

void phgamescene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phgamescene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phgamescene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phgamescene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomType = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phgamescene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phgamescene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phgamescene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phgamescene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phgamescene::MergeFrom(const phgamescene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phgamescene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phgamescene::CopyFrom(const phgamescene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phgamescene::IsInitialized() const {

  return true;
}

void phgamescene::Swap(phgamescene* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phgamescene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phgamescene_descriptor_;
  metadata.reflection = phgamescene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Horse::kChairIDFieldNumber;
const int Horse::kHorseNumFieldNumber;
const int Horse::kHorseCardFieldNumber;
const int Horse::kHorseTypeFieldNumber;
#endif  // !_MSC_VER

Horse::Horse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Horse::InitAsDefaultInstance() {
}

Horse::Horse(const Horse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Horse::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  horsenum_ = 0;
  horsetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Horse::~Horse() {
  SharedDtor();
}

void Horse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Horse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Horse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Horse_descriptor_;
}

const Horse& Horse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pinghugameproto_2eproto();
  return *default_instance_;
}

Horse* Horse::default_instance_ = NULL;

Horse* Horse::New() const {
  return new Horse;
}

void Horse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    horsenum_ = 0;
    horsetype_ = 0;
  }
  horsecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Horse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HorseNum;
        break;
      }

      // optional int32 HorseNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsenum_)));
          set_has_horsenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        break;
      }

      // repeated int32 HorseCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_horsecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_horsecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        if (input->ExpectTag(32)) goto parse_HorseType;
        break;
      }

      // optional int32 HorseType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsetype_)));
          set_has_horsetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Horse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 HorseNum = 2;
  if (has_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->horsenum(), output);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->horsecard(i), output);
  }

  // optional int32 HorseType = 4;
  if (has_horsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->horsetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Horse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 HorseNum = 2;
  if (has_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->horsenum(), target);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->horsecard(i), target);
  }

  // optional int32 HorseType = 4;
  if (has_horsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->horsetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Horse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 HorseNum = 2;
    if (has_horsenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsenum());
    }

    // optional int32 HorseType = 4;
    if (has_horsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsetype());
    }

  }
  // repeated int32 HorseCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->horsecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->horsecard(i));
    }
    total_size += 1 * this->horsecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Horse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Horse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Horse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Horse::MergeFrom(const Horse& from) {
  GOOGLE_CHECK_NE(&from, this);
  horsecard_.MergeFrom(from.horsecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_horsenum()) {
      set_horsenum(from.horsenum());
    }
    if (from.has_horsetype()) {
      set_horsetype(from.horsetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Horse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horse::CopyFrom(const Horse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horse::IsInitialized() const {

  return true;
}

void Horse::Swap(Horse* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(horsenum_, other->horsenum_);
    horsecard_.Swap(&other->horsecard_);
    std::swap(horsetype_, other->horsetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Horse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Horse_descriptor_;
  metadata.reflection = Horse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserHorseCard::kChairIDFieldNumber;
const int UserHorseCard::kNumFieldNumber;
const int UserHorseCard::kHorseCardFieldNumber;
const int UserHorseCard::kBValidFieldNumber;
#endif  // !_MSC_VER

UserHorseCard::UserHorseCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserHorseCard::InitAsDefaultInstance() {
}

UserHorseCard::UserHorseCard(const UserHorseCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserHorseCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  num_ = 0;
  bvalid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHorseCard::~UserHorseCard() {
  SharedDtor();
}

void UserHorseCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserHorseCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHorseCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHorseCard_descriptor_;
}

const UserHorseCard& UserHorseCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pinghugameproto_2eproto();
  return *default_instance_;
}

UserHorseCard* UserHorseCard::default_instance_ = NULL;

UserHorseCard* UserHorseCard::New() const {
  return new UserHorseCard;
}

void UserHorseCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    num_ = 0;
    bvalid_ = 0;
  }
  horsecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserHorseCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        break;
      }

      // repeated int32 HorseCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_horsecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_horsecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        if (input->ExpectTag(32)) goto parse_bValid;
        break;
      }

      // optional int32 bValid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bvalid_)));
          set_has_bvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserHorseCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->horsecard(i), output);
  }

  // optional int32 bValid = 4;
  if (has_bvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bvalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserHorseCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->horsecard(i), target);
  }

  // optional int32 bValid = 4;
  if (has_bvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bvalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserHorseCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bValid = 4;
    if (has_bvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bvalid());
    }

  }
  // repeated int32 HorseCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->horsecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->horsecard(i));
    }
    total_size += 1 * this->horsecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHorseCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserHorseCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserHorseCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserHorseCard::MergeFrom(const UserHorseCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  horsecard_.MergeFrom(from.horsecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bvalid()) {
      set_bvalid(from.bvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserHorseCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHorseCard::CopyFrom(const UserHorseCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHorseCard::IsInitialized() const {

  return true;
}

void UserHorseCard::Swap(UserHorseCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(num_, other->num_);
    horsecard_.Swap(&other->horsecard_);
    std::swap(bvalid_, other->bvalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserHorseCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHorseCard_descriptor_;
  metadata.reflection = UserHorseCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phmjGameEndInfo::kHorseInfoFieldNumber;
const int phmjGameEndInfo::kUserHorseFieldNumber;
#endif  // !_MSC_VER

phmjGameEndInfo::phmjGameEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phmjGameEndInfo::InitAsDefaultInstance() {
}

phmjGameEndInfo::phmjGameEndInfo(const phmjGameEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phmjGameEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phmjGameEndInfo::~phmjGameEndInfo() {
  SharedDtor();
}

void phmjGameEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void phmjGameEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phmjGameEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phmjGameEndInfo_descriptor_;
}

const phmjGameEndInfo& phmjGameEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pinghugameproto_2eproto();
  return *default_instance_;
}

phmjGameEndInfo* phmjGameEndInfo::default_instance_ = NULL;

phmjGameEndInfo* phmjGameEndInfo::New() const {
  return new phmjGameEndInfo;
}

void phmjGameEndInfo::Clear() {
  horseinfo_.Clear();
  userhorse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phmjGameEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.pinghumj.Horse HorseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HorseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_horseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HorseInfo;
        if (input->ExpectTag(18)) goto parse_UserHorse;
        break;
      }

      // repeated .proto.game.pinghumj.UserHorseCard UserHorse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserHorse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userhorse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserHorse;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phmjGameEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.pinghumj.Horse HorseInfo = 1;
  for (int i = 0; i < this->horseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->horseinfo(i), output);
  }

  // repeated .proto.game.pinghumj.UserHorseCard UserHorse = 2;
  for (int i = 0; i < this->userhorse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userhorse(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phmjGameEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.pinghumj.Horse HorseInfo = 1;
  for (int i = 0; i < this->horseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->horseinfo(i), target);
  }

  // repeated .proto.game.pinghumj.UserHorseCard UserHorse = 2;
  for (int i = 0; i < this->userhorse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userhorse(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phmjGameEndInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.pinghumj.Horse HorseInfo = 1;
  total_size += 1 * this->horseinfo_size();
  for (int i = 0; i < this->horseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->horseinfo(i));
  }

  // repeated .proto.game.pinghumj.UserHorseCard UserHorse = 2;
  total_size += 1 * this->userhorse_size();
  for (int i = 0; i < this->userhorse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userhorse(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phmjGameEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phmjGameEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phmjGameEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phmjGameEndInfo::MergeFrom(const phmjGameEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  horseinfo_.MergeFrom(from.horseinfo_);
  userhorse_.MergeFrom(from.userhorse_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phmjGameEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phmjGameEndInfo::CopyFrom(const phmjGameEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phmjGameEndInfo::IsInitialized() const {

  return true;
}

void phmjGameEndInfo::Swap(phmjGameEndInfo* other) {
  if (other != this) {
    horseinfo_.Swap(&other->horseinfo_);
    userhorse_.Swap(&other->userhorse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phmjGameEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phmjGameEndInfo_descriptor_;
  metadata.reflection = phmjGameEndInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pinghumj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
