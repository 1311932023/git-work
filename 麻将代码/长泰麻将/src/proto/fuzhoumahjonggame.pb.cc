// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fuzhoumahjonggame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fuzhoumahjonggame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace fuzhoumahjonggame {

namespace {

const ::google::protobuf::Descriptor* FZ_AckBeginFanHuaPai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_AckBeginFanHuaPai_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZ_AckQiangJinHua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_AckQiangJinHua_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZ_AckGetCardJin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_AckGetCardJin_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZ_HuaCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_HuaCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZ_GameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_GameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FZ_GameSence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FZ_GameSence_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FZ_HU_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fuzhoumahjonggame_2eproto() {
  protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fuzhoumahjonggame.proto");
  GOOGLE_CHECK(file != NULL);
  FZ_AckBeginFanHuaPai_descriptor_ = file->message_type(0);
  static const int FZ_AckBeginFanHuaPai_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, huasum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, huacard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, newcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, left_card_sum_),
  };
  FZ_AckBeginFanHuaPai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_AckBeginFanHuaPai_descriptor_,
      FZ_AckBeginFanHuaPai::default_instance_,
      FZ_AckBeginFanHuaPai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckBeginFanHuaPai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_AckBeginFanHuaPai));
  FZ_AckQiangJinHua_descriptor_ = file->message_type(1);
  static const int FZ_AckQiangJinHua_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, huasum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, huacard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, left_card_sum_),
  };
  FZ_AckQiangJinHua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_AckQiangJinHua_descriptor_,
      FZ_AckQiangJinHua::default_instance_,
      FZ_AckQiangJinHua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckQiangJinHua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_AckQiangJinHua));
  FZ_AckGetCardJin_descriptor_ = file->message_type(2);
  static const int FZ_AckGetCardJin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, huasum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, huacard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, left_card_sum_),
  };
  FZ_AckGetCardJin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_AckGetCardJin_descriptor_,
      FZ_AckGetCardJin::default_instance_,
      FZ_AckGetCardJin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_AckGetCardJin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_AckGetCardJin));
  FZ_HuaCard_descriptor_ = file->message_type(3);
  static const int FZ_HuaCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_HuaCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_HuaCard, card_num_),
  };
  FZ_HuaCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_HuaCard_descriptor_,
      FZ_HuaCard::default_instance_,
      FZ_HuaCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_HuaCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_HuaCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_HuaCard));
  FZ_GameEnd_descriptor_ = file->message_type(4);
  static const int FZ_GameEnd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, huasum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, jinsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, lianzhuangshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, gangsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, huacard_),
  };
  FZ_GameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_GameEnd_descriptor_,
      FZ_GameEnd::default_instance_,
      FZ_GameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_GameEnd));
  FZ_GameSence_descriptor_ = file->message_type(5);
  static const int FZ_GameSence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameSence, huapainum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameSence, fz_type_),
  };
  FZ_GameSence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FZ_GameSence_descriptor_,
      FZ_GameSence::default_instance_,
      FZ_GameSence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameSence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FZ_GameSence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FZ_GameSence));
  FZ_HU_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fuzhoumahjonggame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_AckBeginFanHuaPai_descriptor_, &FZ_AckBeginFanHuaPai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_AckQiangJinHua_descriptor_, &FZ_AckQiangJinHua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_AckGetCardJin_descriptor_, &FZ_AckGetCardJin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_HuaCard_descriptor_, &FZ_HuaCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_GameEnd_descriptor_, &FZ_GameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FZ_GameSence_descriptor_, &FZ_GameSence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fuzhoumahjonggame_2eproto() {
  delete FZ_AckBeginFanHuaPai::default_instance_;
  delete FZ_AckBeginFanHuaPai_reflection_;
  delete FZ_AckQiangJinHua::default_instance_;
  delete FZ_AckQiangJinHua_reflection_;
  delete FZ_AckGetCardJin::default_instance_;
  delete FZ_AckGetCardJin_reflection_;
  delete FZ_HuaCard::default_instance_;
  delete FZ_HuaCard_reflection_;
  delete FZ_GameEnd::default_instance_;
  delete FZ_GameEnd_reflection_;
  delete FZ_GameSence::default_instance_;
  delete FZ_GameSence_reflection_;
}

void protobuf_AddDesc_fuzhoumahjonggame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027fuzhoumahjonggame.proto\022\034proto.game.fu"
    "zhoumahjonggame\"o\n\024FZ_AckBeginFanHuaPai\022"
    "\016\n\006Charid\030\001 \002(\005\022\016\n\006HuaSum\030\002 \002(\005\022\017\n\007HuaCa"
    "rd\030\003 \003(\005\022\017\n\007NewCard\030\004 \003(\005\022\025\n\rleft_card_s"
    "um\030\005 \001(\005\"[\n\021FZ_AckQiangJinHua\022\016\n\006Charid\030"
    "\001 \002(\005\022\016\n\006HuaSum\030\002 \002(\005\022\017\n\007HuaCard\030\003 \002(\005\022\025"
    "\n\rleft_card_sum\030\004 \001(\005\"Z\n\020FZ_AckGetCardJi"
    "n\022\016\n\006charid\030\001 \002(\005\022\016\n\006HuaSum\030\002 \002(\005\022\017\n\007Hua"
    "Card\030\003 \002(\005\022\025\n\rleft_card_sum\030\004 \001(\005\",\n\nFZ_"
    "HuaCard\022\014\n\004card\030\001 \002(\005\022\020\n\010card_num\030\002 \002(\005\""
    "\237\001\n\nFZ_GameEnd\022\016\n\006Charid\030\001 \002(\005\022\016\n\006HuaSum"
    "\030\002 \002(\005\022\016\n\006JinSum\030\003 \002(\005\022\025\n\rLianZhuangShu\030"
    "\004 \002(\005\022\017\n\007gangsum\030\005 \002(\005\0229\n\007HuaCard\030\006 \003(\0132"
    "(.proto.game.fuzhoumahjonggame.FZ_HuaCar"
    "d\"2\n\014FZ_GameSence\022\021\n\tHuaPaiNum\030\001 \003(\005\022\017\n\007"
    "fz_type\030\002 \001(\005*\350\004\n\nFZ_HU_TYPE\022\024\n\020TYPE_FZ_"
    "QUANQING\020\001\022\023\n\017TYPE_FZ_JINLONG\020\002\022\023\n\017TYPE_"
    "FZ_BANQING\020\003\022\022\n\016TYPE_FZ_JINQUE\020\004\022\023\n\017TYPE"
    "_FZ_3JINDAO\020\005\022\022\n\016TYPE_FZ_JINKAN\020\006\022\022\n\016TYP"
    "E_FZ_TIANHU\020\007\022\024\n\020TYPE_FZ_QIANGJIN\020\010\022\027\n\023T"
    "YPE_FZ_WUHUAWUGANG\020\t\022\025\n\021TYPE_FZ_YIZHNGHU"
    "A\020\n\022\022\n\016TYPE_FZ_YOUJIN\020\013\022\025\n\021TYPE_FZ_SHAUN"
    "GYOU\020\014\022\022\n\016TYPE_FZ_SANYOU\020\r\022\020\n\014TYPE_FZ_DI"
    "HU\020\016\022\023\n\017TYPE_FZ_4JINDAO\020\017\022\023\n\017TYPE_FZ_JIN"
    "GANG\020\020\022\023\n\017TYPE_FZ_DANDIAO\020\021\022\033\n\027TYPE_FZ_G"
    "AIBAO_QIANGJIN\020\022\022\023\n\017TYPE_FZ_5JINDAO\020\023\022\023\n"
    "\017TYPE_FZ_6JINDAO\020\024\022\033\n\027TYPE_FZ_SHUANGJINZ"
    "UOTOU\020\025\022\027\n\023TYPE_FZ_QIANGGANGHU\020d\022\020\n\014TYPE"
    "_FZ_7DUI\020e\022\021\n\rTYPE_FZ_13YAO\020f\022\022\n\016TYPE_FZ"
    "_PINGHU\020g\022\027\n\023TYPE_FZ_GANGSHANGHU\020h\022\022\n\016TY"
    "PE_FZ_SHUFEN\020i\022\020\n\013TYPE_FZ_MAX\020\310\001", 1232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fuzhoumahjonggame.proto", &protobuf_RegisterTypes);
  FZ_AckBeginFanHuaPai::default_instance_ = new FZ_AckBeginFanHuaPai();
  FZ_AckQiangJinHua::default_instance_ = new FZ_AckQiangJinHua();
  FZ_AckGetCardJin::default_instance_ = new FZ_AckGetCardJin();
  FZ_HuaCard::default_instance_ = new FZ_HuaCard();
  FZ_GameEnd::default_instance_ = new FZ_GameEnd();
  FZ_GameSence::default_instance_ = new FZ_GameSence();
  FZ_AckBeginFanHuaPai::default_instance_->InitAsDefaultInstance();
  FZ_AckQiangJinHua::default_instance_->InitAsDefaultInstance();
  FZ_AckGetCardJin::default_instance_->InitAsDefaultInstance();
  FZ_HuaCard::default_instance_->InitAsDefaultInstance();
  FZ_GameEnd::default_instance_->InitAsDefaultInstance();
  FZ_GameSence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fuzhoumahjonggame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fuzhoumahjonggame_2eproto {
  StaticDescriptorInitializer_fuzhoumahjonggame_2eproto() {
    protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  }
} static_descriptor_initializer_fuzhoumahjonggame_2eproto_;
const ::google::protobuf::EnumDescriptor* FZ_HU_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_HU_TYPE_descriptor_;
}
bool FZ_HU_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 200:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_AckBeginFanHuaPai::kCharidFieldNumber;
const int FZ_AckBeginFanHuaPai::kHuaSumFieldNumber;
const int FZ_AckBeginFanHuaPai::kHuaCardFieldNumber;
const int FZ_AckBeginFanHuaPai::kNewCardFieldNumber;
const int FZ_AckBeginFanHuaPai::kLeftCardSumFieldNumber;
#endif  // !_MSC_VER

FZ_AckBeginFanHuaPai::FZ_AckBeginFanHuaPai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_AckBeginFanHuaPai::InitAsDefaultInstance() {
}

FZ_AckBeginFanHuaPai::FZ_AckBeginFanHuaPai(const FZ_AckBeginFanHuaPai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_AckBeginFanHuaPai::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  huasum_ = 0;
  left_card_sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_AckBeginFanHuaPai::~FZ_AckBeginFanHuaPai() {
  SharedDtor();
}

void FZ_AckBeginFanHuaPai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_AckBeginFanHuaPai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_AckBeginFanHuaPai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_AckBeginFanHuaPai_descriptor_;
}

const FZ_AckBeginFanHuaPai& FZ_AckBeginFanHuaPai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_AckBeginFanHuaPai* FZ_AckBeginFanHuaPai::default_instance_ = NULL;

FZ_AckBeginFanHuaPai* FZ_AckBeginFanHuaPai::New() const {
  return new FZ_AckBeginFanHuaPai;
}

void FZ_AckBeginFanHuaPai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    huasum_ = 0;
    left_card_sum_ = 0;
  }
  huacard_.Clear();
  newcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_AckBeginFanHuaPai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaSum;
        break;
      }

      // required int32 HuaSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huasum_)));
          set_has_huasum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaCard;
        break;
      }

      // repeated int32 HuaCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_huacard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huacard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaCard;
        if (input->ExpectTag(32)) goto parse_NewCard;
        break;
      }

      // repeated int32 NewCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_newcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_newcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NewCard;
        if (input->ExpectTag(40)) goto parse_left_card_sum;
        break;
      }

      // optional int32 left_card_sum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_sum_)));
          set_has_left_card_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_AckBeginFanHuaPai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huasum(), output);
  }

  // repeated int32 HuaCard = 3;
  for (int i = 0; i < this->huacard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->huacard(i), output);
  }

  // repeated int32 NewCard = 4;
  for (int i = 0; i < this->newcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->newcard(i), output);
  }

  // optional int32 left_card_sum = 5;
  if (has_left_card_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_card_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_AckBeginFanHuaPai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huasum(), target);
  }

  // repeated int32 HuaCard = 3;
  for (int i = 0; i < this->huacard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->huacard(i), target);
  }

  // repeated int32 NewCard = 4;
  for (int i = 0; i < this->newcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->newcard(i), target);
  }

  // optional int32 left_card_sum = 5;
  if (has_left_card_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_card_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_AckBeginFanHuaPai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // required int32 HuaSum = 2;
    if (has_huasum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huasum());
    }

    // optional int32 left_card_sum = 5;
    if (has_left_card_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_sum());
    }

  }
  // repeated int32 HuaCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->huacard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huacard(i));
    }
    total_size += 1 * this->huacard_size() + data_size;
  }

  // repeated int32 NewCard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->newcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->newcard(i));
    }
    total_size += 1 * this->newcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_AckBeginFanHuaPai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_AckBeginFanHuaPai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_AckBeginFanHuaPai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_AckBeginFanHuaPai::MergeFrom(const FZ_AckBeginFanHuaPai& from) {
  GOOGLE_CHECK_NE(&from, this);
  huacard_.MergeFrom(from.huacard_);
  newcard_.MergeFrom(from.newcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_huasum()) {
      set_huasum(from.huasum());
    }
    if (from.has_left_card_sum()) {
      set_left_card_sum(from.left_card_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_AckBeginFanHuaPai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_AckBeginFanHuaPai::CopyFrom(const FZ_AckBeginFanHuaPai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_AckBeginFanHuaPai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FZ_AckBeginFanHuaPai::Swap(FZ_AckBeginFanHuaPai* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(huasum_, other->huasum_);
    huacard_.Swap(&other->huacard_);
    newcard_.Swap(&other->newcard_);
    std::swap(left_card_sum_, other->left_card_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_AckBeginFanHuaPai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_AckBeginFanHuaPai_descriptor_;
  metadata.reflection = FZ_AckBeginFanHuaPai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_AckQiangJinHua::kCharidFieldNumber;
const int FZ_AckQiangJinHua::kHuaSumFieldNumber;
const int FZ_AckQiangJinHua::kHuaCardFieldNumber;
const int FZ_AckQiangJinHua::kLeftCardSumFieldNumber;
#endif  // !_MSC_VER

FZ_AckQiangJinHua::FZ_AckQiangJinHua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_AckQiangJinHua::InitAsDefaultInstance() {
}

FZ_AckQiangJinHua::FZ_AckQiangJinHua(const FZ_AckQiangJinHua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_AckQiangJinHua::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  huasum_ = 0;
  huacard_ = 0;
  left_card_sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_AckQiangJinHua::~FZ_AckQiangJinHua() {
  SharedDtor();
}

void FZ_AckQiangJinHua::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_AckQiangJinHua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_AckQiangJinHua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_AckQiangJinHua_descriptor_;
}

const FZ_AckQiangJinHua& FZ_AckQiangJinHua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_AckQiangJinHua* FZ_AckQiangJinHua::default_instance_ = NULL;

FZ_AckQiangJinHua* FZ_AckQiangJinHua::New() const {
  return new FZ_AckQiangJinHua;
}

void FZ_AckQiangJinHua::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    huasum_ = 0;
    huacard_ = 0;
    left_card_sum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_AckQiangJinHua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaSum;
        break;
      }

      // required int32 HuaSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huasum_)));
          set_has_huasum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaCard;
        break;
      }

      // required int32 HuaCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacard_)));
          set_has_huacard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_card_sum;
        break;
      }

      // optional int32 left_card_sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_sum_)));
          set_has_left_card_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_AckQiangJinHua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huasum(), output);
  }

  // required int32 HuaCard = 3;
  if (has_huacard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huacard(), output);
  }

  // optional int32 left_card_sum = 4;
  if (has_left_card_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_card_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_AckQiangJinHua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huasum(), target);
  }

  // required int32 HuaCard = 3;
  if (has_huacard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huacard(), target);
  }

  // optional int32 left_card_sum = 4;
  if (has_left_card_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_card_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_AckQiangJinHua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // required int32 HuaSum = 2;
    if (has_huasum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huasum());
    }

    // required int32 HuaCard = 3;
    if (has_huacard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacard());
    }

    // optional int32 left_card_sum = 4;
    if (has_left_card_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_AckQiangJinHua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_AckQiangJinHua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_AckQiangJinHua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_AckQiangJinHua::MergeFrom(const FZ_AckQiangJinHua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_huasum()) {
      set_huasum(from.huasum());
    }
    if (from.has_huacard()) {
      set_huacard(from.huacard());
    }
    if (from.has_left_card_sum()) {
      set_left_card_sum(from.left_card_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_AckQiangJinHua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_AckQiangJinHua::CopyFrom(const FZ_AckQiangJinHua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_AckQiangJinHua::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FZ_AckQiangJinHua::Swap(FZ_AckQiangJinHua* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(huasum_, other->huasum_);
    std::swap(huacard_, other->huacard_);
    std::swap(left_card_sum_, other->left_card_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_AckQiangJinHua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_AckQiangJinHua_descriptor_;
  metadata.reflection = FZ_AckQiangJinHua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_AckGetCardJin::kCharidFieldNumber;
const int FZ_AckGetCardJin::kHuaSumFieldNumber;
const int FZ_AckGetCardJin::kHuaCardFieldNumber;
const int FZ_AckGetCardJin::kLeftCardSumFieldNumber;
#endif  // !_MSC_VER

FZ_AckGetCardJin::FZ_AckGetCardJin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_AckGetCardJin::InitAsDefaultInstance() {
}

FZ_AckGetCardJin::FZ_AckGetCardJin(const FZ_AckGetCardJin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_AckGetCardJin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  huasum_ = 0;
  huacard_ = 0;
  left_card_sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_AckGetCardJin::~FZ_AckGetCardJin() {
  SharedDtor();
}

void FZ_AckGetCardJin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_AckGetCardJin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_AckGetCardJin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_AckGetCardJin_descriptor_;
}

const FZ_AckGetCardJin& FZ_AckGetCardJin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_AckGetCardJin* FZ_AckGetCardJin::default_instance_ = NULL;

FZ_AckGetCardJin* FZ_AckGetCardJin::New() const {
  return new FZ_AckGetCardJin;
}

void FZ_AckGetCardJin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    huasum_ = 0;
    huacard_ = 0;
    left_card_sum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_AckGetCardJin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaSum;
        break;
      }

      // required int32 HuaSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huasum_)));
          set_has_huasum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaCard;
        break;
      }

      // required int32 HuaCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacard_)));
          set_has_huacard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_card_sum;
        break;
      }

      // optional int32 left_card_sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_sum_)));
          set_has_left_card_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_AckGetCardJin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huasum(), output);
  }

  // required int32 HuaCard = 3;
  if (has_huacard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huacard(), output);
  }

  // optional int32 left_card_sum = 4;
  if (has_left_card_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_card_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_AckGetCardJin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huasum(), target);
  }

  // required int32 HuaCard = 3;
  if (has_huacard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huacard(), target);
  }

  // optional int32 left_card_sum = 4;
  if (has_left_card_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_card_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_AckGetCardJin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // required int32 HuaSum = 2;
    if (has_huasum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huasum());
    }

    // required int32 HuaCard = 3;
    if (has_huacard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacard());
    }

    // optional int32 left_card_sum = 4;
    if (has_left_card_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_AckGetCardJin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_AckGetCardJin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_AckGetCardJin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_AckGetCardJin::MergeFrom(const FZ_AckGetCardJin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_huasum()) {
      set_huasum(from.huasum());
    }
    if (from.has_huacard()) {
      set_huacard(from.huacard());
    }
    if (from.has_left_card_sum()) {
      set_left_card_sum(from.left_card_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_AckGetCardJin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_AckGetCardJin::CopyFrom(const FZ_AckGetCardJin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_AckGetCardJin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FZ_AckGetCardJin::Swap(FZ_AckGetCardJin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(huasum_, other->huasum_);
    std::swap(huacard_, other->huacard_);
    std::swap(left_card_sum_, other->left_card_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_AckGetCardJin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_AckGetCardJin_descriptor_;
  metadata.reflection = FZ_AckGetCardJin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_HuaCard::kCardFieldNumber;
const int FZ_HuaCard::kCardNumFieldNumber;
#endif  // !_MSC_VER

FZ_HuaCard::FZ_HuaCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_HuaCard::InitAsDefaultInstance() {
}

FZ_HuaCard::FZ_HuaCard(const FZ_HuaCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_HuaCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  card_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_HuaCard::~FZ_HuaCard() {
  SharedDtor();
}

void FZ_HuaCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_HuaCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_HuaCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_HuaCard_descriptor_;
}

const FZ_HuaCard& FZ_HuaCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_HuaCard* FZ_HuaCard::default_instance_ = NULL;

FZ_HuaCard* FZ_HuaCard::New() const {
  return new FZ_HuaCard;
}

void FZ_HuaCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    card_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_HuaCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_num;
        break;
      }

      // required int32 card_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_num_)));
          set_has_card_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_HuaCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // required int32 card_num = 2;
  if (has_card_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_HuaCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // required int32 card_num = 2;
  if (has_card_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_HuaCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // required int32 card_num = 2;
    if (has_card_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_HuaCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_HuaCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_HuaCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_HuaCard::MergeFrom(const FZ_HuaCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_card_num()) {
      set_card_num(from.card_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_HuaCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_HuaCard::CopyFrom(const FZ_HuaCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_HuaCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FZ_HuaCard::Swap(FZ_HuaCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(card_num_, other->card_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_HuaCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_HuaCard_descriptor_;
  metadata.reflection = FZ_HuaCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_GameEnd::kCharidFieldNumber;
const int FZ_GameEnd::kHuaSumFieldNumber;
const int FZ_GameEnd::kJinSumFieldNumber;
const int FZ_GameEnd::kLianZhuangShuFieldNumber;
const int FZ_GameEnd::kGangsumFieldNumber;
const int FZ_GameEnd::kHuaCardFieldNumber;
#endif  // !_MSC_VER

FZ_GameEnd::FZ_GameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_GameEnd::InitAsDefaultInstance() {
}

FZ_GameEnd::FZ_GameEnd(const FZ_GameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_GameEnd::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0;
  huasum_ = 0;
  jinsum_ = 0;
  lianzhuangshu_ = 0;
  gangsum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_GameEnd::~FZ_GameEnd() {
  SharedDtor();
}

void FZ_GameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_GameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_GameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_GameEnd_descriptor_;
}

const FZ_GameEnd& FZ_GameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_GameEnd* FZ_GameEnd::default_instance_ = NULL;

FZ_GameEnd* FZ_GameEnd::New() const {
  return new FZ_GameEnd;
}

void FZ_GameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0;
    huasum_ = 0;
    jinsum_ = 0;
    lianzhuangshu_ = 0;
    gangsum_ = 0;
  }
  huacard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_GameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaSum;
        break;
      }

      // required int32 HuaSum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huasum_)));
          set_has_huasum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JinSum;
        break;
      }

      // required int32 JinSum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JinSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jinsum_)));
          set_has_jinsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LianZhuangShu;
        break;
      }

      // required int32 LianZhuangShu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LianZhuangShu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lianzhuangshu_)));
          set_has_lianzhuangshu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gangsum;
        break;
      }

      // required int32 gangsum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gangsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangsum_)));
          set_has_gangsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_HuaCard;
        break;
      }

      // repeated .proto.game.fuzhoumahjonggame.FZ_HuaCard HuaCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huacard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_HuaCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_GameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charid(), output);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huasum(), output);
  }

  // required int32 JinSum = 3;
  if (has_jinsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jinsum(), output);
  }

  // required int32 LianZhuangShu = 4;
  if (has_lianzhuangshu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lianzhuangshu(), output);
  }

  // required int32 gangsum = 5;
  if (has_gangsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gangsum(), output);
  }

  // repeated .proto.game.fuzhoumahjonggame.FZ_HuaCard HuaCard = 6;
  for (int i = 0; i < this->huacard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->huacard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_GameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charid(), target);
  }

  // required int32 HuaSum = 2;
  if (has_huasum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huasum(), target);
  }

  // required int32 JinSum = 3;
  if (has_jinsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jinsum(), target);
  }

  // required int32 LianZhuangShu = 4;
  if (has_lianzhuangshu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lianzhuangshu(), target);
  }

  // required int32 gangsum = 5;
  if (has_gangsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gangsum(), target);
  }

  // repeated .proto.game.fuzhoumahjonggame.FZ_HuaCard HuaCard = 6;
  for (int i = 0; i < this->huacard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->huacard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_GameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charid());
    }

    // required int32 HuaSum = 2;
    if (has_huasum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huasum());
    }

    // required int32 JinSum = 3;
    if (has_jinsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jinsum());
    }

    // required int32 LianZhuangShu = 4;
    if (has_lianzhuangshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lianzhuangshu());
    }

    // required int32 gangsum = 5;
    if (has_gangsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangsum());
    }

  }
  // repeated .proto.game.fuzhoumahjonggame.FZ_HuaCard HuaCard = 6;
  total_size += 1 * this->huacard_size();
  for (int i = 0; i < this->huacard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huacard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_GameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_GameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_GameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_GameEnd::MergeFrom(const FZ_GameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  huacard_.MergeFrom(from.huacard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_huasum()) {
      set_huasum(from.huasum());
    }
    if (from.has_jinsum()) {
      set_jinsum(from.jinsum());
    }
    if (from.has_lianzhuangshu()) {
      set_lianzhuangshu(from.lianzhuangshu());
    }
    if (from.has_gangsum()) {
      set_gangsum(from.gangsum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_GameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_GameEnd::CopyFrom(const FZ_GameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_GameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < huacard_size(); i++) {
    if (!this->huacard(i).IsInitialized()) return false;
  }
  return true;
}

void FZ_GameEnd::Swap(FZ_GameEnd* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(huasum_, other->huasum_);
    std::swap(jinsum_, other->jinsum_);
    std::swap(lianzhuangshu_, other->lianzhuangshu_);
    std::swap(gangsum_, other->gangsum_);
    huacard_.Swap(&other->huacard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_GameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_GameEnd_descriptor_;
  metadata.reflection = FZ_GameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FZ_GameSence::kHuaPaiNumFieldNumber;
const int FZ_GameSence::kFzTypeFieldNumber;
#endif  // !_MSC_VER

FZ_GameSence::FZ_GameSence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FZ_GameSence::InitAsDefaultInstance() {
}

FZ_GameSence::FZ_GameSence(const FZ_GameSence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FZ_GameSence::SharedCtor() {
  _cached_size_ = 0;
  fz_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FZ_GameSence::~FZ_GameSence() {
  SharedDtor();
}

void FZ_GameSence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FZ_GameSence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FZ_GameSence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FZ_GameSence_descriptor_;
}

const FZ_GameSence& FZ_GameSence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  return *default_instance_;
}

FZ_GameSence* FZ_GameSence::default_instance_ = NULL;

FZ_GameSence* FZ_GameSence::New() const {
  return new FZ_GameSence;
}

void FZ_GameSence::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fz_type_ = 0;
  }
  huapainum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FZ_GameSence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 HuaPaiNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaPaiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_huapainum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huapainum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_HuaPaiNum;
        if (input->ExpectTag(16)) goto parse_fz_type;
        break;
      }

      // optional int32 fz_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fz_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_type_)));
          set_has_fz_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FZ_GameSence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 HuaPaiNum = 1;
  for (int i = 0; i < this->huapainum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->huapainum(i), output);
  }

  // optional int32 fz_type = 2;
  if (has_fz_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fz_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FZ_GameSence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 HuaPaiNum = 1;
  for (int i = 0; i < this->huapainum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->huapainum(i), target);
  }

  // optional int32 fz_type = 2;
  if (has_fz_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fz_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FZ_GameSence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 fz_type = 2;
    if (has_fz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_type());
    }

  }
  // repeated int32 HuaPaiNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->huapainum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huapainum(i));
    }
    total_size += 1 * this->huapainum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FZ_GameSence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FZ_GameSence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FZ_GameSence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FZ_GameSence::MergeFrom(const FZ_GameSence& from) {
  GOOGLE_CHECK_NE(&from, this);
  huapainum_.MergeFrom(from.huapainum_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fz_type()) {
      set_fz_type(from.fz_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FZ_GameSence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FZ_GameSence::CopyFrom(const FZ_GameSence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FZ_GameSence::IsInitialized() const {

  return true;
}

void FZ_GameSence::Swap(FZ_GameSence* other) {
  if (other != this) {
    huapainum_.Swap(&other->huapainum_);
    std::swap(fz_type_, other->fz_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FZ_GameSence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FZ_GameSence_descriptor_;
  metadata.reflection = FZ_GameSence_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fuzhoumahjonggame
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
