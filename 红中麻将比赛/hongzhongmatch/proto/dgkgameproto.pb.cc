// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgkgameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dgkgameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace dgkmj {

namespace {

const ::google::protobuf::Descriptor* AckBroadListentype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadListentype_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDianPaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDianPaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDajiaoReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDajiaoReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDgkGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDgkGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagOpListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagOpListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCustomiedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCustomiedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckQingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckQingInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dgkgameproto_2eproto() {
  protobuf_AddDesc_dgkgameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dgkgameproto.proto");
  GOOGLE_CHECK(file != NULL);
  AckBroadListentype_descriptor_ = file->message_type(0);
  static const int AckBroadListentype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, changeablecards_),
  };
  AckBroadListentype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadListentype_descriptor_,
      AckBroadListentype::default_instance_,
      AckBroadListentype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadListentype));
  tagHuinfo_descriptor_ = file->message_type(1);
  static const int tagHuinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, fantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, fannum_),
  };
  tagHuinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuinfo_descriptor_,
      tagHuinfo::default_instance_,
      tagHuinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuinfo));
  tagUserHuInfo_descriptor_ = file->message_type(2);
  static const int tagUserHuInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hutotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthupai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, stdianpaositid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, stdianpaofan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sitid_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  tagDianPaoInfo_descriptor_ = file->message_type(3);
  static const int tagDianPaoInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, stcard_),
  };
  tagDianPaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDianPaoInfo_descriptor_,
      tagDianPaoInfo::default_instance_,
      tagDianPaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDianPaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDianPaoInfo));
  tagGangReturn_descriptor_ = file->message_type(4);
  static const int tagGangReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, streturngangscore_),
  };
  tagGangReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangReturn_descriptor_,
      tagGangReturn::default_instance_,
      tagGangReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangReturn));
  tagDajiaoReturn_descriptor_ = file->message_type(5);
  static const int tagDajiaoReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, stdajiaoscore_),
  };
  tagDajiaoReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDajiaoReturn_descriptor_,
      tagDajiaoReturn::default_instance_,
      tagDajiaoReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDajiaoReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDajiaoReturn));
  tagDgkGameEnd_descriptor_ = file->message_type(6);
  static const int tagDgkGameEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, stuserhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, stdianpaoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, stdajiaoreturngang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, streturngang_),
  };
  tagDgkGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDgkGameEnd_descriptor_,
      tagDgkGameEnd::default_instance_,
      tagDgkGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDgkGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDgkGameEnd));
  tagOpListenInfo_descriptor_ = file->message_type(7);
  static const int tagOpListenInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, ishaveoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, changeablecards_),
  };
  tagOpListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagOpListenInfo_descriptor_,
      tagOpListenInfo::default_instance_,
      tagOpListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagOpListenInfo));
  AckCustomiedInfo_descriptor_ = file->message_type(8);
  static const int AckCustomiedInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isyipaodouxiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischangecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischeckhuazhudajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ishavepiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, piaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, userpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ispiaoyet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stqinghuinfo_),
  };
  AckCustomiedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCustomiedInfo_descriptor_,
      AckCustomiedInfo::default_instance_,
      AckCustomiedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCustomiedInfo));
  AckQingInfo_descriptor_ = file->message_type(9);
  static const int AckQingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, sitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, type_),
  };
  AckQingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckQingInfo_descriptor_,
      AckQingInfo::default_instance_,
      AckQingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckQingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckQingInfo));
  HUGANG_descriptor_ = file->enum_type(0);
  LISTEN_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dgkgameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadListentype_descriptor_, &AckBroadListentype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuinfo_descriptor_, &tagHuinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDianPaoInfo_descriptor_, &tagDianPaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangReturn_descriptor_, &tagGangReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDajiaoReturn_descriptor_, &tagDajiaoReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDgkGameEnd_descriptor_, &tagDgkGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagOpListenInfo_descriptor_, &tagOpListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCustomiedInfo_descriptor_, &AckCustomiedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckQingInfo_descriptor_, &AckQingInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dgkgameproto_2eproto() {
  delete AckBroadListentype::default_instance_;
  delete AckBroadListentype_reflection_;
  delete tagHuinfo::default_instance_;
  delete tagHuinfo_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete tagDianPaoInfo::default_instance_;
  delete tagDianPaoInfo_reflection_;
  delete tagGangReturn::default_instance_;
  delete tagGangReturn_reflection_;
  delete tagDajiaoReturn::default_instance_;
  delete tagDajiaoReturn_reflection_;
  delete tagDgkGameEnd::default_instance_;
  delete tagDgkGameEnd_reflection_;
  delete tagOpListenInfo::default_instance_;
  delete tagOpListenInfo_reflection_;
  delete AckCustomiedInfo::default_instance_;
  delete AckCustomiedInfo_reflection_;
  delete AckQingInfo::default_instance_;
  delete AckQingInfo_reflection_;
}

void protobuf_AddDesc_dgkgameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022dgkgameproto.proto\022\020proto.game.dgkmj\"R"
    "\n\022AckBroadListentype\022\017\n\007chariid\030\001 \001(\005\022\022\n"
    "\nListenType\030\002 \001(\005\022\027\n\017ChangeableCards\030\003 \003"
    "(\005\",\n\ttagHuinfo\022\017\n\007FanType\030\001 \001(\005\022\016\n\006FanN"
    "um\030\002 \001(\005\"\305\001\n\rtagUserHuInfo\022\024\n\014HuTotalsco"
    "re\030\001 \001(\005\022-\n\010stHuinfo\030\002 \003(\0132\033.proto.game."
    "dgkmj.tagHuinfo\022\017\n\007stHupai\030\003 \001(\005\022\020\n\010stHu"
    "Type\030\004 \001(\005\022\017\n\007stHuFan\030\005 \001(\005\022\026\n\016stDianPao"
    "Sitid\030\006 \001(\005\022\024\n\014stDianPaoFan\030\007 \001(\005\022\r\n\005Sit"
    "id\030\010 \001(\005\" \n\016tagDianPaoInfo\022\016\n\006stCard\030\002 \003"
    "(\005\"9\n\rtagGangReturn\022\r\n\005Sitid\030\001 \001(\005\022\031\n\021st"
    "ReturnGangscore\030\002 \001(\005\"7\n\017tagDajiaoReturn"
    "\022\r\n\005Sitid\030\001 \001(\005\022\025\n\rstDajiaoscore\030\002 \001(\005\"\361"
    "\001\n\rtagDgkGameEnd\0221\n\010stUserHu\030\001 \003(\0132\037.pro"
    "to.game.dgkmj.tagUserHuInfo\0227\n\rstDianPao"
    "Info\030\002 \003(\0132 .proto.game.dgkmj.tagDianPao"
    "Info\022=\n\022stDajiaoReturnGang\030\003 \003(\0132!.proto"
    ".game.dgkmj.tagDajiaoReturn\0225\n\014stReturnG"
    "ang\030\004 \003(\0132\037.proto.game.dgkmj.tagGangRetu"
    "rn\"S\n\017tagOpListenInfo\022\026\n\016isHaveOpListen\030"
    "\001 \001(\005\022\017\n\007ChairID\030\002 \001(\005\022\027\n\017ChangeableCard"
    "s\030\003 \003(\005\"\344\002\n\020AckCustomiedInfo\022\020\n\010gametype"
    "\030\001 \001(\005\022\027\n\017isYipaodouxiang\030\002 \001(\005\022\025\n\risQia"
    "ngganghu\030\003 \001(\005\022\024\n\014isChangeCard\030\004 \001(\005\022\033\n\023"
    "isCheckhuazhudajiao\030\005 \001(\005\022\022\n\nisHavePiao\030"
    "\006 \001(\005\022\020\n\010piaoTime\030\007 \001(\005\022\020\n\010UserPiao\030\010 \003("
    "\005\022\021\n\tIsPiaoyet\030\t \001(\005\022\020\n\010RoomType\030\n \001(\005\022\022"
    "\n\nListenType\030\013 \001(\005\0225\n\nstOpListen\030\014 \003(\0132!"
    ".proto.game.dgkmj.tagOpListenInfo\0223\n\014stQ"
    "ingHuInfo\030\r \003(\0132\035.proto.game.dgkmj.AckQi"
    "ngInfo\"*\n\013AckQingInfo\022\r\n\005sitid\030\001 \001(\005\022\014\n\004"
    "type\030\002 \001(\005*\245\001\n\006HUGANG\022\022\n\016HUGANG_ZHIGANG\020"
    "\002\022\022\n\016HUGANG_WANGANG\020\004\022\021\n\rHUGANG_ANGANG\020\010"
    "\022\022\n\016HUGANG_DIANPAO\020\020\022\020\n\014HUGANG_PAOHU\020 \022\023"
    "\n\017HUGANG_DIANGANG\020@\022\023\n\016HUGANG_BEIZIMO\020\200\001"
    "\022\020\n\013HUGANG_ZIMO\020\200\002*s\n\013LISTEN_TYPE\022\025\n\021LIS"
    "TEN_CARD_NOMAL\020\000\022\027\n\023LISTEN_CARD_BAOTING\020"
    "\001\022\026\n\022LISTEN_CARD_BAIPAI\020\002\022\034\n\030LISTEN_CARD"
    "_FIRST_BAOPAI\020\003", 1535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dgkgameproto.proto", &protobuf_RegisterTypes);
  AckBroadListentype::default_instance_ = new AckBroadListentype();
  tagHuinfo::default_instance_ = new tagHuinfo();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  tagDianPaoInfo::default_instance_ = new tagDianPaoInfo();
  tagGangReturn::default_instance_ = new tagGangReturn();
  tagDajiaoReturn::default_instance_ = new tagDajiaoReturn();
  tagDgkGameEnd::default_instance_ = new tagDgkGameEnd();
  tagOpListenInfo::default_instance_ = new tagOpListenInfo();
  AckCustomiedInfo::default_instance_ = new AckCustomiedInfo();
  AckQingInfo::default_instance_ = new AckQingInfo();
  AckBroadListentype::default_instance_->InitAsDefaultInstance();
  tagHuinfo::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  tagDianPaoInfo::default_instance_->InitAsDefaultInstance();
  tagGangReturn::default_instance_->InitAsDefaultInstance();
  tagDajiaoReturn::default_instance_->InitAsDefaultInstance();
  tagDgkGameEnd::default_instance_->InitAsDefaultInstance();
  tagOpListenInfo::default_instance_->InitAsDefaultInstance();
  AckCustomiedInfo::default_instance_->InitAsDefaultInstance();
  AckQingInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dgkgameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dgkgameproto_2eproto {
  StaticDescriptorInitializer_dgkgameproto_2eproto() {
    protobuf_AddDesc_dgkgameproto_2eproto();
  }
} static_descriptor_initializer_dgkgameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HUGANG_descriptor_;
}
bool HUGANG_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LISTEN_TYPE_descriptor_;
}
bool LISTEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadListentype::kChariidFieldNumber;
const int AckBroadListentype::kListenTypeFieldNumber;
const int AckBroadListentype::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

AckBroadListentype::AckBroadListentype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadListentype::InitAsDefaultInstance() {
}

AckBroadListentype::AckBroadListentype(const AckBroadListentype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadListentype::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  listentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadListentype::~AckBroadListentype() {
  SharedDtor();
}

void AckBroadListentype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadListentype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadListentype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadListentype_descriptor_;
}

const AckBroadListentype& AckBroadListentype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

AckBroadListentype* AckBroadListentype::default_instance_ = NULL;

AckBroadListentype* AckBroadListentype::New() const {
  return new AckBroadListentype;
}

void AckBroadListentype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    listentype_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadListentype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadListentype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->listentype(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadListentype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->listentype(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadListentype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 ListenType = 2;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadListentype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadListentype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadListentype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadListentype::MergeFrom(const AckBroadListentype& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadListentype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadListentype::CopyFrom(const AckBroadListentype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadListentype::IsInitialized() const {

  return true;
}

void AckBroadListentype::Swap(AckBroadListentype* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(listentype_, other->listentype_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadListentype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadListentype_descriptor_;
  metadata.reflection = AckBroadListentype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuinfo::kFanTypeFieldNumber;
const int tagHuinfo::kFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuinfo::tagHuinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuinfo::InitAsDefaultInstance() {
}

tagHuinfo::tagHuinfo(const tagHuinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuinfo::SharedCtor() {
  _cached_size_ = 0;
  fantype_ = 0;
  fannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuinfo::~tagHuinfo() {
  SharedDtor();
}

void tagHuinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuinfo_descriptor_;
}

const tagHuinfo& tagHuinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagHuinfo* tagHuinfo::default_instance_ = NULL;

tagHuinfo* tagHuinfo::New() const {
  return new tagHuinfo;
}

void tagHuinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantype_ = 0;
    fannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FanType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantype_)));
          set_has_fantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FanNum;
        break;
      }

      // optional int32 FanNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 FanType = 1;
  if (has_fantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fantype(), output);
  }

  // optional int32 FanNum = 2;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 FanType = 1;
  if (has_fantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fantype(), target);
  }

  // optional int32 FanNum = 2;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FanType = 1;
    if (has_fantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fantype());
    }

    // optional int32 FanNum = 2;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuinfo::MergeFrom(const tagHuinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantype()) {
      set_fantype(from.fantype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuinfo::CopyFrom(const tagHuinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuinfo::IsInitialized() const {

  return true;
}

void tagHuinfo::Swap(tagHuinfo* other) {
  if (other != this) {
    std::swap(fantype_, other->fantype_);
    std::swap(fannum_, other->fannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuinfo_descriptor_;
  metadata.reflection = tagHuinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuTotalscoreFieldNumber;
const int tagUserHuInfo::kStHuinfoFieldNumber;
const int tagUserHuInfo::kStHupaiFieldNumber;
const int tagUserHuInfo::kStHuTypeFieldNumber;
const int tagUserHuInfo::kStHuFanFieldNumber;
const int tagUserHuInfo::kStDianPaoSitidFieldNumber;
const int tagUserHuInfo::kStDianPaoFanFieldNumber;
const int tagUserHuInfo::kSitidFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  hutotalscore_ = 0;
  sthupai_ = 0;
  sthutype_ = 0;
  sthufan_ = 0;
  stdianpaositid_ = 0;
  stdianpaofan_ = 0;
  sitid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hutotalscore_ = 0;
    sthupai_ = 0;
    sthutype_ = 0;
    sthufan_ = 0;
    stdianpaositid_ = 0;
    stdianpaofan_ = 0;
    sitid_ = 0;
  }
  sthuinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuTotalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hutotalscore_)));
          set_has_hutotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        break;
      }

      // repeated .proto.game.dgkmj.tagHuinfo stHuinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        if (input->ExpectTag(24)) goto parse_stHupai;
        break;
      }

      // optional int32 stHupai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHupai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthupai_)));
          set_has_sthupai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stHuType;
        break;
      }

      // optional int32 stHuType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthutype_)));
          set_has_sthutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stHuFan;
        break;
      }

      // optional int32 stHuFan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stHuFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sthufan_)));
          set_has_sthufan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stDianPaoSitid;
        break;
      }

      // optional int32 stDianPaoSitid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDianPaoSitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdianpaositid_)));
          set_has_stdianpaositid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stDianPaoFan;
        break;
      }

      // optional int32 stDianPaoFan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDianPaoFan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdianpaofan_)));
          set_has_stdianpaofan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Sitid;
        break;
      }

      // optional int32 Sitid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hutotalscore(), output);
  }

  // repeated .proto.game.dgkmj.tagHuinfo stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sthuinfo(i), output);
  }

  // optional int32 stHupai = 3;
  if (has_sthupai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sthupai(), output);
  }

  // optional int32 stHuType = 4;
  if (has_sthutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sthutype(), output);
  }

  // optional int32 stHuFan = 5;
  if (has_sthufan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sthufan(), output);
  }

  // optional int32 stDianPaoSitid = 6;
  if (has_stdianpaositid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stdianpaositid(), output);
  }

  // optional int32 stDianPaoFan = 7;
  if (has_stdianpaofan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stdianpaofan(), output);
  }

  // optional int32 Sitid = 8;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sitid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hutotalscore(), target);
  }

  // repeated .proto.game.dgkmj.tagHuinfo stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sthuinfo(i), target);
  }

  // optional int32 stHupai = 3;
  if (has_sthupai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sthupai(), target);
  }

  // optional int32 stHuType = 4;
  if (has_sthutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sthutype(), target);
  }

  // optional int32 stHuFan = 5;
  if (has_sthufan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sthufan(), target);
  }

  // optional int32 stDianPaoSitid = 6;
  if (has_stdianpaositid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stdianpaositid(), target);
  }

  // optional int32 stDianPaoFan = 7;
  if (has_stdianpaofan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stdianpaofan(), target);
  }

  // optional int32 Sitid = 8;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sitid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuTotalscore = 1;
    if (has_hutotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hutotalscore());
    }

    // optional int32 stHupai = 3;
    if (has_sthupai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthupai());
    }

    // optional int32 stHuType = 4;
    if (has_sthutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthutype());
    }

    // optional int32 stHuFan = 5;
    if (has_sthufan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sthufan());
    }

    // optional int32 stDianPaoSitid = 6;
    if (has_stdianpaositid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdianpaositid());
    }

    // optional int32 stDianPaoFan = 7;
    if (has_stdianpaofan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdianpaofan());
    }

    // optional int32 Sitid = 8;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

  }
  // repeated .proto.game.dgkmj.tagHuinfo stHuinfo = 2;
  total_size += 1 * this->sthuinfo_size();
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthuinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sthuinfo_.MergeFrom(from.sthuinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hutotalscore()) {
      set_hutotalscore(from.hutotalscore());
    }
    if (from.has_sthupai()) {
      set_sthupai(from.sthupai());
    }
    if (from.has_sthutype()) {
      set_sthutype(from.sthutype());
    }
    if (from.has_sthufan()) {
      set_sthufan(from.sthufan());
    }
    if (from.has_stdianpaositid()) {
      set_stdianpaositid(from.stdianpaositid());
    }
    if (from.has_stdianpaofan()) {
      set_stdianpaofan(from.stdianpaofan());
    }
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    std::swap(hutotalscore_, other->hutotalscore_);
    sthuinfo_.Swap(&other->sthuinfo_);
    std::swap(sthupai_, other->sthupai_);
    std::swap(sthutype_, other->sthutype_);
    std::swap(sthufan_, other->sthufan_);
    std::swap(stdianpaositid_, other->stdianpaositid_);
    std::swap(stdianpaofan_, other->stdianpaofan_);
    std::swap(sitid_, other->sitid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDianPaoInfo::kStCardFieldNumber;
#endif  // !_MSC_VER

tagDianPaoInfo::tagDianPaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDianPaoInfo::InitAsDefaultInstance() {
}

tagDianPaoInfo::tagDianPaoInfo(const tagDianPaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDianPaoInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDianPaoInfo::~tagDianPaoInfo() {
  SharedDtor();
}

void tagDianPaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDianPaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDianPaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDianPaoInfo_descriptor_;
}

const tagDianPaoInfo& tagDianPaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagDianPaoInfo* tagDianPaoInfo::default_instance_ = NULL;

tagDianPaoInfo* tagDianPaoInfo::New() const {
  return new tagDianPaoInfo;
}

void tagDianPaoInfo::Clear() {
  stcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDianPaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_stcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDianPaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 stCard = 2;
  for (int i = 0; i < this->stcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->stcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDianPaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 stCard = 2;
  for (int i = 0; i < this->stcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->stcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDianPaoInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 stCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stcard(i));
    }
    total_size += 1 * this->stcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDianPaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDianPaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDianPaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDianPaoInfo::MergeFrom(const tagDianPaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stcard_.MergeFrom(from.stcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDianPaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDianPaoInfo::CopyFrom(const tagDianPaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDianPaoInfo::IsInitialized() const {

  return true;
}

void tagDianPaoInfo::Swap(tagDianPaoInfo* other) {
  if (other != this) {
    stcard_.Swap(&other->stcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDianPaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDianPaoInfo_descriptor_;
  metadata.reflection = tagDianPaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangReturn::kSitidFieldNumber;
const int tagGangReturn::kStReturnGangscoreFieldNumber;
#endif  // !_MSC_VER

tagGangReturn::tagGangReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangReturn::InitAsDefaultInstance() {
}

tagGangReturn::tagGangReturn(const tagGangReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangReturn::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  streturngangscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangReturn::~tagGangReturn() {
  SharedDtor();
}

void tagGangReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangReturn_descriptor_;
}

const tagGangReturn& tagGangReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagGangReturn* tagGangReturn::default_instance_ = NULL;

tagGangReturn* tagGangReturn::New() const {
  return new tagGangReturn;
}

void tagGangReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    streturngangscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stReturnGangscore;
        break;
      }

      // optional int32 stReturnGangscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stReturnGangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streturngangscore_)));
          set_has_streturngangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 stReturnGangscore = 2;
  if (has_streturngangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->streturngangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 stReturnGangscore = 2;
  if (has_streturngangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->streturngangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 stReturnGangscore = 2;
    if (has_streturngangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streturngangscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangReturn::MergeFrom(const tagGangReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_streturngangscore()) {
      set_streturngangscore(from.streturngangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangReturn::CopyFrom(const tagGangReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangReturn::IsInitialized() const {

  return true;
}

void tagGangReturn::Swap(tagGangReturn* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(streturngangscore_, other->streturngangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangReturn_descriptor_;
  metadata.reflection = tagGangReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDajiaoReturn::kSitidFieldNumber;
const int tagDajiaoReturn::kStDajiaoscoreFieldNumber;
#endif  // !_MSC_VER

tagDajiaoReturn::tagDajiaoReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDajiaoReturn::InitAsDefaultInstance() {
}

tagDajiaoReturn::tagDajiaoReturn(const tagDajiaoReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDajiaoReturn::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  stdajiaoscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDajiaoReturn::~tagDajiaoReturn() {
  SharedDtor();
}

void tagDajiaoReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDajiaoReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDajiaoReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDajiaoReturn_descriptor_;
}

const tagDajiaoReturn& tagDajiaoReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagDajiaoReturn* tagDajiaoReturn::default_instance_ = NULL;

tagDajiaoReturn* tagDajiaoReturn::New() const {
  return new tagDajiaoReturn;
}

void tagDajiaoReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    stdajiaoscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDajiaoReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stDajiaoscore;
        break;
      }

      // optional int32 stDajiaoscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stDajiaoscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stdajiaoscore_)));
          set_has_stdajiaoscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDajiaoReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 stDajiaoscore = 2;
  if (has_stdajiaoscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stdajiaoscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDajiaoReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 stDajiaoscore = 2;
  if (has_stdajiaoscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stdajiaoscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDajiaoReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 stDajiaoscore = 2;
    if (has_stdajiaoscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stdajiaoscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDajiaoReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDajiaoReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDajiaoReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDajiaoReturn::MergeFrom(const tagDajiaoReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_stdajiaoscore()) {
      set_stdajiaoscore(from.stdajiaoscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDajiaoReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDajiaoReturn::CopyFrom(const tagDajiaoReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDajiaoReturn::IsInitialized() const {

  return true;
}

void tagDajiaoReturn::Swap(tagDajiaoReturn* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(stdajiaoscore_, other->stdajiaoscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDajiaoReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDajiaoReturn_descriptor_;
  metadata.reflection = tagDajiaoReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDgkGameEnd::kStUserHuFieldNumber;
const int tagDgkGameEnd::kStDianPaoInfoFieldNumber;
const int tagDgkGameEnd::kStDajiaoReturnGangFieldNumber;
const int tagDgkGameEnd::kStReturnGangFieldNumber;
#endif  // !_MSC_VER

tagDgkGameEnd::tagDgkGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDgkGameEnd::InitAsDefaultInstance() {
}

tagDgkGameEnd::tagDgkGameEnd(const tagDgkGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDgkGameEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDgkGameEnd::~tagDgkGameEnd() {
  SharedDtor();
}

void tagDgkGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDgkGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDgkGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDgkGameEnd_descriptor_;
}

const tagDgkGameEnd& tagDgkGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagDgkGameEnd* tagDgkGameEnd::default_instance_ = NULL;

tagDgkGameEnd* tagDgkGameEnd::New() const {
  return new tagDgkGameEnd;
}

void tagDgkGameEnd::Clear() {
  stuserhu_.Clear();
  stdianpaoinfo_.Clear();
  stdajiaoreturngang_.Clear();
  streturngang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDgkGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.dgkmj.tagUserHuInfo stUserHu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserHu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuserhu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUserHu;
        if (input->ExpectTag(18)) goto parse_stDianPaoInfo;
        break;
      }

      // repeated .proto.game.dgkmj.tagDianPaoInfo stDianPaoInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stDianPaoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdianpaoinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stDianPaoInfo;
        if (input->ExpectTag(26)) goto parse_stDajiaoReturnGang;
        break;
      }

      // repeated .proto.game.dgkmj.tagDajiaoReturn stDajiaoReturnGang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stDajiaoReturnGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdajiaoreturngang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stDajiaoReturnGang;
        if (input->ExpectTag(34)) goto parse_stReturnGang;
        break;
      }

      // repeated .proto.game.dgkmj.tagGangReturn stReturnGang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReturnGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_streturngang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stReturnGang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDgkGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.dgkmj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stuserhu(i), output);
  }

  // repeated .proto.game.dgkmj.tagDianPaoInfo stDianPaoInfo = 2;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stdianpaoinfo(i), output);
  }

  // repeated .proto.game.dgkmj.tagDajiaoReturn stDajiaoReturnGang = 3;
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stdajiaoreturngang(i), output);
  }

  // repeated .proto.game.dgkmj.tagGangReturn stReturnGang = 4;
  for (int i = 0; i < this->streturngang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->streturngang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDgkGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.dgkmj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stuserhu(i), target);
  }

  // repeated .proto.game.dgkmj.tagDianPaoInfo stDianPaoInfo = 2;
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stdianpaoinfo(i), target);
  }

  // repeated .proto.game.dgkmj.tagDajiaoReturn stDajiaoReturnGang = 3;
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stdajiaoreturngang(i), target);
  }

  // repeated .proto.game.dgkmj.tagGangReturn stReturnGang = 4;
  for (int i = 0; i < this->streturngang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->streturngang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDgkGameEnd::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.dgkmj.tagUserHuInfo stUserHu = 1;
  total_size += 1 * this->stuserhu_size();
  for (int i = 0; i < this->stuserhu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuserhu(i));
  }

  // repeated .proto.game.dgkmj.tagDianPaoInfo stDianPaoInfo = 2;
  total_size += 1 * this->stdianpaoinfo_size();
  for (int i = 0; i < this->stdianpaoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdianpaoinfo(i));
  }

  // repeated .proto.game.dgkmj.tagDajiaoReturn stDajiaoReturnGang = 3;
  total_size += 1 * this->stdajiaoreturngang_size();
  for (int i = 0; i < this->stdajiaoreturngang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdajiaoreturngang(i));
  }

  // repeated .proto.game.dgkmj.tagGangReturn stReturnGang = 4;
  total_size += 1 * this->streturngang_size();
  for (int i = 0; i < this->streturngang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streturngang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDgkGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDgkGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDgkGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDgkGameEnd::MergeFrom(const tagDgkGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stuserhu_.MergeFrom(from.stuserhu_);
  stdianpaoinfo_.MergeFrom(from.stdianpaoinfo_);
  stdajiaoreturngang_.MergeFrom(from.stdajiaoreturngang_);
  streturngang_.MergeFrom(from.streturngang_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDgkGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDgkGameEnd::CopyFrom(const tagDgkGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDgkGameEnd::IsInitialized() const {

  return true;
}

void tagDgkGameEnd::Swap(tagDgkGameEnd* other) {
  if (other != this) {
    stuserhu_.Swap(&other->stuserhu_);
    stdianpaoinfo_.Swap(&other->stdianpaoinfo_);
    stdajiaoreturngang_.Swap(&other->stdajiaoreturngang_);
    streturngang_.Swap(&other->streturngang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDgkGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDgkGameEnd_descriptor_;
  metadata.reflection = tagDgkGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagOpListenInfo::kIsHaveOpListenFieldNumber;
const int tagOpListenInfo::kChairIDFieldNumber;
const int tagOpListenInfo::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

tagOpListenInfo::tagOpListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagOpListenInfo::InitAsDefaultInstance() {
}

tagOpListenInfo::tagOpListenInfo(const tagOpListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagOpListenInfo::SharedCtor() {
  _cached_size_ = 0;
  ishaveoplisten_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagOpListenInfo::~tagOpListenInfo() {
  SharedDtor();
}

void tagOpListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagOpListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagOpListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagOpListenInfo_descriptor_;
}

const tagOpListenInfo& tagOpListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

tagOpListenInfo* tagOpListenInfo::default_instance_ = NULL;

tagOpListenInfo* tagOpListenInfo::New() const {
  return new tagOpListenInfo;
}

void tagOpListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishaveoplisten_ = 0;
    chairid_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagOpListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isHaveOpListen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishaveoplisten_)));
          set_has_ishaveoplisten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChairID;
        break;
      }

      // optional int32 ChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagOpListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishaveoplisten(), output);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagOpListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishaveoplisten(), target);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagOpListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isHaveOpListen = 1;
    if (has_ishaveoplisten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishaveoplisten());
    }

    // optional int32 ChairID = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagOpListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagOpListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagOpListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagOpListenInfo::MergeFrom(const tagOpListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishaveoplisten()) {
      set_ishaveoplisten(from.ishaveoplisten());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagOpListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagOpListenInfo::CopyFrom(const tagOpListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagOpListenInfo::IsInitialized() const {

  return true;
}

void tagOpListenInfo::Swap(tagOpListenInfo* other) {
  if (other != this) {
    std::swap(ishaveoplisten_, other->ishaveoplisten_);
    std::swap(chairid_, other->chairid_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagOpListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagOpListenInfo_descriptor_;
  metadata.reflection = tagOpListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCustomiedInfo::kGametypeFieldNumber;
const int AckCustomiedInfo::kIsYipaodouxiangFieldNumber;
const int AckCustomiedInfo::kIsQiangganghuFieldNumber;
const int AckCustomiedInfo::kIsChangeCardFieldNumber;
const int AckCustomiedInfo::kIsCheckhuazhudajiaoFieldNumber;
const int AckCustomiedInfo::kIsHavePiaoFieldNumber;
const int AckCustomiedInfo::kPiaoTimeFieldNumber;
const int AckCustomiedInfo::kUserPiaoFieldNumber;
const int AckCustomiedInfo::kIsPiaoyetFieldNumber;
const int AckCustomiedInfo::kRoomTypeFieldNumber;
const int AckCustomiedInfo::kListenTypeFieldNumber;
const int AckCustomiedInfo::kStOpListenFieldNumber;
const int AckCustomiedInfo::kStQingHuInfoFieldNumber;
#endif  // !_MSC_VER

AckCustomiedInfo::AckCustomiedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCustomiedInfo::InitAsDefaultInstance() {
}

AckCustomiedInfo::AckCustomiedInfo(const AckCustomiedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCustomiedInfo::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  isyipaodouxiang_ = 0;
  isqiangganghu_ = 0;
  ischangecard_ = 0;
  ischeckhuazhudajiao_ = 0;
  ishavepiao_ = 0;
  piaotime_ = 0;
  ispiaoyet_ = 0;
  roomtype_ = 0;
  listentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCustomiedInfo::~AckCustomiedInfo() {
  SharedDtor();
}

void AckCustomiedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCustomiedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCustomiedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCustomiedInfo_descriptor_;
}

const AckCustomiedInfo& AckCustomiedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

AckCustomiedInfo* AckCustomiedInfo::default_instance_ = NULL;

AckCustomiedInfo* AckCustomiedInfo::New() const {
  return new AckCustomiedInfo;
}

void AckCustomiedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    isyipaodouxiang_ = 0;
    isqiangganghu_ = 0;
    ischangecard_ = 0;
    ischeckhuazhudajiao_ = 0;
    ishavepiao_ = 0;
    piaotime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ispiaoyet_ = 0;
    roomtype_ = 0;
    listentype_ = 0;
  }
  userpiao_.Clear();
  stoplisten_.Clear();
  stqinghuinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCustomiedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isYipaodouxiang;
        break;
      }

      // optional int32 isYipaodouxiang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYipaodouxiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isyipaodouxiang_)));
          set_has_isyipaodouxiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isQiangganghu;
        break;
      }

      // optional int32 isQiangganghu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqiangganghu_)));
          set_has_isqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isChangeCard;
        break;
      }

      // optional int32 isChangeCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischangecard_)));
          set_has_ischangecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCheckhuazhudajiao;
        break;
      }

      // optional int32 isCheckhuazhudajiao = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCheckhuazhudajiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischeckhuazhudajiao_)));
          set_has_ischeckhuazhudajiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHavePiao;
        break;
      }

      // optional int32 isHavePiao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHavePiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishavepiao_)));
          set_has_ishavepiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piaoTime;
        break;
      }

      // optional int32 piaoTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaotime_)));
          set_has_piaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        break;
      }

      // repeated int32 UserPiao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_userpiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        if (input->ExpectTag(72)) goto parse_IsPiaoyet;
        break;
      }

      // optional int32 IsPiaoyet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPiaoyet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispiaoyet_)));
          set_has_ispiaoyet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomType;
        break;
      }

      // optional int32 RoomType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        break;
      }

      // repeated .proto.game.dgkmj.tagOpListenInfo stOpListen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOpListen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoplisten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        if (input->ExpectTag(106)) goto parse_stQingHuInfo;
        break;
      }

      // repeated .proto.game.dgkmj.AckQingInfo stQingHuInfo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stQingHuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stqinghuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_stQingHuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCustomiedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isyipaodouxiang(), output);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isqiangganghu(), output);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ischangecard(), output);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ischeckhuazhudajiao(), output);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ishavepiao(), output);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->piaotime(), output);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->userpiao(i), output);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ispiaoyet(), output);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roomtype(), output);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->listentype(), output);
  }

  // repeated .proto.game.dgkmj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stoplisten(i), output);
  }

  // repeated .proto.game.dgkmj.AckQingInfo stQingHuInfo = 13;
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stqinghuinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCustomiedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isyipaodouxiang(), target);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isqiangganghu(), target);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ischangecard(), target);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ischeckhuazhudajiao(), target);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ishavepiao(), target);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->piaotime(), target);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->userpiao(i), target);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ispiaoyet(), target);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roomtype(), target);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->listentype(), target);
  }

  // repeated .proto.game.dgkmj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stoplisten(i), target);
  }

  // repeated .proto.game.dgkmj.AckQingInfo stQingHuInfo = 13;
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stqinghuinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCustomiedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional int32 isYipaodouxiang = 2;
    if (has_isyipaodouxiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isyipaodouxiang());
    }

    // optional int32 isQiangganghu = 3;
    if (has_isqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqiangganghu());
    }

    // optional int32 isChangeCard = 4;
    if (has_ischangecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischangecard());
    }

    // optional int32 isCheckhuazhudajiao = 5;
    if (has_ischeckhuazhudajiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischeckhuazhudajiao());
    }

    // optional int32 isHavePiao = 6;
    if (has_ishavepiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishavepiao());
    }

    // optional int32 piaoTime = 7;
    if (has_piaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaotime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 IsPiaoyet = 9;
    if (has_ispiaoyet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispiaoyet());
    }

    // optional int32 RoomType = 10;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 ListenType = 11;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

  }
  // repeated int32 UserPiao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpiao(i));
    }
    total_size += 1 * this->userpiao_size() + data_size;
  }

  // repeated .proto.game.dgkmj.tagOpListenInfo stOpListen = 12;
  total_size += 1 * this->stoplisten_size();
  for (int i = 0; i < this->stoplisten_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoplisten(i));
  }

  // repeated .proto.game.dgkmj.AckQingInfo stQingHuInfo = 13;
  total_size += 1 * this->stqinghuinfo_size();
  for (int i = 0; i < this->stqinghuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stqinghuinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCustomiedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCustomiedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCustomiedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCustomiedInfo::MergeFrom(const AckCustomiedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpiao_.MergeFrom(from.userpiao_);
  stoplisten_.MergeFrom(from.stoplisten_);
  stqinghuinfo_.MergeFrom(from.stqinghuinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isyipaodouxiang()) {
      set_isyipaodouxiang(from.isyipaodouxiang());
    }
    if (from.has_isqiangganghu()) {
      set_isqiangganghu(from.isqiangganghu());
    }
    if (from.has_ischangecard()) {
      set_ischangecard(from.ischangecard());
    }
    if (from.has_ischeckhuazhudajiao()) {
      set_ischeckhuazhudajiao(from.ischeckhuazhudajiao());
    }
    if (from.has_ishavepiao()) {
      set_ishavepiao(from.ishavepiao());
    }
    if (from.has_piaotime()) {
      set_piaotime(from.piaotime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ispiaoyet()) {
      set_ispiaoyet(from.ispiaoyet());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCustomiedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCustomiedInfo::CopyFrom(const AckCustomiedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCustomiedInfo::IsInitialized() const {

  return true;
}

void AckCustomiedInfo::Swap(AckCustomiedInfo* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(isyipaodouxiang_, other->isyipaodouxiang_);
    std::swap(isqiangganghu_, other->isqiangganghu_);
    std::swap(ischangecard_, other->ischangecard_);
    std::swap(ischeckhuazhudajiao_, other->ischeckhuazhudajiao_);
    std::swap(ishavepiao_, other->ishavepiao_);
    std::swap(piaotime_, other->piaotime_);
    userpiao_.Swap(&other->userpiao_);
    std::swap(ispiaoyet_, other->ispiaoyet_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(listentype_, other->listentype_);
    stoplisten_.Swap(&other->stoplisten_);
    stqinghuinfo_.Swap(&other->stqinghuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCustomiedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCustomiedInfo_descriptor_;
  metadata.reflection = AckCustomiedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckQingInfo::kSitidFieldNumber;
const int AckQingInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

AckQingInfo::AckQingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckQingInfo::InitAsDefaultInstance() {
}

AckQingInfo::AckQingInfo(const AckQingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckQingInfo::SharedCtor() {
  _cached_size_ = 0;
  sitid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckQingInfo::~AckQingInfo() {
  SharedDtor();
}

void AckQingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckQingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckQingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckQingInfo_descriptor_;
}

const AckQingInfo& AckQingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgkgameproto_2eproto();
  return *default_instance_;
}

AckQingInfo* AckQingInfo::default_instance_ = NULL;

AckQingInfo* AckQingInfo::New() const {
  return new AckQingInfo;
}

void AckQingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sitid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckQingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sitid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitid_)));
          set_has_sitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckQingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sitid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckQingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sitid = 1;
  if (has_sitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sitid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckQingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sitid = 1;
    if (has_sitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckQingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckQingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckQingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckQingInfo::MergeFrom(const AckQingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sitid()) {
      set_sitid(from.sitid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckQingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQingInfo::CopyFrom(const AckQingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQingInfo::IsInitialized() const {

  return true;
}

void AckQingInfo::Swap(AckQingInfo* other) {
  if (other != this) {
    std::swap(sitid_, other->sitid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckQingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckQingInfo_descriptor_;
  metadata.reflection = AckQingInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dgkmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
