// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sichuangameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sichuangameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace scmj {

namespace {

const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChooseListen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChooseListen_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadListentype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadListentype_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndGangHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndGangHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuazhudajiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuazhudajiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagScGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagScGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagOpListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagOpListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCustomiedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCustomiedInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sichuangameproto_2eproto() {
  protobuf_AddDesc_sichuangameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sichuangameproto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqChoosePiao_descriptor_ = file->message_type(0);
  static const int ReqChoosePiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  ReqChooseListen_descriptor_ = file->message_type(1);
  static const int ReqChooseListen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseListen, listentype_),
  };
  ReqChooseListen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChooseListen_descriptor_,
      ReqChooseListen::default_instance_,
      ReqChooseListen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseListen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseListen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChooseListen));
  AckStartPiao_descriptor_ = file->message_type(2);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  AckBroadPiao_descriptor_ = file->message_type(3);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, userpiao_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
  AckBroadListentype_descriptor_ = file->message_type(4);
  static const int AckBroadListentype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, chariid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, changeablecards_),
  };
  AckBroadListentype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadListentype_descriptor_,
      AckBroadListentype::default_instance_,
      AckBroadListentype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadListentype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadListentype));
  tagGangHu_descriptor_ = file->message_type(5);
  static const int tagGangHu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, score_),
  };
  tagGangHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangHu_descriptor_,
      tagGangHu::default_instance_,
      tagGangHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangHu));
  tagEndGangHu_descriptor_ = file->message_type(6);
  static const int tagEndGangHu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, ganghu_),
  };
  tagEndGangHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndGangHu_descriptor_,
      tagEndGangHu::default_instance_,
      tagEndGangHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndGangHu));
  tagHu_descriptor_ = file->message_type(7);
  static const int tagHu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, pashuchairid_),
  };
  tagHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHu_descriptor_,
      tagHu::default_instance_,
      tagHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHu));
  tagUserHuInfo_descriptor_ = file->message_type(8);
  static const int tagUserHuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hutotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, sthuinfo_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  tagHuazhudajiao_descriptor_ = file->message_type(9);
  static const int tagHuazhudajiao_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuazhudajiao, ishuazhudajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuazhudajiao, huazhuscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuazhudajiao, dajiaoscore_),
  };
  tagHuazhudajiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuazhudajiao_descriptor_,
      tagHuazhudajiao::default_instance_,
      tagHuazhudajiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuazhudajiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuazhudajiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuazhudajiao));
  ReturnGangInfo_descriptor_ = file->message_type(10);
  static const int ReturnGangInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, returngangscore_),
  };
  ReturnGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnGangInfo_descriptor_,
      ReturnGangInfo::default_instance_,
      ReturnGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnGangInfo));
  tagScGameEnd_descriptor_ = file->message_type(11);
  static const int tagScGameEnd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, stuserhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, returngangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, huazhudajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, piaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, biswinscorefengding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, listendouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, userhurank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, bhufanfengding_),
  };
  tagScGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagScGameEnd_descriptor_,
      tagScGameEnd::default_instance_,
      tagScGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagScGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagScGameEnd));
  tagOpListenInfo_descriptor_ = file->message_type(12);
  static const int tagOpListenInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, ishaveoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, changeablecards_),
  };
  tagOpListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagOpListenInfo_descriptor_,
      tagOpListenInfo::default_instance_,
      tagOpListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagOpListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagOpListenInfo));
  AckCustomiedInfo_descriptor_ = file->message_type(13);
  static const int AckCustomiedInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isyipaodouxiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, isqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischangecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ischeckhuazhudajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ishavepiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, piaotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, userpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, ispiaoyet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, listentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, stoplisten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, curjoker_),
  };
  AckCustomiedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCustomiedInfo_descriptor_,
      AckCustomiedInfo::default_instance_,
      AckCustomiedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCustomiedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCustomiedInfo));
  HUGANG_descriptor_ = file->enum_type(0);
  LISTEN_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sichuangameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChooseListen_descriptor_, &ReqChooseListen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadListentype_descriptor_, &AckBroadListentype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangHu_descriptor_, &tagGangHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndGangHu_descriptor_, &tagEndGangHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHu_descriptor_, &tagHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuazhudajiao_descriptor_, &tagHuazhudajiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnGangInfo_descriptor_, &ReturnGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagScGameEnd_descriptor_, &tagScGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagOpListenInfo_descriptor_, &tagOpListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCustomiedInfo_descriptor_, &AckCustomiedInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sichuangameproto_2eproto() {
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete ReqChooseListen::default_instance_;
  delete ReqChooseListen_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
  delete AckBroadListentype::default_instance_;
  delete AckBroadListentype_reflection_;
  delete tagGangHu::default_instance_;
  delete tagGangHu_reflection_;
  delete tagEndGangHu::default_instance_;
  delete tagEndGangHu_reflection_;
  delete tagHu::default_instance_;
  delete tagHu_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete tagHuazhudajiao::default_instance_;
  delete tagHuazhudajiao_reflection_;
  delete ReturnGangInfo::default_instance_;
  delete ReturnGangInfo_reflection_;
  delete tagScGameEnd::default_instance_;
  delete tagScGameEnd_reflection_;
  delete tagOpListenInfo::default_instance_;
  delete tagOpListenInfo_reflection_;
  delete AckCustomiedInfo::default_instance_;
  delete AckCustomiedInfo_reflection_;
}

void protobuf_AddDesc_sichuangameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026sichuangameproto.proto\022\017proto.game.scm"
    "j\" \n\rReqChoosePiao\022\017\n\007PiaoNum\030\001 \001(\005\"%\n\017R"
    "eqChooseListen\022\022\n\nListenType\030\001 \001(\005\"\037\n\014Ac"
    "kStartPiao\022\017\n\007piaoNum\030\001 \003(\005\"1\n\014AckBroadP"
    "iao\022\017\n\007chariid\030\001 \001(\005\022\020\n\010UserPiao\030\002 \001(\005\"R"
    "\n\022AckBroadListentype\022\017\n\007chariid\030\001 \001(\005\022\022\n"
    "\nListenType\030\002 \001(\005\022\027\n\017ChangeableCards\030\003 \003"
    "(\005\"G\n\ttagGangHu\022\014\n\004Type\030\001 \001(\005\022\017\n\007Chairid"
    "\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\":\n\014t"
    "agEndGangHu\022*\n\006GangHu\030\001 \003(\0132\032.proto.game"
    ".scmj.tagGangHu\"-\n\005tagHu\022\016\n\006Hucard\030\001 \001(\005"
    "\022\024\n\014pasHuchairid\030\002 \001(\005\"O\n\rtagUserHuInfo\022"
    "\024\n\014HuTotalscore\030\001 \001(\005\022(\n\010stHuinfo\030\002 \003(\0132"
    "\026.proto.game.scmj.tagHu\"S\n\017tagHuazhudaji"
    "ao\022\026\n\016ishuazhudajiao\030\001 \001(\005\022\023\n\013Huazhuscor"
    "e\030\002 \001(\005\022\023\n\013Dajiaoscore\030\003 \001(\005\"F\n\016ReturnGa"
    "ngInfo\022\r\n\005State\030\001 \003(\005\022\014\n\004Card\030\002 \003(\005\022\027\n\017R"
    "eturngangscore\030\003 \003(\005\"\323\002\n\014tagScGameEnd\0220\n"
    "\010stUserHu\030\001 \003(\0132\036.proto.game.scmj.tagUse"
    "rHuInfo\022/\n\010GangInfo\030\002 \003(\0132\035.proto.game.s"
    "cmj.tagEndGangHu\0228\n\017Returngangscore\030\003 \003("
    "\0132\037.proto.game.scmj.ReturnGangInfo\0226\n\014Hu"
    "azhudajiao\030\004 \003(\0132 .proto.game.scmj.tagHu"
    "azhudajiao\022\017\n\007piaoNum\030\005 \003(\005\022\033\n\023bIsWinSco"
    "reFengding\030\006 \003(\005\022\024\n\014ListenDouble\030\007 \003(\005\022\022"
    "\n\nUserHuRank\030\010 \003(\005\022\026\n\016bHuFanFengding\030\t \003"
    "(\005\"S\n\017tagOpListenInfo\022\026\n\016isHaveOpListen\030"
    "\001 \001(\005\022\017\n\007ChairID\030\002 \001(\005\022\027\n\017ChangeableCard"
    "s\030\003 \003(\005\"\300\002\n\020AckCustomiedInfo\022\020\n\010gametype"
    "\030\001 \001(\005\022\027\n\017isYipaodouxiang\030\002 \001(\005\022\025\n\risQia"
    "ngganghu\030\003 \001(\005\022\024\n\014isChangeCard\030\004 \001(\005\022\033\n\023"
    "isCheckhuazhudajiao\030\005 \001(\005\022\022\n\nisHavePiao\030"
    "\006 \001(\005\022\020\n\010piaoTime\030\007 \001(\005\022\020\n\010UserPiao\030\010 \003("
    "\005\022\021\n\tIsPiaoyet\030\t \001(\005\022\020\n\010RoomType\030\n \001(\005\022\022"
    "\n\nListenType\030\013 \001(\005\0224\n\nstOpListen\030\014 \003(\0132 "
    ".proto.game.scmj.tagOpListenInfo\022\020\n\010CurJ"
    "oker\030\r \001(\005*\245\001\n\006HUGANG\022\022\n\016HUGANG_ZHIGANG\020"
    "\002\022\022\n\016HUGANG_WANGANG\020\004\022\021\n\rHUGANG_ANGANG\020\010"
    "\022\022\n\016HUGANG_DIANPAO\020\020\022\020\n\014HUGANG_PAOHU\020 \022\023"
    "\n\017HUGANG_DIANGANG\020@\022\023\n\016HUGANG_BEIZIMO\020\200\001"
    "\022\020\n\013HUGANG_ZIMO\020\200\002*s\n\013LISTEN_TYPE\022\025\n\021LIS"
    "TEN_CARD_NOMAL\020\000\022\027\n\023LISTEN_CARD_BAOTING\020"
    "\001\022\026\n\022LISTEN_CARD_BAIPAI\020\002\022\034\n\030LISTEN_CARD"
    "_FIRST_BAOPAI\020\003", 1735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sichuangameproto.proto", &protobuf_RegisterTypes);
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  ReqChooseListen::default_instance_ = new ReqChooseListen();
  AckStartPiao::default_instance_ = new AckStartPiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  AckBroadListentype::default_instance_ = new AckBroadListentype();
  tagGangHu::default_instance_ = new tagGangHu();
  tagEndGangHu::default_instance_ = new tagEndGangHu();
  tagHu::default_instance_ = new tagHu();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  tagHuazhudajiao::default_instance_ = new tagHuazhudajiao();
  ReturnGangInfo::default_instance_ = new ReturnGangInfo();
  tagScGameEnd::default_instance_ = new tagScGameEnd();
  tagOpListenInfo::default_instance_ = new tagOpListenInfo();
  AckCustomiedInfo::default_instance_ = new AckCustomiedInfo();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  ReqChooseListen::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  AckBroadListentype::default_instance_->InitAsDefaultInstance();
  tagGangHu::default_instance_->InitAsDefaultInstance();
  tagEndGangHu::default_instance_->InitAsDefaultInstance();
  tagHu::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  tagHuazhudajiao::default_instance_->InitAsDefaultInstance();
  ReturnGangInfo::default_instance_->InitAsDefaultInstance();
  tagScGameEnd::default_instance_->InitAsDefaultInstance();
  tagOpListenInfo::default_instance_->InitAsDefaultInstance();
  AckCustomiedInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sichuangameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sichuangameproto_2eproto {
  StaticDescriptorInitializer_sichuangameproto_2eproto() {
    protobuf_AddDesc_sichuangameproto_2eproto();
  }
} static_descriptor_initializer_sichuangameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* HUGANG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HUGANG_descriptor_;
}
bool HUGANG_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LISTEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LISTEN_TYPE_descriptor_;
}
bool LISTEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    piaonum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PiaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PiaoNum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PiaoNum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChooseListen::kListenTypeFieldNumber;
#endif  // !_MSC_VER

ReqChooseListen::ReqChooseListen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChooseListen::InitAsDefaultInstance() {
}

ReqChooseListen::ReqChooseListen(const ReqChooseListen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChooseListen::SharedCtor() {
  _cached_size_ = 0;
  listentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChooseListen::~ReqChooseListen() {
  SharedDtor();
}

void ReqChooseListen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChooseListen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChooseListen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChooseListen_descriptor_;
}

const ReqChooseListen& ReqChooseListen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

ReqChooseListen* ReqChooseListen::default_instance_ = NULL;

ReqChooseListen* ReqChooseListen::New() const {
  return new ReqChooseListen;
}

void ReqChooseListen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listentype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChooseListen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ListenType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChooseListen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ListenType = 1;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->listentype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChooseListen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ListenType = 1;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->listentype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChooseListen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ListenType = 1;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChooseListen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChooseListen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChooseListen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChooseListen::MergeFrom(const ReqChooseListen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChooseListen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChooseListen::CopyFrom(const ReqChooseListen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChooseListen::IsInitialized() const {

  return true;
}

void ReqChooseListen::Swap(ReqChooseListen* other) {
  if (other != this) {
    std::swap(listentype_, other->listentype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChooseListen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChooseListen_descriptor_;
  metadata.reflection = ReqChooseListen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaoNumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaoNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_piaoNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 piaoNum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaoNum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChariidFieldNumber;
const int AckBroadPiao::kUserPiaoFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  userpiao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    userpiao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserPiao;
        break;
      }

      // optional int32 UserPiao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userpiao_)));
          set_has_userpiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userpiao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 UserPiao = 2;
  if (has_userpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userpiao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 UserPiao = 2;
    if (has_userpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userpiao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_userpiao()) {
      set_userpiao(from.userpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(userpiao_, other->userpiao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadListentype::kChariidFieldNumber;
const int AckBroadListentype::kListenTypeFieldNumber;
const int AckBroadListentype::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

AckBroadListentype::AckBroadListentype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadListentype::InitAsDefaultInstance() {
}

AckBroadListentype::AckBroadListentype(const AckBroadListentype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadListentype::SharedCtor() {
  _cached_size_ = 0;
  chariid_ = 0;
  listentype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadListentype::~AckBroadListentype() {
  SharedDtor();
}

void AckBroadListentype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadListentype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadListentype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadListentype_descriptor_;
}

const AckBroadListentype& AckBroadListentype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

AckBroadListentype* AckBroadListentype::default_instance_ = NULL;

AckBroadListentype* AckBroadListentype::New() const {
  return new AckBroadListentype;
}

void AckBroadListentype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chariid_ = 0;
    listentype_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadListentype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chariid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chariid_)));
          set_has_chariid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadListentype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chariid(), output);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->listentype(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadListentype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chariid = 1;
  if (has_chariid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chariid(), target);
  }

  // optional int32 ListenType = 2;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->listentype(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadListentype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chariid = 1;
    if (has_chariid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chariid());
    }

    // optional int32 ListenType = 2;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadListentype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadListentype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadListentype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadListentype::MergeFrom(const AckBroadListentype& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chariid()) {
      set_chariid(from.chariid());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadListentype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadListentype::CopyFrom(const AckBroadListentype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadListentype::IsInitialized() const {

  return true;
}

void AckBroadListentype::Swap(AckBroadListentype* other) {
  if (other != this) {
    std::swap(chariid_, other->chariid_);
    std::swap(listentype_, other->listentype_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadListentype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadListentype_descriptor_;
  metadata.reflection = AckBroadListentype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangHu::kTypeFieldNumber;
const int tagGangHu::kChairidFieldNumber;
const int tagGangHu::kCardFieldNumber;
const int tagGangHu::kScoreFieldNumber;
#endif  // !_MSC_VER

tagGangHu::tagGangHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangHu::InitAsDefaultInstance() {
}

tagGangHu::tagGangHu(const tagGangHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangHu::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  chairid_ = 0;
  card_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangHu::~tagGangHu() {
  SharedDtor();
}

void tagGangHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangHu_descriptor_;
}

const tagGangHu& tagGangHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagGangHu* tagGangHu::default_instance_ = NULL;

tagGangHu* tagGangHu::New() const {
  return new tagGangHu;
}

void tagGangHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    chairid_ = 0;
    card_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Chairid;
        break;
      }

      // optional int32 Chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangHu::MergeFrom(const tagGangHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangHu::CopyFrom(const tagGangHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangHu::IsInitialized() const {

  return true;
}

void tagGangHu::Swap(tagGangHu* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(chairid_, other->chairid_);
    std::swap(card_, other->card_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangHu_descriptor_;
  metadata.reflection = tagGangHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndGangHu::kGangHuFieldNumber;
#endif  // !_MSC_VER

tagEndGangHu::tagEndGangHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagEndGangHu::InitAsDefaultInstance() {
}

tagEndGangHu::tagEndGangHu(const tagEndGangHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagEndGangHu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndGangHu::~tagEndGangHu() {
  SharedDtor();
}

void tagEndGangHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndGangHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndGangHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndGangHu_descriptor_;
}

const tagEndGangHu& tagEndGangHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagEndGangHu* tagEndGangHu::default_instance_ = NULL;

tagEndGangHu* tagEndGangHu::New() const {
  return new tagEndGangHu;
}

void tagEndGangHu::Clear() {
  ganghu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndGangHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.scmj.tagGangHu GangHu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GangHu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganghu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GangHu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagEndGangHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.scmj.tagGangHu GangHu = 1;
  for (int i = 0; i < this->ganghu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ganghu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagEndGangHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.scmj.tagGangHu GangHu = 1;
  for (int i = 0; i < this->ganghu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ganghu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagEndGangHu::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.scmj.tagGangHu GangHu = 1;
  total_size += 1 * this->ganghu_size();
  for (int i = 0; i < this->ganghu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganghu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndGangHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndGangHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndGangHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndGangHu::MergeFrom(const tagEndGangHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganghu_.MergeFrom(from.ganghu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndGangHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndGangHu::CopyFrom(const tagEndGangHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndGangHu::IsInitialized() const {

  return true;
}

void tagEndGangHu::Swap(tagEndGangHu* other) {
  if (other != this) {
    ganghu_.Swap(&other->ganghu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndGangHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndGangHu_descriptor_;
  metadata.reflection = tagEndGangHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHu::kHucardFieldNumber;
const int tagHu::kPasHuchairidFieldNumber;
#endif  // !_MSC_VER

tagHu::tagHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHu::InitAsDefaultInstance() {
}

tagHu::tagHu(const tagHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHu::SharedCtor() {
  _cached_size_ = 0;
  hucard_ = 0;
  pashuchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHu::~tagHu() {
  SharedDtor();
}

void tagHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHu_descriptor_;
}

const tagHu& tagHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagHu* tagHu::default_instance_ = NULL;

tagHu* tagHu::New() const {
  return new tagHu;
}

void tagHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hucard_ = 0;
    pashuchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Hucard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pasHuchairid;
        break;
      }

      // optional int32 pasHuchairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pasHuchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchairid_)));
          set_has_pashuchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Hucard = 1;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hucard(), output);
  }

  // optional int32 pasHuchairid = 2;
  if (has_pashuchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Hucard = 1;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hucard(), target);
  }

  // optional int32 pasHuchairid = 2;
  if (has_pashuchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Hucard = 1;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 pasHuchairid = 2;
    if (has_pashuchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHu::MergeFrom(const tagHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_pashuchairid()) {
      set_pashuchairid(from.pashuchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHu::CopyFrom(const tagHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHu::IsInitialized() const {

  return true;
}

void tagHu::Swap(tagHu* other) {
  if (other != this) {
    std::swap(hucard_, other->hucard_);
    std::swap(pashuchairid_, other->pashuchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHu_descriptor_;
  metadata.reflection = tagHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuTotalscoreFieldNumber;
const int tagUserHuInfo::kStHuinfoFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  hutotalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hutotalscore_ = 0;
  }
  sthuinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuTotalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hutotalscore_)));
          set_has_hutotalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        break;
      }

      // repeated .proto.game.scmj.tagHu stHuinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stHuinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hutotalscore(), output);
  }

  // repeated .proto.game.scmj.tagHu stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sthuinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuTotalscore = 1;
  if (has_hutotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hutotalscore(), target);
  }

  // repeated .proto.game.scmj.tagHu stHuinfo = 2;
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sthuinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuTotalscore = 1;
    if (has_hutotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hutotalscore());
    }

  }
  // repeated .proto.game.scmj.tagHu stHuinfo = 2;
  total_size += 1 * this->sthuinfo_size();
  for (int i = 0; i < this->sthuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthuinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sthuinfo_.MergeFrom(from.sthuinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hutotalscore()) {
      set_hutotalscore(from.hutotalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    std::swap(hutotalscore_, other->hutotalscore_);
    sthuinfo_.Swap(&other->sthuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuazhudajiao::kIshuazhudajiaoFieldNumber;
const int tagHuazhudajiao::kHuazhuscoreFieldNumber;
const int tagHuazhudajiao::kDajiaoscoreFieldNumber;
#endif  // !_MSC_VER

tagHuazhudajiao::tagHuazhudajiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuazhudajiao::InitAsDefaultInstance() {
}

tagHuazhudajiao::tagHuazhudajiao(const tagHuazhudajiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuazhudajiao::SharedCtor() {
  _cached_size_ = 0;
  ishuazhudajiao_ = 0;
  huazhuscore_ = 0;
  dajiaoscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuazhudajiao::~tagHuazhudajiao() {
  SharedDtor();
}

void tagHuazhudajiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuazhudajiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuazhudajiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuazhudajiao_descriptor_;
}

const tagHuazhudajiao& tagHuazhudajiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagHuazhudajiao* tagHuazhudajiao::default_instance_ = NULL;

tagHuazhudajiao* tagHuazhudajiao::New() const {
  return new tagHuazhudajiao;
}

void tagHuazhudajiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishuazhudajiao_ = 0;
    huazhuscore_ = 0;
    dajiaoscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuazhudajiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ishuazhudajiao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishuazhudajiao_)));
          set_has_ishuazhudajiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Huazhuscore;
        break;
      }

      // optional int32 Huazhuscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Huazhuscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huazhuscore_)));
          set_has_huazhuscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Dajiaoscore;
        break;
      }

      // optional int32 Dajiaoscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dajiaoscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dajiaoscore_)));
          set_has_dajiaoscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuazhudajiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ishuazhudajiao = 1;
  if (has_ishuazhudajiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishuazhudajiao(), output);
  }

  // optional int32 Huazhuscore = 2;
  if (has_huazhuscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huazhuscore(), output);
  }

  // optional int32 Dajiaoscore = 3;
  if (has_dajiaoscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dajiaoscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuazhudajiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ishuazhudajiao = 1;
  if (has_ishuazhudajiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishuazhudajiao(), target);
  }

  // optional int32 Huazhuscore = 2;
  if (has_huazhuscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huazhuscore(), target);
  }

  // optional int32 Dajiaoscore = 3;
  if (has_dajiaoscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dajiaoscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuazhudajiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ishuazhudajiao = 1;
    if (has_ishuazhudajiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishuazhudajiao());
    }

    // optional int32 Huazhuscore = 2;
    if (has_huazhuscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huazhuscore());
    }

    // optional int32 Dajiaoscore = 3;
    if (has_dajiaoscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dajiaoscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuazhudajiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuazhudajiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuazhudajiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuazhudajiao::MergeFrom(const tagHuazhudajiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishuazhudajiao()) {
      set_ishuazhudajiao(from.ishuazhudajiao());
    }
    if (from.has_huazhuscore()) {
      set_huazhuscore(from.huazhuscore());
    }
    if (from.has_dajiaoscore()) {
      set_dajiaoscore(from.dajiaoscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuazhudajiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuazhudajiao::CopyFrom(const tagHuazhudajiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuazhudajiao::IsInitialized() const {

  return true;
}

void tagHuazhudajiao::Swap(tagHuazhudajiao* other) {
  if (other != this) {
    std::swap(ishuazhudajiao_, other->ishuazhudajiao_);
    std::swap(huazhuscore_, other->huazhuscore_);
    std::swap(dajiaoscore_, other->dajiaoscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuazhudajiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuazhudajiao_descriptor_;
  metadata.reflection = tagHuazhudajiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnGangInfo::kStateFieldNumber;
const int ReturnGangInfo::kCardFieldNumber;
const int ReturnGangInfo::kReturngangscoreFieldNumber;
#endif  // !_MSC_VER

ReturnGangInfo::ReturnGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnGangInfo::InitAsDefaultInstance() {
}

ReturnGangInfo::ReturnGangInfo(const ReturnGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnGangInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnGangInfo::~ReturnGangInfo() {
  SharedDtor();
}

void ReturnGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnGangInfo_descriptor_;
}

const ReturnGangInfo& ReturnGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

ReturnGangInfo* ReturnGangInfo::default_instance_ = NULL;

ReturnGangInfo* ReturnGangInfo::New() const {
  return new ReturnGangInfo;
}

void ReturnGangInfo::Clear() {
  state_.Clear();
  card_.Clear();
  returngangscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 State = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_State;
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectTag(24)) goto parse_Returngangscore;
        break;
      }

      // repeated int32 Returngangscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Returngangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_returngangscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_returngangscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Returngangscore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 State = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->state(i), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated int32 Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->returngangscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 State = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->state(i), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated int32 Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->returngangscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnGangInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 State = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 Returngangscore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->returngangscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->returngangscore(i));
    }
    total_size += 1 * this->returngangscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnGangInfo::MergeFrom(const ReturnGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  card_.MergeFrom(from.card_);
  returngangscore_.MergeFrom(from.returngangscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnGangInfo::CopyFrom(const ReturnGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnGangInfo::IsInitialized() const {

  return true;
}

void ReturnGangInfo::Swap(ReturnGangInfo* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    card_.Swap(&other->card_);
    returngangscore_.Swap(&other->returngangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnGangInfo_descriptor_;
  metadata.reflection = ReturnGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagScGameEnd::kStUserHuFieldNumber;
const int tagScGameEnd::kGangInfoFieldNumber;
const int tagScGameEnd::kReturngangscoreFieldNumber;
const int tagScGameEnd::kHuazhudajiaoFieldNumber;
const int tagScGameEnd::kPiaoNumFieldNumber;
const int tagScGameEnd::kBIsWinScoreFengdingFieldNumber;
const int tagScGameEnd::kListenDoubleFieldNumber;
const int tagScGameEnd::kUserHuRankFieldNumber;
const int tagScGameEnd::kBHuFanFengdingFieldNumber;
#endif  // !_MSC_VER

tagScGameEnd::tagScGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagScGameEnd::InitAsDefaultInstance() {
}

tagScGameEnd::tagScGameEnd(const tagScGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagScGameEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagScGameEnd::~tagScGameEnd() {
  SharedDtor();
}

void tagScGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagScGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagScGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagScGameEnd_descriptor_;
}

const tagScGameEnd& tagScGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagScGameEnd* tagScGameEnd::default_instance_ = NULL;

tagScGameEnd* tagScGameEnd::New() const {
  return new tagScGameEnd;
}

void tagScGameEnd::Clear() {
  stuserhu_.Clear();
  ganginfo_.Clear();
  returngangscore_.Clear();
  huazhudajiao_.Clear();
  piaonum_.Clear();
  biswinscorefengding_.Clear();
  listendouble_.Clear();
  userhurank_.Clear();
  bhufanfengding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagScGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.scmj.tagUserHuInfo stUserHu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserHu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuserhu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUserHu;
        if (input->ExpectTag(18)) goto parse_GangInfo;
        break;
      }

      // repeated .proto.game.scmj.tagEndGangHu GangInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GangInfo;
        if (input->ExpectTag(26)) goto parse_Returngangscore;
        break;
      }

      // repeated .proto.game.scmj.ReturnGangInfo Returngangscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Returngangscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_returngangscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Returngangscore;
        if (input->ExpectTag(34)) goto parse_Huazhudajiao;
        break;
      }

      // repeated .proto.game.scmj.tagHuazhudajiao Huazhudajiao = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Huazhudajiao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huazhudajiao()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Huazhudajiao;
        if (input->ExpectTag(40)) goto parse_piaoNum;
        break;
      }

      // repeated int32 piaoNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_piaonum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_piaoNum;
        if (input->ExpectTag(48)) goto parse_bIsWinScoreFengding;
        break;
      }

      // repeated int32 bIsWinScoreFengding = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsWinScoreFengding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_biswinscorefengding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_biswinscorefengding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bIsWinScoreFengding;
        if (input->ExpectTag(56)) goto parse_ListenDouble;
        break;
      }

      // repeated int32 ListenDouble = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_listendouble())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listendouble())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ListenDouble;
        if (input->ExpectTag(64)) goto parse_UserHuRank;
        break;
      }

      // repeated int32 UserHuRank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserHuRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_userhurank())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userhurank())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserHuRank;
        if (input->ExpectTag(72)) goto parse_bHuFanFengding;
        break;
      }

      // repeated int32 bHuFanFengding = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHuFanFengding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bhufanfengding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bhufanfengding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bHuFanFengding;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagScGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.scmj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stuserhu(i), output);
  }

  // repeated .proto.game.scmj.tagEndGangHu GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ganginfo(i), output);
  }

  // repeated .proto.game.scmj.ReturnGangInfo Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->returngangscore(i), output);
  }

  // repeated .proto.game.scmj.tagHuazhudajiao Huazhudajiao = 4;
  for (int i = 0; i < this->huazhudajiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->huazhudajiao(i), output);
  }

  // repeated int32 piaoNum = 5;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->piaonum(i), output);
  }

  // repeated int32 bIsWinScoreFengding = 6;
  for (int i = 0; i < this->biswinscorefengding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->biswinscorefengding(i), output);
  }

  // repeated int32 ListenDouble = 7;
  for (int i = 0; i < this->listendouble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->listendouble(i), output);
  }

  // repeated int32 UserHuRank = 8;
  for (int i = 0; i < this->userhurank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->userhurank(i), output);
  }

  // repeated int32 bHuFanFengding = 9;
  for (int i = 0; i < this->bhufanfengding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bhufanfengding(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagScGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.scmj.tagUserHuInfo stUserHu = 1;
  for (int i = 0; i < this->stuserhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stuserhu(i), target);
  }

  // repeated .proto.game.scmj.tagEndGangHu GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ganginfo(i), target);
  }

  // repeated .proto.game.scmj.ReturnGangInfo Returngangscore = 3;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->returngangscore(i), target);
  }

  // repeated .proto.game.scmj.tagHuazhudajiao Huazhudajiao = 4;
  for (int i = 0; i < this->huazhudajiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->huazhudajiao(i), target);
  }

  // repeated int32 piaoNum = 5;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->piaonum(i), target);
  }

  // repeated int32 bIsWinScoreFengding = 6;
  for (int i = 0; i < this->biswinscorefengding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->biswinscorefengding(i), target);
  }

  // repeated int32 ListenDouble = 7;
  for (int i = 0; i < this->listendouble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->listendouble(i), target);
  }

  // repeated int32 UserHuRank = 8;
  for (int i = 0; i < this->userhurank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->userhurank(i), target);
  }

  // repeated int32 bHuFanFengding = 9;
  for (int i = 0; i < this->bhufanfengding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bhufanfengding(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagScGameEnd::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.scmj.tagUserHuInfo stUserHu = 1;
  total_size += 1 * this->stuserhu_size();
  for (int i = 0; i < this->stuserhu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuserhu(i));
  }

  // repeated .proto.game.scmj.tagEndGangHu GangInfo = 2;
  total_size += 1 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated .proto.game.scmj.ReturnGangInfo Returngangscore = 3;
  total_size += 1 * this->returngangscore_size();
  for (int i = 0; i < this->returngangscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->returngangscore(i));
  }

  // repeated .proto.game.scmj.tagHuazhudajiao Huazhudajiao = 4;
  total_size += 1 * this->huazhudajiao_size();
  for (int i = 0; i < this->huazhudajiao_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huazhudajiao(i));
  }

  // repeated int32 piaoNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  // repeated int32 bIsWinScoreFengding = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->biswinscorefengding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->biswinscorefengding(i));
    }
    total_size += 1 * this->biswinscorefengding_size() + data_size;
  }

  // repeated int32 ListenDouble = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->listendouble_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listendouble(i));
    }
    total_size += 1 * this->listendouble_size() + data_size;
  }

  // repeated int32 UserHuRank = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->userhurank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userhurank(i));
    }
    total_size += 1 * this->userhurank_size() + data_size;
  }

  // repeated int32 bHuFanFengding = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bhufanfengding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bhufanfengding(i));
    }
    total_size += 1 * this->bhufanfengding_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagScGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagScGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagScGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagScGameEnd::MergeFrom(const tagScGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stuserhu_.MergeFrom(from.stuserhu_);
  ganginfo_.MergeFrom(from.ganginfo_);
  returngangscore_.MergeFrom(from.returngangscore_);
  huazhudajiao_.MergeFrom(from.huazhudajiao_);
  piaonum_.MergeFrom(from.piaonum_);
  biswinscorefengding_.MergeFrom(from.biswinscorefengding_);
  listendouble_.MergeFrom(from.listendouble_);
  userhurank_.MergeFrom(from.userhurank_);
  bhufanfengding_.MergeFrom(from.bhufanfengding_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagScGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagScGameEnd::CopyFrom(const tagScGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagScGameEnd::IsInitialized() const {

  return true;
}

void tagScGameEnd::Swap(tagScGameEnd* other) {
  if (other != this) {
    stuserhu_.Swap(&other->stuserhu_);
    ganginfo_.Swap(&other->ganginfo_);
    returngangscore_.Swap(&other->returngangscore_);
    huazhudajiao_.Swap(&other->huazhudajiao_);
    piaonum_.Swap(&other->piaonum_);
    biswinscorefengding_.Swap(&other->biswinscorefengding_);
    listendouble_.Swap(&other->listendouble_);
    userhurank_.Swap(&other->userhurank_);
    bhufanfengding_.Swap(&other->bhufanfengding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagScGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagScGameEnd_descriptor_;
  metadata.reflection = tagScGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagOpListenInfo::kIsHaveOpListenFieldNumber;
const int tagOpListenInfo::kChairIDFieldNumber;
const int tagOpListenInfo::kChangeableCardsFieldNumber;
#endif  // !_MSC_VER

tagOpListenInfo::tagOpListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagOpListenInfo::InitAsDefaultInstance() {
}

tagOpListenInfo::tagOpListenInfo(const tagOpListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagOpListenInfo::SharedCtor() {
  _cached_size_ = 0;
  ishaveoplisten_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagOpListenInfo::~tagOpListenInfo() {
  SharedDtor();
}

void tagOpListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagOpListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagOpListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagOpListenInfo_descriptor_;
}

const tagOpListenInfo& tagOpListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

tagOpListenInfo* tagOpListenInfo::default_instance_ = NULL;

tagOpListenInfo* tagOpListenInfo::New() const {
  return new tagOpListenInfo;
}

void tagOpListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ishaveoplisten_ = 0;
    chairid_ = 0;
  }
  changeablecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagOpListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isHaveOpListen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishaveoplisten_)));
          set_has_ishaveoplisten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChairID;
        break;
      }

      // optional int32 ChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeableCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagOpListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ishaveoplisten(), output);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->changeablecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagOpListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isHaveOpListen = 1;
  if (has_ishaveoplisten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ishaveoplisten(), target);
  }

  // optional int32 ChairID = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // repeated int32 ChangeableCards = 3;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->changeablecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagOpListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isHaveOpListen = 1;
    if (has_ishaveoplisten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishaveoplisten());
    }

    // optional int32 ChairID = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 ChangeableCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagOpListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagOpListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagOpListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagOpListenInfo::MergeFrom(const tagOpListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishaveoplisten()) {
      set_ishaveoplisten(from.ishaveoplisten());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagOpListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagOpListenInfo::CopyFrom(const tagOpListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagOpListenInfo::IsInitialized() const {

  return true;
}

void tagOpListenInfo::Swap(tagOpListenInfo* other) {
  if (other != this) {
    std::swap(ishaveoplisten_, other->ishaveoplisten_);
    std::swap(chairid_, other->chairid_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagOpListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagOpListenInfo_descriptor_;
  metadata.reflection = tagOpListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCustomiedInfo::kGametypeFieldNumber;
const int AckCustomiedInfo::kIsYipaodouxiangFieldNumber;
const int AckCustomiedInfo::kIsQiangganghuFieldNumber;
const int AckCustomiedInfo::kIsChangeCardFieldNumber;
const int AckCustomiedInfo::kIsCheckhuazhudajiaoFieldNumber;
const int AckCustomiedInfo::kIsHavePiaoFieldNumber;
const int AckCustomiedInfo::kPiaoTimeFieldNumber;
const int AckCustomiedInfo::kUserPiaoFieldNumber;
const int AckCustomiedInfo::kIsPiaoyetFieldNumber;
const int AckCustomiedInfo::kRoomTypeFieldNumber;
const int AckCustomiedInfo::kListenTypeFieldNumber;
const int AckCustomiedInfo::kStOpListenFieldNumber;
const int AckCustomiedInfo::kCurJokerFieldNumber;
#endif  // !_MSC_VER

AckCustomiedInfo::AckCustomiedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCustomiedInfo::InitAsDefaultInstance() {
}

AckCustomiedInfo::AckCustomiedInfo(const AckCustomiedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCustomiedInfo::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  isyipaodouxiang_ = 0;
  isqiangganghu_ = 0;
  ischangecard_ = 0;
  ischeckhuazhudajiao_ = 0;
  ishavepiao_ = 0;
  piaotime_ = 0;
  ispiaoyet_ = 0;
  roomtype_ = 0;
  listentype_ = 0;
  curjoker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCustomiedInfo::~AckCustomiedInfo() {
  SharedDtor();
}

void AckCustomiedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCustomiedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCustomiedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCustomiedInfo_descriptor_;
}

const AckCustomiedInfo& AckCustomiedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sichuangameproto_2eproto();
  return *default_instance_;
}

AckCustomiedInfo* AckCustomiedInfo::default_instance_ = NULL;

AckCustomiedInfo* AckCustomiedInfo::New() const {
  return new AckCustomiedInfo;
}

void AckCustomiedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    isyipaodouxiang_ = 0;
    isqiangganghu_ = 0;
    ischangecard_ = 0;
    ischeckhuazhudajiao_ = 0;
    ishavepiao_ = 0;
    piaotime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ispiaoyet_ = 0;
    roomtype_ = 0;
    listentype_ = 0;
    curjoker_ = 0;
  }
  userpiao_.Clear();
  stoplisten_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCustomiedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isYipaodouxiang;
        break;
      }

      // optional int32 isYipaodouxiang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYipaodouxiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isyipaodouxiang_)));
          set_has_isyipaodouxiang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isQiangganghu;
        break;
      }

      // optional int32 isQiangganghu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqiangganghu_)));
          set_has_isqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isChangeCard;
        break;
      }

      // optional int32 isChangeCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChangeCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischangecard_)));
          set_has_ischangecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCheckhuazhudajiao;
        break;
      }

      // optional int32 isCheckhuazhudajiao = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCheckhuazhudajiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischeckhuazhudajiao_)));
          set_has_ischeckhuazhudajiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHavePiao;
        break;
      }

      // optional int32 isHavePiao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHavePiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishavepiao_)));
          set_has_ishavepiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piaoTime;
        break;
      }

      // optional int32 piaoTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaotime_)));
          set_has_piaotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        break;
      }

      // repeated int32 UserPiao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserPiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_userpiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserPiao;
        if (input->ExpectTag(72)) goto parse_IsPiaoyet;
        break;
      }

      // optional int32 IsPiaoyet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPiaoyet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispiaoyet_)));
          set_has_ispiaoyet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RoomType;
        break;
      }

      // optional int32 RoomType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ListenType;
        break;
      }

      // optional int32 ListenType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ListenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listentype_)));
          set_has_listentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        break;
      }

      // repeated .proto.game.scmj.tagOpListenInfo stOpListen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOpListen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoplisten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_stOpListen;
        if (input->ExpectTag(104)) goto parse_CurJoker;
        break;
      }

      // optional int32 CurJoker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjoker_)));
          set_has_curjoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCustomiedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isyipaodouxiang(), output);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isqiangganghu(), output);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ischangecard(), output);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ischeckhuazhudajiao(), output);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ishavepiao(), output);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->piaotime(), output);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->userpiao(i), output);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ispiaoyet(), output);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roomtype(), output);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->listentype(), output);
  }

  // repeated .proto.game.scmj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stoplisten(i), output);
  }

  // optional int32 CurJoker = 13;
  if (has_curjoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->curjoker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCustomiedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }

  // optional int32 isYipaodouxiang = 2;
  if (has_isyipaodouxiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isyipaodouxiang(), target);
  }

  // optional int32 isQiangganghu = 3;
  if (has_isqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isqiangganghu(), target);
  }

  // optional int32 isChangeCard = 4;
  if (has_ischangecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ischangecard(), target);
  }

  // optional int32 isCheckhuazhudajiao = 5;
  if (has_ischeckhuazhudajiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ischeckhuazhudajiao(), target);
  }

  // optional int32 isHavePiao = 6;
  if (has_ishavepiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ishavepiao(), target);
  }

  // optional int32 piaoTime = 7;
  if (has_piaotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->piaotime(), target);
  }

  // repeated int32 UserPiao = 8;
  for (int i = 0; i < this->userpiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->userpiao(i), target);
  }

  // optional int32 IsPiaoyet = 9;
  if (has_ispiaoyet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ispiaoyet(), target);
  }

  // optional int32 RoomType = 10;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roomtype(), target);
  }

  // optional int32 ListenType = 11;
  if (has_listentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->listentype(), target);
  }

  // repeated .proto.game.scmj.tagOpListenInfo stOpListen = 12;
  for (int i = 0; i < this->stoplisten_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stoplisten(i), target);
  }

  // optional int32 CurJoker = 13;
  if (has_curjoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->curjoker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCustomiedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional int32 isYipaodouxiang = 2;
    if (has_isyipaodouxiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isyipaodouxiang());
    }

    // optional int32 isQiangganghu = 3;
    if (has_isqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqiangganghu());
    }

    // optional int32 isChangeCard = 4;
    if (has_ischangecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischangecard());
    }

    // optional int32 isCheckhuazhudajiao = 5;
    if (has_ischeckhuazhudajiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischeckhuazhudajiao());
    }

    // optional int32 isHavePiao = 6;
    if (has_ishavepiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishavepiao());
    }

    // optional int32 piaoTime = 7;
    if (has_piaotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaotime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 IsPiaoyet = 9;
    if (has_ispiaoyet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispiaoyet());
    }

    // optional int32 RoomType = 10;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 ListenType = 11;
    if (has_listentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listentype());
    }

    // optional int32 CurJoker = 13;
    if (has_curjoker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjoker());
    }

  }
  // repeated int32 UserPiao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpiao(i));
    }
    total_size += 1 * this->userpiao_size() + data_size;
  }

  // repeated .proto.game.scmj.tagOpListenInfo stOpListen = 12;
  total_size += 1 * this->stoplisten_size();
  for (int i = 0; i < this->stoplisten_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoplisten(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCustomiedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCustomiedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCustomiedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCustomiedInfo::MergeFrom(const AckCustomiedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpiao_.MergeFrom(from.userpiao_);
  stoplisten_.MergeFrom(from.stoplisten_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isyipaodouxiang()) {
      set_isyipaodouxiang(from.isyipaodouxiang());
    }
    if (from.has_isqiangganghu()) {
      set_isqiangganghu(from.isqiangganghu());
    }
    if (from.has_ischangecard()) {
      set_ischangecard(from.ischangecard());
    }
    if (from.has_ischeckhuazhudajiao()) {
      set_ischeckhuazhudajiao(from.ischeckhuazhudajiao());
    }
    if (from.has_ishavepiao()) {
      set_ishavepiao(from.ishavepiao());
    }
    if (from.has_piaotime()) {
      set_piaotime(from.piaotime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ispiaoyet()) {
      set_ispiaoyet(from.ispiaoyet());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_listentype()) {
      set_listentype(from.listentype());
    }
    if (from.has_curjoker()) {
      set_curjoker(from.curjoker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCustomiedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCustomiedInfo::CopyFrom(const AckCustomiedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCustomiedInfo::IsInitialized() const {

  return true;
}

void AckCustomiedInfo::Swap(AckCustomiedInfo* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(isyipaodouxiang_, other->isyipaodouxiang_);
    std::swap(isqiangganghu_, other->isqiangganghu_);
    std::swap(ischangecard_, other->ischangecard_);
    std::swap(ischeckhuazhudajiao_, other->ischeckhuazhudajiao_);
    std::swap(ishavepiao_, other->ishavepiao_);
    std::swap(piaotime_, other->piaotime_);
    userpiao_.Swap(&other->userpiao_);
    std::swap(ispiaoyet_, other->ispiaoyet_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(listentype_, other->listentype_);
    stoplisten_.Swap(&other->stoplisten_);
    std::swap(curjoker_, other->curjoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCustomiedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCustomiedInfo_descriptor_;
  metadata.reflection = AckCustomiedInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scmj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
