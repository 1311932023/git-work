// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

namespace {

const ::google::protobuf::Descriptor* FixedCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChooseLackType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChooseLackType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqIsAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqIsAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChooseDisband_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChooseDisband_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGroupCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGroupCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagReadyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagReadyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFirstHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFirstHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuaPaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuaPaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstFlowerHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstFlowerHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHuaPai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHuaPai_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEnSureJoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEnSureJoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFirstHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFirstHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFlowerHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFlowerHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserLackType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserLackType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserLackTypeOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserLackTypeOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPreGangs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPreGangs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserGetCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserGetCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagShowOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagShowOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBcOpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBcOpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckListenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckListenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Horse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Horse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHorseCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHorseCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGameEndGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGameEndGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGameEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGameEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIsAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIsAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPoolMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPoolMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckWinPoolMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckWinPoolMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStartFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStartFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandChooseFaild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandChooseFaild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandChooseBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandChooseBc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOnlineState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOnlineState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOvertimeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOvertimeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateWaite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateWaite_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCheckHandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCheckHandCards_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameproto_2eproto() {
  protobuf_AddDesc_gameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameproto.proto");
  GOOGLE_CHECK(file != NULL);
  FixedCard_descriptor_ = file->message_type(0);
  static const int FixedCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, chairid_),
  };
  FixedCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedCard_descriptor_,
      FixedCard::default_instance_,
      FixedCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedCard));
  HandCards_descriptor_ = file->message_type(1);
  static const int HandCards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, fixedcardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, stfixedcards_),
  };
  HandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandCards_descriptor_,
      HandCards::default_instance_,
      HandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandCards));
  tagPlayers_descriptor_ = file->message_type(2);
  static const int tagPlayers_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, avatar_),
  };
  tagPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayers_descriptor_,
      tagPlayers::default_instance_,
      tagPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayers));
  ReqAction_descriptor_ = file->message_type(3);
  static const int ReqAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, action_),
  };
  ReqAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAction_descriptor_,
      ReqAction::default_instance_,
      ReqAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAction));
  ReqChangeCard_descriptor_ = file->message_type(4);
  static const int ReqChangeCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, ischange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, card_),
  };
  ReqChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeCard_descriptor_,
      ReqChangeCard::default_instance_,
      ReqChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeCard));
  ReqChooseLackType_descriptor_ = file->message_type(5);
  static const int ReqChooseLackType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, type_),
  };
  ReqChooseLackType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChooseLackType_descriptor_,
      ReqChooseLackType::default_instance_,
      ReqChooseLackType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseLackType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChooseLackType));
  ReqOutCard_descriptor_ = file->message_type(6);
  static const int ReqOutCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, showcard_),
  };
  ReqOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOutCard_descriptor_,
      ReqOutCard::default_instance_,
      ReqOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOutCard));
  ReqOperateResult_descriptor_ = file->message_type(7);
  static const int ReqOperateResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, card_),
  };
  ReqOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOperateResult_descriptor_,
      ReqOperateResult::default_instance_,
      ReqOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOperateResult));
  ReqIsAuto_descriptor_ = file->message_type(8);
  static const int ReqIsAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, isauto_),
  };
  ReqIsAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqIsAuto_descriptor_,
      ReqIsAuto::default_instance_,
      ReqIsAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqIsAuto));
  ReqUpdateUserInfo_descriptor_ = file->message_type(9);
  static const int ReqUpdateUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, vid_),
  };
  ReqUpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpdateUserInfo_descriptor_,
      ReqUpdateUserInfo::default_instance_,
      ReqUpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpdateUserInfo));
  ReqRoomInfo_descriptor_ = file->message_type(10);
  static const int ReqRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, skey_),
  };
  ReqRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRoomInfo_descriptor_,
      ReqRoomInfo::default_instance_,
      ReqRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRoomInfo));
  ReqChooseDisband_descriptor_ = file->message_type(11);
  static const int ReqChooseDisband_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, choosestate_),
  };
  ReqChooseDisband_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChooseDisband_descriptor_,
      ReqChooseDisband::default_instance_,
      ReqChooseDisband_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChooseDisband));
  tagHu_descriptor_ = file->message_type(12);
  static const int tagHu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, pashuchiarid_),
  };
  tagHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHu_descriptor_,
      tagHu::default_instance_,
      tagHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHu));
  tagUserHuInfo_descriptor_ = file->message_type(13);
  static const int tagUserHuInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hu_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  tagGangInfo_descriptor_ = file->message_type(14);
  static const int tagGangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, state_),
  };
  tagGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangInfo_descriptor_,
      tagGangInfo::default_instance_,
      tagGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangInfo));
  tagGroupCard_descriptor_ = file->message_type(15);
  static const int tagGroupCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, fixedcard_),
  };
  tagGroupCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGroupCard_descriptor_,
      tagGroupCard::default_instance_,
      tagGroupCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGroupCard));
  tagReadyInfo_descriptor_ = file->message_type(16);
  static const int tagReadyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, remainreadytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, readytime_),
  };
  tagReadyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagReadyInfo_descriptor_,
      tagReadyInfo::default_instance_,
      tagReadyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagReadyInfo));
  AckGameScene_descriptor_ = file->message_type(17);
  static const int AckGameScene_offsets_[61] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, changetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, lacktypetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, outcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, operatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, scenestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, curoutcarduser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, curoutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, huinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, groupcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, isautohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, bankerchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userlacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, iscurgetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, offlinestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, poolcardleftnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, preready_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, horsenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, isdisbandroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, disbandinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userdisbandstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, useronlinestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, gztableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, gdscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, iszhuanzhuanroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userreadyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, scmjcustomied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, roomgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, hnscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, hunanscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, jxscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, phscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, hubeiscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, shanxigamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, jinhuagamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, fuzhouscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, dgkmjcustomied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, nanninggamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, laibingamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, nanpinggamesence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, yuanjianggamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, longyangamesence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, xiangyangscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, zhenjianggamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, jingshangamescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, qionglaimjcustomied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, guilinzzscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, yunxiaomjscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, optypehutype_),
  };
  AckGameScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameScene_descriptor_,
      AckGameScene::default_instance_,
      AckGameScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameScene));
  AckUserReady_descriptor_ = file->message_type(18);
  static const int AckUserReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, ready_),
  };
  AckUserReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserReady_descriptor_,
      AckUserReady::default_instance_,
      AckUserReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserReady));
  AckGameStart_descriptor_ = file->message_type(19);
  static const int AckGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, ischangbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, touziinfo_),
  };
  AckGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStart_descriptor_,
      AckGameStart::default_instance_,
      AckGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStart));
  AckHorse_descriptor_ = file->message_type(20);
  static const int AckHorse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHorse, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHorse, horsenum_),
  };
  AckHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHorse_descriptor_,
      AckHorse::default_instance_,
      AckHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHorse));
  AckFirstHandCard_descriptor_ = file->message_type(21);
  static const int AckFirstHandCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, cardnum_),
  };
  AckFirstHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFirstHandCard_descriptor_,
      AckFirstHandCard::default_instance_,
      AckFirstHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFirstHandCard));
  HuaPaiInfo_descriptor_ = file->message_type(22);
  static const int HuaPaiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacard_),
  };
  HuaPaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuaPaiInfo_descriptor_,
      HuaPaiInfo::default_instance_,
      HuaPaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuaPaiInfo));
  FirstFlowerHandCard_descriptor_ = file->message_type(23);
  static const int FirstFlowerHandCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstFlowerHandCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstFlowerHandCard, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstFlowerHandCard, huapai_),
  };
  FirstFlowerHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstFlowerHandCard_descriptor_,
      FirstFlowerHandCard::default_instance_,
      FirstFlowerHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstFlowerHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstFlowerHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstFlowerHandCard));
  GetHuaPai_descriptor_ = file->message_type(24);
  static const int GetHuaPai_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuaPai, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuaPai, leftcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuaPai, huacard_),
  };
  GetHuaPai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHuaPai_descriptor_,
      GetHuaPai::default_instance_,
      GetHuaPai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuaPai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuaPai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHuaPai));
  AckEnSureJoker_descriptor_ = file->message_type(25);
  static const int AckEnSureJoker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, opencard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, curjokercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, jokertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, curjokercard2_),
  };
  AckEnSureJoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEnSureJoker_descriptor_,
      AckEnSureJoker::default_instance_,
      AckEnSureJoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEnSureJoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEnSureJoker));
  VideoFirstHandCard_descriptor_ = file->message_type(26);
  static const int VideoFirstHandCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, usercard_),
  };
  VideoFirstHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoFirstHandCard_descriptor_,
      VideoFirstHandCard::default_instance_,
      VideoFirstHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoFirstHandCard));
  VideoFlowerHandCard_descriptor_ = file->message_type(27);
  static const int VideoFlowerHandCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFlowerHandCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFlowerHandCard, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFlowerHandCard, huapai_),
  };
  VideoFlowerHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoFlowerHandCard_descriptor_,
      VideoFlowerHandCard::default_instance_,
      VideoFlowerHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFlowerHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFlowerHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoFlowerHandCard));
  AckChangeCard_descriptor_ = file->message_type(28);
  static const int AckChangeCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, ischange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, oldcard_),
  };
  AckChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeCard_descriptor_,
      AckChangeCard::default_instance_,
      AckChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeCard));
  AckUserLackType_descriptor_ = file->message_type(29);
  static const int AckUserLackType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, lacktype_),
  };
  AckUserLackType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserLackType_descriptor_,
      AckUserLackType::default_instance_,
      AckUserLackType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserLackType));
  AckUserLackTypeOk_descriptor_ = file->message_type(30);
  static const int AckUserLackTypeOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, isok_),
  };
  AckUserLackTypeOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserLackTypeOk_descriptor_,
      AckUserLackTypeOk::default_instance_,
      AckUserLackTypeOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserLackTypeOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserLackTypeOk));
  tagHuInfo_descriptor_ = file->message_type(31);
  static const int tagHuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, hufannum_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  tagListenInfo_descriptor_ = file->message_type(32);
  static const int tagListenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, huinfo_),
  };
  tagListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagListenInfo_descriptor_,
      tagListenInfo::default_instance_,
      tagListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagListenInfo));
  tagPreGangs_descriptor_ = file->message_type(33);
  static const int tagPreGangs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, ganginfo_),
  };
  tagPreGangs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPreGangs_descriptor_,
      tagPreGangs::default_instance_,
      tagPreGangs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPreGangs));
  AckUserGetCard_descriptor_ = file->message_type(34);
  static const int AckUserGetCard_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, leftcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, bu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, fz_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, getcarddir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, xy_pregang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, locklaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, getlaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, optypehutype_),
  };
  AckUserGetCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserGetCard_descriptor_,
      AckUserGetCard::default_instance_,
      AckUserGetCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserGetCard));
  tagShowOutCard_descriptor_ = file->message_type(35);
  static const int tagShowOutCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, outcardlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, outcard_),
  };
  tagShowOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagShowOutCard_descriptor_,
      tagShowOutCard::default_instance_,
      tagShowOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagShowOutCard));
  AckUserOutCard_descriptor_ = file->message_type(36);
  static const int AckUserOutCard_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, gzoutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, da_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, doublejinflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, autooutflag_),
  };
  AckUserOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOutCard_descriptor_,
      AckUserOutCard::default_instance_,
      AckUserOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOutCard));
  AckOpNotify_descriptor_ = file->message_type(37);
  static const int AckOpNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, bu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, fz_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, xy_pregang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, locklaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, optypehutype_),
  };
  AckOpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOpNotify_descriptor_,
      AckOpNotify::default_instance_,
      AckOpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOpNotify));
  AckBcOpResult_descriptor_ = file->message_type(38);
  static const int AckBcOpResult_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, outcardchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, gzgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, gzopresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, hnopresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, isqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, fz_hu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, yunxiaoyoujintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, minggangflag_),
  };
  AckBcOpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBcOpResult_descriptor_,
      AckBcOpResult::default_instance_,
      AckBcOpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBcOpResult));
  AckListenNotify_descriptor_ = file->message_type(39);
  static const int AckListenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, listeninfo_),
  };
  AckListenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckListenNotify_descriptor_,
      AckListenNotify::default_instance_,
      AckListenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckListenNotify));
  AckUserHu_descriptor_ = file->message_type(40);
  static const int AckUserHu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, huchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, pashuchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, score_),
  };
  AckUserHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserHu_descriptor_,
      AckUserHu::default_instance_,
      AckUserHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserHu));
  Horse_descriptor_ = file->message_type(41);
  static const int Horse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, horsenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, horsecard_),
  };
  Horse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Horse_descriptor_,
      Horse::default_instance_,
      Horse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Horse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Horse));
  UserHorseCard_descriptor_ = file->message_type(42);
  static const int UserHorseCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, horsecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, bvalid_),
  };
  UserHorseCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserHorseCard_descriptor_,
      UserHorseCard::default_instance_,
      UserHorseCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHorseCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserHorseCard));
  tagGameEndGang_descriptor_ = file->message_type(43);
  static const int tagGameEndGang_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndGang, gangtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndGang, gangcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndGang, gzgang_),
  };
  tagGameEndGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGameEndGang_descriptor_,
      tagGameEndGang::default_instance_,
      tagGameEndGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGameEndGang));
  tagGameEndInfo_descriptor_ = file->message_type(44);
  static const int tagGameEndInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, baotingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, totalgangscore_),
  };
  tagGameEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGameEndInfo_descriptor_,
      tagGameEndInfo::default_instance_,
      tagGameEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGameEndInfo));
  AckGameEnd_descriptor_ = file->message_type(45);
  static const int AckGameEnd_offsets_[49] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, gangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, endstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, ishuazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, huazhuscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, isdajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, dajiaoscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, returngangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, horsescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, horseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, userhorse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hufantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, zhigangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, zhigangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, wangangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, wangangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, angangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, angangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, diangangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, diangangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, endinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, guizhouendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, gdgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, scendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hngameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hunangameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hubeigameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, jxgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, phgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, gameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, sxgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, jhgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, fuzhougameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, dgkendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, nanninggameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, nanpinggameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, laibingameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, longyangameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, ganzhoucggameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, xiangyanggameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, xixiahuashuigameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, zhenjianggameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, qionglaiendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, anqinggameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, nanchangganeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, guilinzzgameendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, yunxiaomjgameendinfo_),
  };
  AckGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameEnd_descriptor_,
      AckGameEnd::default_instance_,
      AckGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameEnd));
  AckIsAuto_descriptor_ = file->message_type(46);
  static const int AckIsAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, isauto_),
  };
  AckIsAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIsAuto_descriptor_,
      AckIsAuto::default_instance_,
      AckIsAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIsAuto));
  AckUpdateUserInfo_descriptor_ = file->message_type(47);
  static const int AckUpdateUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, rmb_),
  };
  AckUpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateUserInfo_descriptor_,
      AckUpdateUserInfo::default_instance_,
      AckUpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateUserInfo));
  AckPoolMoney_descriptor_ = file->message_type(48);
  static const int AckPoolMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolMoney, money_),
  };
  AckPoolMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPoolMoney_descriptor_,
      AckPoolMoney::default_instance_,
      AckPoolMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPoolMoney));
  AckWinPoolMoney_descriptor_ = file->message_type(49);
  static const int AckWinPoolMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWinPoolMoney, winmoney_),
  };
  AckWinPoolMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckWinPoolMoney_descriptor_,
      AckWinPoolMoney::default_instance_,
      AckWinPoolMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWinPoolMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWinPoolMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckWinPoolMoney));
  AckGameStartFail_descriptor_ = file->message_type(50);
  static const int AckGameStartFail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, can_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, ts_),
  };
  AckGameStartFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStartFail_descriptor_,
      AckGameStartFail::default_instance_,
      AckGameStartFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStartFail));
  VideoGameEnd_descriptor_ = file->message_type(51);
  static const int VideoGameEnd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, gangscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, endstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, ishuazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, huazhuscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, isdajiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, dajiaoscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, returngangscore_),
  };
  VideoGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoGameEnd_descriptor_,
      VideoGameEnd::default_instance_,
      VideoGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoGameEnd));
  AckUpdateTimer_descriptor_ = file->message_type(52);
  static const int AckUpdateTimer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, lefttime_),
  };
  AckUpdateTimer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateTimer_descriptor_,
      AckUpdateTimer::default_instance_,
      AckUpdateTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateTimer));
  AckDisbandChooseFaild_descriptor_ = file->message_type(53);
  static const int AckDisbandChooseFaild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, code_),
  };
  AckDisbandChooseFaild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandChooseFaild_descriptor_,
      AckDisbandChooseFaild::default_instance_,
      AckDisbandChooseFaild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandChooseFaild));
  AckDisbandApply_descriptor_ = file->message_type(54);
  static const int AckDisbandApply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, applychairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, onlinechairid_),
  };
  AckDisbandApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandApply_descriptor_,
      AckDisbandApply::default_instance_,
      AckDisbandApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandApply));
  AckDisbandChooseBc_descriptor_ = file->message_type(55);
  static const int AckDisbandChooseBc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, choosestate_),
  };
  AckDisbandChooseBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandChooseBc_descriptor_,
      AckDisbandChooseBc::default_instance_,
      AckDisbandChooseBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandChooseBc));
  AckDisbandResult_descriptor_ = file->message_type(56);
  static const int AckDisbandResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, result_),
  };
  AckDisbandResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandResult_descriptor_,
      AckDisbandResult::default_instance_,
      AckDisbandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandResult));
  AckUserOnlineState_descriptor_ = file->message_type(57);
  static const int AckUserOnlineState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, state_),
  };
  AckUserOnlineState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOnlineState_descriptor_,
      AckUserOnlineState::default_instance_,
      AckUserOnlineState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOnlineState));
  AckUserOvertimeState_descriptor_ = file->message_type(58);
  static const int AckUserOvertimeState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, state_),
  };
  AckUserOvertimeState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOvertimeState_descriptor_,
      AckUserOvertimeState::default_instance_,
      AckUserOvertimeState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOvertimeState));
  AckMessage_descriptor_ = file->message_type(59);
  static const int AckMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, message_),
  };
  AckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMessage_descriptor_,
      AckMessage::default_instance_,
      AckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMessage));
  OperateWaite_descriptor_ = file->message_type(60);
  static const int OperateWaite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, state_),
  };
  OperateWaite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateWaite_descriptor_,
      OperateWaite::default_instance_,
      OperateWaite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateWaite));
  ReqCheckHandCards_descriptor_ = file->message_type(61);
  static const int ReqCheckHandCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckHandCards, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckHandCards, cards_),
  };
  ReqCheckHandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCheckHandCards_descriptor_,
      ReqCheckHandCards::default_instance_,
      ReqCheckHandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckHandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckHandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCheckHandCards));
  ACTION_descriptor_ = file->enum_type(0);
  STATUS_descriptor_ = file->enum_type(1);
  DISSBAND_ACTION_descriptor_ = file->enum_type(2);
  OverTimeState_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedCard_descriptor_, &FixedCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandCards_descriptor_, &HandCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayers_descriptor_, &tagPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAction_descriptor_, &ReqAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeCard_descriptor_, &ReqChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChooseLackType_descriptor_, &ReqChooseLackType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOutCard_descriptor_, &ReqOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOperateResult_descriptor_, &ReqOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqIsAuto_descriptor_, &ReqIsAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpdateUserInfo_descriptor_, &ReqUpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRoomInfo_descriptor_, &ReqRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChooseDisband_descriptor_, &ReqChooseDisband::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHu_descriptor_, &tagHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangInfo_descriptor_, &tagGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGroupCard_descriptor_, &tagGroupCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagReadyInfo_descriptor_, &tagReadyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameScene_descriptor_, &AckGameScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserReady_descriptor_, &AckUserReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStart_descriptor_, &AckGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHorse_descriptor_, &AckHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFirstHandCard_descriptor_, &AckFirstHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuaPaiInfo_descriptor_, &HuaPaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstFlowerHandCard_descriptor_, &FirstFlowerHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHuaPai_descriptor_, &GetHuaPai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEnSureJoker_descriptor_, &AckEnSureJoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoFirstHandCard_descriptor_, &VideoFirstHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoFlowerHandCard_descriptor_, &VideoFlowerHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeCard_descriptor_, &AckChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserLackType_descriptor_, &AckUserLackType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserLackTypeOk_descriptor_, &AckUserLackTypeOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagListenInfo_descriptor_, &tagListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPreGangs_descriptor_, &tagPreGangs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserGetCard_descriptor_, &AckUserGetCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagShowOutCard_descriptor_, &tagShowOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOutCard_descriptor_, &AckUserOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOpNotify_descriptor_, &AckOpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBcOpResult_descriptor_, &AckBcOpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckListenNotify_descriptor_, &AckListenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserHu_descriptor_, &AckUserHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Horse_descriptor_, &Horse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserHorseCard_descriptor_, &UserHorseCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGameEndGang_descriptor_, &tagGameEndGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGameEndInfo_descriptor_, &tagGameEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameEnd_descriptor_, &AckGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIsAuto_descriptor_, &AckIsAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateUserInfo_descriptor_, &AckUpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPoolMoney_descriptor_, &AckPoolMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckWinPoolMoney_descriptor_, &AckWinPoolMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStartFail_descriptor_, &AckGameStartFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoGameEnd_descriptor_, &VideoGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateTimer_descriptor_, &AckUpdateTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandChooseFaild_descriptor_, &AckDisbandChooseFaild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandApply_descriptor_, &AckDisbandApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandChooseBc_descriptor_, &AckDisbandChooseBc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandResult_descriptor_, &AckDisbandResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOnlineState_descriptor_, &AckUserOnlineState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOvertimeState_descriptor_, &AckUserOvertimeState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMessage_descriptor_, &AckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateWaite_descriptor_, &OperateWaite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCheckHandCards_descriptor_, &ReqCheckHandCards::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameproto_2eproto() {
  delete FixedCard::default_instance_;
  delete FixedCard_reflection_;
  delete HandCards::default_instance_;
  delete HandCards_reflection_;
  delete tagPlayers::default_instance_;
  delete tagPlayers_reflection_;
  delete ReqAction::default_instance_;
  delete ReqAction_reflection_;
  delete ReqChangeCard::default_instance_;
  delete ReqChangeCard_reflection_;
  delete ReqChooseLackType::default_instance_;
  delete ReqChooseLackType_reflection_;
  delete ReqOutCard::default_instance_;
  delete ReqOutCard_reflection_;
  delete ReqOperateResult::default_instance_;
  delete ReqOperateResult_reflection_;
  delete ReqIsAuto::default_instance_;
  delete ReqIsAuto_reflection_;
  delete ReqUpdateUserInfo::default_instance_;
  delete ReqUpdateUserInfo_reflection_;
  delete ReqRoomInfo::default_instance_;
  delete ReqRoomInfo_reflection_;
  delete ReqChooseDisband::default_instance_;
  delete ReqChooseDisband_reflection_;
  delete tagHu::default_instance_;
  delete tagHu_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete tagGangInfo::default_instance_;
  delete tagGangInfo_reflection_;
  delete tagGroupCard::default_instance_;
  delete tagGroupCard_reflection_;
  delete tagReadyInfo::default_instance_;
  delete tagReadyInfo_reflection_;
  delete AckGameScene::default_instance_;
  delete AckGameScene_reflection_;
  delete AckUserReady::default_instance_;
  delete AckUserReady_reflection_;
  delete AckGameStart::default_instance_;
  delete AckGameStart_reflection_;
  delete AckHorse::default_instance_;
  delete AckHorse_reflection_;
  delete AckFirstHandCard::default_instance_;
  delete AckFirstHandCard_reflection_;
  delete HuaPaiInfo::default_instance_;
  delete HuaPaiInfo_reflection_;
  delete FirstFlowerHandCard::default_instance_;
  delete FirstFlowerHandCard_reflection_;
  delete GetHuaPai::default_instance_;
  delete GetHuaPai_reflection_;
  delete AckEnSureJoker::default_instance_;
  delete AckEnSureJoker_reflection_;
  delete VideoFirstHandCard::default_instance_;
  delete VideoFirstHandCard_reflection_;
  delete VideoFlowerHandCard::default_instance_;
  delete VideoFlowerHandCard_reflection_;
  delete AckChangeCard::default_instance_;
  delete AckChangeCard_reflection_;
  delete AckUserLackType::default_instance_;
  delete AckUserLackType_reflection_;
  delete AckUserLackTypeOk::default_instance_;
  delete AckUserLackTypeOk_reflection_;
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete tagListenInfo::default_instance_;
  delete tagListenInfo_reflection_;
  delete tagPreGangs::default_instance_;
  delete tagPreGangs_reflection_;
  delete AckUserGetCard::default_instance_;
  delete AckUserGetCard_reflection_;
  delete tagShowOutCard::default_instance_;
  delete tagShowOutCard_reflection_;
  delete AckUserOutCard::default_instance_;
  delete AckUserOutCard_reflection_;
  delete AckOpNotify::default_instance_;
  delete AckOpNotify_reflection_;
  delete AckBcOpResult::default_instance_;
  delete AckBcOpResult_reflection_;
  delete AckListenNotify::default_instance_;
  delete AckListenNotify_reflection_;
  delete AckUserHu::default_instance_;
  delete AckUserHu_reflection_;
  delete Horse::default_instance_;
  delete Horse_reflection_;
  delete UserHorseCard::default_instance_;
  delete UserHorseCard_reflection_;
  delete tagGameEndGang::default_instance_;
  delete tagGameEndGang_reflection_;
  delete tagGameEndInfo::default_instance_;
  delete tagGameEndInfo_reflection_;
  delete AckGameEnd::default_instance_;
  delete AckGameEnd_reflection_;
  delete AckIsAuto::default_instance_;
  delete AckIsAuto_reflection_;
  delete AckUpdateUserInfo::default_instance_;
  delete AckUpdateUserInfo_reflection_;
  delete AckPoolMoney::default_instance_;
  delete AckPoolMoney_reflection_;
  delete AckWinPoolMoney::default_instance_;
  delete AckWinPoolMoney_reflection_;
  delete AckGameStartFail::default_instance_;
  delete AckGameStartFail_reflection_;
  delete VideoGameEnd::default_instance_;
  delete VideoGameEnd_reflection_;
  delete AckUpdateTimer::default_instance_;
  delete AckUpdateTimer_reflection_;
  delete AckDisbandChooseFaild::default_instance_;
  delete AckDisbandChooseFaild_reflection_;
  delete AckDisbandApply::default_instance_;
  delete AckDisbandApply_reflection_;
  delete AckDisbandChooseBc::default_instance_;
  delete AckDisbandChooseBc_reflection_;
  delete AckDisbandResult::default_instance_;
  delete AckDisbandResult_reflection_;
  delete AckUserOnlineState::default_instance_;
  delete AckUserOnlineState_reflection_;
  delete AckUserOvertimeState::default_instance_;
  delete AckUserOvertimeState_reflection_;
  delete AckMessage::default_instance_;
  delete AckMessage_reflection_;
  delete OperateWaite::default_instance_;
  delete OperateWaite_reflection_;
  delete ReqCheckHandCards::default_instance_;
  delete ReqCheckHandCards_reflection_;
}

void protobuf_AddDesc_gameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::game::guizhou::protobuf_AddDesc_guizhougameproto_2eproto();
  ::proto::game::gdmahjonggame::protobuf_AddDesc_gdgameproto_2eproto();
  ::proto::game::scmj::protobuf_AddDesc_sichuangameproto_2eproto();
  ::proto::game::hnmahjonggame::protobuf_AddDesc_hainangameproto_2eproto();
  ::proto::game::hubeimj::protobuf_AddDesc_hubeigameproto_2eproto();
  ::proto::game::hunanmj::protobuf_AddDesc_hunangameproto_2eproto();
  ::proto::game::jxmahjonggame::protobuf_AddDesc_jiangxigameproto_2eproto();
  ::proto::game::pinghumj::protobuf_AddDesc_pinghugameproto_2eproto();
  ::proto::game::henanmj::protobuf_AddDesc_henangameproto_2eproto();
  ::proto::game::sxmahjonggame::protobuf_AddDesc_shanxigameproto_2eproto();
  ::proto::game::jhmahjonggame::protobuf_AddDesc_jinhuagameproto_2eproto();
  ::proto::game::fuzhoumahjonggame::protobuf_AddDesc_fuzhoumahjonggame_2eproto();
  ::proto::game::dgkmj::protobuf_AddDesc_dgkgameproto_2eproto();
  ::proto::game::nanningmj::protobuf_AddDesc_nanninggameproto_2eproto();
  ::proto::game::nanpingmahjonggame::protobuf_AddDesc_nanpingmahjonggame_2eproto();
  ::proto::game::laibinmj::protobuf_AddDesc_laibingameproto_2eproto();
  ::proto::game::yuanjiangmj::protobuf_AddDesc_yuanjianggameproto_2eproto();
  ::proto::game::longyanmj::protobuf_AddDesc_longyanmj_2eproto();
  ::proto::game::ganzhoucg::protobuf_AddDesc_ganzhoucg_2eproto();
  ::proto::game::xiangyangmj::protobuf_AddDesc_xiangyanggameproto_2eproto();
  ::proto::game::xixiahuashuimj::protobuf_AddDesc_xixiahuashuigameproto_2eproto();
  ::proto::game::zhenjiang::protobuf_AddDesc_zhenjiang_2eproto();
  ::proto::game::jingshanmj::protobuf_AddDesc_jingshangameproto_2eproto();
  ::proto::game::qionglaimj::protobuf_AddDesc_qionglaigameproto_2eproto();
  ::proto::game::anqingmj::protobuf_AddDesc_anqinggameproto_2eproto();
  ::proto::game::nanchang::protobuf_AddDesc_nanchang_2eproto();
  ::proto::game::guilinzzmj::protobuf_AddDesc_guilinzz_2eproto();
  ::proto::game::yunxiaomj::protobuf_AddDesc_yunxiaomj_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gameproto.proto\022\nproto.game\032\026guizhouga"
    "meproto.proto\032\021gdgameproto.proto\032\026sichua"
    "ngameproto.proto\032\025hainangameproto.proto\032"
    "\024hubeigameproto.proto\032\024hunangameproto.pr"
    "oto\032\026jiangxigameproto.proto\032\025pinghugamep"
    "roto.proto\032\024henangameproto.proto\032\025shanxi"
    "gameproto.proto\032\025jinhuagameproto.proto\032\027"
    "fuzhoumahjonggame.proto\032\022dgkgameproto.pr"
    "oto\032\026nanninggameproto.proto\032\030nanpingmahj"
    "onggame.proto\032\025laibingameproto.proto\032\030yu"
    "anjianggameproto.proto\032\017longyanmj.proto\032"
    "\017ganzhoucg.proto\032\030xiangyanggameproto.pro"
    "to\032\033xixiahuashuigameproto.proto\032\017zhenjia"
    "ng.proto\032\027jingshangameproto.proto\032\027qiong"
    "laigameproto.proto\032\025anqinggameproto.prot"
    "o\032\016nanchang.proto\032\016guilinzz.proto\032\017yunxi"
    "aomj.proto\"=\n\tFixedCard\022\020\n\010CardData\030\001 \002("
    "\005\022\r\n\005state\030\002 \001(\005\022\017\n\007chairID\030\003 \001(\005\"\204\001\n\tHa"
    "ndCards\022\032\n\022ChangeableCardsLen\030\001 \002(\005\022\027\n\017C"
    "hangeableCards\030\002 \003(\005\022\025\n\rFixedCardsLen\030\003 "
    "\001(\005\022+\n\014stFixedCards\030\004 \003(\0132\025.proto.game.F"
    "ixedCard\"r\n\ntagPlayers\022\013\n\003uid\030\001 \002(\005\022\016\n\006s"
    "eatid\030\002 \001(\005\022\r\n\005ready\030\003 \001(\005\022\r\n\005money\030\004 \001("
    "\005\022\014\n\004name\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\022\016\n\006avatar\030\007"
    " \001(\t\"\033\n\tReqAction\022\016\n\006action\030\001 \002(\005\"/\n\rReq"
    "ChangeCard\022\020\n\010ischange\030\001 \002(\005\022\014\n\004Card\030\002 \003"
    "(\005\"!\n\021ReqChooseLackType\022\014\n\004Type\030\001 \002(\005\",\n"
    "\nReqOutCard\022\014\n\004Card\030\001 \002(\005\022\020\n\010ShowCard\030\002 "
    "\001(\005\".\n\020ReqOperateResult\022\014\n\004Type\030\001 \002(\005\022\014\n"
    "\004Card\030\002 \001(\005\"\033\n\tReqIsAuto\022\016\n\006isAuto\030\001 \002(\005"
    "\"-\n\021ReqUpdateUserInfo\022\013\n\003uid\030\001 \002(\005\022\013\n\003vi"
    "d\030\002 \001(\005\"5\n\013ReqRoomInfo\022\013\n\003uid\030\001 \002(\005\022\013\n\003v"
    "id\030\002 \001(\005\022\014\n\004skey\030\003 \001(\t\"\'\n\020ReqChooseDisba"
    "nd\022\023\n\013Choosestate\030\001 \002(\005\"-\n\005tagHu\022\016\n\006HuCa"
    "rd\030\001 \001(\005\022\024\n\014PasHuChiarid\030\002 \001(\005\".\n\rtagUse"
    "rHuInfo\022\035\n\002hu\030\001 \003(\0132\021.proto.game.tagHu\"*"
    "\n\013tagGangInfo\022\014\n\004Card\030\001 \002(\005\022\r\n\005state\030\002 \001"
    "(\005\"8\n\014tagGroupCard\022(\n\tFixedCard\030\001 \003(\0132\025."
    "proto.game.FixedCard\"I\n\014tagReadyInfo\022\r\n\005"
    "Ready\030\001 \003(\005\022\027\n\017RemainReadyTime\030\002 \003(\005\022\021\n\t"
    "ReadyTime\030\003 \001(\005\"\347\023\n\014AckGameScene\022\022\n\nchan"
    "getime\030\001 \001(\005\022\024\n\014lacktypetime\030\002 \001(\005\022\023\n\013ou"
    "tcardtime\030\003 \001(\005\022\023\n\013operatetime\030\004 \001(\005\022\021\n\t"
    "basescore\030\005 \001(\005\022\021\n\tdelaytime\030\006 \001(\005\022\023\n\013Sc"
    "eneStatus\030\007 \001(\005\022\020\n\010LeftTime\030\010 \001(\005\022\'\n\010Use"
    "rCard\030\t \001(\0132\025.proto.game.HandCards\022\024\n\014Ha"
    "ndCardNums\030\n \003(\005\022\026\n\016CurOutCardUser\030\013 \001(\005"
    "\022,\n\010ShowCard\030\014 \003(\0132\032.proto.game.tagShowO"
    "utCard\022\022\n\ncurOutCard\030\r \001(\005\022)\n\006HuInfo\030\016 \003"
    "(\0132\031.proto.game.tagUserHuInfo\022\022\n\nTotalSc"
    "ore\030\017 \003(\005\022+\n\tGroupCard\030\020 \003(\0132\030.proto.gam"
    "e.tagGroupCard\022\020\n\010IsAutoHu\030\021 \001(\005\022\025\n\rBank"
    "erChairid\030\022 \001(\005\022\024\n\014UserLackType\030\023 \003(\005\022\024\n"
    "\014IscurGetCard\030\024 \001(\005\022\014\n\004Card\030\025 \001(\005\022\016\n\006OpT"
    "ype\030\026 \001(\005\022)\n\010GangInfo\030\027 \003(\0132\027.proto.game"
    ".tagGangInfo\022-\n\nListenInfo\030\030 \003(\0132\031.proto"
    ".game.tagListenInfo\022\024\n\014OfflineState\030\031 \003("
    "\005\022\030\n\020PoolCardLeftNums\030\032 \001(\005\022\026\n\016preready_"
    "timer\030\033 \001(\005\022\023\n\013stand_money\030\034 \001(\005\022\020\n\010Hors"
    "eNum\030\035 \001(\005\022\025\n\risDisbandroom\030\036 \001(\005\0220\n\013Dis"
    "bandinfo\030\037 \001(\0132\033.proto.game.AckDisbandAp"
    "ply\0228\n\020UserDisbandstate\030  \003(\0132\036.proto.ga"
    "me.AckDisbandChooseBc\0227\n\017UserOnlinestate"
    "\030! \003(\0132\036.proto.game.AckUserOnlineState\0226"
    "\n\014UserOvertime\030\" \003(\0132 .proto.game.AckUse"
    "rOvertimeState\022<\n\013GZTableInfo\030# \001(\0132\'.pr"
    "oto.game.guizhou.tagGuiZhouTableInfo\0226\n\007"
    "gdscene\030$ \001(\0132%.proto.game.gdmahjonggame"
    ".gdgamescene\022\030\n\020IsZhuanZhuanRoom\030% \001(\010\022/"
    "\n\rUserReadyInfo\030& \001(\0132\030.proto.game.tagRe"
    "adyInfo\0228\n\rscmjCustomied\030\' \001(\0132!.proto.g"
    "ame.scmj.AckCustomiedInfo\022\022\n\nroomGolden\030"
    "( \001(\005\0226\n\007hnscene\030) \001(\0132%.proto.game.hnma"
    "hjonggame.hngamescene\0228\n\nhunanscene\030* \001("
    "\0132$.proto.game.hunanmj.AckCustomiedInfo\022"
    "6\n\007jxscene\030+ \001(\0132%.proto.game.jxmahjongg"
    "ame.jxgamescene\0221\n\007phscene\030, \001(\0132 .proto"
    ".game.pinghumj.phgamescene\0226\n\nhubeiscene"
    "\030- \001(\0132\".proto.game.hubeimj.hubeiGameSce"
    "ne\022>\n\017shanxigamescene\030. \001(\0132%.proto.game"
    ".sxmahjonggame.sxgamescene\022>\n\017jinhuagame"
    "scene\030/ \001(\0132%.proto.game.jhmahjonggame.j"
    "hgamescene\022\?\n\013fuzhouscene\0300 \001(\0132*.proto."
    "game.fuzhoumahjonggame.FZ_GameSence\022:\n\016d"
    "gkmjCustomied\0301 \001(\0132\".proto.game.dgkmj.A"
    "ckCustomiedInfo\022;\n\020nanninggamescene\0302 \001("
    "\0132!.proto.game.nanningmj.nngamescene\0229\n\017"
    "laibingamescene\0303 \001(\0132 .proto.game.laibi"
    "nmj.lbgamescene\022I\n\020nanpingGameSence\0304 \001("
    "\0132/.proto.game.nanpingmahjonggame.NanPin"
    "gGameSence\022\?\n\022yuanjianggamescene\0305 \001(\0132#"
    ".proto.game.yuanjiangmj.yjgamescene\0229\n\020l"
    "ongyanGameSence\0306 \001(\0132\037.proto.game.longy"
    "anmj.GamsSence\022<\n\016xiangyangscene\0307 \001(\0132$"
    ".proto.game.xiangyangmj.tagGameScene\022D\n\022"
    "zhenjiangGameScene\0308 \001(\0132(.proto.game.zh"
    "enjiang.zhenjiangGameSence\022A\n\021jingshanGa"
    "meScene\0309 \001(\0132&.proto.game.jingshanmj.ta"
    "gJSGameScence\022D\n\023qionglaimjCustomied\030: \001"
    "(\0132\'.proto.game.qionglaimj.AckCustomiedI"
    "nfo\022>\n\rguilinzzscene\030; \001(\0132\'.proto.game."
    "guilinzzmj.AckCustomiedInfo\022>\n\016yunxiaomj"
    "scene\030< \001(\0132&.proto.game.yunxiaomj.AckCu"
    "stomiedInfo\022\024\n\014OpTypeHuType\030= \001(\005\"\035\n\014Ack"
    "UserReady\022\r\n\005ready\030\001 \003(\005\"I\n\014AckGameStart"
    "\022\017\n\007ChairID\030\001 \002(\005\022\025\n\rIsChangBanker\030\002 \001(\005"
    "\022\021\n\tTouZiInfo\030\003 \003(\005\"-\n\010AckHorse\022\017\n\007chair"
    "ID\030\001 \001(\005\022\020\n\010HorseNum\030\002 \001(\005\"b\n\020AckFirstHa"
    "ndCard\022\'\n\010UserCard\030\001 \001(\0132\025.proto.game.Ha"
    "ndCards\022\024\n\014HandCardNums\030\002 \003(\005\022\017\n\007CardNum"
    "\030\003 \001(\005\"/\n\nHuaPaiInfo\022\020\n\010HuaCount\030\001 \001(\005\022\017"
    "\n\007HuaCard\030\002 \003(\005\"|\n\023FirstFlowerHandCard\022\'"
    "\n\010UserCard\030\001 \002(\0132\025.proto.game.HandCards\022"
    "\024\n\014HandCardNums\030\002 \003(\005\022&\n\006HuaPai\030\003 \003(\0132\026."
    "proto.game.HuaPaiInfo\"B\n\tGetHuaPai\022\017\n\007ch"
    "airID\030\001 \001(\005\022\023\n\013LeftCardNum\030\002 \001(\005\022\017\n\007HuaC"
    "ard\030\003 \001(\005\"b\n\016AckEnSureJoker\022\020\n\010OpenCard\030"
    "\001 \001(\005\022\024\n\014CurJokerCard\030\002 \001(\005\022\021\n\tJokerType"
    "\030\003 \001(\005\022\025\n\rCurJokerCard2\030\004 \001(\005\"=\n\022VideoFi"
    "rstHandCard\022\'\n\010UserCard\030\001 \003(\0132\025.proto.ga"
    "me.HandCards\"|\n\023VideoFlowerHandCard\022\'\n\010U"
    "serCard\030\001 \003(\0132\025.proto.game.HandCards\022\024\n\014"
    "HandCardNums\030\002 \003(\005\022&\n\006HuaPai\030\003 \003(\0132\026.pro"
    "to.game.HuaPaiInfo\"@\n\rAckChangeCard\022\020\n\010i"
    "schange\030\001 \002(\005\022\014\n\004Card\030\002 \003(\005\022\017\n\007oldCard\030\003"
    " \003(\005\"#\n\017AckUserLackType\022\020\n\010LackType\030\001 \003("
    "\005\"2\n\021AckUserLackTypeOk\022\017\n\007chairID\030\001 \003(\005\022"
    "\014\n\004isOk\030\002 \003(\005\"<\n\ttagHuInfo\022\014\n\004Card\030\001 \002(\005"
    "\022\017\n\007LeftNum\030\002 \001(\005\022\020\n\010HuFanNum\030\003 \001(\005\"G\n\rt"
    "agListenInfo\022\017\n\007OutCard\030\001 \002(\005\022%\n\006HuInfo\030"
    "\002 \003(\0132\025.proto.game.tagHuInfo\"0\n\013tagPreGa"
    "ngs\022\017\n\007OutCard\030\001 \002(\005\022\020\n\010GangInfo\030\002 \003(\005\"\370"
    "\002\n\016AckUserGetCard\022\017\n\007ChairID\030\001 \002(\005\022\023\n\013Le"
    "ftCardNum\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022\016\n\006OpType\030"
    "\004 \001(\005\022)\n\010GangInfo\030\005 \003(\0132\027.proto.game.tag"
    "GangInfo\022-\n\nListenInfo\030\006 \003(\0132\031.proto.gam"
    "e.tagListenInfo\022*\n\002bu\030\007 \001(\0132\036.proto.game"
    ".hunanmj.tagBuZhang\022\017\n\007OpType2\030\010 \001(\005\022\017\n\007"
    "fz_type\030\t \001(\005\022\022\n\nGetCardDir\030\n \001(\005\022+\n\nxy_"
    "pregang\030\013 \003(\0132\027.proto.game.tagPreGangs\022\021"
    "\n\tLockLaizi\030\014 \001(\005\022\020\n\010getlaizi\030\r \001(\005\022\024\n\014O"
    "pTypeHuType\030\017 \001(\005\"5\n\016tagShowOutCard\022\022\n\nO"
    "utCardLen\030\001 \002(\005\022\017\n\007OutCard\030\002 \003(\005\"\254\002\n\016Ack"
    "UserOutCard\022\017\n\007ChairID\030\001 \002(\005\022\014\n\004Card\030\002 \001"
    "(\005\022,\n\010ShowCard\030\003 \003(\0132\032.proto.game.tagSho"
    "wOutCard\0228\n\tGZOutCard\030\004 \001(\0132%.proto.game"
    ".guizhou.tagGuiZhouOutCard\022\'\n\010UserCard\030\005"
    " \001(\0132\025.proto.game.HandCards\022-\n\nListenInf"
    "o\030\006 \003(\0132\031.proto.game.tagListenInfo\022\017\n\007da"
    "_type\030\007 \001(\005\022\025\n\rDoubleJinFlag\030\010 \001(\010\022\023\n\013Au"
    "toOutFlag\030\t \001(\010\"\366\001\n\013AckOpNotify\022\017\n\007Chair"
    "ID\030\001 \002(\005\022\016\n\006OpType\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022%"
    "\n\004Gang\030\004 \003(\0132\027.proto.game.tagGangInfo\022*\n"
    "\002bu\030\005 \001(\0132\036.proto.game.hunanmj.tagBuZhan"
    "g\022\017\n\007fz_type\030\006 \001(\005\022+\n\nxy_pregang\030\007 \003(\0132\027"
    ".proto.game.tagPreGangs\022\021\n\tLockLaizi\030\010 \001"
    "(\005\022\024\n\014OpTypeHuType\030\t \001(\005\"\376\002\n\rAckBcOpResu"
    "lt\022\017\n\007ChairID\030\001 \002(\005\022\026\n\016OutCardChairID\030\002 "
    "\001(\005\022\016\n\006OpType\030\003 \001(\005\022\014\n\004Card\030\004 \001(\005\022\r\n\005Sco"
    "re\030\005 \003(\005\0222\n\006GZGang\030\006 \001(\0132\".proto.game.gu"
    "izhou.tagGuiZhouGang\022:\n\nGZOpResult\030\007 \001(\013"
    "2&.proto.game.guizhou.tagGuiZhouOpResult"
    "\022:\n\nHNOPResult\030\010 \001(\0132&.proto.game.hunanm"
    "j.tagBuZhangOpResult\022\025\n\rIsQiangganghu\030\t "
    "\001(\005\022\017\n\007OpType2\030\n \001(\005\022\022\n\nfz_hu_type\030\013 \001(\005"
    "\022\031\n\021YunXiaoYouJinType\030\014 \001(\005\022\024\n\014MingGangF"
    "lag\030\r \001(\010\"P\n\017AckListenNotify\022\016\n\006OpType\030\001"
    " \002(\005\022-\n\nListenInfo\030\002 \003(\0132\031.proto.game.ta"
    "gListenInfo\"C\n\tAckUserHu\022\021\n\tHuChairID\030\001 "
    "\002(\005\022\024\n\014PasHuChairID\030\002 \001(\005\022\r\n\005Score\030\003 \003(\005"
    "\",\n\005Horse\022\020\n\010HorseNum\030\001 \001(\005\022\021\n\tHorseCard"
    "\030\002 \003(\005\"P\n\rUserHorseCard\022\017\n\007chairID\030\001 \001(\005"
    "\022\013\n\003Num\030\002 \001(\005\022\021\n\tHorseCard\030\003 \003(\005\022\016\n\006bVal"
    "id\030\004 \001(\005\"h\n\016tagGameEndGang\022\020\n\010GangType\030\001"
    " \001(\005\022\020\n\010GangCard\030\002 \001(\005\0222\n\006GZGang\030\003 \001(\0132\""
    ".proto.game.guizhou.tagGuiZhouGang\"\210\001\n\016t"
    "agGameEndInfo\022(\n\004Gang\030\001 \003(\0132\032.proto.game"
    ".tagGameEndGang\022\017\n\007EndType\030\002 \001(\005\022\016\n\006HuCa"
    "rd\030\003 \001(\005\022\023\n\013BaoTingType\030\004 \001(\005\022\026\n\016TotalGa"
    "ngScore\030\005 \001(\005\"\273\021\n\nAckGameEnd\022\'\n\010UserCard"
    "\030\001 \003(\0132\025.proto.game.HandCards\022\017\n\007HuScore"
    "\030\002 \002(\005\022\021\n\tGangScore\030\003 \001(\005\022\r\n\005Score\030\004 \003(\005"
    "\022\020\n\010EndState\030\005 \001(\005\022\020\n\010isHuazhu\030\006 \003(\005\022\023\n\013"
    "HuazhuScore\030\007 \003(\005\022\020\n\010isDajiao\030\010 \003(\005\022\023\n\013D"
    "ajiaoScore\030\t \003(\005\022\027\n\017ReturnGangScore\030\n \003("
    "\005\022\022\n\nHorseScore\030\013 \003(\005\022$\n\tHorseInfo\030\014 \001(\013"
    "2\021.proto.game.Horse\022,\n\tUserHorse\030\r \003(\0132\031"
    ".proto.game.UserHorseCard\022\021\n\tHuFanType\030\016"
    " \001(\005\022\024\n\014ZhiGangCount\030\017 \001(\005\022\024\n\014ZhiGangSco"
    "re\030\020 \001(\005\022\024\n\014WanGangCount\030\021 \001(\005\022\024\n\014WanGan"
    "gScore\030\022 \001(\005\022\023\n\013AnGangCount\030\023 \001(\005\022\023\n\013AnG"
    "angScore\030\024 \001(\005\022\025\n\rDianGangCount\030\025 \001(\005\022\025\n"
    "\rDianGangScore\030\026 \001(\005\022+\n\007EndInfo\030\027 \003(\0132\032."
    "proto.game.tagGameEndInfo\022=\n\016GuiZhouEndI"
    "nfo\030\030 \001(\0132%.proto.game.guizhou.tagGuiZho"
    "uEndInfo\022@\n\rgdGameEndInfo\030\031 \001(\0132).proto."
    "game.gdmahjonggame.gdmjGameEndInfo\0220\n\tsc"
    "EndInfo\030\032 \001(\0132\035.proto.game.scmj.tagScGam"
    "eEnd\022@\n\rhnGameEndInfo\030\033 \001(\0132).proto.game"
    ".hnmahjonggame.hnmjGameEndInfo\022=\n\020hunanG"
    "ameEndInfo\030\034 \001(\0132#.proto.game.hunanmj.ta"
    "gHuNanGameEnd\0229\n\014hubeiGameend\030\035 \001(\0132#.pr"
    "oto.game.hubeimj.AckhubeiGameEnd\022@\n\rjxGa"
    "meEndInfo\030\036 \001(\0132).proto.game.jxmahjongga"
    "me.jxmjGameEndInfo\022;\n\rphGameEndInfo\030\037 \001("
    "\0132$.proto.game.pinghumj.phmjGameEndInfo\022"
    "3\n\013GameEndInfo\030  \001(\0132\036.proto.game.henanm"
    "j.tagGameEnd\022@\n\rsxGameEndInfo\030! \001(\0132).pr"
    "oto.game.sxmahjonggame.sxmjGameEndInfo\022@"
    "\n\rjhGameEndInfo\030\" \001(\0132).proto.game.jhmah"
    "jonggame.jhmjGameEndInfo\022\?\n\rfuzhouGameEn"
    "d\030# \001(\0132(.proto.game.fuzhoumahjonggame.F"
    "Z_GameEnd\0223\n\ndgkEndInfo\030$ \001(\0132\037.proto.ga"
    "me.dgkmj.tagDgkGameEnd\022C\n\022nanningGameEnd"
    "Info\030% \001(\0132\'.proto.game.nanningmj.tagNan"
    "NingGameEnd\022>\n\016nanpingGameEnd\030& \001(\0132&.pr"
    "oto.game.nanpingmahjonggame.GameEnd\022@\n\021l"
    "aibinGameEndInfo\030\' \001(\0132%.proto.game.laib"
    "inmj.tagLaiBinGameEnd\022<\n\016longyangameend\030"
    "( \001(\0132$.proto.game.longyanmj.LongYanGame"
    "end\022@\n\020ganzhoucgGameend\030) \001(\0132&.proto.ga"
    "me.ganzhoucg.GanZhoucgGameend\022>\n\020xiangya"
    "ngGameEnd\030* \001(\0132$.proto.game.xiangyangmj"
    ".tagXYGameEnd\022K\n\023xixiahuashuiGameEnd\030+ \001"
    "(\0132..proto.game.xixiahuashuimj.XiXiaHuaS"
    "huiGameEnd\022@\n\020zhenjiangGameEnd\030, \001(\0132&.p"
    "roto.game.zhenjiang.zhenjiangGameEnd\022B\n\017"
    "qionglaiEndInfo\030- \001(\0132).proto.game.qiong"
    "laimj.tagQiongLaiGameEnd\0229\n\ranqingGameEn"
    "d\030. \001(\0132\".proto.game.anqingmj.AnQingGame"
    "End\022=\n\017nanchangGaneEnd\030/ \001(\0132$.proto.gam"
    "e.nanchang.GameEndNanChang\022F\n\023guilinzzGa"
    "meEndInfo\0300 \001(\0132).proto.game.guilinzzmj."
    "tagGuiLinzzGameEnd\022G\n\024yunxiaomjGameEndIn"
    "fo\0301 \001(\0132).proto.game.yunxiaomj.tagYunXi"
    "aomjGameEnd\",\n\tAckIsAuto\022\017\n\007ChairID\030\001 \002("
    "\005\022\016\n\006isAuto\030\002 \001(\005\"M\n\021AckUpdateUserInfo\022\017"
    "\n\007chairid\030\001 \002(\005\022\013\n\003uid\030\002 \001(\005\022\r\n\005money\030\003 "
    "\001(\005\022\013\n\003rmb\030\004 \001(\005\"\035\n\014AckPoolMoney\022\r\n\005mone"
    "y\030\001 \002(\005\"#\n\017AckWinPoolMoney\022\020\n\010winmoney\030\001"
    " \003(\005\"\\\n\020AckGameStartFail\022\013\n\003vid\030\001 \002(\005\022\016\n"
    "\006roomid\030\002 \001(\t\022\021\n\tcan_start\030\003 \001(\005\022\014\n\004code"
    "\030\004 \001(\005\022\n\n\002ts\030\005 \001(\005\"\343\001\n\014VideoGameEnd\022\'\n\010U"
    "serCard\030\001 \003(\0132\025.proto.game.HandCards\022\017\n\007"
    "HuScore\030\002 \003(\005\022\021\n\tGangScore\030\003 \003(\005\022\r\n\005Scor"
    "e\030\004 \003(\005\022\020\n\010EndState\030\005 \001(\005\022\020\n\010isHuazhu\030\006 "
    "\003(\005\022\023\n\013HuazhuScore\030\007 \003(\005\022\020\n\010isDajiao\030\010 \003"
    "(\005\022\023\n\013DajiaoScore\030\t \003(\005\022\027\n\017ReturnGangSco"
    "re\030\n \003(\005\"3\n\016AckUpdateTimer\022\017\n\007ChairID\030\001 "
    "\002(\005\022\020\n\010lefttime\030\002 \001(\005\"6\n\025AckDisbandChoos"
    "eFaild\022\017\n\007chairid\030\001 \002(\005\022\014\n\004code\030\002 \001(\005\"P\n"
    "\017AckDisbandApply\022\024\n\014ApplyChairid\030\001 \002(\005\022\020"
    "\n\010Waittime\030\002 \001(\005\022\025\n\ronlinechairid\030\003 \003(\005\""
    ":\n\022AckDisbandChooseBc\022\017\n\007chairid\030\001 \002(\005\022\023"
    "\n\013Choosestate\030\002 \001(\005\"\"\n\020AckDisbandResult\022"
    "\016\n\006Result\030\001 \002(\005\"4\n\022AckUserOnlineState\022\017\n"
    "\007chairid\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\"6\n\024AckUser"
    "OvertimeState\022\017\n\007chairid\030\001 \002(\005\022\r\n\005state\030"
    "\002 \001(\005\"\035\n\nAckMessage\022\017\n\007message\030\001 \001(\t\"\035\n\014"
    "OperateWaite\022\r\n\005state\030\001 \001(\005\"2\n\021ReqCheckH"
    "andCards\022\016\n\006seatid\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005*"
    "X\n\006ACTION\022\021\n\rACTION_SIDOWN\020\001\022\020\n\014ACTION_R"
    "EADY\020\002\022\020\n\014ACTION_LEAVE\020\003\022\027\n\023ACTION_CHANG"
    "E_TABLE\020\004*g\n\006STATUS\022\r\n\tGAME_FREE\020\000\022\023\n\017GA"
    "ME_CHANGECARD\020\001\022\030\n\024GAME_CHOOSE_LACKTYPE\020"
    "\002\022\020\n\014GAME_PLAYING\020\003\022\r\n\tGAME_PIAO\020\004*Y\n\017DI"
    "SSBAND_ACTION\022\020\n\014DISBAND_WAIT\020\000\022\017\n\013DISBA"
    "ND_YES\020\001\022\016\n\nDISBAND_NO\020\002\022\023\n\017DISBAND_APPL"
    "YER\020\003*O\n\rOverTimeState\022\020\n\014OVER_TIME_NO\020\000"
    "\022\025\n\021OVER_TIME_OUTCARD\020\001\022\025\n\021OVER_TIME_OPE"
    "RATE\020\002", 10806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameproto.proto", &protobuf_RegisterTypes);
  FixedCard::default_instance_ = new FixedCard();
  HandCards::default_instance_ = new HandCards();
  tagPlayers::default_instance_ = new tagPlayers();
  ReqAction::default_instance_ = new ReqAction();
  ReqChangeCard::default_instance_ = new ReqChangeCard();
  ReqChooseLackType::default_instance_ = new ReqChooseLackType();
  ReqOutCard::default_instance_ = new ReqOutCard();
  ReqOperateResult::default_instance_ = new ReqOperateResult();
  ReqIsAuto::default_instance_ = new ReqIsAuto();
  ReqUpdateUserInfo::default_instance_ = new ReqUpdateUserInfo();
  ReqRoomInfo::default_instance_ = new ReqRoomInfo();
  ReqChooseDisband::default_instance_ = new ReqChooseDisband();
  tagHu::default_instance_ = new tagHu();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  tagGangInfo::default_instance_ = new tagGangInfo();
  tagGroupCard::default_instance_ = new tagGroupCard();
  tagReadyInfo::default_instance_ = new tagReadyInfo();
  AckGameScene::default_instance_ = new AckGameScene();
  AckUserReady::default_instance_ = new AckUserReady();
  AckGameStart::default_instance_ = new AckGameStart();
  AckHorse::default_instance_ = new AckHorse();
  AckFirstHandCard::default_instance_ = new AckFirstHandCard();
  HuaPaiInfo::default_instance_ = new HuaPaiInfo();
  FirstFlowerHandCard::default_instance_ = new FirstFlowerHandCard();
  GetHuaPai::default_instance_ = new GetHuaPai();
  AckEnSureJoker::default_instance_ = new AckEnSureJoker();
  VideoFirstHandCard::default_instance_ = new VideoFirstHandCard();
  VideoFlowerHandCard::default_instance_ = new VideoFlowerHandCard();
  AckChangeCard::default_instance_ = new AckChangeCard();
  AckUserLackType::default_instance_ = new AckUserLackType();
  AckUserLackTypeOk::default_instance_ = new AckUserLackTypeOk();
  tagHuInfo::default_instance_ = new tagHuInfo();
  tagListenInfo::default_instance_ = new tagListenInfo();
  tagPreGangs::default_instance_ = new tagPreGangs();
  AckUserGetCard::default_instance_ = new AckUserGetCard();
  tagShowOutCard::default_instance_ = new tagShowOutCard();
  AckUserOutCard::default_instance_ = new AckUserOutCard();
  AckOpNotify::default_instance_ = new AckOpNotify();
  AckBcOpResult::default_instance_ = new AckBcOpResult();
  AckListenNotify::default_instance_ = new AckListenNotify();
  AckUserHu::default_instance_ = new AckUserHu();
  Horse::default_instance_ = new Horse();
  UserHorseCard::default_instance_ = new UserHorseCard();
  tagGameEndGang::default_instance_ = new tagGameEndGang();
  tagGameEndInfo::default_instance_ = new tagGameEndInfo();
  AckGameEnd::default_instance_ = new AckGameEnd();
  AckIsAuto::default_instance_ = new AckIsAuto();
  AckUpdateUserInfo::default_instance_ = new AckUpdateUserInfo();
  AckPoolMoney::default_instance_ = new AckPoolMoney();
  AckWinPoolMoney::default_instance_ = new AckWinPoolMoney();
  AckGameStartFail::default_instance_ = new AckGameStartFail();
  VideoGameEnd::default_instance_ = new VideoGameEnd();
  AckUpdateTimer::default_instance_ = new AckUpdateTimer();
  AckDisbandChooseFaild::default_instance_ = new AckDisbandChooseFaild();
  AckDisbandApply::default_instance_ = new AckDisbandApply();
  AckDisbandChooseBc::default_instance_ = new AckDisbandChooseBc();
  AckDisbandResult::default_instance_ = new AckDisbandResult();
  AckUserOnlineState::default_instance_ = new AckUserOnlineState();
  AckUserOvertimeState::default_instance_ = new AckUserOvertimeState();
  AckMessage::default_instance_ = new AckMessage();
  OperateWaite::default_instance_ = new OperateWaite();
  ReqCheckHandCards::default_instance_ = new ReqCheckHandCards();
  FixedCard::default_instance_->InitAsDefaultInstance();
  HandCards::default_instance_->InitAsDefaultInstance();
  tagPlayers::default_instance_->InitAsDefaultInstance();
  ReqAction::default_instance_->InitAsDefaultInstance();
  ReqChangeCard::default_instance_->InitAsDefaultInstance();
  ReqChooseLackType::default_instance_->InitAsDefaultInstance();
  ReqOutCard::default_instance_->InitAsDefaultInstance();
  ReqOperateResult::default_instance_->InitAsDefaultInstance();
  ReqIsAuto::default_instance_->InitAsDefaultInstance();
  ReqUpdateUserInfo::default_instance_->InitAsDefaultInstance();
  ReqRoomInfo::default_instance_->InitAsDefaultInstance();
  ReqChooseDisband::default_instance_->InitAsDefaultInstance();
  tagHu::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  tagGangInfo::default_instance_->InitAsDefaultInstance();
  tagGroupCard::default_instance_->InitAsDefaultInstance();
  tagReadyInfo::default_instance_->InitAsDefaultInstance();
  AckGameScene::default_instance_->InitAsDefaultInstance();
  AckUserReady::default_instance_->InitAsDefaultInstance();
  AckGameStart::default_instance_->InitAsDefaultInstance();
  AckHorse::default_instance_->InitAsDefaultInstance();
  AckFirstHandCard::default_instance_->InitAsDefaultInstance();
  HuaPaiInfo::default_instance_->InitAsDefaultInstance();
  FirstFlowerHandCard::default_instance_->InitAsDefaultInstance();
  GetHuaPai::default_instance_->InitAsDefaultInstance();
  AckEnSureJoker::default_instance_->InitAsDefaultInstance();
  VideoFirstHandCard::default_instance_->InitAsDefaultInstance();
  VideoFlowerHandCard::default_instance_->InitAsDefaultInstance();
  AckChangeCard::default_instance_->InitAsDefaultInstance();
  AckUserLackType::default_instance_->InitAsDefaultInstance();
  AckUserLackTypeOk::default_instance_->InitAsDefaultInstance();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  tagListenInfo::default_instance_->InitAsDefaultInstance();
  tagPreGangs::default_instance_->InitAsDefaultInstance();
  AckUserGetCard::default_instance_->InitAsDefaultInstance();
  tagShowOutCard::default_instance_->InitAsDefaultInstance();
  AckUserOutCard::default_instance_->InitAsDefaultInstance();
  AckOpNotify::default_instance_->InitAsDefaultInstance();
  AckBcOpResult::default_instance_->InitAsDefaultInstance();
  AckListenNotify::default_instance_->InitAsDefaultInstance();
  AckUserHu::default_instance_->InitAsDefaultInstance();
  Horse::default_instance_->InitAsDefaultInstance();
  UserHorseCard::default_instance_->InitAsDefaultInstance();
  tagGameEndGang::default_instance_->InitAsDefaultInstance();
  tagGameEndInfo::default_instance_->InitAsDefaultInstance();
  AckGameEnd::default_instance_->InitAsDefaultInstance();
  AckIsAuto::default_instance_->InitAsDefaultInstance();
  AckUpdateUserInfo::default_instance_->InitAsDefaultInstance();
  AckPoolMoney::default_instance_->InitAsDefaultInstance();
  AckWinPoolMoney::default_instance_->InitAsDefaultInstance();
  AckGameStartFail::default_instance_->InitAsDefaultInstance();
  VideoGameEnd::default_instance_->InitAsDefaultInstance();
  AckUpdateTimer::default_instance_->InitAsDefaultInstance();
  AckDisbandChooseFaild::default_instance_->InitAsDefaultInstance();
  AckDisbandApply::default_instance_->InitAsDefaultInstance();
  AckDisbandChooseBc::default_instance_->InitAsDefaultInstance();
  AckDisbandResult::default_instance_->InitAsDefaultInstance();
  AckUserOnlineState::default_instance_->InitAsDefaultInstance();
  AckUserOvertimeState::default_instance_->InitAsDefaultInstance();
  AckMessage::default_instance_->InitAsDefaultInstance();
  OperateWaite::default_instance_->InitAsDefaultInstance();
  ReqCheckHandCards::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameproto_2eproto {
  StaticDescriptorInitializer_gameproto_2eproto() {
    protobuf_AddDesc_gameproto_2eproto();
  }
} static_descriptor_initializer_gameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTION_descriptor_;
}
bool ACTION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STATUS_descriptor_;
}
bool STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DISSBAND_ACTION_descriptor_;
}
bool DISSBAND_ACTION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OverTimeState_descriptor_;
}
bool OverTimeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FixedCard::kCardDataFieldNumber;
const int FixedCard::kStateFieldNumber;
const int FixedCard::kChairIDFieldNumber;
#endif  // !_MSC_VER

FixedCard::FixedCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixedCard::InitAsDefaultInstance() {
}

FixedCard::FixedCard(const FixedCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixedCard::SharedCtor() {
  _cached_size_ = 0;
  carddata_ = 0;
  state_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedCard::~FixedCard() {
  SharedDtor();
}

void FixedCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixedCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedCard_descriptor_;
}

const FixedCard& FixedCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

FixedCard* FixedCard::default_instance_ = NULL;

FixedCard* FixedCard::New() const {
  return new FixedCard;
}

void FixedCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    carddata_ = 0;
    state_ = 0;
    chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carddata_)));
          set_has_carddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chairID;
        break;
      }

      // optional int32 chairID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CardData = 1;
  if (has_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carddata(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixedCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CardData = 1;
  if (has_carddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carddata(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixedCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardData = 1;
    if (has_carddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carddata());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 chairID = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedCard::MergeFrom(const FixedCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carddata()) {
      set_carddata(from.carddata());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedCard::CopyFrom(const FixedCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FixedCard::Swap(FixedCard* other) {
  if (other != this) {
    std::swap(carddata_, other->carddata_);
    std::swap(state_, other->state_);
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedCard_descriptor_;
  metadata.reflection = FixedCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandCards::kChangeableCardsLenFieldNumber;
const int HandCards::kChangeableCardsFieldNumber;
const int HandCards::kFixedCardsLenFieldNumber;
const int HandCards::kStFixedCardsFieldNumber;
#endif  // !_MSC_VER

HandCards::HandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandCards::InitAsDefaultInstance() {
}

HandCards::HandCards(const HandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandCards::SharedCtor() {
  _cached_size_ = 0;
  changeablecardslen_ = 0;
  fixedcardslen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCards::~HandCards() {
  SharedDtor();
}

void HandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCards_descriptor_;
}

const HandCards& HandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

HandCards* HandCards::default_instance_ = NULL;

HandCards* HandCards::New() const {
  return new HandCards;
}

void HandCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    changeablecardslen_ = 0;
    fixedcardslen_ = 0;
  }
  changeablecards_.Clear();
  stfixedcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChangeableCardsLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeablecardslen_)));
          set_has_changeablecardslen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_changeablecards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        if (input->ExpectTag(24)) goto parse_FixedCardsLen;
        break;
      }

      // optional int32 FixedCardsLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FixedCardsLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixedcardslen_)));
          set_has_fixedcardslen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        break;
      }

      // repeated .proto.game.FixedCard stFixedCards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFixedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stfixedcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changeablecardslen(), output);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->changeablecards(i), output);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixedcardslen(), output);
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stfixedcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changeablecardslen(), target);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->changeablecards(i), target);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixedcardslen(), target);
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stfixedcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChangeableCardsLen = 1;
    if (has_changeablecardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeablecardslen());
    }

    // optional int32 FixedCardsLen = 3;
    if (has_fixedcardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixedcardslen());
    }

  }
  // repeated int32 ChangeableCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  total_size += 1 * this->stfixedcards_size();
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stfixedcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCards::MergeFrom(const HandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  stfixedcards_.MergeFrom(from.stfixedcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeablecardslen()) {
      set_changeablecardslen(from.changeablecardslen());
    }
    if (from.has_fixedcardslen()) {
      set_fixedcardslen(from.fixedcardslen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCards::CopyFrom(const HandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < stfixedcards_size(); i++) {
    if (!this->stfixedcards(i).IsInitialized()) return false;
  }
  return true;
}

void HandCards::Swap(HandCards* other) {
  if (other != this) {
    std::swap(changeablecardslen_, other->changeablecardslen_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(fixedcardslen_, other->fixedcardslen_);
    stfixedcards_.Swap(&other->stfixedcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCards_descriptor_;
  metadata.reflection = HandCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPlayers::kUidFieldNumber;
const int tagPlayers::kSeatidFieldNumber;
const int tagPlayers::kReadyFieldNumber;
const int tagPlayers::kMoneyFieldNumber;
const int tagPlayers::kNameFieldNumber;
const int tagPlayers::kSexFieldNumber;
const int tagPlayers::kAvatarFieldNumber;
#endif  // !_MSC_VER

tagPlayers::tagPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPlayers::InitAsDefaultInstance() {
}

tagPlayers::tagPlayers(const tagPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPlayers::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ready_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayers::~tagPlayers() {
  SharedDtor();
}

void tagPlayers::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void tagPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayers_descriptor_;
}

const tagPlayers& tagPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagPlayers* tagPlayers::default_instance_ = NULL;

tagPlayers* tagPlayers::New() const {
  return new tagPlayers;
}

void tagPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    ready_ = 0;
    money_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // optional int32 ready = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional string avatar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 ready = 3;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayers::MergeFrom(const tagPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayers::CopyFrom(const tagPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagPlayers::Swap(tagPlayers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(ready_, other->ready_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayers_descriptor_;
  metadata.reflection = tagPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAction::kActionFieldNumber;
#endif  // !_MSC_VER

ReqAction::ReqAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAction::InitAsDefaultInstance() {
}

ReqAction::ReqAction(const ReqAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAction::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAction::~ReqAction() {
  SharedDtor();
}

void ReqAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAction_descriptor_;
}

const ReqAction& ReqAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqAction* ReqAction::default_instance_ = NULL;

ReqAction* ReqAction::New() const {
  return new ReqAction;
}

void ReqAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAction::MergeFrom(const ReqAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAction::CopyFrom(const ReqAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAction::Swap(ReqAction* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAction_descriptor_;
  metadata.reflection = ReqAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeCard::kIschangeFieldNumber;
const int ReqChangeCard::kCardFieldNumber;
#endif  // !_MSC_VER

ReqChangeCard::ReqChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeCard::InitAsDefaultInstance() {
}

ReqChangeCard::ReqChangeCard(const ReqChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeCard::SharedCtor() {
  _cached_size_ = 0;
  ischange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeCard::~ReqChangeCard() {
  SharedDtor();
}

void ReqChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeCard_descriptor_;
}

const ReqChangeCard& ReqChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChangeCard* ReqChangeCard::default_instance_ = NULL;

ReqChangeCard* ReqChangeCard::New() const {
  return new ReqChangeCard;
}

void ReqChangeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ischange_ = 0;
  }
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ischange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischange_)));
          set_has_ischange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ischange = 1;
  if (has_ischange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ischange(), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ischange = 1;
  if (has_ischange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ischange(), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ischange = 1;
    if (has_ischange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischange());
    }

  }
  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeCard::MergeFrom(const ReqChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischange()) {
      set_ischange(from.ischange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeCard::CopyFrom(const ReqChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChangeCard::Swap(ReqChangeCard* other) {
  if (other != this) {
    std::swap(ischange_, other->ischange_);
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeCard_descriptor_;
  metadata.reflection = ReqChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChooseLackType::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqChooseLackType::ReqChooseLackType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChooseLackType::InitAsDefaultInstance() {
}

ReqChooseLackType::ReqChooseLackType(const ReqChooseLackType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChooseLackType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChooseLackType::~ReqChooseLackType() {
  SharedDtor();
}

void ReqChooseLackType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChooseLackType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChooseLackType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChooseLackType_descriptor_;
}

const ReqChooseLackType& ReqChooseLackType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChooseLackType* ReqChooseLackType::default_instance_ = NULL;

ReqChooseLackType* ReqChooseLackType::New() const {
  return new ReqChooseLackType;
}

void ReqChooseLackType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChooseLackType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChooseLackType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChooseLackType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChooseLackType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChooseLackType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChooseLackType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChooseLackType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChooseLackType::MergeFrom(const ReqChooseLackType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChooseLackType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChooseLackType::CopyFrom(const ReqChooseLackType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChooseLackType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChooseLackType::Swap(ReqChooseLackType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChooseLackType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChooseLackType_descriptor_;
  metadata.reflection = ReqChooseLackType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOutCard::kCardFieldNumber;
const int ReqOutCard::kShowCardFieldNumber;
#endif  // !_MSC_VER

ReqOutCard::ReqOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOutCard::InitAsDefaultInstance() {
}

ReqOutCard::ReqOutCard(const ReqOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOutCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  showcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOutCard::~ReqOutCard() {
  SharedDtor();
}

void ReqOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOutCard_descriptor_;
}

const ReqOutCard& ReqOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOutCard* ReqOutCard::default_instance_ = NULL;

ReqOutCard* ReqOutCard::New() const {
  return new ReqOutCard;
}

void ReqOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    showcard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        break;
      }

      // optional int32 ShowCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showcard_)));
          set_has_showcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 ShowCard = 2;
  if (has_showcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->showcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 ShowCard = 2;
  if (has_showcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->showcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 ShowCard = 2;
    if (has_showcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOutCard::MergeFrom(const ReqOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_showcard()) {
      set_showcard(from.showcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOutCard::CopyFrom(const ReqOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOutCard::Swap(ReqOutCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(showcard_, other->showcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOutCard_descriptor_;
  metadata.reflection = ReqOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOperateResult::kTypeFieldNumber;
const int ReqOperateResult::kCardFieldNumber;
#endif  // !_MSC_VER

ReqOperateResult::ReqOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOperateResult::InitAsDefaultInstance() {
}

ReqOperateResult::ReqOperateResult(const ReqOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOperateResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOperateResult::~ReqOperateResult() {
  SharedDtor();
}

void ReqOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOperateResult_descriptor_;
}

const ReqOperateResult& ReqOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOperateResult* ReqOperateResult::default_instance_ = NULL;

ReqOperateResult* ReqOperateResult::New() const {
  return new ReqOperateResult;
}

void ReqOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOperateResult::MergeFrom(const ReqOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOperateResult::CopyFrom(const ReqOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOperateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOperateResult::Swap(ReqOperateResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOperateResult_descriptor_;
  metadata.reflection = ReqOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqIsAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

ReqIsAuto::ReqIsAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqIsAuto::InitAsDefaultInstance() {
}

ReqIsAuto::ReqIsAuto(const ReqIsAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqIsAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqIsAuto::~ReqIsAuto() {
  SharedDtor();
}

void ReqIsAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqIsAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqIsAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqIsAuto_descriptor_;
}

const ReqIsAuto& ReqIsAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqIsAuto* ReqIsAuto::default_instance_ = NULL;

ReqIsAuto* ReqIsAuto::New() const {
  return new ReqIsAuto;
}

void ReqIsAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqIsAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqIsAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqIsAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqIsAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqIsAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqIsAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqIsAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqIsAuto::MergeFrom(const ReqIsAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqIsAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIsAuto::CopyFrom(const ReqIsAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIsAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqIsAuto::Swap(ReqIsAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqIsAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqIsAuto_descriptor_;
  metadata.reflection = ReqIsAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpdateUserInfo::kUidFieldNumber;
const int ReqUpdateUserInfo::kVidFieldNumber;
#endif  // !_MSC_VER

ReqUpdateUserInfo::ReqUpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUpdateUserInfo::InitAsDefaultInstance() {
}

ReqUpdateUserInfo::ReqUpdateUserInfo(const ReqUpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpdateUserInfo::~ReqUpdateUserInfo() {
  SharedDtor();
}

void ReqUpdateUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpdateUserInfo_descriptor_;
}

const ReqUpdateUserInfo& ReqUpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqUpdateUserInfo* ReqUpdateUserInfo::default_instance_ = NULL;

ReqUpdateUserInfo* ReqUpdateUserInfo::New() const {
  return new ReqUpdateUserInfo;
}

void ReqUpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    vid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vid;
        break;
      }

      // optional int32 vid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpdateUserInfo::MergeFrom(const ReqUpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateUserInfo::CopyFrom(const ReqUpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqUpdateUserInfo::Swap(ReqUpdateUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpdateUserInfo_descriptor_;
  metadata.reflection = ReqUpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRoomInfo::kUidFieldNumber;
const int ReqRoomInfo::kVidFieldNumber;
const int ReqRoomInfo::kSkeyFieldNumber;
#endif  // !_MSC_VER

ReqRoomInfo::ReqRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRoomInfo::InitAsDefaultInstance() {
}

ReqRoomInfo::ReqRoomInfo(const ReqRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  vid_ = 0;
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRoomInfo::~ReqRoomInfo() {
  SharedDtor();
}

void ReqRoomInfo::SharedDtor() {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    delete skey_;
  }
  if (this != default_instance_) {
  }
}

void ReqRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRoomInfo_descriptor_;
}

const ReqRoomInfo& ReqRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqRoomInfo* ReqRoomInfo::default_instance_ = NULL;

ReqRoomInfo* ReqRoomInfo::New() const {
  return new ReqRoomInfo;
}

void ReqRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    vid_ = 0;
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::kEmptyString) {
        skey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vid;
        break;
      }

      // optional int32 vid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skey;
        break;
      }

      // optional string skey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->skey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->skey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional string skey = 3;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRoomInfo::MergeFrom(const ReqRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoomInfo::CopyFrom(const ReqRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqRoomInfo::Swap(ReqRoomInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vid_, other->vid_);
    std::swap(skey_, other->skey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRoomInfo_descriptor_;
  metadata.reflection = ReqRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChooseDisband::kChoosestateFieldNumber;
#endif  // !_MSC_VER

ReqChooseDisband::ReqChooseDisband()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChooseDisband::InitAsDefaultInstance() {
}

ReqChooseDisband::ReqChooseDisband(const ReqChooseDisband& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChooseDisband::SharedCtor() {
  _cached_size_ = 0;
  choosestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChooseDisband::~ReqChooseDisband() {
  SharedDtor();
}

void ReqChooseDisband::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChooseDisband::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChooseDisband::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChooseDisband_descriptor_;
}

const ReqChooseDisband& ReqChooseDisband::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChooseDisband* ReqChooseDisband::default_instance_ = NULL;

ReqChooseDisband* ReqChooseDisband::New() const {
  return new ReqChooseDisband;
}

void ReqChooseDisband::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    choosestate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChooseDisband::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Choosestate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choosestate_)));
          set_has_choosestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChooseDisband::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Choosestate = 1;
  if (has_choosestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choosestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChooseDisband::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Choosestate = 1;
  if (has_choosestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choosestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChooseDisband::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Choosestate = 1;
    if (has_choosestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choosestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChooseDisband::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChooseDisband* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChooseDisband*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChooseDisband::MergeFrom(const ReqChooseDisband& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choosestate()) {
      set_choosestate(from.choosestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChooseDisband::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChooseDisband::CopyFrom(const ReqChooseDisband& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChooseDisband::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChooseDisband::Swap(ReqChooseDisband* other) {
  if (other != this) {
    std::swap(choosestate_, other->choosestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChooseDisband::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChooseDisband_descriptor_;
  metadata.reflection = ReqChooseDisband_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHu::kHuCardFieldNumber;
const int tagHu::kPasHuChiaridFieldNumber;
#endif  // !_MSC_VER

tagHu::tagHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHu::InitAsDefaultInstance() {
}

tagHu::tagHu(const tagHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHu::SharedCtor() {
  _cached_size_ = 0;
  hucard_ = 0;
  pashuchiarid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHu::~tagHu() {
  SharedDtor();
}

void tagHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHu_descriptor_;
}

const tagHu& tagHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagHu* tagHu::default_instance_ = NULL;

tagHu* tagHu::New() const {
  return new tagHu;
}

void tagHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hucard_ = 0;
    pashuchiarid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PasHuChiarid;
        break;
      }

      // optional int32 PasHuChiarid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PasHuChiarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchiarid_)));
          set_has_pashuchiarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuCard = 1;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hucard(), output);
  }

  // optional int32 PasHuChiarid = 2;
  if (has_pashuchiarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchiarid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuCard = 1;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hucard(), target);
  }

  // optional int32 PasHuChiarid = 2;
  if (has_pashuchiarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchiarid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuCard = 1;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 PasHuChiarid = 2;
    if (has_pashuchiarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchiarid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHu::MergeFrom(const tagHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_pashuchiarid()) {
      set_pashuchiarid(from.pashuchiarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHu::CopyFrom(const tagHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHu::IsInitialized() const {

  return true;
}

void tagHu::Swap(tagHu* other) {
  if (other != this) {
    std::swap(hucard_, other->hucard_);
    std::swap(pashuchiarid_, other->pashuchiarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHu_descriptor_;
  metadata.reflection = tagHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagHu hu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagHu hu = 1;
  for (int i = 0; i < this->hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagHu hu = 1;
  for (int i = 0; i < this->hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagHu hu = 1;
  total_size += 1 * this->hu_size();
  for (int i = 0; i < this->hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hu_.MergeFrom(from.hu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    hu_.Swap(&other->hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangInfo::kCardFieldNumber;
const int tagGangInfo::kStateFieldNumber;
#endif  // !_MSC_VER

tagGangInfo::tagGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGangInfo::InitAsDefaultInstance() {
}

tagGangInfo::tagGangInfo(const tagGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGangInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangInfo::~tagGangInfo() {
  SharedDtor();
}

void tagGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangInfo_descriptor_;
}

const tagGangInfo& tagGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGangInfo* tagGangInfo::default_instance_ = NULL;

tagGangInfo* tagGangInfo::New() const {
  return new tagGangInfo;
}

void tagGangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangInfo::MergeFrom(const tagGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangInfo::CopyFrom(const tagGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagGangInfo::Swap(tagGangInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangInfo_descriptor_;
  metadata.reflection = tagGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGroupCard::kFixedCardFieldNumber;
#endif  // !_MSC_VER

tagGroupCard::tagGroupCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGroupCard::InitAsDefaultInstance() {
}

tagGroupCard::tagGroupCard(const tagGroupCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGroupCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGroupCard::~tagGroupCard() {
  SharedDtor();
}

void tagGroupCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGroupCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGroupCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGroupCard_descriptor_;
}

const tagGroupCard& tagGroupCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGroupCard* tagGroupCard::default_instance_ = NULL;

tagGroupCard* tagGroupCard::New() const {
  return new tagGroupCard;
}

void tagGroupCard::Clear() {
  fixedcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGroupCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.FixedCard FixedCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FixedCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixedcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FixedCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGroupCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.FixedCard FixedCard = 1;
  for (int i = 0; i < this->fixedcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixedcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGroupCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.FixedCard FixedCard = 1;
  for (int i = 0; i < this->fixedcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixedcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGroupCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.FixedCard FixedCard = 1;
  total_size += 1 * this->fixedcard_size();
  for (int i = 0; i < this->fixedcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixedcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGroupCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGroupCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGroupCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGroupCard::MergeFrom(const tagGroupCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixedcard_.MergeFrom(from.fixedcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGroupCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGroupCard::CopyFrom(const tagGroupCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGroupCard::IsInitialized() const {

  for (int i = 0; i < fixedcard_size(); i++) {
    if (!this->fixedcard(i).IsInitialized()) return false;
  }
  return true;
}

void tagGroupCard::Swap(tagGroupCard* other) {
  if (other != this) {
    fixedcard_.Swap(&other->fixedcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGroupCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGroupCard_descriptor_;
  metadata.reflection = tagGroupCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagReadyInfo::kReadyFieldNumber;
const int tagReadyInfo::kRemainReadyTimeFieldNumber;
const int tagReadyInfo::kReadyTimeFieldNumber;
#endif  // !_MSC_VER

tagReadyInfo::tagReadyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagReadyInfo::InitAsDefaultInstance() {
}

tagReadyInfo::tagReadyInfo(const tagReadyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagReadyInfo::SharedCtor() {
  _cached_size_ = 0;
  readytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagReadyInfo::~tagReadyInfo() {
  SharedDtor();
}

void tagReadyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagReadyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagReadyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagReadyInfo_descriptor_;
}

const tagReadyInfo& tagReadyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagReadyInfo* tagReadyInfo::default_instance_ = NULL;

tagReadyInfo* tagReadyInfo::New() const {
  return new tagReadyInfo;
}

void tagReadyInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    readytime_ = 0;
  }
  ready_.Clear();
  remainreadytime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagReadyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ready())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Ready;
        if (input->ExpectTag(16)) goto parse_RemainReadyTime;
        break;
      }

      // repeated int32 RemainReadyTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_remainreadytime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remainreadytime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RemainReadyTime;
        if (input->ExpectTag(24)) goto parse_ReadyTime;
        break;
      }

      // optional int32 ReadyTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readytime_)));
          set_has_readytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagReadyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ready(i), output);
  }

  // repeated int32 RemainReadyTime = 2;
  for (int i = 0; i < this->remainreadytime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->remainreadytime(i), output);
  }

  // optional int32 ReadyTime = 3;
  if (has_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->readytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagReadyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ready(i), target);
  }

  // repeated int32 RemainReadyTime = 2;
  for (int i = 0; i < this->remainreadytime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->remainreadytime(i), target);
  }

  // optional int32 ReadyTime = 3;
  if (has_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->readytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagReadyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 ReadyTime = 3;
    if (has_readytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readytime());
    }

  }
  // repeated int32 Ready = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  // repeated int32 RemainReadyTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->remainreadytime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remainreadytime(i));
    }
    total_size += 1 * this->remainreadytime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagReadyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagReadyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagReadyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagReadyInfo::MergeFrom(const tagReadyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ready_.MergeFrom(from.ready_);
  remainreadytime_.MergeFrom(from.remainreadytime_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_readytime()) {
      set_readytime(from.readytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagReadyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagReadyInfo::CopyFrom(const tagReadyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagReadyInfo::IsInitialized() const {

  return true;
}

void tagReadyInfo::Swap(tagReadyInfo* other) {
  if (other != this) {
    ready_.Swap(&other->ready_);
    remainreadytime_.Swap(&other->remainreadytime_);
    std::swap(readytime_, other->readytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagReadyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagReadyInfo_descriptor_;
  metadata.reflection = tagReadyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameScene::kChangetimeFieldNumber;
const int AckGameScene::kLacktypetimeFieldNumber;
const int AckGameScene::kOutcardtimeFieldNumber;
const int AckGameScene::kOperatetimeFieldNumber;
const int AckGameScene::kBasescoreFieldNumber;
const int AckGameScene::kDelaytimeFieldNumber;
const int AckGameScene::kSceneStatusFieldNumber;
const int AckGameScene::kLeftTimeFieldNumber;
const int AckGameScene::kUserCardFieldNumber;
const int AckGameScene::kHandCardNumsFieldNumber;
const int AckGameScene::kCurOutCardUserFieldNumber;
const int AckGameScene::kShowCardFieldNumber;
const int AckGameScene::kCurOutCardFieldNumber;
const int AckGameScene::kHuInfoFieldNumber;
const int AckGameScene::kTotalScoreFieldNumber;
const int AckGameScene::kGroupCardFieldNumber;
const int AckGameScene::kIsAutoHuFieldNumber;
const int AckGameScene::kBankerChairidFieldNumber;
const int AckGameScene::kUserLackTypeFieldNumber;
const int AckGameScene::kIscurGetCardFieldNumber;
const int AckGameScene::kCardFieldNumber;
const int AckGameScene::kOpTypeFieldNumber;
const int AckGameScene::kGangInfoFieldNumber;
const int AckGameScene::kListenInfoFieldNumber;
const int AckGameScene::kOfflineStateFieldNumber;
const int AckGameScene::kPoolCardLeftNumsFieldNumber;
const int AckGameScene::kPrereadyTimerFieldNumber;
const int AckGameScene::kStandMoneyFieldNumber;
const int AckGameScene::kHorseNumFieldNumber;
const int AckGameScene::kIsDisbandroomFieldNumber;
const int AckGameScene::kDisbandinfoFieldNumber;
const int AckGameScene::kUserDisbandstateFieldNumber;
const int AckGameScene::kUserOnlinestateFieldNumber;
const int AckGameScene::kUserOvertimeFieldNumber;
const int AckGameScene::kGZTableInfoFieldNumber;
const int AckGameScene::kGdsceneFieldNumber;
const int AckGameScene::kIsZhuanZhuanRoomFieldNumber;
const int AckGameScene::kUserReadyInfoFieldNumber;
const int AckGameScene::kScmjCustomiedFieldNumber;
const int AckGameScene::kRoomGoldenFieldNumber;
const int AckGameScene::kHnsceneFieldNumber;
const int AckGameScene::kHunansceneFieldNumber;
const int AckGameScene::kJxsceneFieldNumber;
const int AckGameScene::kPhsceneFieldNumber;
const int AckGameScene::kHubeisceneFieldNumber;
const int AckGameScene::kShanxigamesceneFieldNumber;
const int AckGameScene::kJinhuagamesceneFieldNumber;
const int AckGameScene::kFuzhousceneFieldNumber;
const int AckGameScene::kDgkmjCustomiedFieldNumber;
const int AckGameScene::kNanninggamesceneFieldNumber;
const int AckGameScene::kLaibingamesceneFieldNumber;
const int AckGameScene::kNanpingGameSenceFieldNumber;
const int AckGameScene::kYuanjianggamesceneFieldNumber;
const int AckGameScene::kLongyanGameSenceFieldNumber;
const int AckGameScene::kXiangyangsceneFieldNumber;
const int AckGameScene::kZhenjiangGameSceneFieldNumber;
const int AckGameScene::kJingshanGameSceneFieldNumber;
const int AckGameScene::kQionglaimjCustomiedFieldNumber;
const int AckGameScene::kGuilinzzsceneFieldNumber;
const int AckGameScene::kYunxiaomjsceneFieldNumber;
const int AckGameScene::kOpTypeHuTypeFieldNumber;
#endif  // !_MSC_VER

AckGameScene::AckGameScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameScene::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
  disbandinfo_ = const_cast< ::proto::game::AckDisbandApply*>(&::proto::game::AckDisbandApply::default_instance());
  gztableinfo_ = const_cast< ::proto::game::guizhou::tagGuiZhouTableInfo*>(&::proto::game::guizhou::tagGuiZhouTableInfo::default_instance());
  gdscene_ = const_cast< ::proto::game::gdmahjonggame::gdgamescene*>(&::proto::game::gdmahjonggame::gdgamescene::default_instance());
  userreadyinfo_ = const_cast< ::proto::game::tagReadyInfo*>(&::proto::game::tagReadyInfo::default_instance());
  scmjcustomied_ = const_cast< ::proto::game::scmj::AckCustomiedInfo*>(&::proto::game::scmj::AckCustomiedInfo::default_instance());
  hnscene_ = const_cast< ::proto::game::hnmahjonggame::hngamescene*>(&::proto::game::hnmahjonggame::hngamescene::default_instance());
  hunanscene_ = const_cast< ::proto::game::hunanmj::AckCustomiedInfo*>(&::proto::game::hunanmj::AckCustomiedInfo::default_instance());
  jxscene_ = const_cast< ::proto::game::jxmahjonggame::jxgamescene*>(&::proto::game::jxmahjonggame::jxgamescene::default_instance());
  phscene_ = const_cast< ::proto::game::pinghumj::phgamescene*>(&::proto::game::pinghumj::phgamescene::default_instance());
  hubeiscene_ = const_cast< ::proto::game::hubeimj::hubeiGameScene*>(&::proto::game::hubeimj::hubeiGameScene::default_instance());
  shanxigamescene_ = const_cast< ::proto::game::sxmahjonggame::sxgamescene*>(&::proto::game::sxmahjonggame::sxgamescene::default_instance());
  jinhuagamescene_ = const_cast< ::proto::game::jhmahjonggame::jhgamescene*>(&::proto::game::jhmahjonggame::jhgamescene::default_instance());
  fuzhouscene_ = const_cast< ::proto::game::fuzhoumahjonggame::FZ_GameSence*>(&::proto::game::fuzhoumahjonggame::FZ_GameSence::default_instance());
  dgkmjcustomied_ = const_cast< ::proto::game::dgkmj::AckCustomiedInfo*>(&::proto::game::dgkmj::AckCustomiedInfo::default_instance());
  nanninggamescene_ = const_cast< ::proto::game::nanningmj::nngamescene*>(&::proto::game::nanningmj::nngamescene::default_instance());
  laibingamescene_ = const_cast< ::proto::game::laibinmj::lbgamescene*>(&::proto::game::laibinmj::lbgamescene::default_instance());
  nanpinggamesence_ = const_cast< ::proto::game::nanpingmahjonggame::NanPingGameSence*>(&::proto::game::nanpingmahjonggame::NanPingGameSence::default_instance());
  yuanjianggamescene_ = const_cast< ::proto::game::yuanjiangmj::yjgamescene*>(&::proto::game::yuanjiangmj::yjgamescene::default_instance());
  longyangamesence_ = const_cast< ::proto::game::longyanmj::GamsSence*>(&::proto::game::longyanmj::GamsSence::default_instance());
  xiangyangscene_ = const_cast< ::proto::game::xiangyangmj::tagGameScene*>(&::proto::game::xiangyangmj::tagGameScene::default_instance());
  zhenjianggamescene_ = const_cast< ::proto::game::zhenjiang::zhenjiangGameSence*>(&::proto::game::zhenjiang::zhenjiangGameSence::default_instance());
  jingshangamescene_ = const_cast< ::proto::game::jingshanmj::tagJSGameScence*>(&::proto::game::jingshanmj::tagJSGameScence::default_instance());
  qionglaimjcustomied_ = const_cast< ::proto::game::qionglaimj::AckCustomiedInfo*>(&::proto::game::qionglaimj::AckCustomiedInfo::default_instance());
  guilinzzscene_ = const_cast< ::proto::game::guilinzzmj::AckCustomiedInfo*>(&::proto::game::guilinzzmj::AckCustomiedInfo::default_instance());
  yunxiaomjscene_ = const_cast< ::proto::game::yunxiaomj::AckCustomiedInfo*>(&::proto::game::yunxiaomj::AckCustomiedInfo::default_instance());
}

AckGameScene::AckGameScene(const AckGameScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameScene::SharedCtor() {
  _cached_size_ = 0;
  changetime_ = 0;
  lacktypetime_ = 0;
  outcardtime_ = 0;
  operatetime_ = 0;
  basescore_ = 0;
  delaytime_ = 0;
  scenestatus_ = 0;
  lefttime_ = 0;
  usercard_ = NULL;
  curoutcarduser_ = 0;
  curoutcard_ = 0;
  isautohu_ = 0;
  bankerchairid_ = 0;
  iscurgetcard_ = 0;
  card_ = 0;
  optype_ = 0;
  poolcardleftnums_ = 0;
  preready_timer_ = 0;
  stand_money_ = 0;
  horsenum_ = 0;
  isdisbandroom_ = 0;
  disbandinfo_ = NULL;
  gztableinfo_ = NULL;
  gdscene_ = NULL;
  iszhuanzhuanroom_ = false;
  userreadyinfo_ = NULL;
  scmjcustomied_ = NULL;
  roomgolden_ = 0;
  hnscene_ = NULL;
  hunanscene_ = NULL;
  jxscene_ = NULL;
  phscene_ = NULL;
  hubeiscene_ = NULL;
  shanxigamescene_ = NULL;
  jinhuagamescene_ = NULL;
  fuzhouscene_ = NULL;
  dgkmjcustomied_ = NULL;
  nanninggamescene_ = NULL;
  laibingamescene_ = NULL;
  nanpinggamesence_ = NULL;
  yuanjianggamescene_ = NULL;
  longyangamesence_ = NULL;
  xiangyangscene_ = NULL;
  zhenjianggamescene_ = NULL;
  jingshangamescene_ = NULL;
  qionglaimjcustomied_ = NULL;
  guilinzzscene_ = NULL;
  yunxiaomjscene_ = NULL;
  optypehutype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameScene::~AckGameScene() {
  SharedDtor();
}

void AckGameScene::SharedDtor() {
  if (this != default_instance_) {
    delete usercard_;
    delete disbandinfo_;
    delete gztableinfo_;
    delete gdscene_;
    delete userreadyinfo_;
    delete scmjcustomied_;
    delete hnscene_;
    delete hunanscene_;
    delete jxscene_;
    delete phscene_;
    delete hubeiscene_;
    delete shanxigamescene_;
    delete jinhuagamescene_;
    delete fuzhouscene_;
    delete dgkmjcustomied_;
    delete nanninggamescene_;
    delete laibingamescene_;
    delete nanpinggamesence_;
    delete yuanjianggamescene_;
    delete longyangamesence_;
    delete xiangyangscene_;
    delete zhenjianggamescene_;
    delete jingshangamescene_;
    delete qionglaimjcustomied_;
    delete guilinzzscene_;
    delete yunxiaomjscene_;
  }
}

void AckGameScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameScene_descriptor_;
}

const AckGameScene& AckGameScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameScene* AckGameScene::default_instance_ = NULL;

AckGameScene* AckGameScene::New() const {
  return new AckGameScene;
}

void AckGameScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    changetime_ = 0;
    lacktypetime_ = 0;
    outcardtime_ = 0;
    operatetime_ = 0;
    basescore_ = 0;
    delaytime_ = 0;
    scenestatus_ = 0;
    lefttime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
    curoutcarduser_ = 0;
    curoutcard_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isautohu_ = 0;
    bankerchairid_ = 0;
    iscurgetcard_ = 0;
    card_ = 0;
    optype_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    poolcardleftnums_ = 0;
    preready_timer_ = 0;
    stand_money_ = 0;
    horsenum_ = 0;
    isdisbandroom_ = 0;
    if (has_disbandinfo()) {
      if (disbandinfo_ != NULL) disbandinfo_->::proto::game::AckDisbandApply::Clear();
    }
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (has_gztableinfo()) {
      if (gztableinfo_ != NULL) gztableinfo_->::proto::game::guizhou::tagGuiZhouTableInfo::Clear();
    }
    if (has_gdscene()) {
      if (gdscene_ != NULL) gdscene_->::proto::game::gdmahjonggame::gdgamescene::Clear();
    }
    iszhuanzhuanroom_ = false;
    if (has_userreadyinfo()) {
      if (userreadyinfo_ != NULL) userreadyinfo_->::proto::game::tagReadyInfo::Clear();
    }
    if (has_scmjcustomied()) {
      if (scmjcustomied_ != NULL) scmjcustomied_->::proto::game::scmj::AckCustomiedInfo::Clear();
    }
    roomgolden_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_hnscene()) {
      if (hnscene_ != NULL) hnscene_->::proto::game::hnmahjonggame::hngamescene::Clear();
    }
    if (has_hunanscene()) {
      if (hunanscene_ != NULL) hunanscene_->::proto::game::hunanmj::AckCustomiedInfo::Clear();
    }
    if (has_jxscene()) {
      if (jxscene_ != NULL) jxscene_->::proto::game::jxmahjonggame::jxgamescene::Clear();
    }
    if (has_phscene()) {
      if (phscene_ != NULL) phscene_->::proto::game::pinghumj::phgamescene::Clear();
    }
    if (has_hubeiscene()) {
      if (hubeiscene_ != NULL) hubeiscene_->::proto::game::hubeimj::hubeiGameScene::Clear();
    }
    if (has_shanxigamescene()) {
      if (shanxigamescene_ != NULL) shanxigamescene_->::proto::game::sxmahjonggame::sxgamescene::Clear();
    }
    if (has_jinhuagamescene()) {
      if (jinhuagamescene_ != NULL) jinhuagamescene_->::proto::game::jhmahjonggame::jhgamescene::Clear();
    }
    if (has_fuzhouscene()) {
      if (fuzhouscene_ != NULL) fuzhouscene_->::proto::game::fuzhoumahjonggame::FZ_GameSence::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_dgkmjcustomied()) {
      if (dgkmjcustomied_ != NULL) dgkmjcustomied_->::proto::game::dgkmj::AckCustomiedInfo::Clear();
    }
    if (has_nanninggamescene()) {
      if (nanninggamescene_ != NULL) nanninggamescene_->::proto::game::nanningmj::nngamescene::Clear();
    }
    if (has_laibingamescene()) {
      if (laibingamescene_ != NULL) laibingamescene_->::proto::game::laibinmj::lbgamescene::Clear();
    }
    if (has_nanpinggamesence()) {
      if (nanpinggamesence_ != NULL) nanpinggamesence_->::proto::game::nanpingmahjonggame::NanPingGameSence::Clear();
    }
    if (has_yuanjianggamescene()) {
      if (yuanjianggamescene_ != NULL) yuanjianggamescene_->::proto::game::yuanjiangmj::yjgamescene::Clear();
    }
    if (has_longyangamesence()) {
      if (longyangamesence_ != NULL) longyangamesence_->::proto::game::longyanmj::GamsSence::Clear();
    }
    if (has_xiangyangscene()) {
      if (xiangyangscene_ != NULL) xiangyangscene_->::proto::game::xiangyangmj::tagGameScene::Clear();
    }
    if (has_zhenjianggamescene()) {
      if (zhenjianggamescene_ != NULL) zhenjianggamescene_->::proto::game::zhenjiang::zhenjiangGameSence::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_jingshangamescene()) {
      if (jingshangamescene_ != NULL) jingshangamescene_->::proto::game::jingshanmj::tagJSGameScence::Clear();
    }
    if (has_qionglaimjcustomied()) {
      if (qionglaimjcustomied_ != NULL) qionglaimjcustomied_->::proto::game::qionglaimj::AckCustomiedInfo::Clear();
    }
    if (has_guilinzzscene()) {
      if (guilinzzscene_ != NULL) guilinzzscene_->::proto::game::guilinzzmj::AckCustomiedInfo::Clear();
    }
    if (has_yunxiaomjscene()) {
      if (yunxiaomjscene_ != NULL) yunxiaomjscene_->::proto::game::yunxiaomj::AckCustomiedInfo::Clear();
    }
    optypehutype_ = 0;
  }
  handcardnums_.Clear();
  showcard_.Clear();
  huinfo_.Clear();
  totalscore_.Clear();
  groupcard_.Clear();
  userlacktype_.Clear();
  ganginfo_.Clear();
  listeninfo_.Clear();
  offlinestate_.Clear();
  userdisbandstate_.Clear();
  useronlinestate_.Clear();
  userovertime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 changetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changetime_)));
          set_has_changetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lacktypetime;
        break;
      }

      // optional int32 lacktypetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lacktypetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lacktypetime_)));
          set_has_lacktypetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outcardtime;
        break;
      }

      // optional int32 outcardtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operatetime;
        break;
      }

      // optional int32 operatetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetime_)));
          set_has_operatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional int32 basescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delaytime;
        break;
      }

      // optional int32 delaytime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SceneStatus;
        break;
      }

      // optional int32 SceneStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scenestatus_)));
          set_has_scenestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LeftTime;
        break;
      }

      // optional int32 LeftTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_UserCard;
        break;
      }

      // optional .proto.game.HandCards UserCard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_handcardnums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_HandCardNums;
        if (input->ExpectTag(88)) goto parse_CurOutCardUser;
        break;
      }

      // optional int32 CurOutCardUser = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurOutCardUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curoutcarduser_)));
          set_has_curoutcarduser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ShowCard;
        break;
      }

      // repeated .proto.game.tagShowOutCard ShowCard = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ShowCard;
        if (input->ExpectTag(104)) goto parse_curOutCard;
        break;
      }

      // optional int32 curOutCard = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curOutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curoutcard_)));
          set_has_curoutcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.tagUserHuInfo HuInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_HuInfo;
        if (input->ExpectTag(120)) goto parse_TotalScore;
        break;
      }

      // repeated int32 TotalScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_totalscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totalscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_TotalScore;
        if (input->ExpectTag(130)) goto parse_GroupCard;
        break;
      }

      // repeated .proto.game.tagGroupCard GroupCard = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_GroupCard;
        if (input->ExpectTag(136)) goto parse_IsAutoHu;
        break;
      }

      // optional int32 IsAutoHu = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautohu_)));
          set_has_isautohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_BankerChairid;
        break;
      }

      // optional int32 BankerChairid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BankerChairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerchairid_)));
          set_has_bankerchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UserLackType;
        break;
      }

      // repeated int32 UserLackType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserLackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_userlacktype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userlacktype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_UserLackType;
        if (input->ExpectTag(160)) goto parse_IscurGetCard;
        break;
      }

      // optional int32 IscurGetCard = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IscurGetCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscurgetcard_)));
          set_has_iscurgetcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Card;
        break;
      }

      // optional int32 Card = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_GangInfo;
        break;
      }

      // repeated .proto.game.tagGangInfo GangInfo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_GangInfo;
        if (input->ExpectTag(194)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ListenInfo;
        if (input->ExpectTag(200)) goto parse_OfflineState;
        break;
      }

      // repeated int32 OfflineState = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OfflineState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_offlinestate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_offlinestate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_OfflineState;
        if (input->ExpectTag(208)) goto parse_PoolCardLeftNums;
        break;
      }

      // optional int32 PoolCardLeftNums = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PoolCardLeftNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolcardleftnums_)));
          set_has_poolcardleftnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_preready_timer;
        break;
      }

      // optional int32 preready_timer = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preready_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preready_timer_)));
          set_has_preready_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_HorseNum;
        break;
      }

      // optional int32 HorseNum = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsenum_)));
          set_has_horsenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_isDisbandroom;
        break;
      }

      // optional int32 isDisbandroom = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDisbandroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdisbandroom_)));
          set_has_isdisbandroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_Disbandinfo;
        break;
      }

      // optional .proto.game.AckDisbandApply Disbandinfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Disbandinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disbandinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_UserDisbandstate;
        break;
      }

      // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserDisbandstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdisbandstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_UserDisbandstate;
        if (input->ExpectTag(266)) goto parse_UserOnlinestate;
        break;
      }

      // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserOnlinestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useronlinestate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_UserOnlinestate;
        if (input->ExpectTag(274)) goto parse_UserOvertime;
        break;
      }

      // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserOvertime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userovertime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_UserOvertime;
        if (input->ExpectTag(282)) goto parse_GZTableInfo;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GZTableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gztableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_gdscene;
        break;
      }

      // optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gdscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_IsZhuanZhuanRoom;
        break;
      }

      // optional bool IsZhuanZhuanRoom = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsZhuanZhuanRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iszhuanzhuanroom_)));
          set_has_iszhuanzhuanroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_UserReadyInfo;
        break;
      }

      // optional .proto.game.tagReadyInfo UserReadyInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserReadyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userreadyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_scmjCustomied;
        break;
      }

      // optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scmjCustomied:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scmjcustomied()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_roomGolden;
        break;
      }

      // optional int32 roomGolden = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgolden_)));
          set_has_roomgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_hnscene;
        break;
      }

      // optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hnscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hnscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_hunanscene;
        break;
      }

      // optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hunanscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunanscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_jxscene;
        break;
      }

      // optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jxscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jxscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_phscene;
        break;
      }

      // optional .proto.game.pinghumj.phgamescene phscene = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_hubeiscene;
        break;
      }

      // optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hubeiscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hubeiscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_shanxigamescene;
        break;
      }

      // optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shanxigamescene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shanxigamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_jinhuagamescene;
        break;
      }

      // optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jinhuagamescene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jinhuagamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_fuzhouscene;
        break;
      }

      // optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fuzhouscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fuzhouscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_dgkmjCustomied;
        break;
      }

      // optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dgkmjCustomied:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dgkmjcustomied()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_nanninggamescene;
        break;
      }

      // optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nanninggamescene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nanninggamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_laibingamescene;
        break;
      }

      // optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laibingamescene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laibingamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_nanpingGameSence;
        break;
      }

      // optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nanpingGameSence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nanpinggamesence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_yuanjianggamescene;
        break;
      }

      // optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yuanjianggamescene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yuanjianggamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_longyanGameSence;
        break;
      }

      // optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longyanGameSence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_longyangamesence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_xiangyangscene;
        break;
      }

      // optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xiangyangscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xiangyangscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_zhenjiangGameScene;
        break;
      }

      // optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhenjiangGameScene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhenjianggamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_jingshanGameScene;
        break;
      }

      // optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jingshanGameScene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jingshangamescene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_qionglaimjCustomied;
        break;
      }

      // optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qionglaimjCustomied:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qionglaimjcustomied()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_guilinzzscene;
        break;
      }

      // optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilinzzscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilinzzscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_yunxiaomjscene;
        break;
      }

      // optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yunxiaomjscene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yunxiaomjscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_OpTypeHuType;
        break;
      }

      // optional int32 OpTypeHuType = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpTypeHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optypehutype_)));
          set_has_optypehutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 changetime = 1;
  if (has_changetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changetime(), output);
  }

  // optional int32 lacktypetime = 2;
  if (has_lacktypetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lacktypetime(), output);
  }

  // optional int32 outcardtime = 3;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->outcardtime(), output);
  }

  // optional int32 operatetime = 4;
  if (has_operatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operatetime(), output);
  }

  // optional int32 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->basescore(), output);
  }

  // optional int32 delaytime = 6;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delaytime(), output);
  }

  // optional int32 SceneStatus = 7;
  if (has_scenestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scenestatus(), output);
  }

  // optional int32 LeftTime = 8;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lefttime(), output);
  }

  // optional .proto.game.HandCards UserCard = 9;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usercard(), output);
  }

  // repeated int32 HandCardNums = 10;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->handcardnums(i), output);
  }

  // optional int32 CurOutCardUser = 11;
  if (has_curoutcarduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->curoutcarduser(), output);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->showcard(i), output);
  }

  // optional int32 curOutCard = 13;
  if (has_curoutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->curoutcard(), output);
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->huinfo(i), output);
  }

  // repeated int32 TotalScore = 15;
  for (int i = 0; i < this->totalscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->totalscore(i), output);
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  for (int i = 0; i < this->groupcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->groupcard(i), output);
  }

  // optional int32 IsAutoHu = 17;
  if (has_isautohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isautohu(), output);
  }

  // optional int32 BankerChairid = 18;
  if (has_bankerchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bankerchairid(), output);
  }

  // repeated int32 UserLackType = 19;
  for (int i = 0; i < this->userlacktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->userlacktype(i), output);
  }

  // optional int32 IscurGetCard = 20;
  if (has_iscurgetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->iscurgetcard(), output);
  }

  // optional int32 Card = 21;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->card(), output);
  }

  // optional int32 OpType = 22;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->optype(), output);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->ganginfo(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->listeninfo(i), output);
  }

  // repeated int32 OfflineState = 25;
  for (int i = 0; i < this->offlinestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->offlinestate(i), output);
  }

  // optional int32 PoolCardLeftNums = 26;
  if (has_poolcardleftnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->poolcardleftnums(), output);
  }

  // optional int32 preready_timer = 27;
  if (has_preready_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->preready_timer(), output);
  }

  // optional int32 stand_money = 28;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->stand_money(), output);
  }

  // optional int32 HorseNum = 29;
  if (has_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->horsenum(), output);
  }

  // optional int32 isDisbandroom = 30;
  if (has_isdisbandroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isdisbandroom(), output);
  }

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  if (has_disbandinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->disbandinfo(), output);
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->userdisbandstate(i), output);
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->useronlinestate(i), output);
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  for (int i = 0; i < this->userovertime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->userovertime(i), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
  if (has_gztableinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->gztableinfo(), output);
  }

  // optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
  if (has_gdscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->gdscene(), output);
  }

  // optional bool IsZhuanZhuanRoom = 37;
  if (has_iszhuanzhuanroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->iszhuanzhuanroom(), output);
  }

  // optional .proto.game.tagReadyInfo UserReadyInfo = 38;
  if (has_userreadyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->userreadyinfo(), output);
  }

  // optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
  if (has_scmjcustomied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->scmjcustomied(), output);
  }

  // optional int32 roomGolden = 40;
  if (has_roomgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->roomgolden(), output);
  }

  // optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
  if (has_hnscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->hnscene(), output);
  }

  // optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
  if (has_hunanscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->hunanscene(), output);
  }

  // optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
  if (has_jxscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->jxscene(), output);
  }

  // optional .proto.game.pinghumj.phgamescene phscene = 44;
  if (has_phscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->phscene(), output);
  }

  // optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
  if (has_hubeiscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->hubeiscene(), output);
  }

  // optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
  if (has_shanxigamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->shanxigamescene(), output);
  }

  // optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
  if (has_jinhuagamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->jinhuagamescene(), output);
  }

  // optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
  if (has_fuzhouscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->fuzhouscene(), output);
  }

  // optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
  if (has_dgkmjcustomied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->dgkmjcustomied(), output);
  }

  // optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
  if (has_nanninggamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->nanninggamescene(), output);
  }

  // optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
  if (has_laibingamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->laibingamescene(), output);
  }

  // optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
  if (has_nanpinggamesence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->nanpinggamesence(), output);
  }

  // optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
  if (has_yuanjianggamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->yuanjianggamescene(), output);
  }

  // optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
  if (has_longyangamesence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->longyangamesence(), output);
  }

  // optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
  if (has_xiangyangscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->xiangyangscene(), output);
  }

  // optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
  if (has_zhenjianggamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->zhenjianggamescene(), output);
  }

  // optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
  if (has_jingshangamescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->jingshangamescene(), output);
  }

  // optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
  if (has_qionglaimjcustomied()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->qionglaimjcustomied(), output);
  }

  // optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
  if (has_guilinzzscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->guilinzzscene(), output);
  }

  // optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
  if (has_yunxiaomjscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->yunxiaomjscene(), output);
  }

  // optional int32 OpTypeHuType = 61;
  if (has_optypehutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->optypehutype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 changetime = 1;
  if (has_changetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changetime(), target);
  }

  // optional int32 lacktypetime = 2;
  if (has_lacktypetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lacktypetime(), target);
  }

  // optional int32 outcardtime = 3;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->outcardtime(), target);
  }

  // optional int32 operatetime = 4;
  if (has_operatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operatetime(), target);
  }

  // optional int32 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->basescore(), target);
  }

  // optional int32 delaytime = 6;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delaytime(), target);
  }

  // optional int32 SceneStatus = 7;
  if (has_scenestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->scenestatus(), target);
  }

  // optional int32 LeftTime = 8;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lefttime(), target);
  }

  // optional .proto.game.HandCards UserCard = 9;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usercard(), target);
  }

  // repeated int32 HandCardNums = 10;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->handcardnums(i), target);
  }

  // optional int32 CurOutCardUser = 11;
  if (has_curoutcarduser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->curoutcarduser(), target);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->showcard(i), target);
  }

  // optional int32 curOutCard = 13;
  if (has_curoutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->curoutcard(), target);
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->huinfo(i), target);
  }

  // repeated int32 TotalScore = 15;
  for (int i = 0; i < this->totalscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->totalscore(i), target);
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  for (int i = 0; i < this->groupcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->groupcard(i), target);
  }

  // optional int32 IsAutoHu = 17;
  if (has_isautohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isautohu(), target);
  }

  // optional int32 BankerChairid = 18;
  if (has_bankerchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bankerchairid(), target);
  }

  // repeated int32 UserLackType = 19;
  for (int i = 0; i < this->userlacktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->userlacktype(i), target);
  }

  // optional int32 IscurGetCard = 20;
  if (has_iscurgetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->iscurgetcard(), target);
  }

  // optional int32 Card = 21;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->card(), target);
  }

  // optional int32 OpType = 22;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->optype(), target);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->ganginfo(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->listeninfo(i), target);
  }

  // repeated int32 OfflineState = 25;
  for (int i = 0; i < this->offlinestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->offlinestate(i), target);
  }

  // optional int32 PoolCardLeftNums = 26;
  if (has_poolcardleftnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->poolcardleftnums(), target);
  }

  // optional int32 preready_timer = 27;
  if (has_preready_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->preready_timer(), target);
  }

  // optional int32 stand_money = 28;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->stand_money(), target);
  }

  // optional int32 HorseNum = 29;
  if (has_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->horsenum(), target);
  }

  // optional int32 isDisbandroom = 30;
  if (has_isdisbandroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isdisbandroom(), target);
  }

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  if (has_disbandinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->disbandinfo(), target);
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->userdisbandstate(i), target);
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->useronlinestate(i), target);
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  for (int i = 0; i < this->userovertime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->userovertime(i), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
  if (has_gztableinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->gztableinfo(), target);
  }

  // optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
  if (has_gdscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->gdscene(), target);
  }

  // optional bool IsZhuanZhuanRoom = 37;
  if (has_iszhuanzhuanroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->iszhuanzhuanroom(), target);
  }

  // optional .proto.game.tagReadyInfo UserReadyInfo = 38;
  if (has_userreadyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->userreadyinfo(), target);
  }

  // optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
  if (has_scmjcustomied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->scmjcustomied(), target);
  }

  // optional int32 roomGolden = 40;
  if (has_roomgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->roomgolden(), target);
  }

  // optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
  if (has_hnscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->hnscene(), target);
  }

  // optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
  if (has_hunanscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->hunanscene(), target);
  }

  // optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
  if (has_jxscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->jxscene(), target);
  }

  // optional .proto.game.pinghumj.phgamescene phscene = 44;
  if (has_phscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->phscene(), target);
  }

  // optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
  if (has_hubeiscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->hubeiscene(), target);
  }

  // optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
  if (has_shanxigamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->shanxigamescene(), target);
  }

  // optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
  if (has_jinhuagamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->jinhuagamescene(), target);
  }

  // optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
  if (has_fuzhouscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->fuzhouscene(), target);
  }

  // optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
  if (has_dgkmjcustomied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->dgkmjcustomied(), target);
  }

  // optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
  if (has_nanninggamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->nanninggamescene(), target);
  }

  // optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
  if (has_laibingamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->laibingamescene(), target);
  }

  // optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
  if (has_nanpinggamesence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->nanpinggamesence(), target);
  }

  // optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
  if (has_yuanjianggamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->yuanjianggamescene(), target);
  }

  // optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
  if (has_longyangamesence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->longyangamesence(), target);
  }

  // optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
  if (has_xiangyangscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->xiangyangscene(), target);
  }

  // optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
  if (has_zhenjianggamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->zhenjianggamescene(), target);
  }

  // optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
  if (has_jingshangamescene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->jingshangamescene(), target);
  }

  // optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
  if (has_qionglaimjcustomied()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->qionglaimjcustomied(), target);
  }

  // optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
  if (has_guilinzzscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->guilinzzscene(), target);
  }

  // optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
  if (has_yunxiaomjscene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->yunxiaomjscene(), target);
  }

  // optional int32 OpTypeHuType = 61;
  if (has_optypehutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->optypehutype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 changetime = 1;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changetime());
    }

    // optional int32 lacktypetime = 2;
    if (has_lacktypetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lacktypetime());
    }

    // optional int32 outcardtime = 3;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

    // optional int32 operatetime = 4;
    if (has_operatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetime());
    }

    // optional int32 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basescore());
    }

    // optional int32 delaytime = 6;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 SceneStatus = 7;
    if (has_scenestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scenestatus());
    }

    // optional int32 LeftTime = 8;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.game.HandCards UserCard = 9;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 CurOutCardUser = 11;
    if (has_curoutcarduser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curoutcarduser());
    }

    // optional int32 curOutCard = 13;
    if (has_curoutcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curoutcard());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 IsAutoHu = 17;
    if (has_isautohu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautohu());
    }

    // optional int32 BankerChairid = 18;
    if (has_bankerchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerchairid());
    }

    // optional int32 IscurGetCard = 20;
    if (has_iscurgetcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscurgetcard());
    }

    // optional int32 Card = 21;
    if (has_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 OpType = 22;
    if (has_optype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 PoolCardLeftNums = 26;
    if (has_poolcardleftnums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolcardleftnums());
    }

    // optional int32 preready_timer = 27;
    if (has_preready_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preready_timer());
    }

    // optional int32 stand_money = 28;
    if (has_stand_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 HorseNum = 29;
    if (has_horsenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsenum());
    }

    // optional int32 isDisbandroom = 30;
    if (has_isdisbandroom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdisbandroom());
    }

    // optional .proto.game.AckDisbandApply Disbandinfo = 31;
    if (has_disbandinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disbandinfo());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional .proto.game.guizhou.tagGuiZhouTableInfo GZTableInfo = 35;
    if (has_gztableinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gztableinfo());
    }

    // optional .proto.game.gdmahjonggame.gdgamescene gdscene = 36;
    if (has_gdscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gdscene());
    }

    // optional bool IsZhuanZhuanRoom = 37;
    if (has_iszhuanzhuanroom()) {
      total_size += 2 + 1;
    }

    // optional .proto.game.tagReadyInfo UserReadyInfo = 38;
    if (has_userreadyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userreadyinfo());
    }

    // optional .proto.game.scmj.AckCustomiedInfo scmjCustomied = 39;
    if (has_scmjcustomied()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scmjcustomied());
    }

    // optional int32 roomGolden = 40;
    if (has_roomgolden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgolden());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto.game.hnmahjonggame.hngamescene hnscene = 41;
    if (has_hnscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hnscene());
    }

    // optional .proto.game.hunanmj.AckCustomiedInfo hunanscene = 42;
    if (has_hunanscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hunanscene());
    }

    // optional .proto.game.jxmahjonggame.jxgamescene jxscene = 43;
    if (has_jxscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jxscene());
    }

    // optional .proto.game.pinghumj.phgamescene phscene = 44;
    if (has_phscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phscene());
    }

    // optional .proto.game.hubeimj.hubeiGameScene hubeiscene = 45;
    if (has_hubeiscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hubeiscene());
    }

    // optional .proto.game.sxmahjonggame.sxgamescene shanxigamescene = 46;
    if (has_shanxigamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shanxigamescene());
    }

    // optional .proto.game.jhmahjonggame.jhgamescene jinhuagamescene = 47;
    if (has_jinhuagamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jinhuagamescene());
    }

    // optional .proto.game.fuzhoumahjonggame.FZ_GameSence fuzhouscene = 48;
    if (has_fuzhouscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fuzhouscene());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .proto.game.dgkmj.AckCustomiedInfo dgkmjCustomied = 49;
    if (has_dgkmjcustomied()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dgkmjcustomied());
    }

    // optional .proto.game.nanningmj.nngamescene nanninggamescene = 50;
    if (has_nanninggamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nanninggamescene());
    }

    // optional .proto.game.laibinmj.lbgamescene laibingamescene = 51;
    if (has_laibingamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laibingamescene());
    }

    // optional .proto.game.nanpingmahjonggame.NanPingGameSence nanpingGameSence = 52;
    if (has_nanpinggamesence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nanpinggamesence());
    }

    // optional .proto.game.yuanjiangmj.yjgamescene yuanjianggamescene = 53;
    if (has_yuanjianggamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yuanjianggamescene());
    }

    // optional .proto.game.longyanmj.GamsSence longyanGameSence = 54;
    if (has_longyangamesence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->longyangamesence());
    }

    // optional .proto.game.xiangyangmj.tagGameScene xiangyangscene = 55;
    if (has_xiangyangscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xiangyangscene());
    }

    // optional .proto.game.zhenjiang.zhenjiangGameSence zhenjiangGameScene = 56;
    if (has_zhenjianggamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhenjianggamescene());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .proto.game.jingshanmj.tagJSGameScence jingshanGameScene = 57;
    if (has_jingshangamescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jingshangamescene());
    }

    // optional .proto.game.qionglaimj.AckCustomiedInfo qionglaimjCustomied = 58;
    if (has_qionglaimjcustomied()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qionglaimjcustomied());
    }

    // optional .proto.game.guilinzzmj.AckCustomiedInfo guilinzzscene = 59;
    if (has_guilinzzscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilinzzscene());
    }

    // optional .proto.game.yunxiaomj.AckCustomiedInfo yunxiaomjscene = 60;
    if (has_yunxiaomjscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yunxiaomjscene());
    }

    // optional int32 OpTypeHuType = 61;
    if (has_optypehutype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optypehutype());
    }

  }
  // repeated int32 HandCardNums = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  total_size += 1 * this->showcard_size();
  for (int i = 0; i < this->showcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showcard(i));
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  // repeated int32 TotalScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->totalscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->totalscore(i));
    }
    total_size += 1 * this->totalscore_size() + data_size;
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  total_size += 2 * this->groupcard_size();
  for (int i = 0; i < this->groupcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupcard(i));
  }

  // repeated int32 UserLackType = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->userlacktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userlacktype(i));
    }
    total_size += 2 * this->userlacktype_size() + data_size;
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  total_size += 2 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  total_size += 2 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated int32 OfflineState = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->offlinestate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->offlinestate(i));
    }
    total_size += 2 * this->offlinestate_size() + data_size;
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  total_size += 2 * this->userdisbandstate_size();
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdisbandstate(i));
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  total_size += 2 * this->useronlinestate_size();
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useronlinestate(i));
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  total_size += 2 * this->userovertime_size();
  for (int i = 0; i < this->userovertime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userovertime(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameScene::MergeFrom(const AckGameScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcardnums_.MergeFrom(from.handcardnums_);
  showcard_.MergeFrom(from.showcard_);
  huinfo_.MergeFrom(from.huinfo_);
  totalscore_.MergeFrom(from.totalscore_);
  groupcard_.MergeFrom(from.groupcard_);
  userlacktype_.MergeFrom(from.userlacktype_);
  ganginfo_.MergeFrom(from.ganginfo_);
  listeninfo_.MergeFrom(from.listeninfo_);
  offlinestate_.MergeFrom(from.offlinestate_);
  userdisbandstate_.MergeFrom(from.userdisbandstate_);
  useronlinestate_.MergeFrom(from.useronlinestate_);
  userovertime_.MergeFrom(from.userovertime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changetime()) {
      set_changetime(from.changetime());
    }
    if (from.has_lacktypetime()) {
      set_lacktypetime(from.lacktypetime());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
    if (from.has_operatetime()) {
      set_operatetime(from.operatetime());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_scenestatus()) {
      set_scenestatus(from.scenestatus());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_curoutcarduser()) {
      set_curoutcarduser(from.curoutcarduser());
    }
    if (from.has_curoutcard()) {
      set_curoutcard(from.curoutcard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isautohu()) {
      set_isautohu(from.isautohu());
    }
    if (from.has_bankerchairid()) {
      set_bankerchairid(from.bankerchairid());
    }
    if (from.has_iscurgetcard()) {
      set_iscurgetcard(from.iscurgetcard());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_poolcardleftnums()) {
      set_poolcardleftnums(from.poolcardleftnums());
    }
    if (from.has_preready_timer()) {
      set_preready_timer(from.preready_timer());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_horsenum()) {
      set_horsenum(from.horsenum());
    }
    if (from.has_isdisbandroom()) {
      set_isdisbandroom(from.isdisbandroom());
    }
    if (from.has_disbandinfo()) {
      mutable_disbandinfo()->::proto::game::AckDisbandApply::MergeFrom(from.disbandinfo());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_gztableinfo()) {
      mutable_gztableinfo()->::proto::game::guizhou::tagGuiZhouTableInfo::MergeFrom(from.gztableinfo());
    }
    if (from.has_gdscene()) {
      mutable_gdscene()->::proto::game::gdmahjonggame::gdgamescene::MergeFrom(from.gdscene());
    }
    if (from.has_iszhuanzhuanroom()) {
      set_iszhuanzhuanroom(from.iszhuanzhuanroom());
    }
    if (from.has_userreadyinfo()) {
      mutable_userreadyinfo()->::proto::game::tagReadyInfo::MergeFrom(from.userreadyinfo());
    }
    if (from.has_scmjcustomied()) {
      mutable_scmjcustomied()->::proto::game::scmj::AckCustomiedInfo::MergeFrom(from.scmjcustomied());
    }
    if (from.has_roomgolden()) {
      set_roomgolden(from.roomgolden());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_hnscene()) {
      mutable_hnscene()->::proto::game::hnmahjonggame::hngamescene::MergeFrom(from.hnscene());
    }
    if (from.has_hunanscene()) {
      mutable_hunanscene()->::proto::game::hunanmj::AckCustomiedInfo::MergeFrom(from.hunanscene());
    }
    if (from.has_jxscene()) {
      mutable_jxscene()->::proto::game::jxmahjonggame::jxgamescene::MergeFrom(from.jxscene());
    }
    if (from.has_phscene()) {
      mutable_phscene()->::proto::game::pinghumj::phgamescene::MergeFrom(from.phscene());
    }
    if (from.has_hubeiscene()) {
      mutable_hubeiscene()->::proto::game::hubeimj::hubeiGameScene::MergeFrom(from.hubeiscene());
    }
    if (from.has_shanxigamescene()) {
      mutable_shanxigamescene()->::proto::game::sxmahjonggame::sxgamescene::MergeFrom(from.shanxigamescene());
    }
    if (from.has_jinhuagamescene()) {
      mutable_jinhuagamescene()->::proto::game::jhmahjonggame::jhgamescene::MergeFrom(from.jinhuagamescene());
    }
    if (from.has_fuzhouscene()) {
      mutable_fuzhouscene()->::proto::game::fuzhoumahjonggame::FZ_GameSence::MergeFrom(from.fuzhouscene());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_dgkmjcustomied()) {
      mutable_dgkmjcustomied()->::proto::game::dgkmj::AckCustomiedInfo::MergeFrom(from.dgkmjcustomied());
    }
    if (from.has_nanninggamescene()) {
      mutable_nanninggamescene()->::proto::game::nanningmj::nngamescene::MergeFrom(from.nanninggamescene());
    }
    if (from.has_laibingamescene()) {
      mutable_laibingamescene()->::proto::game::laibinmj::lbgamescene::MergeFrom(from.laibingamescene());
    }
    if (from.has_nanpinggamesence()) {
      mutable_nanpinggamesence()->::proto::game::nanpingmahjonggame::NanPingGameSence::MergeFrom(from.nanpinggamesence());
    }
    if (from.has_yuanjianggamescene()) {
      mutable_yuanjianggamescene()->::proto::game::yuanjiangmj::yjgamescene::MergeFrom(from.yuanjianggamescene());
    }
    if (from.has_longyangamesence()) {
      mutable_longyangamesence()->::proto::game::longyanmj::GamsSence::MergeFrom(from.longyangamesence());
    }
    if (from.has_xiangyangscene()) {
      mutable_xiangyangscene()->::proto::game::xiangyangmj::tagGameScene::MergeFrom(from.xiangyangscene());
    }
    if (from.has_zhenjianggamescene()) {
      mutable_zhenjianggamescene()->::proto::game::zhenjiang::zhenjiangGameSence::MergeFrom(from.zhenjianggamescene());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_jingshangamescene()) {
      mutable_jingshangamescene()->::proto::game::jingshanmj::tagJSGameScence::MergeFrom(from.jingshangamescene());
    }
    if (from.has_qionglaimjcustomied()) {
      mutable_qionglaimjcustomied()->::proto::game::qionglaimj::AckCustomiedInfo::MergeFrom(from.qionglaimjcustomied());
    }
    if (from.has_guilinzzscene()) {
      mutable_guilinzzscene()->::proto::game::guilinzzmj::AckCustomiedInfo::MergeFrom(from.guilinzzscene());
    }
    if (from.has_yunxiaomjscene()) {
      mutable_yunxiaomjscene()->::proto::game::yunxiaomj::AckCustomiedInfo::MergeFrom(from.yunxiaomjscene());
    }
    if (from.has_optypehutype()) {
      set_optypehutype(from.optypehutype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameScene::CopyFrom(const AckGameScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameScene::IsInitialized() const {

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  for (int i = 0; i < showcard_size(); i++) {
    if (!this->showcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < groupcard_size(); i++) {
    if (!this->groupcard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ganginfo_size(); i++) {
    if (!this->ganginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  if (has_disbandinfo()) {
    if (!this->disbandinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < userdisbandstate_size(); i++) {
    if (!this->userdisbandstate(i).IsInitialized()) return false;
  }
  for (int i = 0; i < useronlinestate_size(); i++) {
    if (!this->useronlinestate(i).IsInitialized()) return false;
  }
  for (int i = 0; i < userovertime_size(); i++) {
    if (!this->userovertime(i).IsInitialized()) return false;
  }
  if (has_gztableinfo()) {
    if (!this->gztableinfo().IsInitialized()) return false;
  }
  if (has_hunanscene()) {
    if (!this->hunanscene().IsInitialized()) return false;
  }
  if (has_nanpinggamesence()) {
    if (!this->nanpinggamesence().IsInitialized()) return false;
  }
  if (has_longyangamesence()) {
    if (!this->longyangamesence().IsInitialized()) return false;
  }
  if (has_xiangyangscene()) {
    if (!this->xiangyangscene().IsInitialized()) return false;
  }
  if (has_zhenjianggamescene()) {
    if (!this->zhenjianggamescene().IsInitialized()) return false;
  }
  if (has_guilinzzscene()) {
    if (!this->guilinzzscene().IsInitialized()) return false;
  }
  if (has_yunxiaomjscene()) {
    if (!this->yunxiaomjscene().IsInitialized()) return false;
  }
  return true;
}

void AckGameScene::Swap(AckGameScene* other) {
  if (other != this) {
    std::swap(changetime_, other->changetime_);
    std::swap(lacktypetime_, other->lacktypetime_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(operatetime_, other->operatetime_);
    std::swap(basescore_, other->basescore_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(scenestatus_, other->scenestatus_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(usercard_, other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    std::swap(curoutcarduser_, other->curoutcarduser_);
    showcard_.Swap(&other->showcard_);
    std::swap(curoutcard_, other->curoutcard_);
    huinfo_.Swap(&other->huinfo_);
    totalscore_.Swap(&other->totalscore_);
    groupcard_.Swap(&other->groupcard_);
    std::swap(isautohu_, other->isautohu_);
    std::swap(bankerchairid_, other->bankerchairid_);
    userlacktype_.Swap(&other->userlacktype_);
    std::swap(iscurgetcard_, other->iscurgetcard_);
    std::swap(card_, other->card_);
    std::swap(optype_, other->optype_);
    ganginfo_.Swap(&other->ganginfo_);
    listeninfo_.Swap(&other->listeninfo_);
    offlinestate_.Swap(&other->offlinestate_);
    std::swap(poolcardleftnums_, other->poolcardleftnums_);
    std::swap(preready_timer_, other->preready_timer_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(horsenum_, other->horsenum_);
    std::swap(isdisbandroom_, other->isdisbandroom_);
    std::swap(disbandinfo_, other->disbandinfo_);
    userdisbandstate_.Swap(&other->userdisbandstate_);
    useronlinestate_.Swap(&other->useronlinestate_);
    userovertime_.Swap(&other->userovertime_);
    std::swap(gztableinfo_, other->gztableinfo_);
    std::swap(gdscene_, other->gdscene_);
    std::swap(iszhuanzhuanroom_, other->iszhuanzhuanroom_);
    std::swap(userreadyinfo_, other->userreadyinfo_);
    std::swap(scmjcustomied_, other->scmjcustomied_);
    std::swap(roomgolden_, other->roomgolden_);
    std::swap(hnscene_, other->hnscene_);
    std::swap(hunanscene_, other->hunanscene_);
    std::swap(jxscene_, other->jxscene_);
    std::swap(phscene_, other->phscene_);
    std::swap(hubeiscene_, other->hubeiscene_);
    std::swap(shanxigamescene_, other->shanxigamescene_);
    std::swap(jinhuagamescene_, other->jinhuagamescene_);
    std::swap(fuzhouscene_, other->fuzhouscene_);
    std::swap(dgkmjcustomied_, other->dgkmjcustomied_);
    std::swap(nanninggamescene_, other->nanninggamescene_);
    std::swap(laibingamescene_, other->laibingamescene_);
    std::swap(nanpinggamesence_, other->nanpinggamesence_);
    std::swap(yuanjianggamescene_, other->yuanjianggamescene_);
    std::swap(longyangamesence_, other->longyangamesence_);
    std::swap(xiangyangscene_, other->xiangyangscene_);
    std::swap(zhenjianggamescene_, other->zhenjianggamescene_);
    std::swap(jingshangamescene_, other->jingshangamescene_);
    std::swap(qionglaimjcustomied_, other->qionglaimjcustomied_);
    std::swap(guilinzzscene_, other->guilinzzscene_);
    std::swap(yunxiaomjscene_, other->yunxiaomjscene_);
    std::swap(optypehutype_, other->optypehutype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameScene_descriptor_;
  metadata.reflection = AckGameScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserReady::kReadyFieldNumber;
#endif  // !_MSC_VER

AckUserReady::AckUserReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserReady::InitAsDefaultInstance() {
}

AckUserReady::AckUserReady(const AckUserReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserReady::~AckUserReady() {
  SharedDtor();
}

void AckUserReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserReady_descriptor_;
}

const AckUserReady& AckUserReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserReady* AckUserReady::default_instance_ = NULL;

AckUserReady* AckUserReady::New() const {
  return new AckUserReady;
}

void AckUserReady::Clear() {
  ready_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ready())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ready;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ready(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ready(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserReady::ByteSize() const {
  int total_size = 0;

  // repeated int32 ready = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserReady::MergeFrom(const AckUserReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  ready_.MergeFrom(from.ready_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserReady::CopyFrom(const AckUserReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserReady::IsInitialized() const {

  return true;
}

void AckUserReady::Swap(AckUserReady* other) {
  if (other != this) {
    ready_.Swap(&other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserReady_descriptor_;
  metadata.reflection = AckUserReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStart::kChairIDFieldNumber;
const int AckGameStart::kIsChangBankerFieldNumber;
const int AckGameStart::kTouZiInfoFieldNumber;
#endif  // !_MSC_VER

AckGameStart::AckGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStart::InitAsDefaultInstance() {
}

AckGameStart::AckGameStart(const AckGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStart::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ischangbanker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStart::~AckGameStart() {
  SharedDtor();
}

void AckGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStart_descriptor_;
}

const AckGameStart& AckGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStart* AckGameStart::default_instance_ = NULL;

AckGameStart* AckGameStart::New() const {
  return new AckGameStart;
}

void AckGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    ischangbanker_ = 0;
  }
  touziinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsChangBanker;
        break;
      }

      // optional int32 IsChangBanker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsChangBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischangbanker_)));
          set_has_ischangbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TouZiInfo;
        break;
      }

      // repeated int32 TouZiInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TouZiInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_touziinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_touziinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TouZiInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 IsChangBanker = 2;
  if (has_ischangbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ischangbanker(), output);
  }

  // repeated int32 TouZiInfo = 3;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->touziinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 IsChangBanker = 2;
  if (has_ischangbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ischangbanker(), target);
  }

  // repeated int32 TouZiInfo = 3;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->touziinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 IsChangBanker = 2;
    if (has_ischangbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischangbanker());
    }

  }
  // repeated int32 TouZiInfo = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->touziinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->touziinfo(i));
    }
    total_size += 1 * this->touziinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStart::MergeFrom(const AckGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  touziinfo_.MergeFrom(from.touziinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_ischangbanker()) {
      set_ischangbanker(from.ischangbanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStart::CopyFrom(const AckGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStart::Swap(AckGameStart* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(ischangbanker_, other->ischangbanker_);
    touziinfo_.Swap(&other->touziinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStart_descriptor_;
  metadata.reflection = AckGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHorse::kChairIDFieldNumber;
const int AckHorse::kHorseNumFieldNumber;
#endif  // !_MSC_VER

AckHorse::AckHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHorse::InitAsDefaultInstance() {
}

AckHorse::AckHorse(const AckHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHorse::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  horsenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHorse::~AckHorse() {
  SharedDtor();
}

void AckHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHorse_descriptor_;
}

const AckHorse& AckHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckHorse* AckHorse::default_instance_ = NULL;

AckHorse* AckHorse::New() const {
  return new AckHorse;
}

void AckHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    horsenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HorseNum;
        break;
      }

      // optional int32 HorseNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsenum_)));
          set_has_horsenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 HorseNum = 2;
  if (has_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->horsenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 HorseNum = 2;
  if (has_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->horsenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 HorseNum = 2;
    if (has_horsenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHorse::MergeFrom(const AckHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_horsenum()) {
      set_horsenum(from.horsenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHorse::CopyFrom(const AckHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHorse::IsInitialized() const {

  return true;
}

void AckHorse::Swap(AckHorse* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(horsenum_, other->horsenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHorse_descriptor_;
  metadata.reflection = AckHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFirstHandCard::kUserCardFieldNumber;
const int AckFirstHandCard::kHandCardNumsFieldNumber;
const int AckFirstHandCard::kCardNumFieldNumber;
#endif  // !_MSC_VER

AckFirstHandCard::AckFirstHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFirstHandCard::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
}

AckFirstHandCard::AckFirstHandCard(const AckFirstHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFirstHandCard::SharedCtor() {
  _cached_size_ = 0;
  usercard_ = NULL;
  cardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFirstHandCard::~AckFirstHandCard() {
  SharedDtor();
}

void AckFirstHandCard::SharedDtor() {
  if (this != default_instance_) {
    delete usercard_;
  }
}

void AckFirstHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFirstHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFirstHandCard_descriptor_;
}

const AckFirstHandCard& AckFirstHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckFirstHandCard* AckFirstHandCard::default_instance_ = NULL;

AckFirstHandCard* AckFirstHandCard::New() const {
  return new AckFirstHandCard;
}

void AckFirstHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
    cardnum_ = 0;
  }
  handcardnums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFirstHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handcardnums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        if (input->ExpectTag(24)) goto parse_CardNum;
        break;
      }

      // optional int32 CardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFirstHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(), output);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handcardnums(i), output);
  }

  // optional int32 CardNum = 3;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFirstHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(), target);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handcardnums(i), target);
  }

  // optional int32 CardNum = 3;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFirstHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.HandCards UserCard = 1;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 CardNum = 3;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

  }
  // repeated int32 HandCardNums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFirstHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFirstHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFirstHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFirstHandCard::MergeFrom(const AckFirstHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcardnums_.MergeFrom(from.handcardnums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFirstHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFirstHandCard::CopyFrom(const AckFirstHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFirstHandCard::IsInitialized() const {

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  return true;
}

void AckFirstHandCard::Swap(AckFirstHandCard* other) {
  if (other != this) {
    std::swap(usercard_, other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    std::swap(cardnum_, other->cardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFirstHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFirstHandCard_descriptor_;
  metadata.reflection = AckFirstHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuaPaiInfo::kHuaCountFieldNumber;
const int HuaPaiInfo::kHuaCardFieldNumber;
#endif  // !_MSC_VER

HuaPaiInfo::HuaPaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuaPaiInfo::InitAsDefaultInstance() {
}

HuaPaiInfo::HuaPaiInfo(const HuaPaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuaPaiInfo::SharedCtor() {
  _cached_size_ = 0;
  huacount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuaPaiInfo::~HuaPaiInfo() {
  SharedDtor();
}

void HuaPaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuaPaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuaPaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuaPaiInfo_descriptor_;
}

const HuaPaiInfo& HuaPaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

HuaPaiInfo* HuaPaiInfo::default_instance_ = NULL;

HuaPaiInfo* HuaPaiInfo::New() const {
  return new HuaPaiInfo;
}

void HuaPaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huacount_ = 0;
  }
  huacard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuaPaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuaCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacount_)));
          set_has_huacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        break;
      }

      // repeated int32 HuaCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_huacard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huacard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuaPaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->huacount(), output);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->huacard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuaPaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->huacount(), target);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->huacard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuaPaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuaCount = 1;
    if (has_huacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacount());
    }

  }
  // repeated int32 HuaCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->huacard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huacard(i));
    }
    total_size += 1 * this->huacard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuaPaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuaPaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuaPaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuaPaiInfo::MergeFrom(const HuaPaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huacard_.MergeFrom(from.huacard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huacount()) {
      set_huacount(from.huacount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuaPaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuaPaiInfo::CopyFrom(const HuaPaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuaPaiInfo::IsInitialized() const {

  return true;
}

void HuaPaiInfo::Swap(HuaPaiInfo* other) {
  if (other != this) {
    std::swap(huacount_, other->huacount_);
    huacard_.Swap(&other->huacard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuaPaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuaPaiInfo_descriptor_;
  metadata.reflection = HuaPaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstFlowerHandCard::kUserCardFieldNumber;
const int FirstFlowerHandCard::kHandCardNumsFieldNumber;
const int FirstFlowerHandCard::kHuaPaiFieldNumber;
#endif  // !_MSC_VER

FirstFlowerHandCard::FirstFlowerHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FirstFlowerHandCard::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
}

FirstFlowerHandCard::FirstFlowerHandCard(const FirstFlowerHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FirstFlowerHandCard::SharedCtor() {
  _cached_size_ = 0;
  usercard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstFlowerHandCard::~FirstFlowerHandCard() {
  SharedDtor();
}

void FirstFlowerHandCard::SharedDtor() {
  if (this != default_instance_) {
    delete usercard_;
  }
}

void FirstFlowerHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstFlowerHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstFlowerHandCard_descriptor_;
}

const FirstFlowerHandCard& FirstFlowerHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

FirstFlowerHandCard* FirstFlowerHandCard::default_instance_ = NULL;

FirstFlowerHandCard* FirstFlowerHandCard::New() const {
  return new FirstFlowerHandCard;
}

void FirstFlowerHandCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
  }
  handcardnums_.Clear();
  huapai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstFlowerHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handcardnums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        if (input->ExpectTag(26)) goto parse_HuaPai;
        break;
      }

      // repeated .proto.game.HuaPaiInfo HuaPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HuaPai;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstFlowerHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(), output);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handcardnums(i), output);
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->huapai(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FirstFlowerHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(), target);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handcardnums(i), target);
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->huapai(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FirstFlowerHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.game.HandCards UserCard = 1;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

  }
  // repeated int32 HandCardNums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstFlowerHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstFlowerHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstFlowerHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstFlowerHandCard::MergeFrom(const FirstFlowerHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcardnums_.MergeFrom(from.handcardnums_);
  huapai_.MergeFrom(from.huapai_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstFlowerHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstFlowerHandCard::CopyFrom(const FirstFlowerHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstFlowerHandCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  return true;
}

void FirstFlowerHandCard::Swap(FirstFlowerHandCard* other) {
  if (other != this) {
    std::swap(usercard_, other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    huapai_.Swap(&other->huapai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstFlowerHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstFlowerHandCard_descriptor_;
  metadata.reflection = FirstFlowerHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHuaPai::kChairIDFieldNumber;
const int GetHuaPai::kLeftCardNumFieldNumber;
const int GetHuaPai::kHuaCardFieldNumber;
#endif  // !_MSC_VER

GetHuaPai::GetHuaPai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetHuaPai::InitAsDefaultInstance() {
}

GetHuaPai::GetHuaPai(const GetHuaPai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetHuaPai::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  leftcardnum_ = 0;
  huacard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHuaPai::~GetHuaPai() {
  SharedDtor();
}

void GetHuaPai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetHuaPai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHuaPai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHuaPai_descriptor_;
}

const GetHuaPai& GetHuaPai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

GetHuaPai* GetHuaPai::default_instance_ = NULL;

GetHuaPai* GetHuaPai::New() const {
  return new GetHuaPai;
}

void GetHuaPai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    leftcardnum_ = 0;
    huacard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHuaPai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaCard;
        break;
      }

      // optional int32 HuaCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacard_)));
          set_has_huacard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetHuaPai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcardnum(), output);
  }

  // optional int32 HuaCard = 3;
  if (has_huacard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->huacard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetHuaPai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcardnum(), target);
  }

  // optional int32 HuaCard = 3;
  if (has_huacard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->huacard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetHuaPai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 LeftCardNum = 2;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

    // optional int32 HuaCard = 3;
    if (has_huacard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHuaPai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHuaPai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHuaPai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHuaPai::MergeFrom(const GetHuaPai& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
    if (from.has_huacard()) {
      set_huacard(from.huacard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHuaPai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHuaPai::CopyFrom(const GetHuaPai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHuaPai::IsInitialized() const {

  return true;
}

void GetHuaPai::Swap(GetHuaPai* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(leftcardnum_, other->leftcardnum_);
    std::swap(huacard_, other->huacard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHuaPai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHuaPai_descriptor_;
  metadata.reflection = GetHuaPai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEnSureJoker::kOpenCardFieldNumber;
const int AckEnSureJoker::kCurJokerCardFieldNumber;
const int AckEnSureJoker::kJokerTypeFieldNumber;
const int AckEnSureJoker::kCurJokerCard2FieldNumber;
#endif  // !_MSC_VER

AckEnSureJoker::AckEnSureJoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEnSureJoker::InitAsDefaultInstance() {
}

AckEnSureJoker::AckEnSureJoker(const AckEnSureJoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEnSureJoker::SharedCtor() {
  _cached_size_ = 0;
  opencard_ = 0;
  curjokercard_ = 0;
  jokertype_ = 0;
  curjokercard2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEnSureJoker::~AckEnSureJoker() {
  SharedDtor();
}

void AckEnSureJoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEnSureJoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEnSureJoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEnSureJoker_descriptor_;
}

const AckEnSureJoker& AckEnSureJoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckEnSureJoker* AckEnSureJoker::default_instance_ = NULL;

AckEnSureJoker* AckEnSureJoker::New() const {
  return new AckEnSureJoker;
}

void AckEnSureJoker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opencard_ = 0;
    curjokercard_ = 0;
    jokertype_ = 0;
    curjokercard2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEnSureJoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OpenCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opencard_)));
          set_has_opencard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurJokerCard;
        break;
      }

      // optional int32 CurJokerCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJokerCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjokercard_)));
          set_has_curjokercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_JokerType;
        break;
      }

      // optional int32 JokerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JokerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jokertype_)));
          set_has_jokertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurJokerCard2;
        break;
      }

      // optional int32 CurJokerCard2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJokerCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjokercard2_)));
          set_has_curjokercard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEnSureJoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 OpenCard = 1;
  if (has_opencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opencard(), output);
  }

  // optional int32 CurJokerCard = 2;
  if (has_curjokercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curjokercard(), output);
  }

  // optional int32 JokerType = 3;
  if (has_jokertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jokertype(), output);
  }

  // optional int32 CurJokerCard2 = 4;
  if (has_curjokercard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curjokercard2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEnSureJoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 OpenCard = 1;
  if (has_opencard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opencard(), target);
  }

  // optional int32 CurJokerCard = 2;
  if (has_curjokercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curjokercard(), target);
  }

  // optional int32 JokerType = 3;
  if (has_jokertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jokertype(), target);
  }

  // optional int32 CurJokerCard2 = 4;
  if (has_curjokercard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curjokercard2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEnSureJoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OpenCard = 1;
    if (has_opencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opencard());
    }

    // optional int32 CurJokerCard = 2;
    if (has_curjokercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjokercard());
    }

    // optional int32 JokerType = 3;
    if (has_jokertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jokertype());
    }

    // optional int32 CurJokerCard2 = 4;
    if (has_curjokercard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjokercard2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEnSureJoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEnSureJoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEnSureJoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEnSureJoker::MergeFrom(const AckEnSureJoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opencard()) {
      set_opencard(from.opencard());
    }
    if (from.has_curjokercard()) {
      set_curjokercard(from.curjokercard());
    }
    if (from.has_jokertype()) {
      set_jokertype(from.jokertype());
    }
    if (from.has_curjokercard2()) {
      set_curjokercard2(from.curjokercard2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEnSureJoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEnSureJoker::CopyFrom(const AckEnSureJoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEnSureJoker::IsInitialized() const {

  return true;
}

void AckEnSureJoker::Swap(AckEnSureJoker* other) {
  if (other != this) {
    std::swap(opencard_, other->opencard_);
    std::swap(curjokercard_, other->curjokercard_);
    std::swap(jokertype_, other->jokertype_);
    std::swap(curjokercard2_, other->curjokercard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEnSureJoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEnSureJoker_descriptor_;
  metadata.reflection = AckEnSureJoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoFirstHandCard::kUserCardFieldNumber;
#endif  // !_MSC_VER

VideoFirstHandCard::VideoFirstHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoFirstHandCard::InitAsDefaultInstance() {
}

VideoFirstHandCard::VideoFirstHandCard(const VideoFirstHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoFirstHandCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoFirstHandCard::~VideoFirstHandCard() {
  SharedDtor();
}

void VideoFirstHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoFirstHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFirstHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFirstHandCard_descriptor_;
}

const VideoFirstHandCard& VideoFirstHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

VideoFirstHandCard* VideoFirstHandCard::default_instance_ = NULL;

VideoFirstHandCard* VideoFirstHandCard::New() const {
  return new VideoFirstHandCard;
}

void VideoFirstHandCard::Clear() {
  usercard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoFirstHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoFirstHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoFirstHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoFirstHandCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFirstHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoFirstHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoFirstHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoFirstHandCard::MergeFrom(const VideoFirstHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoFirstHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFirstHandCard::CopyFrom(const VideoFirstHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFirstHandCard::IsInitialized() const {

  for (int i = 0; i < usercard_size(); i++) {
    if (!this->usercard(i).IsInitialized()) return false;
  }
  return true;
}

void VideoFirstHandCard::Swap(VideoFirstHandCard* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoFirstHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFirstHandCard_descriptor_;
  metadata.reflection = VideoFirstHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoFlowerHandCard::kUserCardFieldNumber;
const int VideoFlowerHandCard::kHandCardNumsFieldNumber;
const int VideoFlowerHandCard::kHuaPaiFieldNumber;
#endif  // !_MSC_VER

VideoFlowerHandCard::VideoFlowerHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoFlowerHandCard::InitAsDefaultInstance() {
}

VideoFlowerHandCard::VideoFlowerHandCard(const VideoFlowerHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoFlowerHandCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoFlowerHandCard::~VideoFlowerHandCard() {
  SharedDtor();
}

void VideoFlowerHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoFlowerHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFlowerHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFlowerHandCard_descriptor_;
}

const VideoFlowerHandCard& VideoFlowerHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

VideoFlowerHandCard* VideoFlowerHandCard::default_instance_ = NULL;

VideoFlowerHandCard* VideoFlowerHandCard::New() const {
  return new VideoFlowerHandCard;
}

void VideoFlowerHandCard::Clear() {
  usercard_.Clear();
  handcardnums_.Clear();
  huapai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoFlowerHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handcardnums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        if (input->ExpectTag(26)) goto parse_HuaPai;
        break;
      }

      // repeated .proto.game.HuaPaiInfo HuaPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HuaPai;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoFlowerHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handcardnums(i), output);
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->huapai(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoFlowerHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handcardnums(i), target);
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->huapai(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoFlowerHandCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  // repeated int32 HandCardNums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  // repeated .proto.game.HuaPaiInfo HuaPai = 3;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFlowerHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoFlowerHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoFlowerHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoFlowerHandCard::MergeFrom(const VideoFlowerHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  handcardnums_.MergeFrom(from.handcardnums_);
  huapai_.MergeFrom(from.huapai_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoFlowerHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFlowerHandCard::CopyFrom(const VideoFlowerHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFlowerHandCard::IsInitialized() const {

  for (int i = 0; i < usercard_size(); i++) {
    if (!this->usercard(i).IsInitialized()) return false;
  }
  return true;
}

void VideoFlowerHandCard::Swap(VideoFlowerHandCard* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    huapai_.Swap(&other->huapai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoFlowerHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFlowerHandCard_descriptor_;
  metadata.reflection = VideoFlowerHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeCard::kIschangeFieldNumber;
const int AckChangeCard::kCardFieldNumber;
const int AckChangeCard::kOldCardFieldNumber;
#endif  // !_MSC_VER

AckChangeCard::AckChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChangeCard::InitAsDefaultInstance() {
}

AckChangeCard::AckChangeCard(const AckChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChangeCard::SharedCtor() {
  _cached_size_ = 0;
  ischange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeCard::~AckChangeCard() {
  SharedDtor();
}

void AckChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeCard_descriptor_;
}

const AckChangeCard& AckChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckChangeCard* AckChangeCard::default_instance_ = NULL;

AckChangeCard* AckChangeCard::New() const {
  return new AckChangeCard;
}

void AckChangeCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ischange_ = 0;
  }
  card_.Clear();
  oldcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ischange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischange_)));
          set_has_ischange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // repeated int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        if (input->ExpectTag(24)) goto parse_oldCard;
        break;
      }

      // repeated int32 oldCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_oldcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_oldcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ischange = 1;
  if (has_ischange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ischange(), output);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated int32 oldCard = 3;
  for (int i = 0; i < this->oldcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->oldcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ischange = 1;
  if (has_ischange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ischange(), target);
  }

  // repeated int32 Card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated int32 oldCard = 3;
  for (int i = 0; i < this->oldcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->oldcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChangeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ischange = 1;
    if (has_ischange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischange());
    }

  }
  // repeated int32 Card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 oldCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->oldcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->oldcard(i));
    }
    total_size += 1 * this->oldcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeCard::MergeFrom(const AckChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  oldcard_.MergeFrom(from.oldcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ischange()) {
      set_ischange(from.ischange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeCard::CopyFrom(const AckChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckChangeCard::Swap(AckChangeCard* other) {
  if (other != this) {
    std::swap(ischange_, other->ischange_);
    card_.Swap(&other->card_);
    oldcard_.Swap(&other->oldcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeCard_descriptor_;
  metadata.reflection = AckChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserLackType::kLackTypeFieldNumber;
#endif  // !_MSC_VER

AckUserLackType::AckUserLackType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserLackType::InitAsDefaultInstance() {
}

AckUserLackType::AckUserLackType(const AckUserLackType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserLackType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserLackType::~AckUserLackType() {
  SharedDtor();
}

void AckUserLackType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserLackType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserLackType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserLackType_descriptor_;
}

const AckUserLackType& AckUserLackType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserLackType* AckUserLackType::default_instance_ = NULL;

AckUserLackType* AckUserLackType::New() const {
  return new AckUserLackType;
}

void AckUserLackType::Clear() {
  lacktype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserLackType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 LackType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_lacktype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lacktype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_LackType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserLackType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 LackType = 1;
  for (int i = 0; i < this->lacktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->lacktype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserLackType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 LackType = 1;
  for (int i = 0; i < this->lacktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->lacktype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserLackType::ByteSize() const {
  int total_size = 0;

  // repeated int32 LackType = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lacktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lacktype(i));
    }
    total_size += 1 * this->lacktype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserLackType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserLackType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserLackType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserLackType::MergeFrom(const AckUserLackType& from) {
  GOOGLE_CHECK_NE(&from, this);
  lacktype_.MergeFrom(from.lacktype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserLackType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserLackType::CopyFrom(const AckUserLackType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserLackType::IsInitialized() const {

  return true;
}

void AckUserLackType::Swap(AckUserLackType* other) {
  if (other != this) {
    lacktype_.Swap(&other->lacktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserLackType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserLackType_descriptor_;
  metadata.reflection = AckUserLackType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserLackTypeOk::kChairIDFieldNumber;
const int AckUserLackTypeOk::kIsOkFieldNumber;
#endif  // !_MSC_VER

AckUserLackTypeOk::AckUserLackTypeOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserLackTypeOk::InitAsDefaultInstance() {
}

AckUserLackTypeOk::AckUserLackTypeOk(const AckUserLackTypeOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserLackTypeOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserLackTypeOk::~AckUserLackTypeOk() {
  SharedDtor();
}

void AckUserLackTypeOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserLackTypeOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserLackTypeOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserLackTypeOk_descriptor_;
}

const AckUserLackTypeOk& AckUserLackTypeOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserLackTypeOk* AckUserLackTypeOk::default_instance_ = NULL;

AckUserLackTypeOk* AckUserLackTypeOk::New() const {
  return new AckUserLackTypeOk;
}

void AckUserLackTypeOk::Clear() {
  chairid_.Clear();
  isok_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserLackTypeOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_chairID;
        if (input->ExpectTag(16)) goto parse_isOk;
        break;
      }

      // repeated int32 isOk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_isok())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isok())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOk;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserLackTypeOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->chairid(i), output);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->isok(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserLackTypeOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 chairID = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->chairid(i), target);
  }

  // repeated int32 isOk = 2;
  for (int i = 0; i < this->isok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->isok(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserLackTypeOk::ByteSize() const {
  int total_size = 0;

  // repeated int32 chairID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chairid(i));
    }
    total_size += 1 * this->chairid_size() + data_size;
  }

  // repeated int32 isOk = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->isok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isok(i));
    }
    total_size += 1 * this->isok_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserLackTypeOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserLackTypeOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserLackTypeOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserLackTypeOk::MergeFrom(const AckUserLackTypeOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairid_.MergeFrom(from.chairid_);
  isok_.MergeFrom(from.isok_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserLackTypeOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserLackTypeOk::CopyFrom(const AckUserLackTypeOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserLackTypeOk::IsInitialized() const {

  return true;
}

void AckUserLackTypeOk::Swap(AckUserLackTypeOk* other) {
  if (other != this) {
    chairid_.Swap(&other->chairid_);
    isok_.Swap(&other->isok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserLackTypeOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserLackTypeOk_descriptor_;
  metadata.reflection = AckUserLackTypeOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kCardFieldNumber;
const int tagHuInfo::kLeftNumFieldNumber;
const int tagHuInfo::kHuFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  leftnum_ = 0;
  hufannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    leftnum_ = 0;
    hufannum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftNum;
        break;
      }

      // optional int32 LeftNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnum_)));
          set_has_leftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuFanNum;
        break;
      }

      // optional int32 HuFanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufannum_)));
          set_has_hufannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftnum(), output);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hufannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftnum(), target);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hufannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 LeftNum = 2;
    if (has_leftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnum());
    }

    // optional int32 HuFanNum = 3;
    if (has_hufannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_leftnum()) {
      set_leftnum(from.leftnum());
    }
    if (from.has_hufannum()) {
      set_hufannum(from.hufannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(leftnum_, other->leftnum_);
    std::swap(hufannum_, other->hufannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagListenInfo::kOutCardFieldNumber;
const int tagListenInfo::kHuInfoFieldNumber;
#endif  // !_MSC_VER

tagListenInfo::tagListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagListenInfo::InitAsDefaultInstance() {
}

tagListenInfo::tagListenInfo(const tagListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagListenInfo::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagListenInfo::~tagListenInfo() {
  SharedDtor();
}

void tagListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagListenInfo_descriptor_;
}

const tagListenInfo& tagListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagListenInfo* tagListenInfo::default_instance_ = NULL;

tagListenInfo* tagListenInfo::New() const {
  return new tagListenInfo;
}

void tagListenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcard_ = 0;
  }
  huinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.tagHuInfo HuInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated .proto.game.tagHuInfo HuInfo = 2;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagListenInfo::MergeFrom(const tagListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huinfo_.MergeFrom(from.huinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagListenInfo::CopyFrom(const tagListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagListenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < huinfo_size(); i++) {
    if (!this->huinfo(i).IsInitialized()) return false;
  }
  return true;
}

void tagListenInfo::Swap(tagListenInfo* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagListenInfo_descriptor_;
  metadata.reflection = tagListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPreGangs::kOutCardFieldNumber;
const int tagPreGangs::kGangInfoFieldNumber;
#endif  // !_MSC_VER

tagPreGangs::tagPreGangs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPreGangs::InitAsDefaultInstance() {
}

tagPreGangs::tagPreGangs(const tagPreGangs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPreGangs::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPreGangs::~tagPreGangs() {
  SharedDtor();
}

void tagPreGangs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagPreGangs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPreGangs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPreGangs_descriptor_;
}

const tagPreGangs& tagPreGangs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagPreGangs* tagPreGangs::default_instance_ = NULL;

tagPreGangs* tagPreGangs::New() const {
  return new tagPreGangs;
}

void tagPreGangs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcard_ = 0;
  }
  ganginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPreGangs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangInfo;
        break;
      }

      // repeated int32 GangInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ganginfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ganginfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPreGangs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated int32 GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ganginfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPreGangs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated int32 GangInfo = 2;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ganginfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPreGangs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated int32 GangInfo = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ganginfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ganginfo(i));
    }
    total_size += 1 * this->ganginfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPreGangs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPreGangs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPreGangs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPreGangs::MergeFrom(const tagPreGangs& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo_.MergeFrom(from.ganginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPreGangs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPreGangs::CopyFrom(const tagPreGangs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPreGangs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagPreGangs::Swap(tagPreGangs* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    ganginfo_.Swap(&other->ganginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPreGangs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPreGangs_descriptor_;
  metadata.reflection = tagPreGangs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserGetCard::kChairIDFieldNumber;
const int AckUserGetCard::kLeftCardNumFieldNumber;
const int AckUserGetCard::kCardFieldNumber;
const int AckUserGetCard::kOpTypeFieldNumber;
const int AckUserGetCard::kGangInfoFieldNumber;
const int AckUserGetCard::kListenInfoFieldNumber;
const int AckUserGetCard::kBuFieldNumber;
const int AckUserGetCard::kOpType2FieldNumber;
const int AckUserGetCard::kFzTypeFieldNumber;
const int AckUserGetCard::kGetCardDirFieldNumber;
const int AckUserGetCard::kXyPregangFieldNumber;
const int AckUserGetCard::kLockLaiziFieldNumber;
const int AckUserGetCard::kGetlaiziFieldNumber;
const int AckUserGetCard::kOpTypeHuTypeFieldNumber;
#endif  // !_MSC_VER

AckUserGetCard::AckUserGetCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserGetCard::InitAsDefaultInstance() {
  bu_ = const_cast< ::proto::game::hunanmj::tagBuZhang*>(&::proto::game::hunanmj::tagBuZhang::default_instance());
}

AckUserGetCard::AckUserGetCard(const AckUserGetCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserGetCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  leftcardnum_ = 0;
  card_ = 0;
  optype_ = 0;
  bu_ = NULL;
  optype2_ = 0;
  fz_type_ = 0;
  getcarddir_ = 0;
  locklaizi_ = 0;
  getlaizi_ = 0;
  optypehutype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserGetCard::~AckUserGetCard() {
  SharedDtor();
}

void AckUserGetCard::SharedDtor() {
  if (this != default_instance_) {
    delete bu_;
  }
}

void AckUserGetCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserGetCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserGetCard_descriptor_;
}

const AckUserGetCard& AckUserGetCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserGetCard* AckUserGetCard::default_instance_ = NULL;

AckUserGetCard* AckUserGetCard::New() const {
  return new AckUserGetCard;
}

void AckUserGetCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    leftcardnum_ = 0;
    card_ = 0;
    optype_ = 0;
    if (has_bu()) {
      if (bu_ != NULL) bu_->::proto::game::hunanmj::tagBuZhang::Clear();
    }
    optype2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fz_type_ = 0;
    getcarddir_ = 0;
    locklaizi_ = 0;
    getlaizi_ = 0;
    optypehutype_ = 0;
  }
  ganginfo_.Clear();
  listeninfo_.Clear();
  xy_pregang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserGetCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GangInfo;
        break;
      }

      // repeated .proto.game.tagGangInfo GangInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GangInfo;
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        if (input->ExpectTag(58)) goto parse_bu;
        break;
      }

      // optional .proto.game.hunanmj.tagBuZhang bu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fz_type;
        break;
      }

      // optional int32 fz_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fz_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_type_)));
          set_has_fz_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GetCardDir;
        break;
      }

      // optional int32 GetCardDir = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetCardDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getcarddir_)));
          set_has_getcarddir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.tagPreGangs xy_pregang = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_xy_pregang;
        if (input->ExpectTag(96)) goto parse_LockLaizi;
        break;
      }

      // optional int32 LockLaizi = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockLaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locklaizi_)));
          set_has_locklaizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_getlaizi;
        break;
      }

      // optional int32 getlaizi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getlaizi_)));
          set_has_getlaizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_OpTypeHuType;
        break;
      }

      // optional int32 OpTypeHuType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpTypeHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optypehutype_)));
          set_has_optypehutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserGetCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcardnum(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // optional int32 OpType = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->optype(), output);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ganginfo(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->listeninfo(i), output);
  }

  // optional .proto.game.hunanmj.tagBuZhang bu = 7;
  if (has_bu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bu(), output);
  }

  // optional int32 OpType2 = 8;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->optype2(), output);
  }

  // optional int32 fz_type = 9;
  if (has_fz_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fz_type(), output);
  }

  // optional int32 GetCardDir = 10;
  if (has_getcarddir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->getcarddir(), output);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 11;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->xy_pregang(i), output);
  }

  // optional int32 LockLaizi = 12;
  if (has_locklaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->locklaizi(), output);
  }

  // optional int32 getlaizi = 13;
  if (has_getlaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->getlaizi(), output);
  }

  // optional int32 OpTypeHuType = 15;
  if (has_optypehutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->optypehutype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserGetCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcardnum(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // optional int32 OpType = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->optype(), target);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ganginfo(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->listeninfo(i), target);
  }

  // optional .proto.game.hunanmj.tagBuZhang bu = 7;
  if (has_bu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bu(), target);
  }

  // optional int32 OpType2 = 8;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->optype2(), target);
  }

  // optional int32 fz_type = 9;
  if (has_fz_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fz_type(), target);
  }

  // optional int32 GetCardDir = 10;
  if (has_getcarddir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->getcarddir(), target);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 11;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->xy_pregang(i), target);
  }

  // optional int32 LockLaizi = 12;
  if (has_locklaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->locklaizi(), target);
  }

  // optional int32 getlaizi = 13;
  if (has_getlaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->getlaizi(), target);
  }

  // optional int32 OpTypeHuType = 15;
  if (has_optypehutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->optypehutype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserGetCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 LeftCardNum = 2;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional .proto.game.hunanmj.tagBuZhang bu = 7;
    if (has_bu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bu());
    }

    // optional int32 OpType2 = 8;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fz_type = 9;
    if (has_fz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_type());
    }

    // optional int32 GetCardDir = 10;
    if (has_getcarddir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getcarddir());
    }

    // optional int32 LockLaizi = 12;
    if (has_locklaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locklaizi());
    }

    // optional int32 getlaizi = 13;
    if (has_getlaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getlaizi());
    }

    // optional int32 OpTypeHuType = 15;
    if (has_optypehutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optypehutype());
    }

  }
  // repeated .proto.game.tagGangInfo GangInfo = 5;
  total_size += 1 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 11;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserGetCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserGetCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserGetCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserGetCard::MergeFrom(const AckUserGetCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo_.MergeFrom(from.ganginfo_);
  listeninfo_.MergeFrom(from.listeninfo_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_bu()) {
      mutable_bu()->::proto::game::hunanmj::tagBuZhang::MergeFrom(from.bu());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fz_type()) {
      set_fz_type(from.fz_type());
    }
    if (from.has_getcarddir()) {
      set_getcarddir(from.getcarddir());
    }
    if (from.has_locklaizi()) {
      set_locklaizi(from.locklaizi());
    }
    if (from.has_getlaizi()) {
      set_getlaizi(from.getlaizi());
    }
    if (from.has_optypehutype()) {
      set_optypehutype(from.optypehutype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserGetCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserGetCard::CopyFrom(const AckUserGetCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserGetCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ganginfo_size(); i++) {
    if (!this->ganginfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  if (has_bu()) {
    if (!this->bu().IsInitialized()) return false;
  }
  for (int i = 0; i < xy_pregang_size(); i++) {
    if (!this->xy_pregang(i).IsInitialized()) return false;
  }
  return true;
}

void AckUserGetCard::Swap(AckUserGetCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(leftcardnum_, other->leftcardnum_);
    std::swap(card_, other->card_);
    std::swap(optype_, other->optype_);
    ganginfo_.Swap(&other->ganginfo_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(bu_, other->bu_);
    std::swap(optype2_, other->optype2_);
    std::swap(fz_type_, other->fz_type_);
    std::swap(getcarddir_, other->getcarddir_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(locklaizi_, other->locklaizi_);
    std::swap(getlaizi_, other->getlaizi_);
    std::swap(optypehutype_, other->optypehutype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserGetCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserGetCard_descriptor_;
  metadata.reflection = AckUserGetCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagShowOutCard::kOutCardLenFieldNumber;
const int tagShowOutCard::kOutCardFieldNumber;
#endif  // !_MSC_VER

tagShowOutCard::tagShowOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagShowOutCard::InitAsDefaultInstance() {
}

tagShowOutCard::tagShowOutCard(const tagShowOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagShowOutCard::SharedCtor() {
  _cached_size_ = 0;
  outcardlen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagShowOutCard::~tagShowOutCard() {
  SharedDtor();
}

void tagShowOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagShowOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagShowOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagShowOutCard_descriptor_;
}

const tagShowOutCard& tagShowOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagShowOutCard* tagShowOutCard::default_instance_ = NULL;

tagShowOutCard* tagShowOutCard::New() const {
  return new tagShowOutCard;
}

void tagShowOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outcardlen_ = 0;
  }
  outcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagShowOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCardLen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardlen_)));
          set_has_outcardlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OutCard;
        break;
      }

      // repeated int32 OutCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OutCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagShowOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OutCardLen = 1;
  if (has_outcardlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcardlen(), output);
  }

  // repeated int32 OutCard = 2;
  for (int i = 0; i < this->outcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagShowOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OutCardLen = 1;
  if (has_outcardlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcardlen(), target);
  }

  // repeated int32 OutCard = 2;
  for (int i = 0; i < this->outcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagShowOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCardLen = 1;
    if (has_outcardlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardlen());
    }

  }
  // repeated int32 OutCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcard(i));
    }
    total_size += 1 * this->outcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagShowOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagShowOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagShowOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagShowOutCard::MergeFrom(const tagShowOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  outcard_.MergeFrom(from.outcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcardlen()) {
      set_outcardlen(from.outcardlen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagShowOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagShowOutCard::CopyFrom(const tagShowOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagShowOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagShowOutCard::Swap(tagShowOutCard* other) {
  if (other != this) {
    std::swap(outcardlen_, other->outcardlen_);
    outcard_.Swap(&other->outcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagShowOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagShowOutCard_descriptor_;
  metadata.reflection = tagShowOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOutCard::kChairIDFieldNumber;
const int AckUserOutCard::kCardFieldNumber;
const int AckUserOutCard::kShowCardFieldNumber;
const int AckUserOutCard::kGZOutCardFieldNumber;
const int AckUserOutCard::kUserCardFieldNumber;
const int AckUserOutCard::kListenInfoFieldNumber;
const int AckUserOutCard::kDaTypeFieldNumber;
const int AckUserOutCard::kDoubleJinFlagFieldNumber;
const int AckUserOutCard::kAutoOutFlagFieldNumber;
#endif  // !_MSC_VER

AckUserOutCard::AckUserOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserOutCard::InitAsDefaultInstance() {
  gzoutcard_ = const_cast< ::proto::game::guizhou::tagGuiZhouOutCard*>(&::proto::game::guizhou::tagGuiZhouOutCard::default_instance());
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
}

AckUserOutCard::AckUserOutCard(const AckUserOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserOutCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  card_ = 0;
  gzoutcard_ = NULL;
  usercard_ = NULL;
  da_type_ = 0;
  doublejinflag_ = false;
  autooutflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOutCard::~AckUserOutCard() {
  SharedDtor();
}

void AckUserOutCard::SharedDtor() {
  if (this != default_instance_) {
    delete gzoutcard_;
    delete usercard_;
  }
}

void AckUserOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOutCard_descriptor_;
}

const AckUserOutCard& AckUserOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOutCard* AckUserOutCard::default_instance_ = NULL;

AckUserOutCard* AckUserOutCard::New() const {
  return new AckUserOutCard;
}

void AckUserOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    card_ = 0;
    if (has_gzoutcard()) {
      if (gzoutcard_ != NULL) gzoutcard_->::proto::game::guizhou::tagGuiZhouOutCard::Clear();
    }
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
    da_type_ = 0;
    doublejinflag_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    autooutflag_ = false;
  }
  showcard_.Clear();
  listeninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ShowCard;
        break;
      }

      // repeated .proto.game.tagShowOutCard ShowCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ShowCard;
        if (input->ExpectTag(34)) goto parse_GZOutCard;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GZOutCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gzoutcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UserCard;
        break;
      }

      // optional .proto.game.HandCards UserCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        if (input->ExpectTag(56)) goto parse_da_type;
        break;
      }

      // optional int32 da_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_da_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &da_type_)));
          set_has_da_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DoubleJinFlag;
        break;
      }

      // optional bool DoubleJinFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DoubleJinFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doublejinflag_)));
          set_has_doublejinflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_AutoOutFlag;
        break;
      }

      // optional bool AutoOutFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoOutFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autooutflag_)));
          set_has_autooutflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->showcard(i), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
  if (has_gzoutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gzoutcard(), output);
  }

  // optional .proto.game.HandCards UserCard = 5;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->usercard(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->listeninfo(i), output);
  }

  // optional int32 da_type = 7;
  if (has_da_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->da_type(), output);
  }

  // optional bool DoubleJinFlag = 8;
  if (has_doublejinflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->doublejinflag(), output);
  }

  // optional bool AutoOutFlag = 9;
  if (has_autooutflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->autooutflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->showcard(i), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
  if (has_gzoutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gzoutcard(), target);
  }

  // optional .proto.game.HandCards UserCard = 5;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->usercard(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->listeninfo(i), target);
  }

  // optional int32 da_type = 7;
  if (has_da_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->da_type(), target);
  }

  // optional bool DoubleJinFlag = 8;
  if (has_doublejinflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->doublejinflag(), target);
  }

  // optional bool AutoOutFlag = 9;
  if (has_autooutflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->autooutflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional .proto.game.guizhou.tagGuiZhouOutCard GZOutCard = 4;
    if (has_gzoutcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gzoutcard());
    }

    // optional .proto.game.HandCards UserCard = 5;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 da_type = 7;
    if (has_da_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->da_type());
    }

    // optional bool DoubleJinFlag = 8;
    if (has_doublejinflag()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool AutoOutFlag = 9;
    if (has_autooutflag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  total_size += 1 * this->showcard_size();
  for (int i = 0; i < this->showcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showcard(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOutCard::MergeFrom(const AckUserOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcard_.MergeFrom(from.showcard_);
  listeninfo_.MergeFrom(from.listeninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_gzoutcard()) {
      mutable_gzoutcard()->::proto::game::guizhou::tagGuiZhouOutCard::MergeFrom(from.gzoutcard());
    }
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_da_type()) {
      set_da_type(from.da_type());
    }
    if (from.has_doublejinflag()) {
      set_doublejinflag(from.doublejinflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_autooutflag()) {
      set_autooutflag(from.autooutflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOutCard::CopyFrom(const AckUserOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < showcard_size(); i++) {
    if (!this->showcard(i).IsInitialized()) return false;
  }
  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckUserOutCard::Swap(AckUserOutCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(card_, other->card_);
    showcard_.Swap(&other->showcard_);
    std::swap(gzoutcard_, other->gzoutcard_);
    std::swap(usercard_, other->usercard_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(da_type_, other->da_type_);
    std::swap(doublejinflag_, other->doublejinflag_);
    std::swap(autooutflag_, other->autooutflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOutCard_descriptor_;
  metadata.reflection = AckUserOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOpNotify::kChairIDFieldNumber;
const int AckOpNotify::kOpTypeFieldNumber;
const int AckOpNotify::kCardFieldNumber;
const int AckOpNotify::kGangFieldNumber;
const int AckOpNotify::kBuFieldNumber;
const int AckOpNotify::kFzTypeFieldNumber;
const int AckOpNotify::kXyPregangFieldNumber;
const int AckOpNotify::kLockLaiziFieldNumber;
const int AckOpNotify::kOpTypeHuTypeFieldNumber;
#endif  // !_MSC_VER

AckOpNotify::AckOpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOpNotify::InitAsDefaultInstance() {
  bu_ = const_cast< ::proto::game::hunanmj::tagBuZhang*>(&::proto::game::hunanmj::tagBuZhang::default_instance());
}

AckOpNotify::AckOpNotify(const AckOpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOpNotify::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  optype_ = 0;
  card_ = 0;
  bu_ = NULL;
  fz_type_ = 0;
  locklaizi_ = 0;
  optypehutype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOpNotify::~AckOpNotify() {
  SharedDtor();
}

void AckOpNotify::SharedDtor() {
  if (this != default_instance_) {
    delete bu_;
  }
}

void AckOpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOpNotify_descriptor_;
}

const AckOpNotify& AckOpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOpNotify* AckOpNotify::default_instance_ = NULL;

AckOpNotify* AckOpNotify::New() const {
  return new AckOpNotify;
}

void AckOpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    optype_ = 0;
    card_ = 0;
    if (has_bu()) {
      if (bu_ != NULL) bu_->::proto::game::hunanmj::tagBuZhang::Clear();
    }
    fz_type_ = 0;
    locklaizi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optypehutype_ = 0;
  }
  gang_.Clear();
  xy_pregang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        break;
      }

      // repeated .proto.game.tagGangInfo Gang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        if (input->ExpectTag(42)) goto parse_bu;
        break;
      }

      // optional .proto.game.hunanmj.tagBuZhang bu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fz_type;
        break;
      }

      // optional int32 fz_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fz_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_type_)));
          set_has_fz_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.tagPreGangs xy_pregang = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_xy_pregang;
        if (input->ExpectTag(64)) goto parse_LockLaizi;
        break;
      }

      // optional int32 LockLaizi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LockLaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locklaizi_)));
          set_has_locklaizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_OpTypeHuType;
        break;
      }

      // optional int32 OpTypeHuType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpTypeHuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optypehutype_)));
          set_has_optypehutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // repeated .proto.game.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gang(i), output);
  }

  // optional .proto.game.hunanmj.tagBuZhang bu = 5;
  if (has_bu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bu(), output);
  }

  // optional int32 fz_type = 6;
  if (has_fz_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fz_type(), output);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xy_pregang(i), output);
  }

  // optional int32 LockLaizi = 8;
  if (has_locklaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->locklaizi(), output);
  }

  // optional int32 OpTypeHuType = 9;
  if (has_optypehutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->optypehutype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // repeated .proto.game.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gang(i), target);
  }

  // optional .proto.game.hunanmj.tagBuZhang bu = 5;
  if (has_bu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bu(), target);
  }

  // optional int32 fz_type = 6;
  if (has_fz_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fz_type(), target);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xy_pregang(i), target);
  }

  // optional int32 LockLaizi = 8;
  if (has_locklaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->locklaizi(), target);
  }

  // optional int32 OpTypeHuType = 9;
  if (has_optypehutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->optypehutype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional .proto.game.hunanmj.tagBuZhang bu = 5;
    if (has_bu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bu());
    }

    // optional int32 fz_type = 6;
    if (has_fz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_type());
    }

    // optional int32 LockLaizi = 8;
    if (has_locklaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locklaizi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 OpTypeHuType = 9;
    if (has_optypehutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optypehutype());
    }

  }
  // repeated .proto.game.tagGangInfo Gang = 4;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOpNotify::MergeFrom(const AckOpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_bu()) {
      mutable_bu()->::proto::game::hunanmj::tagBuZhang::MergeFrom(from.bu());
    }
    if (from.has_fz_type()) {
      set_fz_type(from.fz_type());
    }
    if (from.has_locklaizi()) {
      set_locklaizi(from.locklaizi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_optypehutype()) {
      set_optypehutype(from.optypehutype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOpNotify::CopyFrom(const AckOpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gang_size(); i++) {
    if (!this->gang(i).IsInitialized()) return false;
  }
  if (has_bu()) {
    if (!this->bu().IsInitialized()) return false;
  }
  for (int i = 0; i < xy_pregang_size(); i++) {
    if (!this->xy_pregang(i).IsInitialized()) return false;
  }
  return true;
}

void AckOpNotify::Swap(AckOpNotify* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(optype_, other->optype_);
    std::swap(card_, other->card_);
    gang_.Swap(&other->gang_);
    std::swap(bu_, other->bu_);
    std::swap(fz_type_, other->fz_type_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(locklaizi_, other->locklaizi_);
    std::swap(optypehutype_, other->optypehutype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOpNotify_descriptor_;
  metadata.reflection = AckOpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBcOpResult::kChairIDFieldNumber;
const int AckBcOpResult::kOutCardChairIDFieldNumber;
const int AckBcOpResult::kOpTypeFieldNumber;
const int AckBcOpResult::kCardFieldNumber;
const int AckBcOpResult::kScoreFieldNumber;
const int AckBcOpResult::kGZGangFieldNumber;
const int AckBcOpResult::kGZOpResultFieldNumber;
const int AckBcOpResult::kHNOPResultFieldNumber;
const int AckBcOpResult::kIsQiangganghuFieldNumber;
const int AckBcOpResult::kOpType2FieldNumber;
const int AckBcOpResult::kFzHuTypeFieldNumber;
const int AckBcOpResult::kYunXiaoYouJinTypeFieldNumber;
const int AckBcOpResult::kMingGangFlagFieldNumber;
#endif  // !_MSC_VER

AckBcOpResult::AckBcOpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBcOpResult::InitAsDefaultInstance() {
  gzgang_ = const_cast< ::proto::game::guizhou::tagGuiZhouGang*>(&::proto::game::guizhou::tagGuiZhouGang::default_instance());
  gzopresult_ = const_cast< ::proto::game::guizhou::tagGuiZhouOpResult*>(&::proto::game::guizhou::tagGuiZhouOpResult::default_instance());
  hnopresult_ = const_cast< ::proto::game::hunanmj::tagBuZhangOpResult*>(&::proto::game::hunanmj::tagBuZhangOpResult::default_instance());
}

AckBcOpResult::AckBcOpResult(const AckBcOpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBcOpResult::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  outcardchairid_ = 0;
  optype_ = 0;
  card_ = 0;
  gzgang_ = NULL;
  gzopresult_ = NULL;
  hnopresult_ = NULL;
  isqiangganghu_ = 0;
  optype2_ = 0;
  fz_hu_type_ = 0;
  yunxiaoyoujintype_ = 0;
  minggangflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBcOpResult::~AckBcOpResult() {
  SharedDtor();
}

void AckBcOpResult::SharedDtor() {
  if (this != default_instance_) {
    delete gzgang_;
    delete gzopresult_;
    delete hnopresult_;
  }
}

void AckBcOpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBcOpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBcOpResult_descriptor_;
}

const AckBcOpResult& AckBcOpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckBcOpResult* AckBcOpResult::default_instance_ = NULL;

AckBcOpResult* AckBcOpResult::New() const {
  return new AckBcOpResult;
}

void AckBcOpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    outcardchairid_ = 0;
    optype_ = 0;
    card_ = 0;
    if (has_gzgang()) {
      if (gzgang_ != NULL) gzgang_->::proto::game::guizhou::tagGuiZhouGang::Clear();
    }
    if (has_gzopresult()) {
      if (gzopresult_ != NULL) gzopresult_->::proto::game::guizhou::tagGuiZhouOpResult::Clear();
    }
    if (has_hnopresult()) {
      if (hnopresult_ != NULL) hnopresult_->::proto::game::hunanmj::tagBuZhangOpResult::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isqiangganghu_ = 0;
    optype2_ = 0;
    fz_hu_type_ = 0;
    yunxiaoyoujintype_ = 0;
    minggangflag_ = false;
  }
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBcOpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OutCardChairID;
        break;
      }

      // optional int32 OutCardChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OutCardChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardchairid_)));
          set_has_outcardchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Card;
        break;
      }

      // optional int32 Card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Score;
        if (input->ExpectTag(50)) goto parse_GZGang;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GZGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gzgang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_GZOpResult;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GZOpResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gzopresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_HNOPResult;
        break;
      }

      // optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HNOPResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hnopresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsQiangganghu;
        break;
      }

      // optional int32 IsQiangganghu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsQiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqiangganghu_)));
          set_has_isqiangganghu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fz_hu_type;
        break;
      }

      // optional int32 fz_hu_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fz_hu_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_hu_type_)));
          set_has_fz_hu_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_YunXiaoYouJinType;
        break;
      }

      // optional int32 YunXiaoYouJinType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YunXiaoYouJinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yunxiaoyoujintype_)));
          set_has_yunxiaoyoujintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MingGangFlag;
        break;
      }

      // optional bool MingGangFlag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MingGangFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &minggangflag_)));
          set_has_minggangflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBcOpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OutCardChairID = 2;
  if (has_outcardchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->outcardchairid(), output);
  }

  // optional int32 OpType = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optype(), output);
  }

  // optional int32 Card = 4;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card(), output);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->score(i), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
  if (has_gzgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gzgang(), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
  if (has_gzopresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gzopresult(), output);
  }

  // optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
  if (has_hnopresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hnopresult(), output);
  }

  // optional int32 IsQiangganghu = 9;
  if (has_isqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isqiangganghu(), output);
  }

  // optional int32 OpType2 = 10;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->optype2(), output);
  }

  // optional int32 fz_hu_type = 11;
  if (has_fz_hu_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fz_hu_type(), output);
  }

  // optional int32 YunXiaoYouJinType = 12;
  if (has_yunxiaoyoujintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->yunxiaoyoujintype(), output);
  }

  // optional bool MingGangFlag = 13;
  if (has_minggangflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->minggangflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBcOpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OutCardChairID = 2;
  if (has_outcardchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->outcardchairid(), target);
  }

  // optional int32 OpType = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optype(), target);
  }

  // optional int32 Card = 4;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card(), target);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->score(i), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
  if (has_gzgang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gzgang(), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
  if (has_gzopresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gzopresult(), target);
  }

  // optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
  if (has_hnopresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hnopresult(), target);
  }

  // optional int32 IsQiangganghu = 9;
  if (has_isqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isqiangganghu(), target);
  }

  // optional int32 OpType2 = 10;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->optype2(), target);
  }

  // optional int32 fz_hu_type = 11;
  if (has_fz_hu_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fz_hu_type(), target);
  }

  // optional int32 YunXiaoYouJinType = 12;
  if (has_yunxiaoyoujintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->yunxiaoyoujintype(), target);
  }

  // optional bool MingGangFlag = 13;
  if (has_minggangflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->minggangflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBcOpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OutCardChairID = 2;
    if (has_outcardchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardchairid());
    }

    // optional int32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 Card = 4;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 6;
    if (has_gzgang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gzgang());
    }

    // optional .proto.game.guizhou.tagGuiZhouOpResult GZOpResult = 7;
    if (has_gzopresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gzopresult());
    }

    // optional .proto.game.hunanmj.tagBuZhangOpResult HNOPResult = 8;
    if (has_hnopresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hnopresult());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 IsQiangganghu = 9;
    if (has_isqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqiangganghu());
    }

    // optional int32 OpType2 = 10;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional int32 fz_hu_type = 11;
    if (has_fz_hu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_hu_type());
    }

    // optional int32 YunXiaoYouJinType = 12;
    if (has_yunxiaoyoujintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yunxiaoyoujintype());
    }

    // optional bool MingGangFlag = 13;
    if (has_minggangflag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 Score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBcOpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBcOpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBcOpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBcOpResult::MergeFrom(const AckBcOpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_outcardchairid()) {
      set_outcardchairid(from.outcardchairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_gzgang()) {
      mutable_gzgang()->::proto::game::guizhou::tagGuiZhouGang::MergeFrom(from.gzgang());
    }
    if (from.has_gzopresult()) {
      mutable_gzopresult()->::proto::game::guizhou::tagGuiZhouOpResult::MergeFrom(from.gzopresult());
    }
    if (from.has_hnopresult()) {
      mutable_hnopresult()->::proto::game::hunanmj::tagBuZhangOpResult::MergeFrom(from.hnopresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isqiangganghu()) {
      set_isqiangganghu(from.isqiangganghu());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_fz_hu_type()) {
      set_fz_hu_type(from.fz_hu_type());
    }
    if (from.has_yunxiaoyoujintype()) {
      set_yunxiaoyoujintype(from.yunxiaoyoujintype());
    }
    if (from.has_minggangflag()) {
      set_minggangflag(from.minggangflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBcOpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBcOpResult::CopyFrom(const AckBcOpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBcOpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hnopresult()) {
    if (!this->hnopresult().IsInitialized()) return false;
  }
  return true;
}

void AckBcOpResult::Swap(AckBcOpResult* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(outcardchairid_, other->outcardchairid_);
    std::swap(optype_, other->optype_);
    std::swap(card_, other->card_);
    score_.Swap(&other->score_);
    std::swap(gzgang_, other->gzgang_);
    std::swap(gzopresult_, other->gzopresult_);
    std::swap(hnopresult_, other->hnopresult_);
    std::swap(isqiangganghu_, other->isqiangganghu_);
    std::swap(optype2_, other->optype2_);
    std::swap(fz_hu_type_, other->fz_hu_type_);
    std::swap(yunxiaoyoujintype_, other->yunxiaoyoujintype_);
    std::swap(minggangflag_, other->minggangflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBcOpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBcOpResult_descriptor_;
  metadata.reflection = AckBcOpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckListenNotify::kOpTypeFieldNumber;
const int AckListenNotify::kListenInfoFieldNumber;
#endif  // !_MSC_VER

AckListenNotify::AckListenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckListenNotify::InitAsDefaultInstance() {
}

AckListenNotify::AckListenNotify(const AckListenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckListenNotify::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckListenNotify::~AckListenNotify() {
  SharedDtor();
}

void AckListenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckListenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckListenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckListenNotify_descriptor_;
}

const AckListenNotify& AckListenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckListenNotify* AckListenNotify::default_instance_ = NULL;

AckListenNotify* AckListenNotify::New() const {
  return new AckListenNotify;
}

void AckListenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optype_ = 0;
  }
  listeninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckListenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OpType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ListenInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckListenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OpType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->listeninfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckListenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OpType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->listeninfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckListenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OpType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckListenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckListenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckListenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckListenNotify::MergeFrom(const AckListenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  listeninfo_.MergeFrom(from.listeninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckListenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckListenNotify::CopyFrom(const AckListenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckListenNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < listeninfo_size(); i++) {
    if (!this->listeninfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckListenNotify::Swap(AckListenNotify* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckListenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckListenNotify_descriptor_;
  metadata.reflection = AckListenNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserHu::kHuChairIDFieldNumber;
const int AckUserHu::kPasHuChairIDFieldNumber;
const int AckUserHu::kScoreFieldNumber;
#endif  // !_MSC_VER

AckUserHu::AckUserHu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserHu::InitAsDefaultInstance() {
}

AckUserHu::AckUserHu(const AckUserHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserHu::SharedCtor() {
  _cached_size_ = 0;
  huchairid_ = 0;
  pashuchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserHu::~AckUserHu() {
  SharedDtor();
}

void AckUserHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserHu_descriptor_;
}

const AckUserHu& AckUserHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserHu* AckUserHu::default_instance_ = NULL;

AckUserHu* AckUserHu::New() const {
  return new AckUserHu;
}

void AckUserHu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huchairid_ = 0;
    pashuchairid_ = 0;
  }
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HuChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huchairid_)));
          set_has_huchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PasHuChairID;
        break;
      }

      // optional int32 PasHuChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PasHuChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchairid_)));
          set_has_pashuchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HuChairID = 1;
  if (has_huchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->huchairid(), output);
  }

  // optional int32 PasHuChairID = 2;
  if (has_pashuchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchairid(), output);
  }

  // repeated int32 Score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HuChairID = 1;
  if (has_huchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->huchairid(), target);
  }

  // optional int32 PasHuChairID = 2;
  if (has_pashuchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchairid(), target);
  }

  // repeated int32 Score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HuChairID = 1;
    if (has_huchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huchairid());
    }

    // optional int32 PasHuChairID = 2;
    if (has_pashuchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchairid());
    }

  }
  // repeated int32 Score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserHu::MergeFrom(const AckUserHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huchairid()) {
      set_huchairid(from.huchairid());
    }
    if (from.has_pashuchairid()) {
      set_pashuchairid(from.pashuchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserHu::CopyFrom(const AckUserHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserHu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserHu::Swap(AckUserHu* other) {
  if (other != this) {
    std::swap(huchairid_, other->huchairid_);
    std::swap(pashuchairid_, other->pashuchairid_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserHu_descriptor_;
  metadata.reflection = AckUserHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Horse::kHorseNumFieldNumber;
const int Horse::kHorseCardFieldNumber;
#endif  // !_MSC_VER

Horse::Horse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Horse::InitAsDefaultInstance() {
}

Horse::Horse(const Horse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Horse::SharedCtor() {
  _cached_size_ = 0;
  horsenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Horse::~Horse() {
  SharedDtor();
}

void Horse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Horse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Horse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Horse_descriptor_;
}

const Horse& Horse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

Horse* Horse::default_instance_ = NULL;

Horse* Horse::New() const {
  return new Horse;
}

void Horse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    horsenum_ = 0;
  }
  horsecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Horse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HorseNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsenum_)));
          set_has_horsenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HorseCard;
        break;
      }

      // repeated int32 HorseCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_horsecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_horsecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HorseCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Horse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HorseNum = 1;
  if (has_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->horsenum(), output);
  }

  // repeated int32 HorseCard = 2;
  for (int i = 0; i < this->horsecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->horsecard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Horse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HorseNum = 1;
  if (has_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->horsenum(), target);
  }

  // repeated int32 HorseCard = 2;
  for (int i = 0; i < this->horsecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->horsecard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Horse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HorseNum = 1;
    if (has_horsenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsenum());
    }

  }
  // repeated int32 HorseCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->horsecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->horsecard(i));
    }
    total_size += 1 * this->horsecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Horse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Horse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Horse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Horse::MergeFrom(const Horse& from) {
  GOOGLE_CHECK_NE(&from, this);
  horsecard_.MergeFrom(from.horsecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horsenum()) {
      set_horsenum(from.horsenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Horse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horse::CopyFrom(const Horse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horse::IsInitialized() const {

  return true;
}

void Horse::Swap(Horse* other) {
  if (other != this) {
    std::swap(horsenum_, other->horsenum_);
    horsecard_.Swap(&other->horsecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Horse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Horse_descriptor_;
  metadata.reflection = Horse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserHorseCard::kChairIDFieldNumber;
const int UserHorseCard::kNumFieldNumber;
const int UserHorseCard::kHorseCardFieldNumber;
const int UserHorseCard::kBValidFieldNumber;
#endif  // !_MSC_VER

UserHorseCard::UserHorseCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserHorseCard::InitAsDefaultInstance() {
}

UserHorseCard::UserHorseCard(const UserHorseCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserHorseCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  num_ = 0;
  bvalid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHorseCard::~UserHorseCard() {
  SharedDtor();
}

void UserHorseCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserHorseCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHorseCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHorseCard_descriptor_;
}

const UserHorseCard& UserHorseCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

UserHorseCard* UserHorseCard::default_instance_ = NULL;

UserHorseCard* UserHorseCard::New() const {
  return new UserHorseCard;
}

void UserHorseCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    num_ = 0;
    bvalid_ = 0;
  }
  horsecard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserHorseCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        break;
      }

      // repeated int32 HorseCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_horsecard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_horsecard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HorseCard;
        if (input->ExpectTag(32)) goto parse_bValid;
        break;
      }

      // optional int32 bValid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bvalid_)));
          set_has_bvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserHorseCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->horsecard(i), output);
  }

  // optional int32 bValid = 4;
  if (has_bvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bvalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserHorseCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // repeated int32 HorseCard = 3;
  for (int i = 0; i < this->horsecard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->horsecard(i), target);
  }

  // optional int32 bValid = 4;
  if (has_bvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bvalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserHorseCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bValid = 4;
    if (has_bvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bvalid());
    }

  }
  // repeated int32 HorseCard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->horsecard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->horsecard(i));
    }
    total_size += 1 * this->horsecard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHorseCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserHorseCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserHorseCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserHorseCard::MergeFrom(const UserHorseCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  horsecard_.MergeFrom(from.horsecard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bvalid()) {
      set_bvalid(from.bvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserHorseCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHorseCard::CopyFrom(const UserHorseCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHorseCard::IsInitialized() const {

  return true;
}

void UserHorseCard::Swap(UserHorseCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(num_, other->num_);
    horsecard_.Swap(&other->horsecard_);
    std::swap(bvalid_, other->bvalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserHorseCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHorseCard_descriptor_;
  metadata.reflection = UserHorseCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGameEndGang::kGangTypeFieldNumber;
const int tagGameEndGang::kGangCardFieldNumber;
const int tagGameEndGang::kGZGangFieldNumber;
#endif  // !_MSC_VER

tagGameEndGang::tagGameEndGang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGameEndGang::InitAsDefaultInstance() {
  gzgang_ = const_cast< ::proto::game::guizhou::tagGuiZhouGang*>(&::proto::game::guizhou::tagGuiZhouGang::default_instance());
}

tagGameEndGang::tagGameEndGang(const tagGameEndGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGameEndGang::SharedCtor() {
  _cached_size_ = 0;
  gangtype_ = 0;
  gangcard_ = 0;
  gzgang_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGameEndGang::~tagGameEndGang() {
  SharedDtor();
}

void tagGameEndGang::SharedDtor() {
  if (this != default_instance_) {
    delete gzgang_;
  }
}

void tagGameEndGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameEndGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGameEndGang_descriptor_;
}

const tagGameEndGang& tagGameEndGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGameEndGang* tagGameEndGang::default_instance_ = NULL;

tagGameEndGang* tagGameEndGang::New() const {
  return new tagGameEndGang;
}

void tagGameEndGang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gangtype_ = 0;
    gangcard_ = 0;
    if (has_gzgang()) {
      if (gzgang_ != NULL) gzgang_->::proto::game::guizhou::tagGuiZhouGang::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGameEndGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GangType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtype_)));
          set_has_gangtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GangCard;
        break;
      }

      // optional int32 GangCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangcard_)));
          set_has_gangcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GZGang;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GZGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gzgang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGameEndGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 GangType = 1;
  if (has_gangtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gangtype(), output);
  }

  // optional int32 GangCard = 2;
  if (has_gangcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangcard(), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
  if (has_gzgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gzgang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGameEndGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 GangType = 1;
  if (has_gangtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gangtype(), target);
  }

  // optional int32 GangCard = 2;
  if (has_gangcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangcard(), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
  if (has_gzgang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gzgang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGameEndGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GangType = 1;
    if (has_gangtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtype());
    }

    // optional int32 GangCard = 2;
    if (has_gangcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangcard());
    }

    // optional .proto.game.guizhou.tagGuiZhouGang GZGang = 3;
    if (has_gzgang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gzgang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameEndGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGameEndGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGameEndGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGameEndGang::MergeFrom(const tagGameEndGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangtype()) {
      set_gangtype(from.gangtype());
    }
    if (from.has_gangcard()) {
      set_gangcard(from.gangcard());
    }
    if (from.has_gzgang()) {
      mutable_gzgang()->::proto::game::guizhou::tagGuiZhouGang::MergeFrom(from.gzgang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGameEndGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameEndGang::CopyFrom(const tagGameEndGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameEndGang::IsInitialized() const {

  return true;
}

void tagGameEndGang::Swap(tagGameEndGang* other) {
  if (other != this) {
    std::swap(gangtype_, other->gangtype_);
    std::swap(gangcard_, other->gangcard_);
    std::swap(gzgang_, other->gzgang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGameEndGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGameEndGang_descriptor_;
  metadata.reflection = tagGameEndGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGameEndInfo::kGangFieldNumber;
const int tagGameEndInfo::kEndTypeFieldNumber;
const int tagGameEndInfo::kHuCardFieldNumber;
const int tagGameEndInfo::kBaoTingTypeFieldNumber;
const int tagGameEndInfo::kTotalGangScoreFieldNumber;
#endif  // !_MSC_VER

tagGameEndInfo::tagGameEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGameEndInfo::InitAsDefaultInstance() {
}

tagGameEndInfo::tagGameEndInfo(const tagGameEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGameEndInfo::SharedCtor() {
  _cached_size_ = 0;
  endtype_ = 0;
  hucard_ = 0;
  baotingtype_ = 0;
  totalgangscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGameEndInfo::~tagGameEndInfo() {
  SharedDtor();
}

void tagGameEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGameEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGameEndInfo_descriptor_;
}

const tagGameEndInfo& tagGameEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGameEndInfo* tagGameEndInfo::default_instance_ = NULL;

tagGameEndInfo* tagGameEndInfo::New() const {
  return new tagGameEndInfo;
}

void tagGameEndInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    endtype_ = 0;
    hucard_ = 0;
    baotingtype_ = 0;
    totalgangscore_ = 0;
  }
  gang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGameEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagGameEndGang Gang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Gang;
        if (input->ExpectTag(16)) goto parse_EndType;
        break;
      }

      // optional int32 EndType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtype_)));
          set_has_endtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuCard;
        break;
      }

      // optional int32 HuCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BaoTingType;
        break;
      }

      // optional int32 BaoTingType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaoTingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baotingtype_)));
          set_has_baotingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalGangScore;
        break;
      }

      // optional int32 TotalGangScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgangscore_)));
          set_has_totalgangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGameEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagGameEndGang Gang = 1;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gang(i), output);
  }

  // optional int32 EndType = 2;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtype(), output);
  }

  // optional int32 HuCard = 3;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hucard(), output);
  }

  // optional int32 BaoTingType = 4;
  if (has_baotingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->baotingtype(), output);
  }

  // optional int32 TotalGangScore = 5;
  if (has_totalgangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalgangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGameEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagGameEndGang Gang = 1;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gang(i), target);
  }

  // optional int32 EndType = 2;
  if (has_endtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtype(), target);
  }

  // optional int32 HuCard = 3;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hucard(), target);
  }

  // optional int32 BaoTingType = 4;
  if (has_baotingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->baotingtype(), target);
  }

  // optional int32 TotalGangScore = 5;
  if (has_totalgangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalgangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGameEndInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 EndType = 2;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtype());
    }

    // optional int32 HuCard = 3;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 BaoTingType = 4;
    if (has_baotingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baotingtype());
    }

    // optional int32 TotalGangScore = 5;
    if (has_totalgangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgangscore());
    }

  }
  // repeated .proto.game.tagGameEndGang Gang = 1;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGameEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGameEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGameEndInfo::MergeFrom(const tagGameEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_baotingtype()) {
      set_baotingtype(from.baotingtype());
    }
    if (from.has_totalgangscore()) {
      set_totalgangscore(from.totalgangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGameEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameEndInfo::CopyFrom(const tagGameEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameEndInfo::IsInitialized() const {

  return true;
}

void tagGameEndInfo::Swap(tagGameEndInfo* other) {
  if (other != this) {
    gang_.Swap(&other->gang_);
    std::swap(endtype_, other->endtype_);
    std::swap(hucard_, other->hucard_);
    std::swap(baotingtype_, other->baotingtype_);
    std::swap(totalgangscore_, other->totalgangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGameEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGameEndInfo_descriptor_;
  metadata.reflection = tagGameEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameEnd::kUserCardFieldNumber;
const int AckGameEnd::kHuScoreFieldNumber;
const int AckGameEnd::kGangScoreFieldNumber;
const int AckGameEnd::kScoreFieldNumber;
const int AckGameEnd::kEndStateFieldNumber;
const int AckGameEnd::kIsHuazhuFieldNumber;
const int AckGameEnd::kHuazhuScoreFieldNumber;
const int AckGameEnd::kIsDajiaoFieldNumber;
const int AckGameEnd::kDajiaoScoreFieldNumber;
const int AckGameEnd::kReturnGangScoreFieldNumber;
const int AckGameEnd::kHorseScoreFieldNumber;
const int AckGameEnd::kHorseInfoFieldNumber;
const int AckGameEnd::kUserHorseFieldNumber;
const int AckGameEnd::kHuFanTypeFieldNumber;
const int AckGameEnd::kZhiGangCountFieldNumber;
const int AckGameEnd::kZhiGangScoreFieldNumber;
const int AckGameEnd::kWanGangCountFieldNumber;
const int AckGameEnd::kWanGangScoreFieldNumber;
const int AckGameEnd::kAnGangCountFieldNumber;
const int AckGameEnd::kAnGangScoreFieldNumber;
const int AckGameEnd::kDianGangCountFieldNumber;
const int AckGameEnd::kDianGangScoreFieldNumber;
const int AckGameEnd::kEndInfoFieldNumber;
const int AckGameEnd::kGuiZhouEndInfoFieldNumber;
const int AckGameEnd::kGdGameEndInfoFieldNumber;
const int AckGameEnd::kScEndInfoFieldNumber;
const int AckGameEnd::kHnGameEndInfoFieldNumber;
const int AckGameEnd::kHunanGameEndInfoFieldNumber;
const int AckGameEnd::kHubeiGameendFieldNumber;
const int AckGameEnd::kJxGameEndInfoFieldNumber;
const int AckGameEnd::kPhGameEndInfoFieldNumber;
const int AckGameEnd::kGameEndInfoFieldNumber;
const int AckGameEnd::kSxGameEndInfoFieldNumber;
const int AckGameEnd::kJhGameEndInfoFieldNumber;
const int AckGameEnd::kFuzhouGameEndFieldNumber;
const int AckGameEnd::kDgkEndInfoFieldNumber;
const int AckGameEnd::kNanningGameEndInfoFieldNumber;
const int AckGameEnd::kNanpingGameEndFieldNumber;
const int AckGameEnd::kLaibinGameEndInfoFieldNumber;
const int AckGameEnd::kLongyangameendFieldNumber;
const int AckGameEnd::kGanzhoucgGameendFieldNumber;
const int AckGameEnd::kXiangyangGameEndFieldNumber;
const int AckGameEnd::kXixiahuashuiGameEndFieldNumber;
const int AckGameEnd::kZhenjiangGameEndFieldNumber;
const int AckGameEnd::kQionglaiEndInfoFieldNumber;
const int AckGameEnd::kAnqingGameEndFieldNumber;
const int AckGameEnd::kNanchangGaneEndFieldNumber;
const int AckGameEnd::kGuilinzzGameEndInfoFieldNumber;
const int AckGameEnd::kYunxiaomjGameEndInfoFieldNumber;
#endif  // !_MSC_VER

AckGameEnd::AckGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameEnd::InitAsDefaultInstance() {
  horseinfo_ = const_cast< ::proto::game::Horse*>(&::proto::game::Horse::default_instance());
  guizhouendinfo_ = const_cast< ::proto::game::guizhou::tagGuiZhouEndInfo*>(&::proto::game::guizhou::tagGuiZhouEndInfo::default_instance());
  gdgameendinfo_ = const_cast< ::proto::game::gdmahjonggame::gdmjGameEndInfo*>(&::proto::game::gdmahjonggame::gdmjGameEndInfo::default_instance());
  scendinfo_ = const_cast< ::proto::game::scmj::tagScGameEnd*>(&::proto::game::scmj::tagScGameEnd::default_instance());
  hngameendinfo_ = const_cast< ::proto::game::hnmahjonggame::hnmjGameEndInfo*>(&::proto::game::hnmahjonggame::hnmjGameEndInfo::default_instance());
  hunangameendinfo_ = const_cast< ::proto::game::hunanmj::tagHuNanGameEnd*>(&::proto::game::hunanmj::tagHuNanGameEnd::default_instance());
  hubeigameend_ = const_cast< ::proto::game::hubeimj::AckhubeiGameEnd*>(&::proto::game::hubeimj::AckhubeiGameEnd::default_instance());
  jxgameendinfo_ = const_cast< ::proto::game::jxmahjonggame::jxmjGameEndInfo*>(&::proto::game::jxmahjonggame::jxmjGameEndInfo::default_instance());
  phgameendinfo_ = const_cast< ::proto::game::pinghumj::phmjGameEndInfo*>(&::proto::game::pinghumj::phmjGameEndInfo::default_instance());
  gameendinfo_ = const_cast< ::proto::game::henanmj::tagGameEnd*>(&::proto::game::henanmj::tagGameEnd::default_instance());
  sxgameendinfo_ = const_cast< ::proto::game::sxmahjonggame::sxmjGameEndInfo*>(&::proto::game::sxmahjonggame::sxmjGameEndInfo::default_instance());
  jhgameendinfo_ = const_cast< ::proto::game::jhmahjonggame::jhmjGameEndInfo*>(&::proto::game::jhmahjonggame::jhmjGameEndInfo::default_instance());
  fuzhougameend_ = const_cast< ::proto::game::fuzhoumahjonggame::FZ_GameEnd*>(&::proto::game::fuzhoumahjonggame::FZ_GameEnd::default_instance());
  dgkendinfo_ = const_cast< ::proto::game::dgkmj::tagDgkGameEnd*>(&::proto::game::dgkmj::tagDgkGameEnd::default_instance());
  nanninggameendinfo_ = const_cast< ::proto::game::nanningmj::tagNanNingGameEnd*>(&::proto::game::nanningmj::tagNanNingGameEnd::default_instance());
  nanpinggameend_ = const_cast< ::proto::game::nanpingmahjonggame::GameEnd*>(&::proto::game::nanpingmahjonggame::GameEnd::default_instance());
  laibingameendinfo_ = const_cast< ::proto::game::laibinmj::tagLaiBinGameEnd*>(&::proto::game::laibinmj::tagLaiBinGameEnd::default_instance());
  longyangameend_ = const_cast< ::proto::game::longyanmj::LongYanGameend*>(&::proto::game::longyanmj::LongYanGameend::default_instance());
  ganzhoucggameend_ = const_cast< ::proto::game::ganzhoucg::GanZhoucgGameend*>(&::proto::game::ganzhoucg::GanZhoucgGameend::default_instance());
  xiangyanggameend_ = const_cast< ::proto::game::xiangyangmj::tagXYGameEnd*>(&::proto::game::xiangyangmj::tagXYGameEnd::default_instance());
  xixiahuashuigameend_ = const_cast< ::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd*>(&::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd::default_instance());
  zhenjianggameend_ = const_cast< ::proto::game::zhenjiang::zhenjiangGameEnd*>(&::proto::game::zhenjiang::zhenjiangGameEnd::default_instance());
  qionglaiendinfo_ = const_cast< ::proto::game::qionglaimj::tagQiongLaiGameEnd*>(&::proto::game::qionglaimj::tagQiongLaiGameEnd::default_instance());
  anqinggameend_ = const_cast< ::proto::game::anqingmj::AnQingGameEnd*>(&::proto::game::anqingmj::AnQingGameEnd::default_instance());
  nanchangganeend_ = const_cast< ::proto::game::nanchang::GameEndNanChang*>(&::proto::game::nanchang::GameEndNanChang::default_instance());
  guilinzzgameendinfo_ = const_cast< ::proto::game::guilinzzmj::tagGuiLinzzGameEnd*>(&::proto::game::guilinzzmj::tagGuiLinzzGameEnd::default_instance());
  yunxiaomjgameendinfo_ = const_cast< ::proto::game::yunxiaomj::tagYunXiaomjGameEnd*>(&::proto::game::yunxiaomj::tagYunXiaomjGameEnd::default_instance());
}

AckGameEnd::AckGameEnd(const AckGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameEnd::SharedCtor() {
  _cached_size_ = 0;
  huscore_ = 0;
  gangscore_ = 0;
  endstate_ = 0;
  horseinfo_ = NULL;
  hufantype_ = 0;
  zhigangcount_ = 0;
  zhigangscore_ = 0;
  wangangcount_ = 0;
  wangangscore_ = 0;
  angangcount_ = 0;
  angangscore_ = 0;
  diangangcount_ = 0;
  diangangscore_ = 0;
  guizhouendinfo_ = NULL;
  gdgameendinfo_ = NULL;
  scendinfo_ = NULL;
  hngameendinfo_ = NULL;
  hunangameendinfo_ = NULL;
  hubeigameend_ = NULL;
  jxgameendinfo_ = NULL;
  phgameendinfo_ = NULL;
  gameendinfo_ = NULL;
  sxgameendinfo_ = NULL;
  jhgameendinfo_ = NULL;
  fuzhougameend_ = NULL;
  dgkendinfo_ = NULL;
  nanninggameendinfo_ = NULL;
  nanpinggameend_ = NULL;
  laibingameendinfo_ = NULL;
  longyangameend_ = NULL;
  ganzhoucggameend_ = NULL;
  xiangyanggameend_ = NULL;
  xixiahuashuigameend_ = NULL;
  zhenjianggameend_ = NULL;
  qionglaiendinfo_ = NULL;
  anqinggameend_ = NULL;
  nanchangganeend_ = NULL;
  guilinzzgameendinfo_ = NULL;
  yunxiaomjgameendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameEnd::~AckGameEnd() {
  SharedDtor();
}

void AckGameEnd::SharedDtor() {
  if (this != default_instance_) {
    delete horseinfo_;
    delete guizhouendinfo_;
    delete gdgameendinfo_;
    delete scendinfo_;
    delete hngameendinfo_;
    delete hunangameendinfo_;
    delete hubeigameend_;
    delete jxgameendinfo_;
    delete phgameendinfo_;
    delete gameendinfo_;
    delete sxgameendinfo_;
    delete jhgameendinfo_;
    delete fuzhougameend_;
    delete dgkendinfo_;
    delete nanninggameendinfo_;
    delete nanpinggameend_;
    delete laibingameendinfo_;
    delete longyangameend_;
    delete ganzhoucggameend_;
    delete xiangyanggameend_;
    delete xixiahuashuigameend_;
    delete zhenjianggameend_;
    delete qionglaiendinfo_;
    delete anqinggameend_;
    delete nanchangganeend_;
    delete guilinzzgameendinfo_;
    delete yunxiaomjgameendinfo_;
  }
}

void AckGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameEnd_descriptor_;
}

const AckGameEnd& AckGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameEnd* AckGameEnd::default_instance_ = NULL;

AckGameEnd* AckGameEnd::New() const {
  return new AckGameEnd;
}

void AckGameEnd::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    huscore_ = 0;
    gangscore_ = 0;
    endstate_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_horseinfo()) {
      if (horseinfo_ != NULL) horseinfo_->::proto::game::Horse::Clear();
    }
    hufantype_ = 0;
    zhigangcount_ = 0;
    zhigangscore_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wangangcount_ = 0;
    wangangscore_ = 0;
    angangcount_ = 0;
    angangscore_ = 0;
    diangangcount_ = 0;
    diangangscore_ = 0;
    if (has_guizhouendinfo()) {
      if (guizhouendinfo_ != NULL) guizhouendinfo_->::proto::game::guizhou::tagGuiZhouEndInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_gdgameendinfo()) {
      if (gdgameendinfo_ != NULL) gdgameendinfo_->::proto::game::gdmahjonggame::gdmjGameEndInfo::Clear();
    }
    if (has_scendinfo()) {
      if (scendinfo_ != NULL) scendinfo_->::proto::game::scmj::tagScGameEnd::Clear();
    }
    if (has_hngameendinfo()) {
      if (hngameendinfo_ != NULL) hngameendinfo_->::proto::game::hnmahjonggame::hnmjGameEndInfo::Clear();
    }
    if (has_hunangameendinfo()) {
      if (hunangameendinfo_ != NULL) hunangameendinfo_->::proto::game::hunanmj::tagHuNanGameEnd::Clear();
    }
    if (has_hubeigameend()) {
      if (hubeigameend_ != NULL) hubeigameend_->::proto::game::hubeimj::AckhubeiGameEnd::Clear();
    }
    if (has_jxgameendinfo()) {
      if (jxgameendinfo_ != NULL) jxgameendinfo_->::proto::game::jxmahjonggame::jxmjGameEndInfo::Clear();
    }
    if (has_phgameendinfo()) {
      if (phgameendinfo_ != NULL) phgameendinfo_->::proto::game::pinghumj::phmjGameEndInfo::Clear();
    }
    if (has_gameendinfo()) {
      if (gameendinfo_ != NULL) gameendinfo_->::proto::game::henanmj::tagGameEnd::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_sxgameendinfo()) {
      if (sxgameendinfo_ != NULL) sxgameendinfo_->::proto::game::sxmahjonggame::sxmjGameEndInfo::Clear();
    }
    if (has_jhgameendinfo()) {
      if (jhgameendinfo_ != NULL) jhgameendinfo_->::proto::game::jhmahjonggame::jhmjGameEndInfo::Clear();
    }
    if (has_fuzhougameend()) {
      if (fuzhougameend_ != NULL) fuzhougameend_->::proto::game::fuzhoumahjonggame::FZ_GameEnd::Clear();
    }
    if (has_dgkendinfo()) {
      if (dgkendinfo_ != NULL) dgkendinfo_->::proto::game::dgkmj::tagDgkGameEnd::Clear();
    }
    if (has_nanninggameendinfo()) {
      if (nanninggameendinfo_ != NULL) nanninggameendinfo_->::proto::game::nanningmj::tagNanNingGameEnd::Clear();
    }
    if (has_nanpinggameend()) {
      if (nanpinggameend_ != NULL) nanpinggameend_->::proto::game::nanpingmahjonggame::GameEnd::Clear();
    }
    if (has_laibingameendinfo()) {
      if (laibingameendinfo_ != NULL) laibingameendinfo_->::proto::game::laibinmj::tagLaiBinGameEnd::Clear();
    }
    if (has_longyangameend()) {
      if (longyangameend_ != NULL) longyangameend_->::proto::game::longyanmj::LongYanGameend::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_ganzhoucggameend()) {
      if (ganzhoucggameend_ != NULL) ganzhoucggameend_->::proto::game::ganzhoucg::GanZhoucgGameend::Clear();
    }
    if (has_xiangyanggameend()) {
      if (xiangyanggameend_ != NULL) xiangyanggameend_->::proto::game::xiangyangmj::tagXYGameEnd::Clear();
    }
    if (has_xixiahuashuigameend()) {
      if (xixiahuashuigameend_ != NULL) xixiahuashuigameend_->::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd::Clear();
    }
    if (has_zhenjianggameend()) {
      if (zhenjianggameend_ != NULL) zhenjianggameend_->::proto::game::zhenjiang::zhenjiangGameEnd::Clear();
    }
    if (has_qionglaiendinfo()) {
      if (qionglaiendinfo_ != NULL) qionglaiendinfo_->::proto::game::qionglaimj::tagQiongLaiGameEnd::Clear();
    }
    if (has_anqinggameend()) {
      if (anqinggameend_ != NULL) anqinggameend_->::proto::game::anqingmj::AnQingGameEnd::Clear();
    }
    if (has_nanchangganeend()) {
      if (nanchangganeend_ != NULL) nanchangganeend_->::proto::game::nanchang::GameEndNanChang::Clear();
    }
    if (has_guilinzzgameendinfo()) {
      if (guilinzzgameendinfo_ != NULL) guilinzzgameendinfo_->::proto::game::guilinzzmj::tagGuiLinzzGameEnd::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_yunxiaomjgameendinfo()) {
      if (yunxiaomjgameendinfo_ != NULL) yunxiaomjgameendinfo_->::proto::game::yunxiaomj::tagYunXiaomjGameEnd::Clear();
    }
  }
  usercard_.Clear();
  score_.Clear();
  ishuazhu_.Clear();
  huazhuscore_.Clear();
  isdajiao_.Clear();
  dajiaoscore_.Clear();
  returngangscore_.Clear();
  horsescore_.Clear();
  userhorse_.Clear();
  endinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectTag(16)) goto parse_HuScore;
        break;
      }

      // required int32 HuScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huscore_)));
          set_has_huscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GangScore;
        break;
      }

      // optional int32 GangScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangscore_)));
          set_has_gangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        if (input->ExpectTag(40)) goto parse_EndState;
        break;
      }

      // optional int32 EndState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endstate_)));
          set_has_endstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHuazhu;
        break;
      }

      // repeated int32 isHuazhu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHuazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_ishuazhu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ishuazhu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHuazhu;
        if (input->ExpectTag(56)) goto parse_HuazhuScore;
        break;
      }

      // repeated int32 HuazhuScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuazhuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_huazhuscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huazhuscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HuazhuScore;
        if (input->ExpectTag(64)) goto parse_isDajiao;
        break;
      }

      // repeated int32 isDajiao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDajiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_isdajiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isdajiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isDajiao;
        if (input->ExpectTag(72)) goto parse_DajiaoScore;
        break;
      }

      // repeated int32 DajiaoScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DajiaoScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_dajiaoscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dajiaoscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DajiaoScore;
        if (input->ExpectTag(80)) goto parse_ReturnGangScore;
        break;
      }

      // repeated int32 ReturnGangScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_returngangscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_returngangscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ReturnGangScore;
        if (input->ExpectTag(88)) goto parse_HorseScore;
        break;
      }

      // repeated int32 HorseScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HorseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_horsescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_horsescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_HorseScore;
        if (input->ExpectTag(98)) goto parse_HorseInfo;
        break;
      }

      // optional .proto.game.Horse HorseInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HorseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_UserHorse;
        break;
      }

      // repeated .proto.game.UserHorseCard UserHorse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserHorse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userhorse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_UserHorse;
        if (input->ExpectTag(112)) goto parse_HuFanType;
        break;
      }

      // optional int32 HuFanType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufantype_)));
          set_has_hufantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ZhiGangCount;
        break;
      }

      // optional int32 ZhiGangCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhiGangCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhigangcount_)));
          set_has_zhigangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ZhiGangScore;
        break;
      }

      // optional int32 ZhiGangScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZhiGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhigangscore_)));
          set_has_zhigangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_WanGangCount;
        break;
      }

      // optional int32 WanGangCount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WanGangCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wangangcount_)));
          set_has_wangangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_WanGangScore;
        break;
      }

      // optional int32 WanGangScore = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WanGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wangangscore_)));
          set_has_wangangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_AnGangCount;
        break;
      }

      // optional int32 AnGangCount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnGangCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angangcount_)));
          set_has_angangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_AnGangScore;
        break;
      }

      // optional int32 AnGangScore = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angangscore_)));
          set_has_angangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_DianGangCount;
        break;
      }

      // optional int32 DianGangCount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DianGangCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangcount_)));
          set_has_diangangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_DianGangScore;
        break;
      }

      // optional int32 DianGangScore = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DianGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangscore_)));
          set_has_diangangscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_EndInfo;
        break;
      }

      // repeated .proto.game.tagGameEndInfo EndInfo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_EndInfo;
        if (input->ExpectTag(194)) goto parse_GuiZhouEndInfo;
        break;
      }

      // optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuiZhouEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guizhouendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_gdGameEndInfo;
        break;
      }

      // optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gdGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_scEndInfo;
        break;
      }

      // optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_hnGameEndInfo;
        break;
      }

      // optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hnGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hngameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_hunanGameEndInfo;
        break;
      }

      // optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hunanGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunangameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_hubeiGameend;
        break;
      }

      // optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hubeiGameend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hubeigameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_jxGameEndInfo;
        break;
      }

      // optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jxGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jxgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_phGameEndInfo;
        break;
      }

      // optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_GameEndInfo;
        break;
      }

      // optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_sxGameEndInfo;
        break;
      }

      // optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sxGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sxgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_jhGameEndInfo;
        break;
      }

      // optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jhGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jhgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_fuzhouGameEnd;
        break;
      }

      // optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fuzhouGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fuzhougameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_dgkEndInfo;
        break;
      }

      // optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dgkEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dgkendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_nanningGameEndInfo;
        break;
      }

      // optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nanningGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nanninggameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_nanpingGameEnd;
        break;
      }

      // optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nanpingGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nanpinggameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_laibinGameEndInfo;
        break;
      }

      // optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laibinGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laibingameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_longyangameend;
        break;
      }

      // optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_longyangameend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_longyangameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_ganzhoucgGameend;
        break;
      }

      // optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ganzhoucgGameend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ganzhoucggameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_xiangyangGameEnd;
        break;
      }

      // optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xiangyangGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xiangyanggameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_xixiahuashuiGameEnd;
        break;
      }

      // optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xixiahuashuiGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xixiahuashuigameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_zhenjiangGameEnd;
        break;
      }

      // optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhenjiangGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhenjianggameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_qionglaiEndInfo;
        break;
      }

      // optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qionglaiEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qionglaiendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_anqingGameEnd;
        break;
      }

      // optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anqingGameEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anqinggameend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_nanchangGaneEnd;
        break;
      }

      // optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nanchangGaneEnd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nanchangganeend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_guilinzzGameEndInfo;
        break;
      }

      // optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilinzzGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilinzzgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_yunxiaomjGameEndInfo;
        break;
      }

      // optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yunxiaomjGameEndInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yunxiaomjgameendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  // required int32 HuScore = 2;
  if (has_huscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huscore(), output);
  }

  // optional int32 GangScore = 3;
  if (has_gangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gangscore(), output);
  }

  // repeated int32 Score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->score(i), output);
  }

  // optional int32 EndState = 5;
  if (has_endstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endstate(), output);
  }

  // repeated int32 isHuazhu = 6;
  for (int i = 0; i < this->ishuazhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->ishuazhu(i), output);
  }

  // repeated int32 HuazhuScore = 7;
  for (int i = 0; i < this->huazhuscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->huazhuscore(i), output);
  }

  // repeated int32 isDajiao = 8;
  for (int i = 0; i < this->isdajiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->isdajiao(i), output);
  }

  // repeated int32 DajiaoScore = 9;
  for (int i = 0; i < this->dajiaoscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->dajiaoscore(i), output);
  }

  // repeated int32 ReturnGangScore = 10;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->returngangscore(i), output);
  }

  // repeated int32 HorseScore = 11;
  for (int i = 0; i < this->horsescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->horsescore(i), output);
  }

  // optional .proto.game.Horse HorseInfo = 12;
  if (has_horseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->horseinfo(), output);
  }

  // repeated .proto.game.UserHorseCard UserHorse = 13;
  for (int i = 0; i < this->userhorse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->userhorse(i), output);
  }

  // optional int32 HuFanType = 14;
  if (has_hufantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hufantype(), output);
  }

  // optional int32 ZhiGangCount = 15;
  if (has_zhigangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->zhigangcount(), output);
  }

  // optional int32 ZhiGangScore = 16;
  if (has_zhigangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->zhigangscore(), output);
  }

  // optional int32 WanGangCount = 17;
  if (has_wangangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wangangcount(), output);
  }

  // optional int32 WanGangScore = 18;
  if (has_wangangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->wangangscore(), output);
  }

  // optional int32 AnGangCount = 19;
  if (has_angangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->angangcount(), output);
  }

  // optional int32 AnGangScore = 20;
  if (has_angangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->angangscore(), output);
  }

  // optional int32 DianGangCount = 21;
  if (has_diangangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->diangangcount(), output);
  }

  // optional int32 DianGangScore = 22;
  if (has_diangangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->diangangscore(), output);
  }

  // repeated .proto.game.tagGameEndInfo EndInfo = 23;
  for (int i = 0; i < this->endinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->endinfo(i), output);
  }

  // optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
  if (has_guizhouendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->guizhouendinfo(), output);
  }

  // optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
  if (has_gdgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->gdgameendinfo(), output);
  }

  // optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
  if (has_scendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->scendinfo(), output);
  }

  // optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
  if (has_hngameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->hngameendinfo(), output);
  }

  // optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
  if (has_hunangameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->hunangameendinfo(), output);
  }

  // optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
  if (has_hubeigameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->hubeigameend(), output);
  }

  // optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
  if (has_jxgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->jxgameendinfo(), output);
  }

  // optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
  if (has_phgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->phgameendinfo(), output);
  }

  // optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
  if (has_gameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->gameendinfo(), output);
  }

  // optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
  if (has_sxgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->sxgameendinfo(), output);
  }

  // optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
  if (has_jhgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->jhgameendinfo(), output);
  }

  // optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
  if (has_fuzhougameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->fuzhougameend(), output);
  }

  // optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
  if (has_dgkendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->dgkendinfo(), output);
  }

  // optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
  if (has_nanninggameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->nanninggameendinfo(), output);
  }

  // optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
  if (has_nanpinggameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->nanpinggameend(), output);
  }

  // optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
  if (has_laibingameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->laibingameendinfo(), output);
  }

  // optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
  if (has_longyangameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->longyangameend(), output);
  }

  // optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
  if (has_ganzhoucggameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->ganzhoucggameend(), output);
  }

  // optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
  if (has_xiangyanggameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->xiangyanggameend(), output);
  }

  // optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
  if (has_xixiahuashuigameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->xixiahuashuigameend(), output);
  }

  // optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
  if (has_zhenjianggameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->zhenjianggameend(), output);
  }

  // optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
  if (has_qionglaiendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->qionglaiendinfo(), output);
  }

  // optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
  if (has_anqinggameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->anqinggameend(), output);
  }

  // optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
  if (has_nanchangganeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->nanchangganeend(), output);
  }

  // optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
  if (has_guilinzzgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->guilinzzgameendinfo(), output);
  }

  // optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
  if (has_yunxiaomjgameendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->yunxiaomjgameendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  // required int32 HuScore = 2;
  if (has_huscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huscore(), target);
  }

  // optional int32 GangScore = 3;
  if (has_gangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gangscore(), target);
  }

  // repeated int32 Score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->score(i), target);
  }

  // optional int32 EndState = 5;
  if (has_endstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endstate(), target);
  }

  // repeated int32 isHuazhu = 6;
  for (int i = 0; i < this->ishuazhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->ishuazhu(i), target);
  }

  // repeated int32 HuazhuScore = 7;
  for (int i = 0; i < this->huazhuscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->huazhuscore(i), target);
  }

  // repeated int32 isDajiao = 8;
  for (int i = 0; i < this->isdajiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->isdajiao(i), target);
  }

  // repeated int32 DajiaoScore = 9;
  for (int i = 0; i < this->dajiaoscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->dajiaoscore(i), target);
  }

  // repeated int32 ReturnGangScore = 10;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->returngangscore(i), target);
  }

  // repeated int32 HorseScore = 11;
  for (int i = 0; i < this->horsescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->horsescore(i), target);
  }

  // optional .proto.game.Horse HorseInfo = 12;
  if (has_horseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->horseinfo(), target);
  }

  // repeated .proto.game.UserHorseCard UserHorse = 13;
  for (int i = 0; i < this->userhorse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->userhorse(i), target);
  }

  // optional int32 HuFanType = 14;
  if (has_hufantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hufantype(), target);
  }

  // optional int32 ZhiGangCount = 15;
  if (has_zhigangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->zhigangcount(), target);
  }

  // optional int32 ZhiGangScore = 16;
  if (has_zhigangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->zhigangscore(), target);
  }

  // optional int32 WanGangCount = 17;
  if (has_wangangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wangangcount(), target);
  }

  // optional int32 WanGangScore = 18;
  if (has_wangangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->wangangscore(), target);
  }

  // optional int32 AnGangCount = 19;
  if (has_angangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->angangcount(), target);
  }

  // optional int32 AnGangScore = 20;
  if (has_angangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->angangscore(), target);
  }

  // optional int32 DianGangCount = 21;
  if (has_diangangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->diangangcount(), target);
  }

  // optional int32 DianGangScore = 22;
  if (has_diangangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->diangangscore(), target);
  }

  // repeated .proto.game.tagGameEndInfo EndInfo = 23;
  for (int i = 0; i < this->endinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->endinfo(i), target);
  }

  // optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
  if (has_guizhouendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->guizhouendinfo(), target);
  }

  // optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
  if (has_gdgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->gdgameendinfo(), target);
  }

  // optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
  if (has_scendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->scendinfo(), target);
  }

  // optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
  if (has_hngameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->hngameendinfo(), target);
  }

  // optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
  if (has_hunangameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->hunangameendinfo(), target);
  }

  // optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
  if (has_hubeigameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->hubeigameend(), target);
  }

  // optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
  if (has_jxgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->jxgameendinfo(), target);
  }

  // optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
  if (has_phgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->phgameendinfo(), target);
  }

  // optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
  if (has_gameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->gameendinfo(), target);
  }

  // optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
  if (has_sxgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->sxgameendinfo(), target);
  }

  // optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
  if (has_jhgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->jhgameendinfo(), target);
  }

  // optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
  if (has_fuzhougameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->fuzhougameend(), target);
  }

  // optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
  if (has_dgkendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->dgkendinfo(), target);
  }

  // optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
  if (has_nanninggameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->nanninggameendinfo(), target);
  }

  // optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
  if (has_nanpinggameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->nanpinggameend(), target);
  }

  // optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
  if (has_laibingameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->laibingameendinfo(), target);
  }

  // optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
  if (has_longyangameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->longyangameend(), target);
  }

  // optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
  if (has_ganzhoucggameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->ganzhoucggameend(), target);
  }

  // optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
  if (has_xiangyanggameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->xiangyanggameend(), target);
  }

  // optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
  if (has_xixiahuashuigameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->xixiahuashuigameend(), target);
  }

  // optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
  if (has_zhenjianggameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->zhenjianggameend(), target);
  }

  // optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
  if (has_qionglaiendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->qionglaiendinfo(), target);
  }

  // optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
  if (has_anqinggameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->anqinggameend(), target);
  }

  // optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
  if (has_nanchangganeend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->nanchangganeend(), target);
  }

  // optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
  if (has_guilinzzgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->guilinzzgameendinfo(), target);
  }

  // optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
  if (has_yunxiaomjgameendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->yunxiaomjgameendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 HuScore = 2;
    if (has_huscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huscore());
    }

    // optional int32 GangScore = 3;
    if (has_gangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangscore());
    }

    // optional int32 EndState = 5;
    if (has_endstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endstate());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .proto.game.Horse HorseInfo = 12;
    if (has_horseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horseinfo());
    }

    // optional int32 HuFanType = 14;
    if (has_hufantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufantype());
    }

    // optional int32 ZhiGangCount = 15;
    if (has_zhigangcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhigangcount());
    }

    // optional int32 ZhiGangScore = 16;
    if (has_zhigangscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhigangscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 WanGangCount = 17;
    if (has_wangangcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wangangcount());
    }

    // optional int32 WanGangScore = 18;
    if (has_wangangscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wangangscore());
    }

    // optional int32 AnGangCount = 19;
    if (has_angangcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angangcount());
    }

    // optional int32 AnGangScore = 20;
    if (has_angangscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angangscore());
    }

    // optional int32 DianGangCount = 21;
    if (has_diangangcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangcount());
    }

    // optional int32 DianGangScore = 22;
    if (has_diangangscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangscore());
    }

    // optional .proto.game.guizhou.tagGuiZhouEndInfo GuiZhouEndInfo = 24;
    if (has_guizhouendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guizhouendinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto.game.gdmahjonggame.gdmjGameEndInfo gdGameEndInfo = 25;
    if (has_gdgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gdgameendinfo());
    }

    // optional .proto.game.scmj.tagScGameEnd scEndInfo = 26;
    if (has_scendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scendinfo());
    }

    // optional .proto.game.hnmahjonggame.hnmjGameEndInfo hnGameEndInfo = 27;
    if (has_hngameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hngameendinfo());
    }

    // optional .proto.game.hunanmj.tagHuNanGameEnd hunanGameEndInfo = 28;
    if (has_hunangameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hunangameendinfo());
    }

    // optional .proto.game.hubeimj.AckhubeiGameEnd hubeiGameend = 29;
    if (has_hubeigameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hubeigameend());
    }

    // optional .proto.game.jxmahjonggame.jxmjGameEndInfo jxGameEndInfo = 30;
    if (has_jxgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jxgameendinfo());
    }

    // optional .proto.game.pinghumj.phmjGameEndInfo phGameEndInfo = 31;
    if (has_phgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phgameendinfo());
    }

    // optional .proto.game.henanmj.tagGameEnd GameEndInfo = 32;
    if (has_gameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameendinfo());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .proto.game.sxmahjonggame.sxmjGameEndInfo sxGameEndInfo = 33;
    if (has_sxgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sxgameendinfo());
    }

    // optional .proto.game.jhmahjonggame.jhmjGameEndInfo jhGameEndInfo = 34;
    if (has_jhgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jhgameendinfo());
    }

    // optional .proto.game.fuzhoumahjonggame.FZ_GameEnd fuzhouGameEnd = 35;
    if (has_fuzhougameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fuzhougameend());
    }

    // optional .proto.game.dgkmj.tagDgkGameEnd dgkEndInfo = 36;
    if (has_dgkendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dgkendinfo());
    }

    // optional .proto.game.nanningmj.tagNanNingGameEnd nanningGameEndInfo = 37;
    if (has_nanninggameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nanninggameendinfo());
    }

    // optional .proto.game.nanpingmahjonggame.GameEnd nanpingGameEnd = 38;
    if (has_nanpinggameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nanpinggameend());
    }

    // optional .proto.game.laibinmj.tagLaiBinGameEnd laibinGameEndInfo = 39;
    if (has_laibingameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laibingameendinfo());
    }

    // optional .proto.game.longyanmj.LongYanGameend longyangameend = 40;
    if (has_longyangameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->longyangameend());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto.game.ganzhoucg.GanZhoucgGameend ganzhoucgGameend = 41;
    if (has_ganzhoucggameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ganzhoucggameend());
    }

    // optional .proto.game.xiangyangmj.tagXYGameEnd xiangyangGameEnd = 42;
    if (has_xiangyanggameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xiangyanggameend());
    }

    // optional .proto.game.xixiahuashuimj.XiXiaHuaShuiGameEnd xixiahuashuiGameEnd = 43;
    if (has_xixiahuashuigameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xixiahuashuigameend());
    }

    // optional .proto.game.zhenjiang.zhenjiangGameEnd zhenjiangGameEnd = 44;
    if (has_zhenjianggameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhenjianggameend());
    }

    // optional .proto.game.qionglaimj.tagQiongLaiGameEnd qionglaiEndInfo = 45;
    if (has_qionglaiendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qionglaiendinfo());
    }

    // optional .proto.game.anqingmj.AnQingGameEnd anqingGameEnd = 46;
    if (has_anqinggameend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anqinggameend());
    }

    // optional .proto.game.nanchang.GameEndNanChang nanchangGaneEnd = 47;
    if (has_nanchangganeend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nanchangganeend());
    }

    // optional .proto.game.guilinzzmj.tagGuiLinzzGameEnd guilinzzGameEndInfo = 48;
    if (has_guilinzzgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilinzzgameendinfo());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .proto.game.yunxiaomj.tagYunXiaomjGameEnd yunxiaomjGameEndInfo = 49;
    if (has_yunxiaomjgameendinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yunxiaomjgameendinfo());
    }

  }
  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  // repeated int32 Score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated int32 isHuazhu = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ishuazhu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ishuazhu(i));
    }
    total_size += 1 * this->ishuazhu_size() + data_size;
  }

  // repeated int32 HuazhuScore = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->huazhuscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huazhuscore(i));
    }
    total_size += 1 * this->huazhuscore_size() + data_size;
  }

  // repeated int32 isDajiao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->isdajiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isdajiao(i));
    }
    total_size += 1 * this->isdajiao_size() + data_size;
  }

  // repeated int32 DajiaoScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->dajiaoscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dajiaoscore(i));
    }
    total_size += 1 * this->dajiaoscore_size() + data_size;
  }

  // repeated int32 ReturnGangScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->returngangscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->returngangscore(i));
    }
    total_size += 1 * this->returngangscore_size() + data_size;
  }

  // repeated int32 HorseScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->horsescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->horsescore(i));
    }
    total_size += 1 * this->horsescore_size() + data_size;
  }

  // repeated .proto.game.UserHorseCard UserHorse = 13;
  total_size += 1 * this->userhorse_size();
  for (int i = 0; i < this->userhorse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userhorse(i));
  }

  // repeated .proto.game.tagGameEndInfo EndInfo = 23;
  total_size += 2 * this->endinfo_size();
  for (int i = 0; i < this->endinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameEnd::MergeFrom(const AckGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  score_.MergeFrom(from.score_);
  ishuazhu_.MergeFrom(from.ishuazhu_);
  huazhuscore_.MergeFrom(from.huazhuscore_);
  isdajiao_.MergeFrom(from.isdajiao_);
  dajiaoscore_.MergeFrom(from.dajiaoscore_);
  returngangscore_.MergeFrom(from.returngangscore_);
  horsescore_.MergeFrom(from.horsescore_);
  userhorse_.MergeFrom(from.userhorse_);
  endinfo_.MergeFrom(from.endinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_huscore()) {
      set_huscore(from.huscore());
    }
    if (from.has_gangscore()) {
      set_gangscore(from.gangscore());
    }
    if (from.has_endstate()) {
      set_endstate(from.endstate());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_horseinfo()) {
      mutable_horseinfo()->::proto::game::Horse::MergeFrom(from.horseinfo());
    }
    if (from.has_hufantype()) {
      set_hufantype(from.hufantype());
    }
    if (from.has_zhigangcount()) {
      set_zhigangcount(from.zhigangcount());
    }
    if (from.has_zhigangscore()) {
      set_zhigangscore(from.zhigangscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wangangcount()) {
      set_wangangcount(from.wangangcount());
    }
    if (from.has_wangangscore()) {
      set_wangangscore(from.wangangscore());
    }
    if (from.has_angangcount()) {
      set_angangcount(from.angangcount());
    }
    if (from.has_angangscore()) {
      set_angangscore(from.angangscore());
    }
    if (from.has_diangangcount()) {
      set_diangangcount(from.diangangcount());
    }
    if (from.has_diangangscore()) {
      set_diangangscore(from.diangangscore());
    }
    if (from.has_guizhouendinfo()) {
      mutable_guizhouendinfo()->::proto::game::guizhou::tagGuiZhouEndInfo::MergeFrom(from.guizhouendinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gdgameendinfo()) {
      mutable_gdgameendinfo()->::proto::game::gdmahjonggame::gdmjGameEndInfo::MergeFrom(from.gdgameendinfo());
    }
    if (from.has_scendinfo()) {
      mutable_scendinfo()->::proto::game::scmj::tagScGameEnd::MergeFrom(from.scendinfo());
    }
    if (from.has_hngameendinfo()) {
      mutable_hngameendinfo()->::proto::game::hnmahjonggame::hnmjGameEndInfo::MergeFrom(from.hngameendinfo());
    }
    if (from.has_hunangameendinfo()) {
      mutable_hunangameendinfo()->::proto::game::hunanmj::tagHuNanGameEnd::MergeFrom(from.hunangameendinfo());
    }
    if (from.has_hubeigameend()) {
      mutable_hubeigameend()->::proto::game::hubeimj::AckhubeiGameEnd::MergeFrom(from.hubeigameend());
    }
    if (from.has_jxgameendinfo()) {
      mutable_jxgameendinfo()->::proto::game::jxmahjonggame::jxmjGameEndInfo::MergeFrom(from.jxgameendinfo());
    }
    if (from.has_phgameendinfo()) {
      mutable_phgameendinfo()->::proto::game::pinghumj::phmjGameEndInfo::MergeFrom(from.phgameendinfo());
    }
    if (from.has_gameendinfo()) {
      mutable_gameendinfo()->::proto::game::henanmj::tagGameEnd::MergeFrom(from.gameendinfo());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sxgameendinfo()) {
      mutable_sxgameendinfo()->::proto::game::sxmahjonggame::sxmjGameEndInfo::MergeFrom(from.sxgameendinfo());
    }
    if (from.has_jhgameendinfo()) {
      mutable_jhgameendinfo()->::proto::game::jhmahjonggame::jhmjGameEndInfo::MergeFrom(from.jhgameendinfo());
    }
    if (from.has_fuzhougameend()) {
      mutable_fuzhougameend()->::proto::game::fuzhoumahjonggame::FZ_GameEnd::MergeFrom(from.fuzhougameend());
    }
    if (from.has_dgkendinfo()) {
      mutable_dgkendinfo()->::proto::game::dgkmj::tagDgkGameEnd::MergeFrom(from.dgkendinfo());
    }
    if (from.has_nanninggameendinfo()) {
      mutable_nanninggameendinfo()->::proto::game::nanningmj::tagNanNingGameEnd::MergeFrom(from.nanninggameendinfo());
    }
    if (from.has_nanpinggameend()) {
      mutable_nanpinggameend()->::proto::game::nanpingmahjonggame::GameEnd::MergeFrom(from.nanpinggameend());
    }
    if (from.has_laibingameendinfo()) {
      mutable_laibingameendinfo()->::proto::game::laibinmj::tagLaiBinGameEnd::MergeFrom(from.laibingameendinfo());
    }
    if (from.has_longyangameend()) {
      mutable_longyangameend()->::proto::game::longyanmj::LongYanGameend::MergeFrom(from.longyangameend());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ganzhoucggameend()) {
      mutable_ganzhoucggameend()->::proto::game::ganzhoucg::GanZhoucgGameend::MergeFrom(from.ganzhoucggameend());
    }
    if (from.has_xiangyanggameend()) {
      mutable_xiangyanggameend()->::proto::game::xiangyangmj::tagXYGameEnd::MergeFrom(from.xiangyanggameend());
    }
    if (from.has_xixiahuashuigameend()) {
      mutable_xixiahuashuigameend()->::proto::game::xixiahuashuimj::XiXiaHuaShuiGameEnd::MergeFrom(from.xixiahuashuigameend());
    }
    if (from.has_zhenjianggameend()) {
      mutable_zhenjianggameend()->::proto::game::zhenjiang::zhenjiangGameEnd::MergeFrom(from.zhenjianggameend());
    }
    if (from.has_qionglaiendinfo()) {
      mutable_qionglaiendinfo()->::proto::game::qionglaimj::tagQiongLaiGameEnd::MergeFrom(from.qionglaiendinfo());
    }
    if (from.has_anqinggameend()) {
      mutable_anqinggameend()->::proto::game::anqingmj::AnQingGameEnd::MergeFrom(from.anqinggameend());
    }
    if (from.has_nanchangganeend()) {
      mutable_nanchangganeend()->::proto::game::nanchang::GameEndNanChang::MergeFrom(from.nanchangganeend());
    }
    if (from.has_guilinzzgameendinfo()) {
      mutable_guilinzzgameendinfo()->::proto::game::guilinzzmj::tagGuiLinzzGameEnd::MergeFrom(from.guilinzzgameendinfo());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_yunxiaomjgameendinfo()) {
      mutable_yunxiaomjgameendinfo()->::proto::game::yunxiaomj::tagYunXiaomjGameEnd::MergeFrom(from.yunxiaomjgameendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameEnd::CopyFrom(const AckGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < usercard_size(); i++) {
    if (!this->usercard(i).IsInitialized()) return false;
  }
  if (has_guizhouendinfo()) {
    if (!this->guizhouendinfo().IsInitialized()) return false;
  }
  if (has_hunangameendinfo()) {
    if (!this->hunangameendinfo().IsInitialized()) return false;
  }
  if (has_gameendinfo()) {
    if (!this->gameendinfo().IsInitialized()) return false;
  }
  if (has_fuzhougameend()) {
    if (!this->fuzhougameend().IsInitialized()) return false;
  }
  if (has_nanpinggameend()) {
    if (!this->nanpinggameend().IsInitialized()) return false;
  }
  if (has_nanchangganeend()) {
    if (!this->nanchangganeend().IsInitialized()) return false;
  }
  if (has_guilinzzgameendinfo()) {
    if (!this->guilinzzgameendinfo().IsInitialized()) return false;
  }
  if (has_yunxiaomjgameendinfo()) {
    if (!this->yunxiaomjgameendinfo().IsInitialized()) return false;
  }
  return true;
}

void AckGameEnd::Swap(AckGameEnd* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    std::swap(huscore_, other->huscore_);
    std::swap(gangscore_, other->gangscore_);
    score_.Swap(&other->score_);
    std::swap(endstate_, other->endstate_);
    ishuazhu_.Swap(&other->ishuazhu_);
    huazhuscore_.Swap(&other->huazhuscore_);
    isdajiao_.Swap(&other->isdajiao_);
    dajiaoscore_.Swap(&other->dajiaoscore_);
    returngangscore_.Swap(&other->returngangscore_);
    horsescore_.Swap(&other->horsescore_);
    std::swap(horseinfo_, other->horseinfo_);
    userhorse_.Swap(&other->userhorse_);
    std::swap(hufantype_, other->hufantype_);
    std::swap(zhigangcount_, other->zhigangcount_);
    std::swap(zhigangscore_, other->zhigangscore_);
    std::swap(wangangcount_, other->wangangcount_);
    std::swap(wangangscore_, other->wangangscore_);
    std::swap(angangcount_, other->angangcount_);
    std::swap(angangscore_, other->angangscore_);
    std::swap(diangangcount_, other->diangangcount_);
    std::swap(diangangscore_, other->diangangscore_);
    endinfo_.Swap(&other->endinfo_);
    std::swap(guizhouendinfo_, other->guizhouendinfo_);
    std::swap(gdgameendinfo_, other->gdgameendinfo_);
    std::swap(scendinfo_, other->scendinfo_);
    std::swap(hngameendinfo_, other->hngameendinfo_);
    std::swap(hunangameendinfo_, other->hunangameendinfo_);
    std::swap(hubeigameend_, other->hubeigameend_);
    std::swap(jxgameendinfo_, other->jxgameendinfo_);
    std::swap(phgameendinfo_, other->phgameendinfo_);
    std::swap(gameendinfo_, other->gameendinfo_);
    std::swap(sxgameendinfo_, other->sxgameendinfo_);
    std::swap(jhgameendinfo_, other->jhgameendinfo_);
    std::swap(fuzhougameend_, other->fuzhougameend_);
    std::swap(dgkendinfo_, other->dgkendinfo_);
    std::swap(nanninggameendinfo_, other->nanninggameendinfo_);
    std::swap(nanpinggameend_, other->nanpinggameend_);
    std::swap(laibingameendinfo_, other->laibingameendinfo_);
    std::swap(longyangameend_, other->longyangameend_);
    std::swap(ganzhoucggameend_, other->ganzhoucggameend_);
    std::swap(xiangyanggameend_, other->xiangyanggameend_);
    std::swap(xixiahuashuigameend_, other->xixiahuashuigameend_);
    std::swap(zhenjianggameend_, other->zhenjianggameend_);
    std::swap(qionglaiendinfo_, other->qionglaiendinfo_);
    std::swap(anqinggameend_, other->anqinggameend_);
    std::swap(nanchangganeend_, other->nanchangganeend_);
    std::swap(guilinzzgameendinfo_, other->guilinzzgameendinfo_);
    std::swap(yunxiaomjgameendinfo_, other->yunxiaomjgameendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameEnd_descriptor_;
  metadata.reflection = AckGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIsAuto::kChairIDFieldNumber;
const int AckIsAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

AckIsAuto::AckIsAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckIsAuto::InitAsDefaultInstance() {
}

AckIsAuto::AckIsAuto(const AckIsAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckIsAuto::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIsAuto::~AckIsAuto() {
  SharedDtor();
}

void AckIsAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckIsAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIsAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIsAuto_descriptor_;
}

const AckIsAuto& AckIsAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckIsAuto* AckIsAuto::default_instance_ = NULL;

AckIsAuto* AckIsAuto::New() const {
  return new AckIsAuto;
}

void AckIsAuto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    isauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIsAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAuto;
        break;
      }

      // optional int32 isAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckIsAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 isAuto = 2;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckIsAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 isAuto = 2;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckIsAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 isAuto = 2;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIsAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIsAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIsAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIsAuto::MergeFrom(const AckIsAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIsAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIsAuto::CopyFrom(const AckIsAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIsAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckIsAuto::Swap(AckIsAuto* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIsAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIsAuto_descriptor_;
  metadata.reflection = AckIsAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateUserInfo::kChairidFieldNumber;
const int AckUpdateUserInfo::kUidFieldNumber;
const int AckUpdateUserInfo::kMoneyFieldNumber;
const int AckUpdateUserInfo::kRmbFieldNumber;
#endif  // !_MSC_VER

AckUpdateUserInfo::AckUpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateUserInfo::InitAsDefaultInstance() {
}

AckUpdateUserInfo::AckUpdateUserInfo(const AckUpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  uid_ = 0;
  money_ = 0;
  rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateUserInfo::~AckUpdateUserInfo() {
  SharedDtor();
}

void AckUpdateUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateUserInfo_descriptor_;
}

const AckUpdateUserInfo& AckUpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateUserInfo* AckUpdateUserInfo::default_instance_ = NULL;

AckUpdateUserInfo* AckUpdateUserInfo::New() const {
  return new AckUpdateUserInfo;
}

void AckUpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    uid_ = 0;
    money_ = 0;
    rmb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rmb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rmb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateUserInfo::MergeFrom(const AckUpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateUserInfo::CopyFrom(const AckUpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateUserInfo::Swap(AckUpdateUserInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(uid_, other->uid_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateUserInfo_descriptor_;
  metadata.reflection = AckUpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPoolMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

AckPoolMoney::AckPoolMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPoolMoney::InitAsDefaultInstance() {
}

AckPoolMoney::AckPoolMoney(const AckPoolMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPoolMoney::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPoolMoney::~AckPoolMoney() {
  SharedDtor();
}

void AckPoolMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPoolMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPoolMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPoolMoney_descriptor_;
}

const AckPoolMoney& AckPoolMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckPoolMoney* AckPoolMoney::default_instance_ = NULL;

AckPoolMoney* AckPoolMoney::New() const {
  return new AckPoolMoney;
}

void AckPoolMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPoolMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPoolMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPoolMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPoolMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPoolMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPoolMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPoolMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPoolMoney::MergeFrom(const AckPoolMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPoolMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPoolMoney::CopyFrom(const AckPoolMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPoolMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPoolMoney::Swap(AckPoolMoney* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPoolMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPoolMoney_descriptor_;
  metadata.reflection = AckPoolMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckWinPoolMoney::kWinmoneyFieldNumber;
#endif  // !_MSC_VER

AckWinPoolMoney::AckWinPoolMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckWinPoolMoney::InitAsDefaultInstance() {
}

AckWinPoolMoney::AckWinPoolMoney(const AckWinPoolMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckWinPoolMoney::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckWinPoolMoney::~AckWinPoolMoney() {
  SharedDtor();
}

void AckWinPoolMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckWinPoolMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckWinPoolMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckWinPoolMoney_descriptor_;
}

const AckWinPoolMoney& AckWinPoolMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckWinPoolMoney* AckWinPoolMoney::default_instance_ = NULL;

AckWinPoolMoney* AckWinPoolMoney::New() const {
  return new AckWinPoolMoney;
}

void AckWinPoolMoney::Clear() {
  winmoney_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckWinPoolMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 winmoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_winmoney())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winmoney())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_winmoney;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckWinPoolMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 winmoney = 1;
  for (int i = 0; i < this->winmoney_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->winmoney(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckWinPoolMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 winmoney = 1;
  for (int i = 0; i < this->winmoney_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->winmoney(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckWinPoolMoney::ByteSize() const {
  int total_size = 0;

  // repeated int32 winmoney = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->winmoney_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winmoney(i));
    }
    total_size += 1 * this->winmoney_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckWinPoolMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckWinPoolMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckWinPoolMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckWinPoolMoney::MergeFrom(const AckWinPoolMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  winmoney_.MergeFrom(from.winmoney_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckWinPoolMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWinPoolMoney::CopyFrom(const AckWinPoolMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWinPoolMoney::IsInitialized() const {

  return true;
}

void AckWinPoolMoney::Swap(AckWinPoolMoney* other) {
  if (other != this) {
    winmoney_.Swap(&other->winmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckWinPoolMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckWinPoolMoney_descriptor_;
  metadata.reflection = AckWinPoolMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStartFail::kVidFieldNumber;
const int AckGameStartFail::kRoomidFieldNumber;
const int AckGameStartFail::kCanStartFieldNumber;
const int AckGameStartFail::kCodeFieldNumber;
const int AckGameStartFail::kTsFieldNumber;
#endif  // !_MSC_VER

AckGameStartFail::AckGameStartFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStartFail::InitAsDefaultInstance() {
}

AckGameStartFail::AckGameStartFail(const AckGameStartFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStartFail::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_start_ = 0;
  code_ = 0;
  ts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStartFail::~AckGameStartFail() {
  SharedDtor();
}

void AckGameStartFail::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void AckGameStartFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStartFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStartFail_descriptor_;
}

const AckGameStartFail& AckGameStartFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStartFail* AckGameStartFail::default_instance_ = NULL;

AckGameStartFail* AckGameStartFail::New() const {
  return new AckGameStartFail;
}

void AckGameStartFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    can_start_ = 0;
    code_ = 0;
    ts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStartFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // optional string roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_start;
        break;
      }

      // optional int32 can_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_start_)));
          set_has_can_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // optional int32 ts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStartFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomid(), output);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->can_start(), output);
  }

  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStartFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->can_start(), target);
  }

  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStartFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional string roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 can_start = 3;
    if (has_can_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_start());
    }

    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStartFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStartFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStartFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStartFail::MergeFrom(const AckGameStartFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_can_start()) {
      set_can_start(from.can_start());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStartFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStartFail::CopyFrom(const AckGameStartFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStartFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStartFail::Swap(AckGameStartFail* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(roomid_, other->roomid_);
    std::swap(can_start_, other->can_start_);
    std::swap(code_, other->code_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStartFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStartFail_descriptor_;
  metadata.reflection = AckGameStartFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoGameEnd::kUserCardFieldNumber;
const int VideoGameEnd::kHuScoreFieldNumber;
const int VideoGameEnd::kGangScoreFieldNumber;
const int VideoGameEnd::kScoreFieldNumber;
const int VideoGameEnd::kEndStateFieldNumber;
const int VideoGameEnd::kIsHuazhuFieldNumber;
const int VideoGameEnd::kHuazhuScoreFieldNumber;
const int VideoGameEnd::kIsDajiaoFieldNumber;
const int VideoGameEnd::kDajiaoScoreFieldNumber;
const int VideoGameEnd::kReturnGangScoreFieldNumber;
#endif  // !_MSC_VER

VideoGameEnd::VideoGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoGameEnd::InitAsDefaultInstance() {
}

VideoGameEnd::VideoGameEnd(const VideoGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoGameEnd::SharedCtor() {
  _cached_size_ = 0;
  endstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoGameEnd::~VideoGameEnd() {
  SharedDtor();
}

void VideoGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoGameEnd_descriptor_;
}

const VideoGameEnd& VideoGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

VideoGameEnd* VideoGameEnd::default_instance_ = NULL;

VideoGameEnd* VideoGameEnd::New() const {
  return new VideoGameEnd;
}

void VideoGameEnd::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    endstate_ = 0;
  }
  usercard_.Clear();
  huscore_.Clear();
  gangscore_.Clear();
  score_.Clear();
  ishuazhu_.Clear();
  huazhuscore_.Clear();
  isdajiao_.Clear();
  dajiaoscore_.Clear();
  returngangscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectTag(16)) goto parse_HuScore;
        break;
      }

      // repeated int32 HuScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_huscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuScore;
        if (input->ExpectTag(24)) goto parse_GangScore;
        break;
      }

      // repeated int32 GangScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_gangscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gangscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GangScore;
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        if (input->ExpectTag(40)) goto parse_EndState;
        break;
      }

      // optional int32 EndState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endstate_)));
          set_has_endstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHuazhu;
        break;
      }

      // repeated int32 isHuazhu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHuazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_ishuazhu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ishuazhu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHuazhu;
        if (input->ExpectTag(56)) goto parse_HuazhuScore;
        break;
      }

      // repeated int32 HuazhuScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuazhuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_huazhuscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huazhuscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HuazhuScore;
        if (input->ExpectTag(64)) goto parse_isDajiao;
        break;
      }

      // repeated int32 isDajiao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDajiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_isdajiao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isdajiao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isDajiao;
        if (input->ExpectTag(72)) goto parse_DajiaoScore;
        break;
      }

      // repeated int32 DajiaoScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DajiaoScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_dajiaoscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dajiaoscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DajiaoScore;
        if (input->ExpectTag(80)) goto parse_ReturnGangScore;
        break;
      }

      // repeated int32 ReturnGangScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_returngangscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_returngangscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ReturnGangScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  // repeated int32 HuScore = 2;
  for (int i = 0; i < this->huscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->huscore(i), output);
  }

  // repeated int32 GangScore = 3;
  for (int i = 0; i < this->gangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->gangscore(i), output);
  }

  // repeated int32 Score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->score(i), output);
  }

  // optional int32 EndState = 5;
  if (has_endstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endstate(), output);
  }

  // repeated int32 isHuazhu = 6;
  for (int i = 0; i < this->ishuazhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->ishuazhu(i), output);
  }

  // repeated int32 HuazhuScore = 7;
  for (int i = 0; i < this->huazhuscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->huazhuscore(i), output);
  }

  // repeated int32 isDajiao = 8;
  for (int i = 0; i < this->isdajiao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->isdajiao(i), output);
  }

  // repeated int32 DajiaoScore = 9;
  for (int i = 0; i < this->dajiaoscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->dajiaoscore(i), output);
  }

  // repeated int32 ReturnGangScore = 10;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->returngangscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  // repeated int32 HuScore = 2;
  for (int i = 0; i < this->huscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->huscore(i), target);
  }

  // repeated int32 GangScore = 3;
  for (int i = 0; i < this->gangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->gangscore(i), target);
  }

  // repeated int32 Score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->score(i), target);
  }

  // optional int32 EndState = 5;
  if (has_endstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endstate(), target);
  }

  // repeated int32 isHuazhu = 6;
  for (int i = 0; i < this->ishuazhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->ishuazhu(i), target);
  }

  // repeated int32 HuazhuScore = 7;
  for (int i = 0; i < this->huazhuscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->huazhuscore(i), target);
  }

  // repeated int32 isDajiao = 8;
  for (int i = 0; i < this->isdajiao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->isdajiao(i), target);
  }

  // repeated int32 DajiaoScore = 9;
  for (int i = 0; i < this->dajiaoscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->dajiaoscore(i), target);
  }

  // repeated int32 ReturnGangScore = 10;
  for (int i = 0; i < this->returngangscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->returngangscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional int32 EndState = 5;
    if (has_endstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endstate());
    }

  }
  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  // repeated int32 HuScore = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->huscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huscore(i));
    }
    total_size += 1 * this->huscore_size() + data_size;
  }

  // repeated int32 GangScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gangscore(i));
    }
    total_size += 1 * this->gangscore_size() + data_size;
  }

  // repeated int32 Score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated int32 isHuazhu = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ishuazhu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ishuazhu(i));
    }
    total_size += 1 * this->ishuazhu_size() + data_size;
  }

  // repeated int32 HuazhuScore = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->huazhuscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huazhuscore(i));
    }
    total_size += 1 * this->huazhuscore_size() + data_size;
  }

  // repeated int32 isDajiao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->isdajiao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isdajiao(i));
    }
    total_size += 1 * this->isdajiao_size() + data_size;
  }

  // repeated int32 DajiaoScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->dajiaoscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dajiaoscore(i));
    }
    total_size += 1 * this->dajiaoscore_size() + data_size;
  }

  // repeated int32 ReturnGangScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->returngangscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->returngangscore(i));
    }
    total_size += 1 * this->returngangscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoGameEnd::MergeFrom(const VideoGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  huscore_.MergeFrom(from.huscore_);
  gangscore_.MergeFrom(from.gangscore_);
  score_.MergeFrom(from.score_);
  ishuazhu_.MergeFrom(from.ishuazhu_);
  huazhuscore_.MergeFrom(from.huazhuscore_);
  isdajiao_.MergeFrom(from.isdajiao_);
  dajiaoscore_.MergeFrom(from.dajiaoscore_);
  returngangscore_.MergeFrom(from.returngangscore_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_endstate()) {
      set_endstate(from.endstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoGameEnd::CopyFrom(const VideoGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoGameEnd::IsInitialized() const {

  for (int i = 0; i < usercard_size(); i++) {
    if (!this->usercard(i).IsInitialized()) return false;
  }
  return true;
}

void VideoGameEnd::Swap(VideoGameEnd* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    huscore_.Swap(&other->huscore_);
    gangscore_.Swap(&other->gangscore_);
    score_.Swap(&other->score_);
    std::swap(endstate_, other->endstate_);
    ishuazhu_.Swap(&other->ishuazhu_);
    huazhuscore_.Swap(&other->huazhuscore_);
    isdajiao_.Swap(&other->isdajiao_);
    dajiaoscore_.Swap(&other->dajiaoscore_);
    returngangscore_.Swap(&other->returngangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoGameEnd_descriptor_;
  metadata.reflection = VideoGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateTimer::kChairIDFieldNumber;
const int AckUpdateTimer::kLefttimeFieldNumber;
#endif  // !_MSC_VER

AckUpdateTimer::AckUpdateTimer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateTimer::InitAsDefaultInstance() {
}

AckUpdateTimer::AckUpdateTimer(const AckUpdateTimer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateTimer::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateTimer::~AckUpdateTimer() {
  SharedDtor();
}

void AckUpdateTimer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateTimer_descriptor_;
}

const AckUpdateTimer& AckUpdateTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateTimer* AckUpdateTimer::default_instance_ = NULL;

AckUpdateTimer* AckUpdateTimer::New() const {
  return new AckUpdateTimer;
}

void AckUpdateTimer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lefttime;
        break;
      }

      // optional int32 lefttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 lefttime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 lefttime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateTimer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 lefttime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateTimer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateTimer::MergeFrom(const AckUpdateTimer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateTimer::CopyFrom(const AckUpdateTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateTimer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateTimer::Swap(AckUpdateTimer* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateTimer_descriptor_;
  metadata.reflection = AckUpdateTimer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandChooseFaild::kChairidFieldNumber;
const int AckDisbandChooseFaild::kCodeFieldNumber;
#endif  // !_MSC_VER

AckDisbandChooseFaild::AckDisbandChooseFaild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDisbandChooseFaild::InitAsDefaultInstance() {
}

AckDisbandChooseFaild::AckDisbandChooseFaild(const AckDisbandChooseFaild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDisbandChooseFaild::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandChooseFaild::~AckDisbandChooseFaild() {
  SharedDtor();
}

void AckDisbandChooseFaild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandChooseFaild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandChooseFaild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandChooseFaild_descriptor_;
}

const AckDisbandChooseFaild& AckDisbandChooseFaild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandChooseFaild* AckDisbandChooseFaild::default_instance_ = NULL;

AckDisbandChooseFaild* AckDisbandChooseFaild::New() const {
  return new AckDisbandChooseFaild;
}

void AckDisbandChooseFaild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandChooseFaild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDisbandChooseFaild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDisbandChooseFaild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDisbandChooseFaild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandChooseFaild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandChooseFaild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandChooseFaild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandChooseFaild::MergeFrom(const AckDisbandChooseFaild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandChooseFaild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandChooseFaild::CopyFrom(const AckDisbandChooseFaild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandChooseFaild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandChooseFaild::Swap(AckDisbandChooseFaild* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandChooseFaild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandChooseFaild_descriptor_;
  metadata.reflection = AckDisbandChooseFaild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandApply::kApplyChairidFieldNumber;
const int AckDisbandApply::kWaittimeFieldNumber;
const int AckDisbandApply::kOnlinechairidFieldNumber;
#endif  // !_MSC_VER

AckDisbandApply::AckDisbandApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDisbandApply::InitAsDefaultInstance() {
}

AckDisbandApply::AckDisbandApply(const AckDisbandApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDisbandApply::SharedCtor() {
  _cached_size_ = 0;
  applychairid_ = 0;
  waittime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandApply::~AckDisbandApply() {
  SharedDtor();
}

void AckDisbandApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandApply_descriptor_;
}

const AckDisbandApply& AckDisbandApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandApply* AckDisbandApply::default_instance_ = NULL;

AckDisbandApply* AckDisbandApply::New() const {
  return new AckDisbandApply;
}

void AckDisbandApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    applychairid_ = 0;
    waittime_ = 0;
  }
  onlinechairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ApplyChairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applychairid_)));
          set_has_applychairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Waittime;
        break;
      }

      // optional int32 Waittime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlinechairid;
        break;
      }

      // repeated int32 onlinechairid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinechairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_onlinechairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onlinechairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlinechairid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDisbandApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ApplyChairid = 1;
  if (has_applychairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->applychairid(), output);
  }

  // optional int32 Waittime = 2;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->waittime(), output);
  }

  // repeated int32 onlinechairid = 3;
  for (int i = 0; i < this->onlinechairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->onlinechairid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDisbandApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ApplyChairid = 1;
  if (has_applychairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->applychairid(), target);
  }

  // optional int32 Waittime = 2;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->waittime(), target);
  }

  // repeated int32 onlinechairid = 3;
  for (int i = 0; i < this->onlinechairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->onlinechairid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDisbandApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ApplyChairid = 1;
    if (has_applychairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applychairid());
    }

    // optional int32 Waittime = 2;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waittime());
    }

  }
  // repeated int32 onlinechairid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->onlinechairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->onlinechairid(i));
    }
    total_size += 1 * this->onlinechairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandApply::MergeFrom(const AckDisbandApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinechairid_.MergeFrom(from.onlinechairid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applychairid()) {
      set_applychairid(from.applychairid());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandApply::CopyFrom(const AckDisbandApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandApply::Swap(AckDisbandApply* other) {
  if (other != this) {
    std::swap(applychairid_, other->applychairid_);
    std::swap(waittime_, other->waittime_);
    onlinechairid_.Swap(&other->onlinechairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandApply_descriptor_;
  metadata.reflection = AckDisbandApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandChooseBc::kChairidFieldNumber;
const int AckDisbandChooseBc::kChoosestateFieldNumber;
#endif  // !_MSC_VER

AckDisbandChooseBc::AckDisbandChooseBc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDisbandChooseBc::InitAsDefaultInstance() {
}

AckDisbandChooseBc::AckDisbandChooseBc(const AckDisbandChooseBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDisbandChooseBc::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  choosestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandChooseBc::~AckDisbandChooseBc() {
  SharedDtor();
}

void AckDisbandChooseBc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandChooseBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandChooseBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandChooseBc_descriptor_;
}

const AckDisbandChooseBc& AckDisbandChooseBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandChooseBc* AckDisbandChooseBc::default_instance_ = NULL;

AckDisbandChooseBc* AckDisbandChooseBc::New() const {
  return new AckDisbandChooseBc;
}

void AckDisbandChooseBc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    choosestate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandChooseBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Choosestate;
        break;
      }

      // optional int32 Choosestate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Choosestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choosestate_)));
          set_has_choosestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDisbandChooseBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Choosestate = 2;
  if (has_choosestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->choosestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDisbandChooseBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Choosestate = 2;
  if (has_choosestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->choosestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDisbandChooseBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Choosestate = 2;
    if (has_choosestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choosestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandChooseBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandChooseBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandChooseBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandChooseBc::MergeFrom(const AckDisbandChooseBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_choosestate()) {
      set_choosestate(from.choosestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandChooseBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandChooseBc::CopyFrom(const AckDisbandChooseBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandChooseBc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandChooseBc::Swap(AckDisbandChooseBc* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(choosestate_, other->choosestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandChooseBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandChooseBc_descriptor_;
  metadata.reflection = AckDisbandChooseBc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandResult::kResultFieldNumber;
#endif  // !_MSC_VER

AckDisbandResult::AckDisbandResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDisbandResult::InitAsDefaultInstance() {
}

AckDisbandResult::AckDisbandResult(const AckDisbandResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDisbandResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandResult::~AckDisbandResult() {
  SharedDtor();
}

void AckDisbandResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandResult_descriptor_;
}

const AckDisbandResult& AckDisbandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandResult* AckDisbandResult::default_instance_ = NULL;

AckDisbandResult* AckDisbandResult::New() const {
  return new AckDisbandResult;
}

void AckDisbandResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDisbandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDisbandResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDisbandResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandResult::MergeFrom(const AckDisbandResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandResult::CopyFrom(const AckDisbandResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandResult::Swap(AckDisbandResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandResult_descriptor_;
  metadata.reflection = AckDisbandResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOnlineState::kChairidFieldNumber;
const int AckUserOnlineState::kStateFieldNumber;
#endif  // !_MSC_VER

AckUserOnlineState::AckUserOnlineState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserOnlineState::InitAsDefaultInstance() {
}

AckUserOnlineState::AckUserOnlineState(const AckUserOnlineState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserOnlineState::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOnlineState::~AckUserOnlineState() {
  SharedDtor();
}

void AckUserOnlineState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserOnlineState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOnlineState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOnlineState_descriptor_;
}

const AckUserOnlineState& AckUserOnlineState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOnlineState* AckUserOnlineState::default_instance_ = NULL;

AckUserOnlineState* AckUserOnlineState::New() const {
  return new AckUserOnlineState;
}

void AckUserOnlineState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOnlineState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserOnlineState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserOnlineState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserOnlineState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOnlineState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOnlineState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOnlineState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOnlineState::MergeFrom(const AckUserOnlineState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOnlineState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOnlineState::CopyFrom(const AckUserOnlineState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOnlineState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserOnlineState::Swap(AckUserOnlineState* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOnlineState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOnlineState_descriptor_;
  metadata.reflection = AckUserOnlineState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOvertimeState::kChairidFieldNumber;
const int AckUserOvertimeState::kStateFieldNumber;
#endif  // !_MSC_VER

AckUserOvertimeState::AckUserOvertimeState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserOvertimeState::InitAsDefaultInstance() {
}

AckUserOvertimeState::AckUserOvertimeState(const AckUserOvertimeState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserOvertimeState::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOvertimeState::~AckUserOvertimeState() {
  SharedDtor();
}

void AckUserOvertimeState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserOvertimeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOvertimeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOvertimeState_descriptor_;
}

const AckUserOvertimeState& AckUserOvertimeState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOvertimeState* AckUserOvertimeState::default_instance_ = NULL;

AckUserOvertimeState* AckUserOvertimeState::New() const {
  return new AckUserOvertimeState;
}

void AckUserOvertimeState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOvertimeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserOvertimeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserOvertimeState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserOvertimeState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOvertimeState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOvertimeState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOvertimeState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOvertimeState::MergeFrom(const AckUserOvertimeState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOvertimeState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOvertimeState::CopyFrom(const AckUserOvertimeState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOvertimeState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserOvertimeState::Swap(AckUserOvertimeState* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOvertimeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOvertimeState_descriptor_;
  metadata.reflection = AckUserOvertimeState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

AckMessage::AckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMessage::InitAsDefaultInstance() {
}

AckMessage::AckMessage(const AckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMessage::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMessage::~AckMessage() {
  SharedDtor();
}

void AckMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void AckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMessage_descriptor_;
}

const AckMessage& AckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckMessage* AckMessage::default_instance_ = NULL;

AckMessage* AckMessage::New() const {
  return new AckMessage;
}

void AckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMessage::MergeFrom(const AckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMessage::CopyFrom(const AckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessage::IsInitialized() const {

  return true;
}

void AckMessage::Swap(AckMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMessage_descriptor_;
  metadata.reflection = AckMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateWaite::kStateFieldNumber;
#endif  // !_MSC_VER

OperateWaite::OperateWaite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateWaite::InitAsDefaultInstance() {
}

OperateWaite::OperateWaite(const OperateWaite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateWaite::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateWaite::~OperateWaite() {
  SharedDtor();
}

void OperateWaite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateWaite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateWaite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateWaite_descriptor_;
}

const OperateWaite& OperateWaite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

OperateWaite* OperateWaite::default_instance_ = NULL;

OperateWaite* OperateWaite::New() const {
  return new OperateWaite;
}

void OperateWaite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateWaite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateWaite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateWaite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateWaite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateWaite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateWaite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateWaite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateWaite::MergeFrom(const OperateWaite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateWaite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateWaite::CopyFrom(const OperateWaite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateWaite::IsInitialized() const {

  return true;
}

void OperateWaite::Swap(OperateWaite* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateWaite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateWaite_descriptor_;
  metadata.reflection = OperateWaite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCheckHandCards::kSeatidFieldNumber;
const int ReqCheckHandCards::kCardsFieldNumber;
#endif  // !_MSC_VER

ReqCheckHandCards::ReqCheckHandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCheckHandCards::InitAsDefaultInstance() {
}

ReqCheckHandCards::ReqCheckHandCards(const ReqCheckHandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCheckHandCards::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCheckHandCards::~ReqCheckHandCards() {
  SharedDtor();
}

void ReqCheckHandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCheckHandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCheckHandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCheckHandCards_descriptor_;
}

const ReqCheckHandCards& ReqCheckHandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqCheckHandCards* ReqCheckHandCards::default_instance_ = NULL;

ReqCheckHandCards* ReqCheckHandCards::New() const {
  return new ReqCheckHandCards;
}

void ReqCheckHandCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCheckHandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCheckHandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCheckHandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCheckHandCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCheckHandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCheckHandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCheckHandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCheckHandCards::MergeFrom(const ReqCheckHandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCheckHandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckHandCards::CopyFrom(const ReqCheckHandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckHandCards::IsInitialized() const {

  return true;
}

void ReqCheckHandCards::Swap(ReqCheckHandCards* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCheckHandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCheckHandCards_descriptor_;
  metadata.reflection = ReqCheckHandCards_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
