// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdgameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gdgameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace gdmahjonggame {

namespace {

const ::google::protobuf::Descriptor* AckBeginQuanFeng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBeginQuanFeng_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdgamescene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdgamescene_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCopyBankerReack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCopyBankerReack_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuaPaiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuaPaiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyBankerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyBankerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* gdmjGameEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gdmjGameEndInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gdgameproto_2eproto() {
  protobuf_AddDesc_gdgameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gdgameproto.proto");
  GOOGLE_CHECK(file != NULL);
  AckBeginQuanFeng_descriptor_ = file->message_type(0);
  static const int AckBeginQuanFeng_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeginQuanFeng, quanfengcard_),
  };
  AckBeginQuanFeng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBeginQuanFeng_descriptor_,
      AckBeginQuanFeng::default_instance_,
      AckBeginQuanFeng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeginQuanFeng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeginQuanFeng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBeginQuanFeng));
  gdgamescene_descriptor_ = file->message_type(1);
  static const int gdgamescene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, quanfengcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, quanfeng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, huapai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, curjoker_),
  };
  gdgamescene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdgamescene_descriptor_,
      gdgamescene::default_instance_,
      gdgamescene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdgamescene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdgamescene));
  AckGameStart_descriptor_ = file->message_type(2);
  static const int AckGameStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, quanfeng_),
  };
  AckGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStart_descriptor_,
      AckGameStart::default_instance_,
      AckGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStart));
  AckCopyBankerReack_descriptor_ = file->message_type(3);
  static const int AckCopyBankerReack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCopyBankerReack, copybanker_),
  };
  AckCopyBankerReack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCopyBankerReack_descriptor_,
      AckCopyBankerReack::default_instance_,
      AckCopyBankerReack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCopyBankerReack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCopyBankerReack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCopyBankerReack));
  HuaPaiInfo_descriptor_ = file->message_type(4);
  static const int HuaPaiInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, huacard_),
  };
  HuaPaiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuaPaiInfo_descriptor_,
      HuaPaiInfo::default_instance_,
      HuaPaiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuaPaiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuaPaiInfo));
  AddFanInfo_descriptor_ = file->message_type(5);
  static const int AddFanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addnum_),
  };
  AddFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFanInfo_descriptor_,
      AddFanInfo::default_instance_,
      AddFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFanInfo));
  FanInfo_descriptor_ = file->message_type(6);
  static const int FanInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, isbaohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, baopai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, endtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, addfan_),
  };
  FanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FanInfo_descriptor_,
      FanInfo::default_instance_,
      FanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FanInfo));
  CopyBankerInfo_descriptor_ = file->message_type(7);
  static const int CopyBankerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyBankerInfo, bcopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyBankerInfo, score_),
  };
  CopyBankerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyBankerInfo_descriptor_,
      CopyBankerInfo::default_instance_,
      CopyBankerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyBankerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyBankerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyBankerInfo));
  gdmjGameEndInfo_descriptor_ = file->message_type(8);
  static const int gdmjGameEndInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, huapai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, faninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, huapaiscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, huscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, copybankerscore_),
  };
  gdmjGameEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gdmjGameEndInfo_descriptor_,
      gdmjGameEndInfo::default_instance_,
      gdmjGameEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gdmjGameEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gdmjGameEndInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gdgameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBeginQuanFeng_descriptor_, &AckBeginQuanFeng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdgamescene_descriptor_, &gdgamescene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStart_descriptor_, &AckGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCopyBankerReack_descriptor_, &AckCopyBankerReack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuaPaiInfo_descriptor_, &HuaPaiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFanInfo_descriptor_, &AddFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FanInfo_descriptor_, &FanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyBankerInfo_descriptor_, &CopyBankerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gdmjGameEndInfo_descriptor_, &gdmjGameEndInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gdgameproto_2eproto() {
  delete AckBeginQuanFeng::default_instance_;
  delete AckBeginQuanFeng_reflection_;
  delete gdgamescene::default_instance_;
  delete gdgamescene_reflection_;
  delete AckGameStart::default_instance_;
  delete AckGameStart_reflection_;
  delete AckCopyBankerReack::default_instance_;
  delete AckCopyBankerReack_reflection_;
  delete HuaPaiInfo::default_instance_;
  delete HuaPaiInfo_reflection_;
  delete AddFanInfo::default_instance_;
  delete AddFanInfo_reflection_;
  delete FanInfo::default_instance_;
  delete FanInfo_reflection_;
  delete CopyBankerInfo::default_instance_;
  delete CopyBankerInfo_reflection_;
  delete gdmjGameEndInfo::default_instance_;
  delete gdmjGameEndInfo_reflection_;
}

void protobuf_AddDesc_gdgameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021gdgameproto.proto\022\030proto.game.gdmahjon"
    "ggame\"(\n\020AckBeginQuanFeng\022\024\n\014QuanFengCar"
    "d\030\001 \003(\005\"\215\001\n\013gdgamescene\022\024\n\014QuanFengCard\030"
    "\001 \003(\005\022\020\n\010QuanFeng\030\002 \001(\005\0224\n\006HuaPai\030\003 \003(\0132"
    "$.proto.game.gdmahjonggame.HuaPaiInfo\022\016\n"
    "\006PlayID\030\004 \001(\005\022\020\n\010CurJoker\030\005 \001(\005\"2\n\014AckGa"
    "meStart\022\020\n\010bankerid\030\001 \002(\005\022\020\n\010quanfeng\030\002 "
    "\001(\005\"(\n\022AckCopyBankerReack\022\022\n\nCopyBanker\030"
    "\001 \001(\005\"/\n\nHuaPaiInfo\022\020\n\010HuaCount\030\001 \001(\005\022\017\n"
    "\007HuaCard\030\002 \003(\005\"-\n\nAddFanInfo\022\017\n\007AddType\030"
    "\001 \001(\005\022\016\n\006AddNum\030\002 \001(\005\"\270\001\n\007FanInfo\022\017\n\007cha"
    "irID\030\001 \001(\005\022\017\n\007isBaoHu\030\002 \001(\005\022\016\n\006BaoPai\030\003 "
    "\001(\005\022\017\n\007EndType\030\004 \001(\005\022\023\n\013SpecialType\030\005 \001("
    "\005\022\017\n\007FanType\030\006 \001(\005\022\016\n\006FanNum\030\007 \001(\005\0224\n\006ad"
    "dfan\030\010 \003(\0132$.proto.game.gdmahjonggame.Ad"
    "dFanInfo\".\n\016CopyBankerInfo\022\r\n\005bCopy\030\001 \001("
    "\005\022\r\n\005Score\030\002 \001(\005\"\344\001\n\017gdmjGameEndInfo\0224\n\006"
    "HuaPai\030\001 \003(\0132$.proto.game.gdmahjonggame."
    "HuaPaiInfo\0222\n\007faninfo\030\002 \003(\0132!.proto.game"
    ".gdmahjonggame.FanInfo\022\023\n\013HuaPaiScore\030\003 "
    "\003(\005\022\017\n\007HuScore\030\004 \003(\005\022A\n\017CopyBankerScore\030"
    "\005 \003(\0132(.proto.game.gdmahjonggame.CopyBan"
    "kerInfo", 887);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gdgameproto.proto", &protobuf_RegisterTypes);
  AckBeginQuanFeng::default_instance_ = new AckBeginQuanFeng();
  gdgamescene::default_instance_ = new gdgamescene();
  AckGameStart::default_instance_ = new AckGameStart();
  AckCopyBankerReack::default_instance_ = new AckCopyBankerReack();
  HuaPaiInfo::default_instance_ = new HuaPaiInfo();
  AddFanInfo::default_instance_ = new AddFanInfo();
  FanInfo::default_instance_ = new FanInfo();
  CopyBankerInfo::default_instance_ = new CopyBankerInfo();
  gdmjGameEndInfo::default_instance_ = new gdmjGameEndInfo();
  AckBeginQuanFeng::default_instance_->InitAsDefaultInstance();
  gdgamescene::default_instance_->InitAsDefaultInstance();
  AckGameStart::default_instance_->InitAsDefaultInstance();
  AckCopyBankerReack::default_instance_->InitAsDefaultInstance();
  HuaPaiInfo::default_instance_->InitAsDefaultInstance();
  AddFanInfo::default_instance_->InitAsDefaultInstance();
  FanInfo::default_instance_->InitAsDefaultInstance();
  CopyBankerInfo::default_instance_->InitAsDefaultInstance();
  gdmjGameEndInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gdgameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gdgameproto_2eproto {
  StaticDescriptorInitializer_gdgameproto_2eproto() {
    protobuf_AddDesc_gdgameproto_2eproto();
  }
} static_descriptor_initializer_gdgameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckBeginQuanFeng::kQuanFengCardFieldNumber;
#endif  // !_MSC_VER

AckBeginQuanFeng::AckBeginQuanFeng()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBeginQuanFeng::InitAsDefaultInstance() {
}

AckBeginQuanFeng::AckBeginQuanFeng(const AckBeginQuanFeng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBeginQuanFeng::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBeginQuanFeng::~AckBeginQuanFeng() {
  SharedDtor();
}

void AckBeginQuanFeng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBeginQuanFeng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBeginQuanFeng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBeginQuanFeng_descriptor_;
}

const AckBeginQuanFeng& AckBeginQuanFeng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

AckBeginQuanFeng* AckBeginQuanFeng::default_instance_ = NULL;

AckBeginQuanFeng* AckBeginQuanFeng::New() const {
  return new AckBeginQuanFeng;
}

void AckBeginQuanFeng::Clear() {
  quanfengcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBeginQuanFeng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 QuanFengCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuanFengCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_quanfengcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_quanfengcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_QuanFengCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBeginQuanFeng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 QuanFengCard = 1;
  for (int i = 0; i < this->quanfengcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->quanfengcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBeginQuanFeng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 QuanFengCard = 1;
  for (int i = 0; i < this->quanfengcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->quanfengcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBeginQuanFeng::ByteSize() const {
  int total_size = 0;

  // repeated int32 QuanFengCard = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->quanfengcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->quanfengcard(i));
    }
    total_size += 1 * this->quanfengcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBeginQuanFeng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBeginQuanFeng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBeginQuanFeng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBeginQuanFeng::MergeFrom(const AckBeginQuanFeng& from) {
  GOOGLE_CHECK_NE(&from, this);
  quanfengcard_.MergeFrom(from.quanfengcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBeginQuanFeng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBeginQuanFeng::CopyFrom(const AckBeginQuanFeng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBeginQuanFeng::IsInitialized() const {

  return true;
}

void AckBeginQuanFeng::Swap(AckBeginQuanFeng* other) {
  if (other != this) {
    quanfengcard_.Swap(&other->quanfengcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBeginQuanFeng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBeginQuanFeng_descriptor_;
  metadata.reflection = AckBeginQuanFeng_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdgamescene::kQuanFengCardFieldNumber;
const int gdgamescene::kQuanFengFieldNumber;
const int gdgamescene::kHuaPaiFieldNumber;
const int gdgamescene::kPlayIDFieldNumber;
const int gdgamescene::kCurJokerFieldNumber;
#endif  // !_MSC_VER

gdgamescene::gdgamescene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdgamescene::InitAsDefaultInstance() {
}

gdgamescene::gdgamescene(const gdgamescene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdgamescene::SharedCtor() {
  _cached_size_ = 0;
  quanfeng_ = 0;
  playid_ = 0;
  curjoker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdgamescene::~gdgamescene() {
  SharedDtor();
}

void gdgamescene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdgamescene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdgamescene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdgamescene_descriptor_;
}

const gdgamescene& gdgamescene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

gdgamescene* gdgamescene::default_instance_ = NULL;

gdgamescene* gdgamescene::New() const {
  return new gdgamescene;
}

void gdgamescene::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    quanfeng_ = 0;
    playid_ = 0;
    curjoker_ = 0;
  }
  quanfengcard_.Clear();
  huapai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdgamescene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 QuanFengCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuanFengCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_quanfengcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_quanfengcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_QuanFengCard;
        if (input->ExpectTag(16)) goto parse_QuanFeng;
        break;
      }

      // optional int32 QuanFeng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuanFeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quanfeng_)));
          set_has_quanfeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HuaPai;
        break;
      }

      // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HuaPai;
        if (input->ExpectTag(32)) goto parse_PlayID;
        break;
      }

      // optional int32 PlayID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CurJoker;
        break;
      }

      // optional int32 CurJoker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurJoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curjoker_)));
          set_has_curjoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdgamescene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 QuanFengCard = 1;
  for (int i = 0; i < this->quanfengcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->quanfengcard(i), output);
  }

  // optional int32 QuanFeng = 2;
  if (has_quanfeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quanfeng(), output);
  }

  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->huapai(i), output);
  }

  // optional int32 PlayID = 4;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playid(), output);
  }

  // optional int32 CurJoker = 5;
  if (has_curjoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curjoker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdgamescene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 QuanFengCard = 1;
  for (int i = 0; i < this->quanfengcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->quanfengcard(i), target);
  }

  // optional int32 QuanFeng = 2;
  if (has_quanfeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quanfeng(), target);
  }

  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 3;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->huapai(i), target);
  }

  // optional int32 PlayID = 4;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playid(), target);
  }

  // optional int32 CurJoker = 5;
  if (has_curjoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curjoker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdgamescene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 QuanFeng = 2;
    if (has_quanfeng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quanfeng());
    }

    // optional int32 PlayID = 4;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playid());
    }

    // optional int32 CurJoker = 5;
    if (has_curjoker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curjoker());
    }

  }
  // repeated int32 QuanFengCard = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->quanfengcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->quanfengcard(i));
    }
    total_size += 1 * this->quanfengcard_size() + data_size;
  }

  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 3;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdgamescene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdgamescene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdgamescene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdgamescene::MergeFrom(const gdgamescene& from) {
  GOOGLE_CHECK_NE(&from, this);
  quanfengcard_.MergeFrom(from.quanfengcard_);
  huapai_.MergeFrom(from.huapai_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_quanfeng()) {
      set_quanfeng(from.quanfeng());
    }
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_curjoker()) {
      set_curjoker(from.curjoker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdgamescene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdgamescene::CopyFrom(const gdgamescene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdgamescene::IsInitialized() const {

  return true;
}

void gdgamescene::Swap(gdgamescene* other) {
  if (other != this) {
    quanfengcard_.Swap(&other->quanfengcard_);
    std::swap(quanfeng_, other->quanfeng_);
    huapai_.Swap(&other->huapai_);
    std::swap(playid_, other->playid_);
    std::swap(curjoker_, other->curjoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdgamescene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdgamescene_descriptor_;
  metadata.reflection = gdgamescene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStart::kBankeridFieldNumber;
const int AckGameStart::kQuanfengFieldNumber;
#endif  // !_MSC_VER

AckGameStart::AckGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStart::InitAsDefaultInstance() {
}

AckGameStart::AckGameStart(const AckGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerid_ = 0;
  quanfeng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStart::~AckGameStart() {
  SharedDtor();
}

void AckGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStart_descriptor_;
}

const AckGameStart& AckGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

AckGameStart* AckGameStart::default_instance_ = NULL;

AckGameStart* AckGameStart::New() const {
  return new AckGameStart;
}

void AckGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerid_ = 0;
    quanfeng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bankerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quanfeng;
        break;
      }

      // optional int32 quanfeng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quanfeng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quanfeng_)));
          set_has_quanfeng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bankerid = 1;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankerid(), output);
  }

  // optional int32 quanfeng = 2;
  if (has_quanfeng()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quanfeng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bankerid = 1;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankerid(), target);
  }

  // optional int32 quanfeng = 2;
  if (has_quanfeng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quanfeng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bankerid = 1;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 quanfeng = 2;
    if (has_quanfeng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quanfeng());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStart::MergeFrom(const AckGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_quanfeng()) {
      set_quanfeng(from.quanfeng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStart::CopyFrom(const AckGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStart::Swap(AckGameStart* other) {
  if (other != this) {
    std::swap(bankerid_, other->bankerid_);
    std::swap(quanfeng_, other->quanfeng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStart_descriptor_;
  metadata.reflection = AckGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCopyBankerReack::kCopyBankerFieldNumber;
#endif  // !_MSC_VER

AckCopyBankerReack::AckCopyBankerReack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCopyBankerReack::InitAsDefaultInstance() {
}

AckCopyBankerReack::AckCopyBankerReack(const AckCopyBankerReack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCopyBankerReack::SharedCtor() {
  _cached_size_ = 0;
  copybanker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCopyBankerReack::~AckCopyBankerReack() {
  SharedDtor();
}

void AckCopyBankerReack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCopyBankerReack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCopyBankerReack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCopyBankerReack_descriptor_;
}

const AckCopyBankerReack& AckCopyBankerReack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

AckCopyBankerReack* AckCopyBankerReack::default_instance_ = NULL;

AckCopyBankerReack* AckCopyBankerReack::New() const {
  return new AckCopyBankerReack;
}

void AckCopyBankerReack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copybanker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCopyBankerReack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CopyBanker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copybanker_)));
          set_has_copybanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCopyBankerReack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CopyBanker = 1;
  if (has_copybanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copybanker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCopyBankerReack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CopyBanker = 1;
  if (has_copybanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copybanker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCopyBankerReack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CopyBanker = 1;
    if (has_copybanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copybanker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCopyBankerReack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCopyBankerReack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCopyBankerReack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCopyBankerReack::MergeFrom(const AckCopyBankerReack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copybanker()) {
      set_copybanker(from.copybanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCopyBankerReack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCopyBankerReack::CopyFrom(const AckCopyBankerReack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCopyBankerReack::IsInitialized() const {

  return true;
}

void AckCopyBankerReack::Swap(AckCopyBankerReack* other) {
  if (other != this) {
    std::swap(copybanker_, other->copybanker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCopyBankerReack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCopyBankerReack_descriptor_;
  metadata.reflection = AckCopyBankerReack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuaPaiInfo::kHuaCountFieldNumber;
const int HuaPaiInfo::kHuaCardFieldNumber;
#endif  // !_MSC_VER

HuaPaiInfo::HuaPaiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuaPaiInfo::InitAsDefaultInstance() {
}

HuaPaiInfo::HuaPaiInfo(const HuaPaiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuaPaiInfo::SharedCtor() {
  _cached_size_ = 0;
  huacount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuaPaiInfo::~HuaPaiInfo() {
  SharedDtor();
}

void HuaPaiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuaPaiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuaPaiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuaPaiInfo_descriptor_;
}

const HuaPaiInfo& HuaPaiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

HuaPaiInfo* HuaPaiInfo::default_instance_ = NULL;

HuaPaiInfo* HuaPaiInfo::New() const {
  return new HuaPaiInfo;
}

void HuaPaiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huacount_ = 0;
  }
  huacard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuaPaiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuaCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huacount_)));
          set_has_huacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        break;
      }

      // repeated int32 HuaCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_huacard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huacard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HuaCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuaPaiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->huacount(), output);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->huacard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuaPaiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HuaCount = 1;
  if (has_huacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->huacount(), target);
  }

  // repeated int32 HuaCard = 2;
  for (int i = 0; i < this->huacard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->huacard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuaPaiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuaCount = 1;
    if (has_huacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huacount());
    }

  }
  // repeated int32 HuaCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->huacard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huacard(i));
    }
    total_size += 1 * this->huacard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuaPaiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuaPaiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuaPaiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuaPaiInfo::MergeFrom(const HuaPaiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huacard_.MergeFrom(from.huacard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huacount()) {
      set_huacount(from.huacount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuaPaiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuaPaiInfo::CopyFrom(const HuaPaiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuaPaiInfo::IsInitialized() const {

  return true;
}

void HuaPaiInfo::Swap(HuaPaiInfo* other) {
  if (other != this) {
    std::swap(huacount_, other->huacount_);
    huacard_.Swap(&other->huacard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuaPaiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuaPaiInfo_descriptor_;
  metadata.reflection = HuaPaiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFanInfo::kAddTypeFieldNumber;
const int AddFanInfo::kAddNumFieldNumber;
#endif  // !_MSC_VER

AddFanInfo::AddFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFanInfo::InitAsDefaultInstance() {
}

AddFanInfo::AddFanInfo(const AddFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFanInfo::SharedCtor() {
  _cached_size_ = 0;
  addtype_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFanInfo::~AddFanInfo() {
  SharedDtor();
}

void AddFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFanInfo_descriptor_;
}

const AddFanInfo& AddFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

AddFanInfo* AddFanInfo::default_instance_ = NULL;

AddFanInfo* AddFanInfo::New() const {
  return new AddFanInfo;
}

void AddFanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addtype_ = 0;
    addnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AddType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AddNum;
        break;
      }

      // optional int32 AddNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addtype(), output);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AddType = 1;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addtype(), target);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AddType = 1;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 AddNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFanInfo::MergeFrom(const AddFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFanInfo::CopyFrom(const AddFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFanInfo::IsInitialized() const {

  return true;
}

void AddFanInfo::Swap(AddFanInfo* other) {
  if (other != this) {
    std::swap(addtype_, other->addtype_);
    std::swap(addnum_, other->addnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFanInfo_descriptor_;
  metadata.reflection = AddFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FanInfo::kChairIDFieldNumber;
const int FanInfo::kIsBaoHuFieldNumber;
const int FanInfo::kBaoPaiFieldNumber;
const int FanInfo::kEndTypeFieldNumber;
const int FanInfo::kSpecialTypeFieldNumber;
const int FanInfo::kFanTypeFieldNumber;
const int FanInfo::kFanNumFieldNumber;
const int FanInfo::kAddfanFieldNumber;
#endif  // !_MSC_VER

FanInfo::FanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FanInfo::InitAsDefaultInstance() {
}

FanInfo::FanInfo(const FanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FanInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  isbaohu_ = 0;
  baopai_ = 0;
  endtype_ = 0;
  specialtype_ = 0;
  fantype_ = 0;
  fannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FanInfo::~FanInfo() {
  SharedDtor();
}

void FanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FanInfo_descriptor_;
}

const FanInfo& FanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

FanInfo* FanInfo::default_instance_ = NULL;

FanInfo* FanInfo::New() const {
  return new FanInfo;
}

void FanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    isbaohu_ = 0;
    baopai_ = 0;
    endtype_ = 0;
    specialtype_ = 0;
    fantype_ = 0;
    fannum_ = 0;
  }
  addfan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isBaoHu;
        break;
      }

      // optional int32 isBaoHu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBaoHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbaohu_)));
          set_has_isbaohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BaoPai;
        break;
      }

      // optional int32 BaoPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaoPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baopai_)));
          set_has_baopai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EndType;
        break;
      }

      // optional int32 EndType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtype_)));
          set_has_endtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SpecialType;
        break;
      }

      // optional int32 SpecialType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpecialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialtype_)));
          set_has_specialtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FanType;
        break;
      }

      // optional int32 FanType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fantype_)));
          set_has_fantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FanNum;
        break;
      }

      // optional int32 FanNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_addfan;
        break;
      }

      // repeated .proto.game.gdmahjonggame.AddFanInfo addfan = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addfan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addfan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_addfan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 isBaoHu = 2;
  if (has_isbaohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isbaohu(), output);
  }

  // optional int32 BaoPai = 3;
  if (has_baopai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baopai(), output);
  }

  // optional int32 EndType = 4;
  if (has_endtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtype(), output);
  }

  // optional int32 SpecialType = 5;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->specialtype(), output);
  }

  // optional int32 FanType = 6;
  if (has_fantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fantype(), output);
  }

  // optional int32 FanNum = 7;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fannum(), output);
  }

  // repeated .proto.game.gdmahjonggame.AddFanInfo addfan = 8;
  for (int i = 0; i < this->addfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->addfan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 isBaoHu = 2;
  if (has_isbaohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isbaohu(), target);
  }

  // optional int32 BaoPai = 3;
  if (has_baopai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baopai(), target);
  }

  // optional int32 EndType = 4;
  if (has_endtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtype(), target);
  }

  // optional int32 SpecialType = 5;
  if (has_specialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->specialtype(), target);
  }

  // optional int32 FanType = 6;
  if (has_fantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fantype(), target);
  }

  // optional int32 FanNum = 7;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fannum(), target);
  }

  // repeated .proto.game.gdmahjonggame.AddFanInfo addfan = 8;
  for (int i = 0; i < this->addfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->addfan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 isBaoHu = 2;
    if (has_isbaohu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbaohu());
    }

    // optional int32 BaoPai = 3;
    if (has_baopai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baopai());
    }

    // optional int32 EndType = 4;
    if (has_endtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtype());
    }

    // optional int32 SpecialType = 5;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialtype());
    }

    // optional int32 FanType = 6;
    if (has_fantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fantype());
    }

    // optional int32 FanNum = 7;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

  }
  // repeated .proto.game.gdmahjonggame.AddFanInfo addfan = 8;
  total_size += 1 * this->addfan_size();
  for (int i = 0; i < this->addfan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addfan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FanInfo::MergeFrom(const FanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  addfan_.MergeFrom(from.addfan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_isbaohu()) {
      set_isbaohu(from.isbaohu());
    }
    if (from.has_baopai()) {
      set_baopai(from.baopai());
    }
    if (from.has_endtype()) {
      set_endtype(from.endtype());
    }
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_fantype()) {
      set_fantype(from.fantype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanInfo::CopyFrom(const FanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanInfo::IsInitialized() const {

  return true;
}

void FanInfo::Swap(FanInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(isbaohu_, other->isbaohu_);
    std::swap(baopai_, other->baopai_);
    std::swap(endtype_, other->endtype_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(fantype_, other->fantype_);
    std::swap(fannum_, other->fannum_);
    addfan_.Swap(&other->addfan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FanInfo_descriptor_;
  metadata.reflection = FanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyBankerInfo::kBCopyFieldNumber;
const int CopyBankerInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

CopyBankerInfo::CopyBankerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyBankerInfo::InitAsDefaultInstance() {
}

CopyBankerInfo::CopyBankerInfo(const CopyBankerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyBankerInfo::SharedCtor() {
  _cached_size_ = 0;
  bcopy_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyBankerInfo::~CopyBankerInfo() {
  SharedDtor();
}

void CopyBankerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyBankerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyBankerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyBankerInfo_descriptor_;
}

const CopyBankerInfo& CopyBankerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

CopyBankerInfo* CopyBankerInfo::default_instance_ = NULL;

CopyBankerInfo* CopyBankerInfo::New() const {
  return new CopyBankerInfo;
}

void CopyBankerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bcopy_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyBankerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bCopy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcopy_)));
          set_has_bcopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional int32 Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyBankerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bCopy = 1;
  if (has_bcopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bcopy(), output);
  }

  // optional int32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyBankerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bCopy = 1;
  if (has_bcopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bcopy(), target);
  }

  // optional int32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyBankerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bCopy = 1;
    if (has_bcopy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcopy());
    }

    // optional int32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyBankerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyBankerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyBankerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyBankerInfo::MergeFrom(const CopyBankerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bcopy()) {
      set_bcopy(from.bcopy());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyBankerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyBankerInfo::CopyFrom(const CopyBankerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyBankerInfo::IsInitialized() const {

  return true;
}

void CopyBankerInfo::Swap(CopyBankerInfo* other) {
  if (other != this) {
    std::swap(bcopy_, other->bcopy_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyBankerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyBankerInfo_descriptor_;
  metadata.reflection = CopyBankerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gdmjGameEndInfo::kHuaPaiFieldNumber;
const int gdmjGameEndInfo::kFaninfoFieldNumber;
const int gdmjGameEndInfo::kHuaPaiScoreFieldNumber;
const int gdmjGameEndInfo::kHuScoreFieldNumber;
const int gdmjGameEndInfo::kCopyBankerScoreFieldNumber;
#endif  // !_MSC_VER

gdmjGameEndInfo::gdmjGameEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gdmjGameEndInfo::InitAsDefaultInstance() {
}

gdmjGameEndInfo::gdmjGameEndInfo(const gdmjGameEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gdmjGameEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gdmjGameEndInfo::~gdmjGameEndInfo() {
  SharedDtor();
}

void gdmjGameEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gdmjGameEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gdmjGameEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gdmjGameEndInfo_descriptor_;
}

const gdmjGameEndInfo& gdmjGameEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdgameproto_2eproto();
  return *default_instance_;
}

gdmjGameEndInfo* gdmjGameEndInfo::default_instance_ = NULL;

gdmjGameEndInfo* gdmjGameEndInfo::New() const {
  return new gdmjGameEndInfo;
}

void gdmjGameEndInfo::Clear() {
  huapai_.Clear();
  faninfo_.Clear();
  huapaiscore_.Clear();
  huscore_.Clear();
  copybankerscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gdmjGameEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuaPai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huapai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HuaPai;
        if (input->ExpectTag(18)) goto parse_faninfo;
        break;
      }

      // repeated .proto.game.gdmahjonggame.FanInfo faninfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faninfo;
        if (input->ExpectTag(24)) goto parse_HuaPaiScore;
        break;
      }

      // repeated int32 HuaPaiScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuaPaiScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_huapaiscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huapaiscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HuaPaiScore;
        if (input->ExpectTag(32)) goto parse_HuScore;
        break;
      }

      // repeated int32 HuScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_huscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HuScore;
        if (input->ExpectTag(42)) goto parse_CopyBankerScore;
        break;
      }

      // repeated .proto.game.gdmahjonggame.CopyBankerInfo CopyBankerScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CopyBankerScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copybankerscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CopyBankerScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gdmjGameEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huapai(i), output);
  }

  // repeated .proto.game.gdmahjonggame.FanInfo faninfo = 2;
  for (int i = 0; i < this->faninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faninfo(i), output);
  }

  // repeated int32 HuaPaiScore = 3;
  for (int i = 0; i < this->huapaiscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->huapaiscore(i), output);
  }

  // repeated int32 HuScore = 4;
  for (int i = 0; i < this->huscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->huscore(i), output);
  }

  // repeated .proto.game.gdmahjonggame.CopyBankerInfo CopyBankerScore = 5;
  for (int i = 0; i < this->copybankerscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->copybankerscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gdmjGameEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 1;
  for (int i = 0; i < this->huapai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huapai(i), target);
  }

  // repeated .proto.game.gdmahjonggame.FanInfo faninfo = 2;
  for (int i = 0; i < this->faninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faninfo(i), target);
  }

  // repeated int32 HuaPaiScore = 3;
  for (int i = 0; i < this->huapaiscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->huapaiscore(i), target);
  }

  // repeated int32 HuScore = 4;
  for (int i = 0; i < this->huscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->huscore(i), target);
  }

  // repeated .proto.game.gdmahjonggame.CopyBankerInfo CopyBankerScore = 5;
  for (int i = 0; i < this->copybankerscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->copybankerscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gdmjGameEndInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.gdmahjonggame.HuaPaiInfo HuaPai = 1;
  total_size += 1 * this->huapai_size();
  for (int i = 0; i < this->huapai_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huapai(i));
  }

  // repeated .proto.game.gdmahjonggame.FanInfo faninfo = 2;
  total_size += 1 * this->faninfo_size();
  for (int i = 0; i < this->faninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faninfo(i));
  }

  // repeated int32 HuaPaiScore = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->huapaiscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huapaiscore(i));
    }
    total_size += 1 * this->huapaiscore_size() + data_size;
  }

  // repeated int32 HuScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->huscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huscore(i));
    }
    total_size += 1 * this->huscore_size() + data_size;
  }

  // repeated .proto.game.gdmahjonggame.CopyBankerInfo CopyBankerScore = 5;
  total_size += 1 * this->copybankerscore_size();
  for (int i = 0; i < this->copybankerscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copybankerscore(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gdmjGameEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gdmjGameEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gdmjGameEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gdmjGameEndInfo::MergeFrom(const gdmjGameEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huapai_.MergeFrom(from.huapai_);
  faninfo_.MergeFrom(from.faninfo_);
  huapaiscore_.MergeFrom(from.huapaiscore_);
  huscore_.MergeFrom(from.huscore_);
  copybankerscore_.MergeFrom(from.copybankerscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gdmjGameEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gdmjGameEndInfo::CopyFrom(const gdmjGameEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gdmjGameEndInfo::IsInitialized() const {

  return true;
}

void gdmjGameEndInfo::Swap(gdmjGameEndInfo* other) {
  if (other != this) {
    huapai_.Swap(&other->huapai_);
    faninfo_.Swap(&other->faninfo_);
    huapaiscore_.Swap(&other->huapaiscore_);
    huscore_.Swap(&other->huscore_);
    copybankerscore_.Swap(&other->copybankerscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gdmjGameEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gdmjGameEndInfo_descriptor_;
  metadata.reflection = gdmjGameEndInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gdmahjonggame
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
