// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginproto_match.proto

#ifndef PROTOBUF_loginproto_5fmatch_2eproto__INCLUDED
#define PROTOBUF_loginproto_5fmatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

class ReqLogin;
class AckLogoutBc;
class MatchPrizeAck;
class MatchRankReq;
class MatchRankAck;
class RankInfo;
class UpdateRank;
class DetailAck;
class DetailInfo;
class MatchTurnOver;
class NextTurnInfo;
class AckRobotBc;

// ===================================================================

class ReqLogin : public ::google::protobuf::Message {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();

  void Swap(ReqLogin* other);

  // implements Message ----------------------------------------------

  ReqLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqLogin)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 mid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static ReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class AckLogoutBc : public ::google::protobuf::Message {
 public:
  AckLogoutBc();
  virtual ~AckLogoutBc();

  AckLogoutBc(const AckLogoutBc& from);

  inline AckLogoutBc& operator=(const AckLogoutBc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLogoutBc& default_instance();

  void Swap(AckLogoutBc* other);

  // implements Message ----------------------------------------------

  AckLogoutBc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLogoutBc& from);
  void MergeFrom(const AckLogoutBc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckLogoutBc)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static AckLogoutBc* default_instance_;
};
// -------------------------------------------------------------------

class MatchPrizeAck : public ::google::protobuf::Message {
 public:
  MatchPrizeAck();
  virtual ~MatchPrizeAck();

  MatchPrizeAck(const MatchPrizeAck& from);

  inline MatchPrizeAck& operator=(const MatchPrizeAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPrizeAck& default_instance();

  void Swap(MatchPrizeAck* other);

  // implements Message ----------------------------------------------

  MatchPrizeAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchPrizeAck& from);
  void MergeFrom(const MatchPrizeAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 isBreak = 2;
  inline bool has_isbreak() const;
  inline void clear_isbreak();
  static const int kIsBreakFieldNumber = 2;
  inline ::google::protobuf::int32 isbreak() const;
  inline void set_isbreak(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.MatchPrizeAck)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_isbreak();
  inline void clear_has_isbreak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 isbreak_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static MatchPrizeAck* default_instance_;
};
// -------------------------------------------------------------------

class MatchRankReq : public ::google::protobuf::Message {
 public:
  MatchRankReq();
  virtual ~MatchRankReq();

  MatchRankReq(const MatchRankReq& from);

  inline MatchRankReq& operator=(const MatchRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchRankReq& default_instance();

  void Swap(MatchRankReq* other);

  // implements Message ----------------------------------------------

  MatchRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchRankReq& from);
  void MergeFrom(const MatchRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.MatchRankReq)
 private:
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static MatchRankReq* default_instance_;
};
// -------------------------------------------------------------------

class MatchRankAck : public ::google::protobuf::Message {
 public:
  MatchRankAck();
  virtual ~MatchRankAck();

  MatchRankAck(const MatchRankAck& from);

  inline MatchRankAck& operator=(const MatchRankAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchRankAck& default_instance();

  void Swap(MatchRankAck* other);

  // implements Message ----------------------------------------------

  MatchRankAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchRankAck& from);
  void MergeFrom(const MatchRankAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // repeated .proto.game.RankInfo ranklist = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRanklistFieldNumber = 2;
  inline const ::proto::game::RankInfo& ranklist(int index) const;
  inline ::proto::game::RankInfo* mutable_ranklist(int index);
  inline ::proto::game::RankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::RankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::RankInfo >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:proto.game.MatchRankAck)
 private:
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::RankInfo > ranklist_;
  ::google::protobuf::int32 page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static MatchRankAck* default_instance_;
};
// -------------------------------------------------------------------

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float totalMpScore = 3;
  inline bool has_totalmpscore() const;
  inline void clear_totalmpscore();
  static const int kTotalMpScoreFieldNumber = 3;
  inline float totalmpscore() const;
  inline void set_totalmpscore(float value);

  // optional float totalUseTime = 4;
  inline bool has_totalusetime() const;
  inline void clear_totalusetime();
  static const int kTotalUseTimeFieldNumber = 4;
  inline float totalusetime() const;
  inline void set_totalusetime(float value);

  // @@protoc_insertion_point(class_scope:proto.game.RankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_totalmpscore();
  inline void clear_has_totalmpscore();
  inline void set_has_totalusetime();
  inline void clear_has_totalusetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  float totalmpscore_;
  float totalusetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRank : public ::google::protobuf::Message {
 public:
  UpdateRank();
  virtual ~UpdateRank();

  UpdateRank(const UpdateRank& from);

  inline UpdateRank& operator=(const UpdateRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRank& default_instance();

  void Swap(UpdateRank* other);

  // implements Message ----------------------------------------------

  UpdateRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRank& from);
  void MergeFrom(const UpdateRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.UpdateRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static UpdateRank* default_instance_;
};
// -------------------------------------------------------------------

class DetailAck : public ::google::protobuf::Message {
 public:
  DetailAck();
  virtual ~DetailAck();

  DetailAck(const DetailAck& from);

  inline DetailAck& operator=(const DetailAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailAck& default_instance();

  void Swap(DetailAck* other);

  // implements Message ----------------------------------------------

  DetailAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailAck& from);
  void MergeFrom(const DetailAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.DetailInfo rankInfo = 1;
  inline int rankinfo_size() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 1;
  inline const ::proto::game::DetailInfo& rankinfo(int index) const;
  inline ::proto::game::DetailInfo* mutable_rankinfo(int index);
  inline ::proto::game::DetailInfo* add_rankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DetailInfo >&
      rankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::DetailInfo >*
      mutable_rankinfo();

  // optional int32 curRank = 2;
  inline bool has_currank() const;
  inline void clear_currank();
  static const int kCurRankFieldNumber = 2;
  inline ::google::protobuf::int32 currank() const;
  inline void set_currank(::google::protobuf::int32 value);

  // optional int32 totalRank = 3;
  inline bool has_totalrank() const;
  inline void clear_totalrank();
  static const int kTotalRankFieldNumber = 3;
  inline ::google::protobuf::int32 totalrank() const;
  inline void set_totalrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.DetailAck)
 private:
  inline void set_has_currank();
  inline void clear_has_currank();
  inline void set_has_totalrank();
  inline void clear_has_totalrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::DetailInfo > rankinfo_;
  ::google::protobuf::int32 currank_;
  ::google::protobuf::int32 totalrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static DetailAck* default_instance_;
};
// -------------------------------------------------------------------

class DetailInfo : public ::google::protobuf::Message {
 public:
  DetailInfo();
  virtual ~DetailInfo();

  DetailInfo(const DetailInfo& from);

  inline DetailInfo& operator=(const DetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailInfo& default_instance();

  void Swap(DetailInfo* other);

  // implements Message ----------------------------------------------

  DetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailInfo& from);
  void MergeFrom(const DetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline ::google::protobuf::int32 round() const;
  inline void set_round(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 roundRank = 3;
  inline bool has_roundrank() const;
  inline void clear_roundrank();
  static const int kRoundRankFieldNumber = 3;
  inline ::google::protobuf::int32 roundrank() const;
  inline void set_roundrank(::google::protobuf::int32 value);

  // optional int32 totalRank = 4;
  inline bool has_totalrank() const;
  inline void clear_totalrank();
  static const int kTotalRankFieldNumber = 4;
  inline ::google::protobuf::int32 totalrank() const;
  inline void set_totalrank(::google::protobuf::int32 value);

  // optional int32 maxScore = 5;
  inline bool has_maxscore() const;
  inline void clear_maxscore();
  static const int kMaxScoreFieldNumber = 5;
  inline ::google::protobuf::int32 maxscore() const;
  inline void set_maxscore(::google::protobuf::int32 value);

  // optional string bestName = 6;
  inline bool has_bestname() const;
  inline void clear_bestname();
  static const int kBestNameFieldNumber = 6;
  inline const ::std::string& bestname() const;
  inline void set_bestname(const ::std::string& value);
  inline void set_bestname(const char* value);
  inline void set_bestname(const char* value, size_t size);
  inline ::std::string* mutable_bestname();
  inline ::std::string* release_bestname();
  inline void set_allocated_bestname(::std::string* bestname);

  // optional int32 bestScore = 7;
  inline bool has_bestscore() const;
  inline void clear_bestscore();
  static const int kBestScoreFieldNumber = 7;
  inline ::google::protobuf::int32 bestscore() const;
  inline void set_bestscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.DetailInfo)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_roundrank();
  inline void clear_has_roundrank();
  inline void set_has_totalrank();
  inline void clear_has_totalrank();
  inline void set_has_maxscore();
  inline void clear_has_maxscore();
  inline void set_has_bestname();
  inline void clear_has_bestname();
  inline void set_has_bestscore();
  inline void clear_has_bestscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 round_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 roundrank_;
  ::google::protobuf::int32 totalrank_;
  ::std::string* bestname_;
  ::google::protobuf::int32 maxscore_;
  ::google::protobuf::int32 bestscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static DetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchTurnOver : public ::google::protobuf::Message {
 public:
  MatchTurnOver();
  virtual ~MatchTurnOver();

  MatchTurnOver(const MatchTurnOver& from);

  inline MatchTurnOver& operator=(const MatchTurnOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchTurnOver& default_instance();

  void Swap(MatchTurnOver* other);

  // implements Message ----------------------------------------------

  MatchTurnOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchTurnOver& from);
  void MergeFrom(const MatchTurnOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left_table = 1;
  inline bool has_left_table() const;
  inline void clear_left_table();
  static const int kLeftTableFieldNumber = 1;
  inline ::google::protobuf::int32 left_table() const;
  inline void set_left_table(::google::protobuf::int32 value);

  // optional int32 cur_rank = 2;
  inline bool has_cur_rank() const;
  inline void clear_cur_rank();
  static const int kCurRankFieldNumber = 2;
  inline ::google::protobuf::int32 cur_rank() const;
  inline void set_cur_rank(::google::protobuf::int32 value);

  // optional .proto.game.NextTurnInfo cur_turn = 3;
  inline bool has_cur_turn() const;
  inline void clear_cur_turn();
  static const int kCurTurnFieldNumber = 3;
  inline const ::proto::game::NextTurnInfo& cur_turn() const;
  inline ::proto::game::NextTurnInfo* mutable_cur_turn();
  inline ::proto::game::NextTurnInfo* release_cur_turn();
  inline void set_allocated_cur_turn(::proto::game::NextTurnInfo* cur_turn);

  // optional .proto.game.NextTurnInfo next_turn = 4;
  inline bool has_next_turn() const;
  inline void clear_next_turn();
  static const int kNextTurnFieldNumber = 4;
  inline const ::proto::game::NextTurnInfo& next_turn() const;
  inline ::proto::game::NextTurnInfo* mutable_next_turn();
  inline ::proto::game::NextTurnInfo* release_next_turn();
  inline void set_allocated_next_turn(::proto::game::NextTurnInfo* next_turn);

  // optional int32 promotion = 5;
  inline bool has_promotion() const;
  inline void clear_promotion();
  static const int kPromotionFieldNumber = 5;
  inline ::google::protobuf::int32 promotion() const;
  inline void set_promotion(::google::protobuf::int32 value);

  // optional int32 left_time = 6;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 6;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // optional int32 score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.MatchTurnOver)
 private:
  inline void set_has_left_table();
  inline void clear_has_left_table();
  inline void set_has_cur_rank();
  inline void clear_has_cur_rank();
  inline void set_has_cur_turn();
  inline void clear_has_cur_turn();
  inline void set_has_next_turn();
  inline void clear_has_next_turn();
  inline void set_has_promotion();
  inline void clear_has_promotion();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 left_table_;
  ::google::protobuf::int32 cur_rank_;
  ::proto::game::NextTurnInfo* cur_turn_;
  ::proto::game::NextTurnInfo* next_turn_;
  ::google::protobuf::int32 promotion_;
  ::google::protobuf::int32 left_time_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static MatchTurnOver* default_instance_;
};
// -------------------------------------------------------------------

class NextTurnInfo : public ::google::protobuf::Message {
 public:
  NextTurnInfo();
  virtual ~NextTurnInfo();

  NextTurnInfo(const NextTurnInfo& from);

  inline NextTurnInfo& operator=(const NextTurnInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NextTurnInfo& default_instance();

  void Swap(NextTurnInfo* other);

  // implements Message ----------------------------------------------

  NextTurnInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NextTurnInfo& from);
  void MergeFrom(const NextTurnInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 turnid = 1;
  inline bool has_turnid() const;
  inline void clear_turnid();
  static const int kTurnidFieldNumber = 1;
  inline ::google::protobuf::int32 turnid() const;
  inline void set_turnid(::google::protobuf::int32 value);

  // optional int32 join_num = 2;
  inline bool has_join_num() const;
  inline void clear_join_num();
  static const int kJoinNumFieldNumber = 2;
  inline ::google::protobuf::int32 join_num() const;
  inline void set_join_num(::google::protobuf::int32 value);

  // optional int32 promotion_num = 3;
  inline bool has_promotion_num() const;
  inline void clear_promotion_num();
  static const int kPromotionNumFieldNumber = 3;
  inline ::google::protobuf::int32 promotion_num() const;
  inline void set_promotion_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.NextTurnInfo)
 private:
  inline void set_has_turnid();
  inline void clear_has_turnid();
  inline void set_has_join_num();
  inline void clear_has_join_num();
  inline void set_has_promotion_num();
  inline void clear_has_promotion_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 turnid_;
  ::google::protobuf::int32 join_num_;
  ::google::protobuf::int32 promotion_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static NextTurnInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckRobotBc : public ::google::protobuf::Message {
 public:
  AckRobotBc();
  virtual ~AckRobotBc();

  AckRobotBc(const AckRobotBc& from);

  inline AckRobotBc& operator=(const AckRobotBc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRobotBc& default_instance();

  void Swap(AckRobotBc* other);

  // implements Message ----------------------------------------------

  AckRobotBc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRobotBc& from);
  void MergeFrom(const AckRobotBc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 robot = 3;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 3;
  inline ::google::protobuf::int32 robot() const;
  inline void set_robot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckRobotBc)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_robot();
  inline void clear_has_robot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 robot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_AssignDesc_loginproto_5fmatch_2eproto();
  friend void protobuf_ShutdownFile_loginproto_5fmatch_2eproto();

  void InitAsDefaultInstance();
  static AckRobotBc* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqLogin

// required int32 uid = 1;
inline bool ReqLogin::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogin::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLogin::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLogin::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqLogin::uid() const {
  return uid_;
}
inline void ReqLogin::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 mid = 2;
inline bool ReqLogin::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogin::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLogin::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLogin::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 ReqLogin::mid() const {
  return mid_;
}
inline void ReqLogin::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
}

// -------------------------------------------------------------------

// AckLogoutBc

// required int32 seatid = 1;
inline bool AckLogoutBc::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLogoutBc::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLogoutBc::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLogoutBc::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckLogoutBc::seatid() const {
  return seatid_;
}
inline void AckLogoutBc::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 uid = 2;
inline bool AckLogoutBc::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckLogoutBc::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckLogoutBc::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckLogoutBc::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckLogoutBc::uid() const {
  return uid_;
}
inline void AckLogoutBc::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 type = 3;
inline bool AckLogoutBc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckLogoutBc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckLogoutBc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckLogoutBc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AckLogoutBc::type() const {
  return type_;
}
inline void AckLogoutBc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// MatchPrizeAck

// optional string content = 1;
inline bool MatchPrizeAck::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchPrizeAck::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchPrizeAck::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchPrizeAck::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MatchPrizeAck::content() const {
  return *content_;
}
inline void MatchPrizeAck::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MatchPrizeAck::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MatchPrizeAck::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchPrizeAck::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MatchPrizeAck::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchPrizeAck::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isBreak = 2;
inline bool MatchPrizeAck::has_isbreak() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchPrizeAck::set_has_isbreak() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchPrizeAck::clear_has_isbreak() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchPrizeAck::clear_isbreak() {
  isbreak_ = 0;
  clear_has_isbreak();
}
inline ::google::protobuf::int32 MatchPrizeAck::isbreak() const {
  return isbreak_;
}
inline void MatchPrizeAck::set_isbreak(::google::protobuf::int32 value) {
  set_has_isbreak();
  isbreak_ = value;
}

// -------------------------------------------------------------------

// MatchRankReq

// optional int32 page = 1;
inline bool MatchRankReq::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRankReq::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRankReq::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRankReq::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 MatchRankReq::page() const {
  return page_;
}
inline void MatchRankReq::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// MatchRankAck

// optional int32 page = 1;
inline bool MatchRankAck::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRankAck::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRankAck::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRankAck::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 MatchRankAck::page() const {
  return page_;
}
inline void MatchRankAck::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// repeated .proto.game.RankInfo ranklist = 2;
inline int MatchRankAck::ranklist_size() const {
  return ranklist_.size();
}
inline void MatchRankAck::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::proto::game::RankInfo& MatchRankAck::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::proto::game::RankInfo* MatchRankAck::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::proto::game::RankInfo* MatchRankAck::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::RankInfo >&
MatchRankAck::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::RankInfo >*
MatchRankAck::mutable_ranklist() {
  return &ranklist_;
}

// -------------------------------------------------------------------

// RankInfo

// optional int32 rank = 1;
inline bool RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankInfo::rank() const {
  return rank_;
}
inline void RankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 2;
inline bool RankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankInfo::name() const {
  return *name_;
}
inline void RankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float totalMpScore = 3;
inline bool RankInfo::has_totalmpscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_totalmpscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_totalmpscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_totalmpscore() {
  totalmpscore_ = 0;
  clear_has_totalmpscore();
}
inline float RankInfo::totalmpscore() const {
  return totalmpscore_;
}
inline void RankInfo::set_totalmpscore(float value) {
  set_has_totalmpscore();
  totalmpscore_ = value;
}

// optional float totalUseTime = 4;
inline bool RankInfo::has_totalusetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_totalusetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_totalusetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_totalusetime() {
  totalusetime_ = 0;
  clear_has_totalusetime();
}
inline float RankInfo::totalusetime() const {
  return totalusetime_;
}
inline void RankInfo::set_totalusetime(float value) {
  set_has_totalusetime();
  totalusetime_ = value;
}

// -------------------------------------------------------------------

// UpdateRank

// optional int32 rank = 1;
inline bool UpdateRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 UpdateRank::rank() const {
  return rank_;
}
inline void UpdateRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// DetailAck

// repeated .proto.game.DetailInfo rankInfo = 1;
inline int DetailAck::rankinfo_size() const {
  return rankinfo_.size();
}
inline void DetailAck::clear_rankinfo() {
  rankinfo_.Clear();
}
inline const ::proto::game::DetailInfo& DetailAck::rankinfo(int index) const {
  return rankinfo_.Get(index);
}
inline ::proto::game::DetailInfo* DetailAck::mutable_rankinfo(int index) {
  return rankinfo_.Mutable(index);
}
inline ::proto::game::DetailInfo* DetailAck::add_rankinfo() {
  return rankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DetailInfo >&
DetailAck::rankinfo() const {
  return rankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::DetailInfo >*
DetailAck::mutable_rankinfo() {
  return &rankinfo_;
}

// optional int32 curRank = 2;
inline bool DetailAck::has_currank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailAck::set_has_currank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailAck::clear_has_currank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailAck::clear_currank() {
  currank_ = 0;
  clear_has_currank();
}
inline ::google::protobuf::int32 DetailAck::currank() const {
  return currank_;
}
inline void DetailAck::set_currank(::google::protobuf::int32 value) {
  set_has_currank();
  currank_ = value;
}

// optional int32 totalRank = 3;
inline bool DetailAck::has_totalrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailAck::set_has_totalrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailAck::clear_has_totalrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailAck::clear_totalrank() {
  totalrank_ = 0;
  clear_has_totalrank();
}
inline ::google::protobuf::int32 DetailAck::totalrank() const {
  return totalrank_;
}
inline void DetailAck::set_totalrank(::google::protobuf::int32 value) {
  set_has_totalrank();
  totalrank_ = value;
}

// -------------------------------------------------------------------

// DetailInfo

// optional int32 round = 1;
inline bool DetailInfo::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailInfo::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailInfo::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailInfo::clear_round() {
  round_ = 0;
  clear_has_round();
}
inline ::google::protobuf::int32 DetailInfo::round() const {
  return round_;
}
inline void DetailInfo::set_round(::google::protobuf::int32 value) {
  set_has_round();
  round_ = value;
}

// optional int32 score = 2;
inline bool DetailInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 DetailInfo::score() const {
  return score_;
}
inline void DetailInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 roundRank = 3;
inline bool DetailInfo::has_roundrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailInfo::set_has_roundrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailInfo::clear_has_roundrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailInfo::clear_roundrank() {
  roundrank_ = 0;
  clear_has_roundrank();
}
inline ::google::protobuf::int32 DetailInfo::roundrank() const {
  return roundrank_;
}
inline void DetailInfo::set_roundrank(::google::protobuf::int32 value) {
  set_has_roundrank();
  roundrank_ = value;
}

// optional int32 totalRank = 4;
inline bool DetailInfo::has_totalrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetailInfo::set_has_totalrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetailInfo::clear_has_totalrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetailInfo::clear_totalrank() {
  totalrank_ = 0;
  clear_has_totalrank();
}
inline ::google::protobuf::int32 DetailInfo::totalrank() const {
  return totalrank_;
}
inline void DetailInfo::set_totalrank(::google::protobuf::int32 value) {
  set_has_totalrank();
  totalrank_ = value;
}

// optional int32 maxScore = 5;
inline bool DetailInfo::has_maxscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetailInfo::set_has_maxscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetailInfo::clear_has_maxscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetailInfo::clear_maxscore() {
  maxscore_ = 0;
  clear_has_maxscore();
}
inline ::google::protobuf::int32 DetailInfo::maxscore() const {
  return maxscore_;
}
inline void DetailInfo::set_maxscore(::google::protobuf::int32 value) {
  set_has_maxscore();
  maxscore_ = value;
}

// optional string bestName = 6;
inline bool DetailInfo::has_bestname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetailInfo::set_has_bestname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetailInfo::clear_has_bestname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetailInfo::clear_bestname() {
  if (bestname_ != &::google::protobuf::internal::kEmptyString) {
    bestname_->clear();
  }
  clear_has_bestname();
}
inline const ::std::string& DetailInfo::bestname() const {
  return *bestname_;
}
inline void DetailInfo::set_bestname(const ::std::string& value) {
  set_has_bestname();
  if (bestname_ == &::google::protobuf::internal::kEmptyString) {
    bestname_ = new ::std::string;
  }
  bestname_->assign(value);
}
inline void DetailInfo::set_bestname(const char* value) {
  set_has_bestname();
  if (bestname_ == &::google::protobuf::internal::kEmptyString) {
    bestname_ = new ::std::string;
  }
  bestname_->assign(value);
}
inline void DetailInfo::set_bestname(const char* value, size_t size) {
  set_has_bestname();
  if (bestname_ == &::google::protobuf::internal::kEmptyString) {
    bestname_ = new ::std::string;
  }
  bestname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailInfo::mutable_bestname() {
  set_has_bestname();
  if (bestname_ == &::google::protobuf::internal::kEmptyString) {
    bestname_ = new ::std::string;
  }
  return bestname_;
}
inline ::std::string* DetailInfo::release_bestname() {
  clear_has_bestname();
  if (bestname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bestname_;
    bestname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailInfo::set_allocated_bestname(::std::string* bestname) {
  if (bestname_ != &::google::protobuf::internal::kEmptyString) {
    delete bestname_;
  }
  if (bestname) {
    set_has_bestname();
    bestname_ = bestname;
  } else {
    clear_has_bestname();
    bestname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bestScore = 7;
inline bool DetailInfo::has_bestscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetailInfo::set_has_bestscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetailInfo::clear_has_bestscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetailInfo::clear_bestscore() {
  bestscore_ = 0;
  clear_has_bestscore();
}
inline ::google::protobuf::int32 DetailInfo::bestscore() const {
  return bestscore_;
}
inline void DetailInfo::set_bestscore(::google::protobuf::int32 value) {
  set_has_bestscore();
  bestscore_ = value;
}

// -------------------------------------------------------------------

// MatchTurnOver

// optional int32 left_table = 1;
inline bool MatchTurnOver::has_left_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchTurnOver::set_has_left_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchTurnOver::clear_has_left_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchTurnOver::clear_left_table() {
  left_table_ = 0;
  clear_has_left_table();
}
inline ::google::protobuf::int32 MatchTurnOver::left_table() const {
  return left_table_;
}
inline void MatchTurnOver::set_left_table(::google::protobuf::int32 value) {
  set_has_left_table();
  left_table_ = value;
}

// optional int32 cur_rank = 2;
inline bool MatchTurnOver::has_cur_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchTurnOver::set_has_cur_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchTurnOver::clear_has_cur_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchTurnOver::clear_cur_rank() {
  cur_rank_ = 0;
  clear_has_cur_rank();
}
inline ::google::protobuf::int32 MatchTurnOver::cur_rank() const {
  return cur_rank_;
}
inline void MatchTurnOver::set_cur_rank(::google::protobuf::int32 value) {
  set_has_cur_rank();
  cur_rank_ = value;
}

// optional .proto.game.NextTurnInfo cur_turn = 3;
inline bool MatchTurnOver::has_cur_turn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchTurnOver::set_has_cur_turn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchTurnOver::clear_has_cur_turn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchTurnOver::clear_cur_turn() {
  if (cur_turn_ != NULL) cur_turn_->::proto::game::NextTurnInfo::Clear();
  clear_has_cur_turn();
}
inline const ::proto::game::NextTurnInfo& MatchTurnOver::cur_turn() const {
  return cur_turn_ != NULL ? *cur_turn_ : *default_instance_->cur_turn_;
}
inline ::proto::game::NextTurnInfo* MatchTurnOver::mutable_cur_turn() {
  set_has_cur_turn();
  if (cur_turn_ == NULL) cur_turn_ = new ::proto::game::NextTurnInfo;
  return cur_turn_;
}
inline ::proto::game::NextTurnInfo* MatchTurnOver::release_cur_turn() {
  clear_has_cur_turn();
  ::proto::game::NextTurnInfo* temp = cur_turn_;
  cur_turn_ = NULL;
  return temp;
}
inline void MatchTurnOver::set_allocated_cur_turn(::proto::game::NextTurnInfo* cur_turn) {
  delete cur_turn_;
  cur_turn_ = cur_turn;
  if (cur_turn) {
    set_has_cur_turn();
  } else {
    clear_has_cur_turn();
  }
}

// optional .proto.game.NextTurnInfo next_turn = 4;
inline bool MatchTurnOver::has_next_turn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchTurnOver::set_has_next_turn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchTurnOver::clear_has_next_turn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchTurnOver::clear_next_turn() {
  if (next_turn_ != NULL) next_turn_->::proto::game::NextTurnInfo::Clear();
  clear_has_next_turn();
}
inline const ::proto::game::NextTurnInfo& MatchTurnOver::next_turn() const {
  return next_turn_ != NULL ? *next_turn_ : *default_instance_->next_turn_;
}
inline ::proto::game::NextTurnInfo* MatchTurnOver::mutable_next_turn() {
  set_has_next_turn();
  if (next_turn_ == NULL) next_turn_ = new ::proto::game::NextTurnInfo;
  return next_turn_;
}
inline ::proto::game::NextTurnInfo* MatchTurnOver::release_next_turn() {
  clear_has_next_turn();
  ::proto::game::NextTurnInfo* temp = next_turn_;
  next_turn_ = NULL;
  return temp;
}
inline void MatchTurnOver::set_allocated_next_turn(::proto::game::NextTurnInfo* next_turn) {
  delete next_turn_;
  next_turn_ = next_turn;
  if (next_turn) {
    set_has_next_turn();
  } else {
    clear_has_next_turn();
  }
}

// optional int32 promotion = 5;
inline bool MatchTurnOver::has_promotion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchTurnOver::set_has_promotion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchTurnOver::clear_has_promotion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchTurnOver::clear_promotion() {
  promotion_ = 0;
  clear_has_promotion();
}
inline ::google::protobuf::int32 MatchTurnOver::promotion() const {
  return promotion_;
}
inline void MatchTurnOver::set_promotion(::google::protobuf::int32 value) {
  set_has_promotion();
  promotion_ = value;
}

// optional int32 left_time = 6;
inline bool MatchTurnOver::has_left_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchTurnOver::set_has_left_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchTurnOver::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchTurnOver::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 MatchTurnOver::left_time() const {
  return left_time_;
}
inline void MatchTurnOver::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// optional int32 score = 7;
inline bool MatchTurnOver::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchTurnOver::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchTurnOver::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchTurnOver::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 MatchTurnOver::score() const {
  return score_;
}
inline void MatchTurnOver::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// NextTurnInfo

// optional int32 turnid = 1;
inline bool NextTurnInfo::has_turnid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NextTurnInfo::set_has_turnid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NextTurnInfo::clear_has_turnid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NextTurnInfo::clear_turnid() {
  turnid_ = 0;
  clear_has_turnid();
}
inline ::google::protobuf::int32 NextTurnInfo::turnid() const {
  return turnid_;
}
inline void NextTurnInfo::set_turnid(::google::protobuf::int32 value) {
  set_has_turnid();
  turnid_ = value;
}

// optional int32 join_num = 2;
inline bool NextTurnInfo::has_join_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NextTurnInfo::set_has_join_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NextTurnInfo::clear_has_join_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NextTurnInfo::clear_join_num() {
  join_num_ = 0;
  clear_has_join_num();
}
inline ::google::protobuf::int32 NextTurnInfo::join_num() const {
  return join_num_;
}
inline void NextTurnInfo::set_join_num(::google::protobuf::int32 value) {
  set_has_join_num();
  join_num_ = value;
}

// optional int32 promotion_num = 3;
inline bool NextTurnInfo::has_promotion_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NextTurnInfo::set_has_promotion_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NextTurnInfo::clear_has_promotion_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NextTurnInfo::clear_promotion_num() {
  promotion_num_ = 0;
  clear_has_promotion_num();
}
inline ::google::protobuf::int32 NextTurnInfo::promotion_num() const {
  return promotion_num_;
}
inline void NextTurnInfo::set_promotion_num(::google::protobuf::int32 value) {
  set_has_promotion_num();
  promotion_num_ = value;
}

// -------------------------------------------------------------------

// AckRobotBc

// optional int32 uid = 1;
inline bool AckRobotBc::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRobotBc::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRobotBc::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRobotBc::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckRobotBc::uid() const {
  return uid_;
}
inline void AckRobotBc::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 seatid = 2;
inline bool AckRobotBc::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckRobotBc::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckRobotBc::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckRobotBc::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckRobotBc::seatid() const {
  return seatid_;
}
inline void AckRobotBc::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 robot = 3;
inline bool AckRobotBc::has_robot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckRobotBc::set_has_robot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckRobotBc::clear_has_robot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckRobotBc::clear_robot() {
  robot_ = 0;
  clear_has_robot();
}
inline ::google::protobuf::int32 AckRobotBc::robot() const {
  return robot_;
}
inline void AckRobotBc::set_robot(::google::protobuf::int32 value) {
  set_has_robot();
  robot_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loginproto_5fmatch_2eproto__INCLUDED
