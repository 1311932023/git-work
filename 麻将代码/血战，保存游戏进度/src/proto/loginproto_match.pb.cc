// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginproto_match.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginproto_match.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

namespace {

const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLogoutBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLogoutBc_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPrizeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPrizeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRankAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRankAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchTurnOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchTurnOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* NextTurnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NextTurnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRobotBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRobotBc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginproto_5fmatch_2eproto() {
  protobuf_AddDesc_loginproto_5fmatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginproto_match.proto");
  GOOGLE_CHECK(file != NULL);
  ReqLogin_descriptor_ = file->message_type(0);
  static const int ReqLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, mid_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  AckLogoutBc_descriptor_ = file->message_type(1);
  static const int AckLogoutBc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, type_),
  };
  AckLogoutBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLogoutBc_descriptor_,
      AckLogoutBc::default_instance_,
      AckLogoutBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLogoutBc));
  MatchPrizeAck_descriptor_ = file->message_type(2);
  static const int MatchPrizeAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPrizeAck, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPrizeAck, isbreak_),
  };
  MatchPrizeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchPrizeAck_descriptor_,
      MatchPrizeAck::default_instance_,
      MatchPrizeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPrizeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPrizeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchPrizeAck));
  MatchRankReq_descriptor_ = file->message_type(3);
  static const int MatchRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankReq, page_),
  };
  MatchRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRankReq_descriptor_,
      MatchRankReq::default_instance_,
      MatchRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRankReq));
  MatchRankAck_descriptor_ = file->message_type(4);
  static const int MatchRankAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankAck, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankAck, ranklist_),
  };
  MatchRankAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRankAck_descriptor_,
      MatchRankAck::default_instance_,
      MatchRankAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRankAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRankAck));
  RankInfo_descriptor_ = file->message_type(5);
  static const int RankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, totalmpscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, totalusetime_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  UpdateRank_descriptor_ = file->message_type(6);
  static const int UpdateRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRank, rank_),
  };
  UpdateRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRank_descriptor_,
      UpdateRank::default_instance_,
      UpdateRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRank));
  DetailAck_descriptor_ = file->message_type(7);
  static const int DetailAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailAck, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailAck, currank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailAck, totalrank_),
  };
  DetailAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailAck_descriptor_,
      DetailAck::default_instance_,
      DetailAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailAck));
  DetailInfo_descriptor_ = file->message_type(8);
  static const int DetailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, roundrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, totalrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, bestname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, bestscore_),
  };
  DetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailInfo_descriptor_,
      DetailInfo::default_instance_,
      DetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailInfo));
  MatchTurnOver_descriptor_ = file->message_type(9);
  static const int MatchTurnOver_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, left_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, cur_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, next_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, promotion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, score_),
  };
  MatchTurnOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchTurnOver_descriptor_,
      MatchTurnOver::default_instance_,
      MatchTurnOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchTurnOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchTurnOver));
  NextTurnInfo_descriptor_ = file->message_type(10);
  static const int NextTurnInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextTurnInfo, turnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextTurnInfo, join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextTurnInfo, promotion_num_),
  };
  NextTurnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NextTurnInfo_descriptor_,
      NextTurnInfo::default_instance_,
      NextTurnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextTurnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextTurnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NextTurnInfo));
  AckRobotBc_descriptor_ = file->message_type(11);
  static const int AckRobotBc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRobotBc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRobotBc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRobotBc, robot_),
  };
  AckRobotBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRobotBc_descriptor_,
      AckRobotBc::default_instance_,
      AckRobotBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRobotBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRobotBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRobotBc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginproto_5fmatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLogoutBc_descriptor_, &AckLogoutBc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchPrizeAck_descriptor_, &MatchPrizeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRankReq_descriptor_, &MatchRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRankAck_descriptor_, &MatchRankAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRank_descriptor_, &UpdateRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailAck_descriptor_, &DetailAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailInfo_descriptor_, &DetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchTurnOver_descriptor_, &MatchTurnOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NextTurnInfo_descriptor_, &NextTurnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRobotBc_descriptor_, &AckRobotBc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginproto_5fmatch_2eproto() {
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete AckLogoutBc::default_instance_;
  delete AckLogoutBc_reflection_;
  delete MatchPrizeAck::default_instance_;
  delete MatchPrizeAck_reflection_;
  delete MatchRankReq::default_instance_;
  delete MatchRankReq_reflection_;
  delete MatchRankAck::default_instance_;
  delete MatchRankAck_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete UpdateRank::default_instance_;
  delete UpdateRank_reflection_;
  delete DetailAck::default_instance_;
  delete DetailAck_reflection_;
  delete DetailInfo::default_instance_;
  delete DetailInfo_reflection_;
  delete MatchTurnOver::default_instance_;
  delete MatchTurnOver_reflection_;
  delete NextTurnInfo::default_instance_;
  delete NextTurnInfo_reflection_;
  delete AckRobotBc::default_instance_;
  delete AckRobotBc_reflection_;
}

void protobuf_AddDesc_loginproto_5fmatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026loginproto_match.proto\022\nproto.game\"$\n\010"
    "ReqLogin\022\013\n\003uid\030\001 \002(\005\022\013\n\003mid\030\002 \001(\005\"8\n\013Ac"
    "kLogoutBc\022\016\n\006seatid\030\001 \002(\005\022\013\n\003uid\030\002 \001(\005\022\014"
    "\n\004type\030\003 \001(\005\"1\n\rMatchPrizeAck\022\017\n\007content"
    "\030\001 \001(\t\022\017\n\007isBreak\030\002 \001(\005\"\034\n\014MatchRankReq\022"
    "\014\n\004page\030\001 \001(\005\"D\n\014MatchRankAck\022\014\n\004page\030\001 "
    "\001(\005\022&\n\010ranklist\030\002 \003(\0132\024.proto.game.RankI"
    "nfo\"R\n\010RankInfo\022\014\n\004rank\030\001 \001(\005\022\014\n\004name\030\002 "
    "\001(\t\022\024\n\014totalMpScore\030\003 \001(\002\022\024\n\014totalUseTim"
    "e\030\004 \001(\002\"\032\n\nUpdateRank\022\014\n\004rank\030\001 \001(\005\"Y\n\tD"
    "etailAck\022(\n\010rankInfo\030\001 \003(\0132\026.proto.game."
    "DetailInfo\022\017\n\007curRank\030\002 \001(\005\022\021\n\ttotalRank"
    "\030\003 \001(\005\"\207\001\n\nDetailInfo\022\r\n\005round\030\001 \001(\005\022\r\n\005"
    "score\030\002 \001(\005\022\021\n\troundRank\030\003 \001(\005\022\021\n\ttotalR"
    "ank\030\004 \001(\005\022\020\n\010maxScore\030\005 \001(\005\022\020\n\010bestName\030"
    "\006 \001(\t\022\021\n\tbestScore\030\007 \001(\005\"\303\001\n\rMatchTurnOv"
    "er\022\022\n\nleft_table\030\001 \001(\005\022\020\n\010cur_rank\030\002 \001(\005"
    "\022*\n\010cur_turn\030\003 \001(\0132\030.proto.game.NextTurn"
    "Info\022+\n\tnext_turn\030\004 \001(\0132\030.proto.game.Nex"
    "tTurnInfo\022\021\n\tpromotion\030\005 \001(\005\022\021\n\tleft_tim"
    "e\030\006 \001(\005\022\r\n\005score\030\007 \001(\005\"G\n\014NextTurnInfo\022\016"
    "\n\006turnid\030\001 \001(\005\022\020\n\010join_num\030\002 \001(\005\022\025\n\rprom"
    "otion_num\030\003 \001(\005\"8\n\nAckRobotBc\022\013\n\003uid\030\001 \001"
    "(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005robot\030\003 \001(\005", 953);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginproto_match.proto", &protobuf_RegisterTypes);
  ReqLogin::default_instance_ = new ReqLogin();
  AckLogoutBc::default_instance_ = new AckLogoutBc();
  MatchPrizeAck::default_instance_ = new MatchPrizeAck();
  MatchRankReq::default_instance_ = new MatchRankReq();
  MatchRankAck::default_instance_ = new MatchRankAck();
  RankInfo::default_instance_ = new RankInfo();
  UpdateRank::default_instance_ = new UpdateRank();
  DetailAck::default_instance_ = new DetailAck();
  DetailInfo::default_instance_ = new DetailInfo();
  MatchTurnOver::default_instance_ = new MatchTurnOver();
  NextTurnInfo::default_instance_ = new NextTurnInfo();
  AckRobotBc::default_instance_ = new AckRobotBc();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  AckLogoutBc::default_instance_->InitAsDefaultInstance();
  MatchPrizeAck::default_instance_->InitAsDefaultInstance();
  MatchRankReq::default_instance_->InitAsDefaultInstance();
  MatchRankAck::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  UpdateRank::default_instance_->InitAsDefaultInstance();
  DetailAck::default_instance_->InitAsDefaultInstance();
  DetailInfo::default_instance_->InitAsDefaultInstance();
  MatchTurnOver::default_instance_->InitAsDefaultInstance();
  NextTurnInfo::default_instance_->InitAsDefaultInstance();
  AckRobotBc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginproto_5fmatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginproto_5fmatch_2eproto {
  StaticDescriptorInitializer_loginproto_5fmatch_2eproto() {
    protobuf_AddDesc_loginproto_5fmatch_2eproto();
  }
} static_descriptor_initializer_loginproto_5fmatch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kUidFieldNumber;
const int ReqLogin::kMidFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  mid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    mid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mid;
        break;
      }

      // optional int32 mid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLogoutBc::kSeatidFieldNumber;
const int AckLogoutBc::kUidFieldNumber;
const int AckLogoutBc::kTypeFieldNumber;
#endif  // !_MSC_VER

AckLogoutBc::AckLogoutBc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLogoutBc::InitAsDefaultInstance() {
}

AckLogoutBc::AckLogoutBc(const AckLogoutBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLogoutBc::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLogoutBc::~AckLogoutBc() {
  SharedDtor();
}

void AckLogoutBc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLogoutBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLogoutBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLogoutBc_descriptor_;
}

const AckLogoutBc& AckLogoutBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

AckLogoutBc* AckLogoutBc::default_instance_ = NULL;

AckLogoutBc* AckLogoutBc::New() const {
  return new AckLogoutBc;
}

void AckLogoutBc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    uid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLogoutBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLogoutBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLogoutBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLogoutBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLogoutBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLogoutBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLogoutBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLogoutBc::MergeFrom(const AckLogoutBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLogoutBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogoutBc::CopyFrom(const AckLogoutBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogoutBc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLogoutBc::Swap(AckLogoutBc* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLogoutBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLogoutBc_descriptor_;
  metadata.reflection = AckLogoutBc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchPrizeAck::kContentFieldNumber;
const int MatchPrizeAck::kIsBreakFieldNumber;
#endif  // !_MSC_VER

MatchPrizeAck::MatchPrizeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchPrizeAck::InitAsDefaultInstance() {
}

MatchPrizeAck::MatchPrizeAck(const MatchPrizeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchPrizeAck::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbreak_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchPrizeAck::~MatchPrizeAck() {
  SharedDtor();
}

void MatchPrizeAck::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MatchPrizeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPrizeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPrizeAck_descriptor_;
}

const MatchPrizeAck& MatchPrizeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

MatchPrizeAck* MatchPrizeAck::default_instance_ = NULL;

MatchPrizeAck* MatchPrizeAck::New() const {
  return new MatchPrizeAck;
}

void MatchPrizeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    isbreak_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchPrizeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isBreak;
        break;
      }

      // optional int32 isBreak = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbreak_)));
          set_has_isbreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchPrizeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // optional int32 isBreak = 2;
  if (has_isbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchPrizeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional int32 isBreak = 2;
  if (has_isbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchPrizeAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 isBreak = 2;
    if (has_isbreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbreak());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPrizeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchPrizeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchPrizeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchPrizeAck::MergeFrom(const MatchPrizeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_isbreak()) {
      set_isbreak(from.isbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchPrizeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPrizeAck::CopyFrom(const MatchPrizeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPrizeAck::IsInitialized() const {

  return true;
}

void MatchPrizeAck::Swap(MatchPrizeAck* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(isbreak_, other->isbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchPrizeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPrizeAck_descriptor_;
  metadata.reflection = MatchPrizeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRankReq::kPageFieldNumber;
#endif  // !_MSC_VER

MatchRankReq::MatchRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRankReq::InitAsDefaultInstance() {
}

MatchRankReq::MatchRankReq(const MatchRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRankReq::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRankReq::~MatchRankReq() {
  SharedDtor();
}

void MatchRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRankReq_descriptor_;
}

const MatchRankReq& MatchRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

MatchRankReq* MatchRankReq::default_instance_ = NULL;

MatchRankReq* MatchRankReq::New() const {
  return new MatchRankReq;
}

void MatchRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRankReq::MergeFrom(const MatchRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRankReq::CopyFrom(const MatchRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRankReq::IsInitialized() const {

  return true;
}

void MatchRankReq::Swap(MatchRankReq* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRankReq_descriptor_;
  metadata.reflection = MatchRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRankAck::kPageFieldNumber;
const int MatchRankAck::kRanklistFieldNumber;
#endif  // !_MSC_VER

MatchRankAck::MatchRankAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRankAck::InitAsDefaultInstance() {
}

MatchRankAck::MatchRankAck(const MatchRankAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRankAck::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRankAck::~MatchRankAck() {
  SharedDtor();
}

void MatchRankAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRankAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRankAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRankAck_descriptor_;
}

const MatchRankAck& MatchRankAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

MatchRankAck* MatchRankAck::default_instance_ = NULL;

MatchRankAck* MatchRankAck::New() const {
  return new MatchRankAck;
}

void MatchRankAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRankAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranklist;
        break;
      }

      // repeated .proto.game.RankInfo ranklist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRankAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  // repeated .proto.game.RankInfo ranklist = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRankAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  // repeated .proto.game.RankInfo ranklist = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRankAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  // repeated .proto.game.RankInfo ranklist = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRankAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRankAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRankAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRankAck::MergeFrom(const MatchRankAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRankAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRankAck::CopyFrom(const MatchRankAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRankAck::IsInitialized() const {

  return true;
}

void MatchRankAck::Swap(MatchRankAck* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRankAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRankAck_descriptor_;
  metadata.reflection = MatchRankAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kRankFieldNumber;
const int RankInfo::kNameFieldNumber;
const int RankInfo::kTotalMpScoreFieldNumber;
const int RankInfo::kTotalUseTimeFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalmpscore_ = 0;
  totalusetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    totalmpscore_ = 0;
    totalusetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_totalMpScore;
        break;
      }

      // optional float totalMpScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalMpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalmpscore_)));
          set_has_totalmpscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_totalUseTime;
        break;
      }

      // optional float totalUseTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalUseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalusetime_)));
          set_has_totalusetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional float totalMpScore = 3;
  if (has_totalmpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->totalmpscore(), output);
  }

  // optional float totalUseTime = 4;
  if (has_totalusetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->totalusetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float totalMpScore = 3;
  if (has_totalmpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->totalmpscore(), target);
  }

  // optional float totalUseTime = 4;
  if (has_totalusetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->totalusetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float totalMpScore = 3;
    if (has_totalmpscore()) {
      total_size += 1 + 4;
    }

    // optional float totalUseTime = 4;
    if (has_totalusetime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_totalmpscore()) {
      set_totalmpscore(from.totalmpscore());
    }
    if (from.has_totalusetime()) {
      set_totalusetime(from.totalusetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(totalmpscore_, other->totalmpscore_);
    std::swap(totalusetime_, other->totalusetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRank::kRankFieldNumber;
#endif  // !_MSC_VER

UpdateRank::UpdateRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateRank::InitAsDefaultInstance() {
}

UpdateRank::UpdateRank(const UpdateRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRank::~UpdateRank() {
  SharedDtor();
}

void UpdateRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRank_descriptor_;
}

const UpdateRank& UpdateRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

UpdateRank* UpdateRank::default_instance_ = NULL;

UpdateRank* UpdateRank::New() const {
  return new UpdateRank;
}

void UpdateRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRank::MergeFrom(const UpdateRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRank::CopyFrom(const UpdateRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRank::IsInitialized() const {

  return true;
}

void UpdateRank::Swap(UpdateRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRank_descriptor_;
  metadata.reflection = UpdateRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailAck::kRankInfoFieldNumber;
const int DetailAck::kCurRankFieldNumber;
const int DetailAck::kTotalRankFieldNumber;
#endif  // !_MSC_VER

DetailAck::DetailAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailAck::InitAsDefaultInstance() {
}

DetailAck::DetailAck(const DetailAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailAck::SharedCtor() {
  _cached_size_ = 0;
  currank_ = 0;
  totalrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailAck::~DetailAck() {
  SharedDtor();
}

void DetailAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetailAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailAck_descriptor_;
}

const DetailAck& DetailAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

DetailAck* DetailAck::default_instance_ = NULL;

DetailAck* DetailAck::New() const {
  return new DetailAck;
}

void DetailAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    currank_ = 0;
    totalrank_ = 0;
  }
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.DetailInfo rankInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankInfo;
        if (input->ExpectTag(16)) goto parse_curRank;
        break;
      }

      // optional int32 curRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currank_)));
          set_has_currank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalRank;
        break;
      }

      // optional int32 totalRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrank_)));
          set_has_totalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.DetailInfo rankInfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(i), output);
  }

  // optional int32 curRank = 2;
  if (has_currank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currank(), output);
  }

  // optional int32 totalRank = 3;
  if (has_totalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.DetailInfo rankInfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(i), target);
  }

  // optional int32 curRank = 2;
  if (has_currank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currank(), target);
  }

  // optional int32 totalRank = 3;
  if (has_totalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 curRank = 2;
    if (has_currank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currank());
    }

    // optional int32 totalRank = 3;
    if (has_totalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrank());
    }

  }
  // repeated .proto.game.DetailInfo rankInfo = 1;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailAck::MergeFrom(const DetailAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_currank()) {
      set_currank(from.currank());
    }
    if (from.has_totalrank()) {
      set_totalrank(from.totalrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailAck::CopyFrom(const DetailAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailAck::IsInitialized() const {

  return true;
}

void DetailAck::Swap(DetailAck* other) {
  if (other != this) {
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(currank_, other->currank_);
    std::swap(totalrank_, other->totalrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailAck_descriptor_;
  metadata.reflection = DetailAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailInfo::kRoundFieldNumber;
const int DetailInfo::kScoreFieldNumber;
const int DetailInfo::kRoundRankFieldNumber;
const int DetailInfo::kTotalRankFieldNumber;
const int DetailInfo::kMaxScoreFieldNumber;
const int DetailInfo::kBestNameFieldNumber;
const int DetailInfo::kBestScoreFieldNumber;
#endif  // !_MSC_VER

DetailInfo::DetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailInfo::InitAsDefaultInstance() {
}

DetailInfo::DetailInfo(const DetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailInfo::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  score_ = 0;
  roundrank_ = 0;
  totalrank_ = 0;
  maxscore_ = 0;
  bestname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bestscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailInfo::~DetailInfo() {
  SharedDtor();
}

void DetailInfo::SharedDtor() {
  if (bestname_ != &::google::protobuf::internal::kEmptyString) {
    delete bestname_;
  }
  if (this != default_instance_) {
  }
}

void DetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailInfo_descriptor_;
}

const DetailInfo& DetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

DetailInfo* DetailInfo::default_instance_ = NULL;

DetailInfo* DetailInfo::New() const {
  return new DetailInfo;
}

void DetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0;
    score_ = 0;
    roundrank_ = 0;
    totalrank_ = 0;
    maxscore_ = 0;
    if (has_bestname()) {
      if (bestname_ != &::google::protobuf::internal::kEmptyString) {
        bestname_->clear();
      }
    }
    bestscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roundRank;
        break;
      }

      // optional int32 roundRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundrank_)));
          set_has_roundrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalRank;
        break;
      }

      // optional int32 totalRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrank_)));
          set_has_totalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxScore;
        break;
      }

      // optional int32 maxScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bestName;
        break;
      }

      // optional string bestName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bestname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bestname().data(), this->bestname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bestScore;
        break;
      }

      // optional int32 bestScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bestScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestscore_)));
          set_has_bestscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 roundRank = 3;
  if (has_roundrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roundrank(), output);
  }

  // optional int32 totalRank = 4;
  if (has_totalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalrank(), output);
  }

  // optional int32 maxScore = 5;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxscore(), output);
  }

  // optional string bestName = 6;
  if (has_bestname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestname().data(), this->bestname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bestname(), output);
  }

  // optional int32 bestScore = 7;
  if (has_bestscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bestscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 roundRank = 3;
  if (has_roundrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roundrank(), target);
  }

  // optional int32 totalRank = 4;
  if (has_totalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalrank(), target);
  }

  // optional int32 maxScore = 5;
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxscore(), target);
  }

  // optional string bestName = 6;
  if (has_bestname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bestname().data(), this->bestname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bestname(), target);
  }

  // optional int32 bestScore = 7;
  if (has_bestscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bestscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 roundRank = 3;
    if (has_roundrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundrank());
    }

    // optional int32 totalRank = 4;
    if (has_totalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrank());
    }

    // optional int32 maxScore = 5;
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxscore());
    }

    // optional string bestName = 6;
    if (has_bestname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bestname());
    }

    // optional int32 bestScore = 7;
    if (has_bestscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailInfo::MergeFrom(const DetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_roundrank()) {
      set_roundrank(from.roundrank());
    }
    if (from.has_totalrank()) {
      set_totalrank(from.totalrank());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
    if (from.has_bestname()) {
      set_bestname(from.bestname());
    }
    if (from.has_bestscore()) {
      set_bestscore(from.bestscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailInfo::CopyFrom(const DetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailInfo::IsInitialized() const {

  return true;
}

void DetailInfo::Swap(DetailInfo* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(score_, other->score_);
    std::swap(roundrank_, other->roundrank_);
    std::swap(totalrank_, other->totalrank_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(bestname_, other->bestname_);
    std::swap(bestscore_, other->bestscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailInfo_descriptor_;
  metadata.reflection = DetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchTurnOver::kLeftTableFieldNumber;
const int MatchTurnOver::kCurRankFieldNumber;
const int MatchTurnOver::kCurTurnFieldNumber;
const int MatchTurnOver::kNextTurnFieldNumber;
const int MatchTurnOver::kPromotionFieldNumber;
const int MatchTurnOver::kLeftTimeFieldNumber;
const int MatchTurnOver::kScoreFieldNumber;
#endif  // !_MSC_VER

MatchTurnOver::MatchTurnOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchTurnOver::InitAsDefaultInstance() {
  cur_turn_ = const_cast< ::proto::game::NextTurnInfo*>(&::proto::game::NextTurnInfo::default_instance());
  next_turn_ = const_cast< ::proto::game::NextTurnInfo*>(&::proto::game::NextTurnInfo::default_instance());
}

MatchTurnOver::MatchTurnOver(const MatchTurnOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchTurnOver::SharedCtor() {
  _cached_size_ = 0;
  left_table_ = 0;
  cur_rank_ = 0;
  cur_turn_ = NULL;
  next_turn_ = NULL;
  promotion_ = 0;
  left_time_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchTurnOver::~MatchTurnOver() {
  SharedDtor();
}

void MatchTurnOver::SharedDtor() {
  if (this != default_instance_) {
    delete cur_turn_;
    delete next_turn_;
  }
}

void MatchTurnOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchTurnOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTurnOver_descriptor_;
}

const MatchTurnOver& MatchTurnOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

MatchTurnOver* MatchTurnOver::default_instance_ = NULL;

MatchTurnOver* MatchTurnOver::New() const {
  return new MatchTurnOver;
}

void MatchTurnOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_table_ = 0;
    cur_rank_ = 0;
    if (has_cur_turn()) {
      if (cur_turn_ != NULL) cur_turn_->::proto::game::NextTurnInfo::Clear();
    }
    if (has_next_turn()) {
      if (next_turn_ != NULL) next_turn_->::proto::game::NextTurnInfo::Clear();
    }
    promotion_ = 0;
    left_time_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchTurnOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_table_)));
          set_has_left_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_rank;
        break;
      }

      // optional int32 cur_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cur_turn;
        break;
      }

      // optional .proto.game.NextTurnInfo cur_turn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_turn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_next_turn;
        break;
      }

      // optional .proto.game.NextTurnInfo next_turn = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_turn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_promotion;
        break;
      }

      // optional int32 promotion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_promotion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promotion_)));
          set_has_promotion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int32 score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchTurnOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 left_table = 1;
  if (has_left_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_table(), output);
  }

  // optional int32 cur_rank = 2;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_rank(), output);
  }

  // optional .proto.game.NextTurnInfo cur_turn = 3;
  if (has_cur_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cur_turn(), output);
  }

  // optional .proto.game.NextTurnInfo next_turn = 4;
  if (has_next_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->next_turn(), output);
  }

  // optional int32 promotion = 5;
  if (has_promotion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->promotion(), output);
  }

  // optional int32 left_time = 6;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_time(), output);
  }

  // optional int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchTurnOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 left_table = 1;
  if (has_left_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left_table(), target);
  }

  // optional int32 cur_rank = 2;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_rank(), target);
  }

  // optional .proto.game.NextTurnInfo cur_turn = 3;
  if (has_cur_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cur_turn(), target);
  }

  // optional .proto.game.NextTurnInfo next_turn = 4;
  if (has_next_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->next_turn(), target);
  }

  // optional int32 promotion = 5;
  if (has_promotion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->promotion(), target);
  }

  // optional int32 left_time = 6;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_time(), target);
  }

  // optional int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchTurnOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left_table = 1;
    if (has_left_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_table());
    }

    // optional int32 cur_rank = 2;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rank());
    }

    // optional .proto.game.NextTurnInfo cur_turn = 3;
    if (has_cur_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_turn());
    }

    // optional .proto.game.NextTurnInfo next_turn = 4;
    if (has_next_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_turn());
    }

    // optional int32 promotion = 5;
    if (has_promotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promotion());
    }

    // optional int32 left_time = 6;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

    // optional int32 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchTurnOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchTurnOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchTurnOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchTurnOver::MergeFrom(const MatchTurnOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_table()) {
      set_left_table(from.left_table());
    }
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_cur_turn()) {
      mutable_cur_turn()->::proto::game::NextTurnInfo::MergeFrom(from.cur_turn());
    }
    if (from.has_next_turn()) {
      mutable_next_turn()->::proto::game::NextTurnInfo::MergeFrom(from.next_turn());
    }
    if (from.has_promotion()) {
      set_promotion(from.promotion());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchTurnOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchTurnOver::CopyFrom(const MatchTurnOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTurnOver::IsInitialized() const {

  return true;
}

void MatchTurnOver::Swap(MatchTurnOver* other) {
  if (other != this) {
    std::swap(left_table_, other->left_table_);
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(cur_turn_, other->cur_turn_);
    std::swap(next_turn_, other->next_turn_);
    std::swap(promotion_, other->promotion_);
    std::swap(left_time_, other->left_time_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchTurnOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchTurnOver_descriptor_;
  metadata.reflection = MatchTurnOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NextTurnInfo::kTurnidFieldNumber;
const int NextTurnInfo::kJoinNumFieldNumber;
const int NextTurnInfo::kPromotionNumFieldNumber;
#endif  // !_MSC_VER

NextTurnInfo::NextTurnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NextTurnInfo::InitAsDefaultInstance() {
}

NextTurnInfo::NextTurnInfo(const NextTurnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NextTurnInfo::SharedCtor() {
  _cached_size_ = 0;
  turnid_ = 0;
  join_num_ = 0;
  promotion_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextTurnInfo::~NextTurnInfo() {
  SharedDtor();
}

void NextTurnInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NextTurnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NextTurnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NextTurnInfo_descriptor_;
}

const NextTurnInfo& NextTurnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

NextTurnInfo* NextTurnInfo::default_instance_ = NULL;

NextTurnInfo* NextTurnInfo::New() const {
  return new NextTurnInfo;
}

void NextTurnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turnid_ = 0;
    join_num_ = 0;
    promotion_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NextTurnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 turnid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnid_)));
          set_has_turnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_join_num;
        break;
      }

      // optional int32 join_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_num_)));
          set_has_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_promotion_num;
        break;
      }

      // optional int32 promotion_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_promotion_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promotion_num_)));
          set_has_promotion_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextTurnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 turnid = 1;
  if (has_turnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turnid(), output);
  }

  // optional int32 join_num = 2;
  if (has_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->join_num(), output);
  }

  // optional int32 promotion_num = 3;
  if (has_promotion_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->promotion_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NextTurnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 turnid = 1;
  if (has_turnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turnid(), target);
  }

  // optional int32 join_num = 2;
  if (has_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->join_num(), target);
  }

  // optional int32 promotion_num = 3;
  if (has_promotion_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->promotion_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NextTurnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 turnid = 1;
    if (has_turnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnid());
    }

    // optional int32 join_num = 2;
    if (has_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_num());
    }

    // optional int32 promotion_num = 3;
    if (has_promotion_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promotion_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextTurnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NextTurnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NextTurnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NextTurnInfo::MergeFrom(const NextTurnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turnid()) {
      set_turnid(from.turnid());
    }
    if (from.has_join_num()) {
      set_join_num(from.join_num());
    }
    if (from.has_promotion_num()) {
      set_promotion_num(from.promotion_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NextTurnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextTurnInfo::CopyFrom(const NextTurnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextTurnInfo::IsInitialized() const {

  return true;
}

void NextTurnInfo::Swap(NextTurnInfo* other) {
  if (other != this) {
    std::swap(turnid_, other->turnid_);
    std::swap(join_num_, other->join_num_);
    std::swap(promotion_num_, other->promotion_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NextTurnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NextTurnInfo_descriptor_;
  metadata.reflection = NextTurnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRobotBc::kUidFieldNumber;
const int AckRobotBc::kSeatidFieldNumber;
const int AckRobotBc::kRobotFieldNumber;
#endif  // !_MSC_VER

AckRobotBc::AckRobotBc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRobotBc::InitAsDefaultInstance() {
}

AckRobotBc::AckRobotBc(const AckRobotBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRobotBc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  robot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRobotBc::~AckRobotBc() {
  SharedDtor();
}

void AckRobotBc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRobotBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRobotBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRobotBc_descriptor_;
}

const AckRobotBc& AckRobotBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_5fmatch_2eproto();
  return *default_instance_;
}

AckRobotBc* AckRobotBc::default_instance_ = NULL;

AckRobotBc* AckRobotBc::New() const {
  return new AckRobotBc;
}

void AckRobotBc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    robot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRobotBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robot;
        break;
      }

      // optional int32 robot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRobotBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 robot = 3;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRobotBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 robot = 3;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRobotBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 robot = 3;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRobotBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRobotBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRobotBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRobotBc::MergeFrom(const AckRobotBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRobotBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRobotBc::CopyFrom(const AckRobotBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRobotBc::IsInitialized() const {

  return true;
}

void AckRobotBc::Swap(AckRobotBc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(robot_, other->robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRobotBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRobotBc_descriptor_;
  metadata.reflection = AckRobotBc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
