// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hubeigameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hubeigameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace hubeimj {

namespace {

const ::google::protobuf::Descriptor* tagSceneGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagSceneGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* hubeiGameScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hubeiGameScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLaiziCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLaiziCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserDianShuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserDianShuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHufanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHufanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagLaizigangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagLaizigangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckhubeiGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckhubeiGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadcastLaizipi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadcastLaizipi_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckZimoHu_Huanghuang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckZimoHu_Huanghuang_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLaiziDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLaiziDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagTypeDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagTypeDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagFourCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagFourCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLastFourCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLastFourCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GAME_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* END_INFO_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HUFAN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GAMEEND_HUTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hubeigameproto_2eproto() {
  protobuf_AddDesc_hubeigameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hubeigameproto.proto");
  GOOGLE_CHECK(file != NULL);
  tagSceneGangInfo_descriptor_ = file->message_type(0);
  static const int tagSceneGangInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSceneGangInfo, card_),
  };
  tagSceneGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagSceneGangInfo_descriptor_,
      tagSceneGangInfo::default_instance_,
      tagSceneGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSceneGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSceneGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagSceneGangInfo));
  hubeiGameScene_descriptor_ = file->message_type(1);
  static const int hubeiGameScene_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, stlaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, minhucount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, totaldianshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, stgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, playtype_huanghuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, scoretype_huanghuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, stlaizidouble_),
  };
  hubeiGameScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hubeiGameScene_descriptor_,
      hubeiGameScene::default_instance_,
      hubeiGameScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hubeiGameScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hubeiGameScene));
  AckLaiziCard_descriptor_ = file->message_type(2);
  static const int AckLaiziCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, laizicard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, laizipicard_),
  };
  AckLaiziCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLaiziCard_descriptor_,
      AckLaiziCard::default_instance_,
      AckLaiziCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLaiziCard));
  tagUserDianShuInfo_descriptor_ = file->message_type(3);
  static const int tagUserDianShuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserDianShuInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserDianShuInfo, doublenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserDianShuInfo, count_),
  };
  tagUserDianShuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserDianShuInfo_descriptor_,
      tagUserDianShuInfo::default_instance_,
      tagUserDianShuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserDianShuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserDianShuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserDianShuInfo));
  tagEndInfo_descriptor_ = file->message_type(4);
  static const int tagEndInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, stdianshuinfo_),
  };
  tagEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndInfo_descriptor_,
      tagEndInfo::default_instance_,
      tagEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndInfo));
  tagHufanInfo_descriptor_ = file->message_type(5);
  static const int tagHufanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHufanInfo, isdahu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHufanInfo, basecore_),
  };
  tagHufanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHufanInfo_descriptor_,
      tagHufanInfo::default_instance_,
      tagHufanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHufanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHufanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHufanInfo));
  tagLaizigangInfo_descriptor_ = file->message_type(6);
  static const int tagLaizigangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaizigangInfo, laizigangcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaizigangInfo, laizigangindex_),
  };
  tagLaizigangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagLaizigangInfo_descriptor_,
      tagLaizigangInfo::default_instance_,
      tagLaizigangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaizigangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagLaizigangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagLaizigangInfo));
  AckhubeiGameEnd_descriptor_ = file->message_type(7);
  static const int AckhubeiGameEnd_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, stendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, isfengding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, hutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, sthufan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, bhucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, hufantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, ischengbao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, huscore_huanghuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, gangscore_huanghuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, piaolaiziscore_huanghuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, stlaizigang_),
  };
  AckhubeiGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckhubeiGameEnd_descriptor_,
      AckhubeiGameEnd::default_instance_,
      AckhubeiGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckhubeiGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckhubeiGameEnd));
  AckBroadcastLaizipi_descriptor_ = file->message_type(8);
  static const int AckBroadcastLaizipi_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadcastLaizipi, laizipicard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadcastLaizipi, leftcardnum_),
  };
  AckBroadcastLaizipi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadcastLaizipi_descriptor_,
      AckBroadcastLaizipi::default_instance_,
      AckBroadcastLaizipi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadcastLaizipi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadcastLaizipi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadcastLaizipi));
  ReordInfo_descriptor_ = file->message_type(9);
  static const int ReordInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, banker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, piaolaizi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, outtime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(10);
  static const int GameEndRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
  AckZimoHu_Huanghuang_descriptor_ = file->message_type(11);
  static const int AckZimoHu_Huanghuang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckZimoHu_Huanghuang, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckZimoHu_Huanghuang, optype_),
  };
  AckZimoHu_Huanghuang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckZimoHu_Huanghuang_descriptor_,
      AckZimoHu_Huanghuang::default_instance_,
      AckZimoHu_Huanghuang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckZimoHu_Huanghuang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckZimoHu_Huanghuang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckZimoHu_Huanghuang));
  AckLaiziDouble_descriptor_ = file->message_type(12);
  static const int AckLaiziDouble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziDouble, stlaizigang_),
  };
  AckLaiziDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLaiziDouble_descriptor_,
      AckLaiziDouble::default_instance_,
      AckLaiziDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLaiziDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLaiziDouble));
  tagTypeDouble_descriptor_ = file->message_type(13);
  static const int tagTypeDouble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTypeDouble, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTypeDouble, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTypeDouble, doublenum_),
  };
  tagTypeDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagTypeDouble_descriptor_,
      tagTypeDouble::default_instance_,
      tagTypeDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTypeDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTypeDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagTypeDouble));
  tagFourCardInfo_descriptor_ = file->message_type(14);
  static const int tagFourCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFourCardInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFourCardInfo, card_),
  };
  tagFourCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagFourCardInfo_descriptor_,
      tagFourCardInfo::default_instance_,
      tagFourCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFourCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFourCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagFourCardInfo));
  AckLastFourCard_descriptor_ = file->message_type(15);
  static const int AckLastFourCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastFourCard, stlastfourcard_),
  };
  AckLastFourCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLastFourCard_descriptor_,
      AckLastFourCard::default_instance_,
      AckLastFourCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastFourCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastFourCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLastFourCard));
  GAME_TYPE_descriptor_ = file->enum_type(0);
  END_INFO_descriptor_ = file->enum_type(1);
  HUFAN_TYPE_descriptor_ = file->enum_type(2);
  GAMEEND_HUTYPE_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hubeigameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagSceneGangInfo_descriptor_, &tagSceneGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hubeiGameScene_descriptor_, &hubeiGameScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLaiziCard_descriptor_, &AckLaiziCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserDianShuInfo_descriptor_, &tagUserDianShuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndInfo_descriptor_, &tagEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHufanInfo_descriptor_, &tagHufanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagLaizigangInfo_descriptor_, &tagLaizigangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckhubeiGameEnd_descriptor_, &AckhubeiGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadcastLaizipi_descriptor_, &AckBroadcastLaizipi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckZimoHu_Huanghuang_descriptor_, &AckZimoHu_Huanghuang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLaiziDouble_descriptor_, &AckLaiziDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagTypeDouble_descriptor_, &tagTypeDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagFourCardInfo_descriptor_, &tagFourCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLastFourCard_descriptor_, &AckLastFourCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hubeigameproto_2eproto() {
  delete tagSceneGangInfo::default_instance_;
  delete tagSceneGangInfo_reflection_;
  delete hubeiGameScene::default_instance_;
  delete hubeiGameScene_reflection_;
  delete AckLaiziCard::default_instance_;
  delete AckLaiziCard_reflection_;
  delete tagUserDianShuInfo::default_instance_;
  delete tagUserDianShuInfo_reflection_;
  delete tagEndInfo::default_instance_;
  delete tagEndInfo_reflection_;
  delete tagHufanInfo::default_instance_;
  delete tagHufanInfo_reflection_;
  delete tagLaizigangInfo::default_instance_;
  delete tagLaizigangInfo_reflection_;
  delete AckhubeiGameEnd::default_instance_;
  delete AckhubeiGameEnd_reflection_;
  delete AckBroadcastLaizipi::default_instance_;
  delete AckBroadcastLaizipi_reflection_;
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
  delete AckZimoHu_Huanghuang::default_instance_;
  delete AckZimoHu_Huanghuang_reflection_;
  delete AckLaiziDouble::default_instance_;
  delete AckLaiziDouble_reflection_;
  delete tagTypeDouble::default_instance_;
  delete tagTypeDouble_reflection_;
  delete tagFourCardInfo::default_instance_;
  delete tagFourCardInfo_reflection_;
  delete AckLastFourCard::default_instance_;
  delete AckLastFourCard_reflection_;
}

void protobuf_AddDesc_hubeigameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024hubeigameproto.proto\022\022proto.game.hubei"
    "mj\" \n\020tagSceneGangInfo\022\014\n\004card\030\001 \003(\005\"\253\002\n"
    "\016hubeiGameScene\022\020\n\010gametype\030\001 \001(\005\0221\n\007stL"
    "aizi\030\002 \001(\0132 .proto.game.hubeimj.AckLaizi"
    "Card\022\022\n\nminHuCount\030\003 \001(\005\022\024\n\014TotalDianshu"
    "\030\004 \003(\005\0224\n\006stGang\030\005 \003(\0132$.proto.game.hube"
    "imj.tagSceneGangInfo\022\033\n\023PlayType_huanghu"
    "ang\030\006 \001(\005\022\034\n\024ScoreType_huanghuang\030\007 \001(\005\022"
    "9\n\rstLaiziDouble\030\010 \001(\0132\".proto.game.hube"
    "imj.AckLaiziDouble\"D\n\014AckLaiziCard\022\014\n\004ca"
    "rd\030\001 \001(\005\022\021\n\tlaizicard\030\002 \001(\005\022\023\n\013laizipica"
    "rd\030\003 \001(\005\"D\n\022tagUserDianShuInfo\022\014\n\004Type\030\001"
    " \001(\005\022\021\n\tDoublenum\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"K"
    "\n\ntagEndInfo\022=\n\rstDianshuInfo\030\001 \003(\0132&.pr"
    "oto.game.hubeimj.tagUserDianShuInfo\"0\n\014t"
    "agHufanInfo\022\016\n\006isDahu\030\001 \001(\005\022\020\n\010basecore\030"
    "\002 \001(\005\"B\n\020tagLaizigangInfo\022\026\n\016LaizigangCo"
    "unt\030\001 \001(\005\022\026\n\016LaizigangIndex\030\002 \003(\005\"\215\003\n\017Ac"
    "khubeiGameEnd\022\r\n\005score\030\001 \003(\005\0221\n\tstEndinf"
    "o\030\002 \003(\0132\036.proto.game.hubeimj.tagEndInfo\022"
    "\022\n\nisFengding\030\003 \003(\005\022\016\n\006HuType\030\004 \003(\005\0221\n\007s"
    "tHuFan\030\005 \003(\0132 .proto.game.hubeimj.tagHuf"
    "anInfo\022\017\n\007bHuCard\030\006 \001(\005\022\021\n\tHuFanType\030\007 \001"
    "(\005\022\022\n\nisChengbao\030\010 \003(\005\022\021\n\tBasescore\030\t \003("
    "\005\022\032\n\022Huscore_Huanghuang\030\n \003(\005\022\034\n\024Gangsco"
    "re_Huanghuang\030\013 \003(\005\022!\n\031PiaoLaiziScore_Hu"
    "anghuang\030\014 \003(\005\0229\n\013stLaizigang\030\r \003(\0132$.pr"
    "oto.game.hubeimj.tagLaizigangInfo\"\?\n\023Ack"
    "BroadcastLaizipi\022\023\n\013LaizipiCard\030\001 \001(\005\022\023\n"
    "\013LeftCardNum\030\002 \001(\005\"o\n\tReordInfo\022\022\n\nbanke"
    "r_num\030\001 \001(\005\022\016\n\006hu_num\030\002 \001(\005\022\025\n\rpiaolaizi"
    "_num\030\003 \001(\005\022\023\n\013outtime_num\030\004 \001(\005\022\022\n\ntotal"
    "score\030\005 \001(\005\"\213\001\n\rGameEndRecord\0225\n\016UserRec"
    "oreInfo\030\001 \003(\0132\035.proto.game.hubeimj.Reord"
    "Info\022\027\n\017MostDianPaoUser\030\002 \003(\005\022\030\n\020MostWin"
    "ScoreUser\030\003 \003(\005\022\020\n\010DataTime\030\004 \001(\005\"7\n\024Ack"
    "ZimoHu_Huanghuang\022\017\n\007ChairID\030\001 \001(\005\022\016\n\006Op"
    "Type\030\002 \001(\005\"H\n\016AckLaiziDouble\0226\n\013stLaizig"
    "ang\030\001 \003(\0132!.proto.game.hubeimj.tagTypeDo"
    "uble\"\?\n\rtagTypeDouble\022\014\n\004Type\030\001 \001(\005\022\r\n\005c"
    "ount\030\002 \001(\005\022\021\n\tDoublenum\030\003 \001(\005\"0\n\017tagFour"
    "CardInfo\022\017\n\007ChairID\030\001 \001(\005\022\014\n\004Card\030\002 \001(\005\""
    "N\n\017AckLastFourCard\022;\n\016stLastFourCard\030\001 \003"
    "(\0132#.proto.game.hubeimj.tagFourCardInfo*"
    "\335\001\n\tGAME_TYPE\022\030\n\024GAME_TYPE_YILAIDAODI\020\001\022"
    "\023\n\017GAME_TYPE_PILAI\020\002\022\031\n\025GAME_TYPE_LIANGM"
    "ENPAI\020\003\022\027\n\023GAME_TYPE_SANMENPAI\020\004\022\032\n\024GAME"
    "_TYPE_KAIKOU_FAN\020\231\251C\022\032\n\024GAME_TYPE_KOUKOU"
    "_FAN\020\232\251C\022\031\n\023GAME_TYPE_LAI_HUANG\020\341\216D\022\032\n\024G"
    "AME_TYPE_YING_HUANG\020\342\216D*\365\001\n\010END_INFO\022\013\n\007"
    "KAI_KOU\020\001\022\021\n\rHONGZHONGGANG\020\002\022\r\n\tFACAIGAN"
    "G\020\003\022\r\n\tLAIZIGANG\020\004\022\017\n\013LAIZIPIGANG\020\005\022\013\n\007Y"
    "ING_HU\020\006\022\010\n\004ZIMO\020\007\022\013\n\007FANGPAO\020\010\022\013\n\007XIANJ"
    "IA\020\t\022\r\n\tZHUANGJIA\020\n\022\n\n\006ANGANG\020\013\022\014\n\010MINGG"
    "ANG\020\014\022\021\n\rBEI_QIANGGANG\020\r\022\017\n\013YUANLAI_FAN\020"
    "\016\022\016\n\nWEI_KAIKOU\020\017\022\014\n\010MAX_TYPE\020\020*\354\001\n\nHUFA"
    "N_TYPE\022\031\n\025MJ_FAN_TYPE_JIANG_DUI\020\001\022\032\n\026MJ_"
    "FAN_TYPE_FENG_YI_SE\020\002\022\033\n\027MJ_FAN_TYPE_JIA"
    "NG_YI_SE\020\004\022\032\n\026MJ_FAN_TYPE_QING_YI_SE\020\010\022\030"
    "\n\024MJ_FAN_TYPE_DUIDUIHU\020\020\022\034\n\030MJ_FAN_TYPE_"
    "GANGSHANGHUA\020 \022\030\n\024MJ_FAN_TYPE_HAIDILAO\020@"
    "\022\034\n\027MJ_FAN_TYPE_QIANGGANGHU\020\200\001*\310\001\n\016GAMEE"
    "ND_HUTYPE\022\020\n\014HUTYPE_PAOHU\020\000\022\017\n\013HUTYPE_ZI"
    "MO\020\001\022\022\n\016HUTYPE_FANGPAO\020\002\022\017\n\013HUTYPE_NULL\020"
    "\003\022\026\n\022HUTYPE_QIANGGANGHU\020\004\022\027\n\023HUTYPE_BEIQ"
    "IANGGANG\020\005\022\021\n\rHUTYPE_YINGHU\020\006\022\021\n\rHUTYPE_"
    "RUANMO\020\007\022\027\n\023HUTYPE_GANGSHANGPAO\020\010", 2673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hubeigameproto.proto", &protobuf_RegisterTypes);
  tagSceneGangInfo::default_instance_ = new tagSceneGangInfo();
  hubeiGameScene::default_instance_ = new hubeiGameScene();
  AckLaiziCard::default_instance_ = new AckLaiziCard();
  tagUserDianShuInfo::default_instance_ = new tagUserDianShuInfo();
  tagEndInfo::default_instance_ = new tagEndInfo();
  tagHufanInfo::default_instance_ = new tagHufanInfo();
  tagLaizigangInfo::default_instance_ = new tagLaizigangInfo();
  AckhubeiGameEnd::default_instance_ = new AckhubeiGameEnd();
  AckBroadcastLaizipi::default_instance_ = new AckBroadcastLaizipi();
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  AckZimoHu_Huanghuang::default_instance_ = new AckZimoHu_Huanghuang();
  AckLaiziDouble::default_instance_ = new AckLaiziDouble();
  tagTypeDouble::default_instance_ = new tagTypeDouble();
  tagFourCardInfo::default_instance_ = new tagFourCardInfo();
  AckLastFourCard::default_instance_ = new AckLastFourCard();
  tagSceneGangInfo::default_instance_->InitAsDefaultInstance();
  hubeiGameScene::default_instance_->InitAsDefaultInstance();
  AckLaiziCard::default_instance_->InitAsDefaultInstance();
  tagUserDianShuInfo::default_instance_->InitAsDefaultInstance();
  tagEndInfo::default_instance_->InitAsDefaultInstance();
  tagHufanInfo::default_instance_->InitAsDefaultInstance();
  tagLaizigangInfo::default_instance_->InitAsDefaultInstance();
  AckhubeiGameEnd::default_instance_->InitAsDefaultInstance();
  AckBroadcastLaizipi::default_instance_->InitAsDefaultInstance();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  AckZimoHu_Huanghuang::default_instance_->InitAsDefaultInstance();
  AckLaiziDouble::default_instance_->InitAsDefaultInstance();
  tagTypeDouble::default_instance_->InitAsDefaultInstance();
  tagFourCardInfo::default_instance_->InitAsDefaultInstance();
  AckLastFourCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hubeigameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hubeigameproto_2eproto {
  StaticDescriptorInitializer_hubeigameproto_2eproto() {
    protobuf_AddDesc_hubeigameproto_2eproto();
  }
} static_descriptor_initializer_hubeigameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* GAME_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAME_TYPE_descriptor_;
}
bool GAME_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 1103001:
    case 1103002:
    case 1116001:
    case 1116002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* END_INFO_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return END_INFO_descriptor_;
}
bool END_INFO_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HUFAN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HUFAN_TYPE_descriptor_;
}
bool HUFAN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAMEEND_HUTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAMEEND_HUTYPE_descriptor_;
}
bool GAMEEND_HUTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int tagSceneGangInfo::kCardFieldNumber;
#endif  // !_MSC_VER

tagSceneGangInfo::tagSceneGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagSceneGangInfo::InitAsDefaultInstance() {
}

tagSceneGangInfo::tagSceneGangInfo(const tagSceneGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagSceneGangInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagSceneGangInfo::~tagSceneGangInfo() {
  SharedDtor();
}

void tagSceneGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagSceneGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagSceneGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagSceneGangInfo_descriptor_;
}

const tagSceneGangInfo& tagSceneGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagSceneGangInfo* tagSceneGangInfo::default_instance_ = NULL;

tagSceneGangInfo* tagSceneGangInfo::New() const {
  return new tagSceneGangInfo;
}

void tagSceneGangInfo::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagSceneGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagSceneGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagSceneGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagSceneGangInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSceneGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagSceneGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagSceneGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagSceneGangInfo::MergeFrom(const tagSceneGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagSceneGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagSceneGangInfo::CopyFrom(const tagSceneGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSceneGangInfo::IsInitialized() const {

  return true;
}

void tagSceneGangInfo::Swap(tagSceneGangInfo* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagSceneGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagSceneGangInfo_descriptor_;
  metadata.reflection = tagSceneGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hubeiGameScene::kGametypeFieldNumber;
const int hubeiGameScene::kStLaiziFieldNumber;
const int hubeiGameScene::kMinHuCountFieldNumber;
const int hubeiGameScene::kTotalDianshuFieldNumber;
const int hubeiGameScene::kStGangFieldNumber;
const int hubeiGameScene::kPlayTypeHuanghuangFieldNumber;
const int hubeiGameScene::kScoreTypeHuanghuangFieldNumber;
const int hubeiGameScene::kStLaiziDoubleFieldNumber;
#endif  // !_MSC_VER

hubeiGameScene::hubeiGameScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hubeiGameScene::InitAsDefaultInstance() {
  stlaizi_ = const_cast< ::proto::game::hubeimj::AckLaiziCard*>(&::proto::game::hubeimj::AckLaiziCard::default_instance());
  stlaizidouble_ = const_cast< ::proto::game::hubeimj::AckLaiziDouble*>(&::proto::game::hubeimj::AckLaiziDouble::default_instance());
}

hubeiGameScene::hubeiGameScene(const hubeiGameScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hubeiGameScene::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0;
  stlaizi_ = NULL;
  minhucount_ = 0;
  playtype_huanghuang_ = 0;
  scoretype_huanghuang_ = 0;
  stlaizidouble_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hubeiGameScene::~hubeiGameScene() {
  SharedDtor();
}

void hubeiGameScene::SharedDtor() {
  if (this != default_instance_) {
    delete stlaizi_;
    delete stlaizidouble_;
  }
}

void hubeiGameScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hubeiGameScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hubeiGameScene_descriptor_;
}

const hubeiGameScene& hubeiGameScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

hubeiGameScene* hubeiGameScene::default_instance_ = NULL;

hubeiGameScene* hubeiGameScene::New() const {
  return new hubeiGameScene;
}

void hubeiGameScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0;
    if (has_stlaizi()) {
      if (stlaizi_ != NULL) stlaizi_->::proto::game::hubeimj::AckLaiziCard::Clear();
    }
    minhucount_ = 0;
    playtype_huanghuang_ = 0;
    scoretype_huanghuang_ = 0;
    if (has_stlaizidouble()) {
      if (stlaizidouble_ != NULL) stlaizidouble_->::proto::game::hubeimj::AckLaiziDouble::Clear();
    }
  }
  totaldianshu_.Clear();
  stgang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hubeiGameScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stLaizi;
        break;
      }

      // optional .proto.game.hubeimj.AckLaiziCard stLaizi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLaizi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stlaizi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minHuCount;
        break;
      }

      // optional int32 minHuCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minHuCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minhucount_)));
          set_has_minhucount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalDianshu;
        break;
      }

      // repeated int32 TotalDianshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDianshu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_totaldianshu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totaldianshu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalDianshu;
        if (input->ExpectTag(42)) goto parse_stGang;
        break;
      }

      // repeated .proto.game.hubeimj.tagSceneGangInfo stGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stGang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stgang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stGang;
        if (input->ExpectTag(48)) goto parse_PlayType_huanghuang;
        break;
      }

      // optional int32 PlayType_huanghuang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayType_huanghuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_huanghuang_)));
          set_has_playtype_huanghuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ScoreType_huanghuang;
        break;
      }

      // optional int32 ScoreType_huanghuang = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScoreType_huanghuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretype_huanghuang_)));
          set_has_scoretype_huanghuang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stLaiziDouble;
        break;
      }

      // optional .proto.game.hubeimj.AckLaiziDouble stLaiziDouble = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLaiziDouble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stlaizidouble()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hubeiGameScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gametype(), output);
  }

  // optional .proto.game.hubeimj.AckLaiziCard stLaizi = 2;
  if (has_stlaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stlaizi(), output);
  }

  // optional int32 minHuCount = 3;
  if (has_minhucount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minhucount(), output);
  }

  // repeated int32 TotalDianshu = 4;
  for (int i = 0; i < this->totaldianshu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->totaldianshu(i), output);
  }

  // repeated .proto.game.hubeimj.tagSceneGangInfo stGang = 5;
  for (int i = 0; i < this->stgang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stgang(i), output);
  }

  // optional int32 PlayType_huanghuang = 6;
  if (has_playtype_huanghuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playtype_huanghuang(), output);
  }

  // optional int32 ScoreType_huanghuang = 7;
  if (has_scoretype_huanghuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scoretype_huanghuang(), output);
  }

  // optional .proto.game.hubeimj.AckLaiziDouble stLaiziDouble = 8;
  if (has_stlaizidouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stlaizidouble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hubeiGameScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gametype(), target);
  }

  // optional .proto.game.hubeimj.AckLaiziCard stLaizi = 2;
  if (has_stlaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stlaizi(), target);
  }

  // optional int32 minHuCount = 3;
  if (has_minhucount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minhucount(), target);
  }

  // repeated int32 TotalDianshu = 4;
  for (int i = 0; i < this->totaldianshu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->totaldianshu(i), target);
  }

  // repeated .proto.game.hubeimj.tagSceneGangInfo stGang = 5;
  for (int i = 0; i < this->stgang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stgang(i), target);
  }

  // optional int32 PlayType_huanghuang = 6;
  if (has_playtype_huanghuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playtype_huanghuang(), target);
  }

  // optional int32 ScoreType_huanghuang = 7;
  if (has_scoretype_huanghuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->scoretype_huanghuang(), target);
  }

  // optional .proto.game.hubeimj.AckLaiziDouble stLaiziDouble = 8;
  if (has_stlaizidouble()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stlaizidouble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hubeiGameScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional .proto.game.hubeimj.AckLaiziCard stLaizi = 2;
    if (has_stlaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stlaizi());
    }

    // optional int32 minHuCount = 3;
    if (has_minhucount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minhucount());
    }

    // optional int32 PlayType_huanghuang = 6;
    if (has_playtype_huanghuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype_huanghuang());
    }

    // optional int32 ScoreType_huanghuang = 7;
    if (has_scoretype_huanghuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretype_huanghuang());
    }

    // optional .proto.game.hubeimj.AckLaiziDouble stLaiziDouble = 8;
    if (has_stlaizidouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stlaizidouble());
    }

  }
  // repeated int32 TotalDianshu = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->totaldianshu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->totaldianshu(i));
    }
    total_size += 1 * this->totaldianshu_size() + data_size;
  }

  // repeated .proto.game.hubeimj.tagSceneGangInfo stGang = 5;
  total_size += 1 * this->stgang_size();
  for (int i = 0; i < this->stgang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stgang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hubeiGameScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hubeiGameScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hubeiGameScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hubeiGameScene::MergeFrom(const hubeiGameScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  totaldianshu_.MergeFrom(from.totaldianshu_);
  stgang_.MergeFrom(from.stgang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_stlaizi()) {
      mutable_stlaizi()->::proto::game::hubeimj::AckLaiziCard::MergeFrom(from.stlaizi());
    }
    if (from.has_minhucount()) {
      set_minhucount(from.minhucount());
    }
    if (from.has_playtype_huanghuang()) {
      set_playtype_huanghuang(from.playtype_huanghuang());
    }
    if (from.has_scoretype_huanghuang()) {
      set_scoretype_huanghuang(from.scoretype_huanghuang());
    }
    if (from.has_stlaizidouble()) {
      mutable_stlaizidouble()->::proto::game::hubeimj::AckLaiziDouble::MergeFrom(from.stlaizidouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hubeiGameScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hubeiGameScene::CopyFrom(const hubeiGameScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hubeiGameScene::IsInitialized() const {

  return true;
}

void hubeiGameScene::Swap(hubeiGameScene* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(stlaizi_, other->stlaizi_);
    std::swap(minhucount_, other->minhucount_);
    totaldianshu_.Swap(&other->totaldianshu_);
    stgang_.Swap(&other->stgang_);
    std::swap(playtype_huanghuang_, other->playtype_huanghuang_);
    std::swap(scoretype_huanghuang_, other->scoretype_huanghuang_);
    std::swap(stlaizidouble_, other->stlaizidouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hubeiGameScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hubeiGameScene_descriptor_;
  metadata.reflection = hubeiGameScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLaiziCard::kCardFieldNumber;
const int AckLaiziCard::kLaizicardFieldNumber;
const int AckLaiziCard::kLaizipicardFieldNumber;
#endif  // !_MSC_VER

AckLaiziCard::AckLaiziCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLaiziCard::InitAsDefaultInstance() {
}

AckLaiziCard::AckLaiziCard(const AckLaiziCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLaiziCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  laizicard_ = 0;
  laizipicard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLaiziCard::~AckLaiziCard() {
  SharedDtor();
}

void AckLaiziCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLaiziCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLaiziCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLaiziCard_descriptor_;
}

const AckLaiziCard& AckLaiziCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckLaiziCard* AckLaiziCard::default_instance_ = NULL;

AckLaiziCard* AckLaiziCard::New() const {
  return new AckLaiziCard;
}

void AckLaiziCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    laizicard_ = 0;
    laizipicard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLaiziCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laizicard;
        break;
      }

      // optional int32 laizicard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizicard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizicard_)));
          set_has_laizicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_laizipicard;
        break;
      }

      // optional int32 laizipicard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizipicard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizipicard_)));
          set_has_laizipicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLaiziCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 laizicard = 2;
  if (has_laizicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->laizicard(), output);
  }

  // optional int32 laizipicard = 3;
  if (has_laizipicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->laizipicard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLaiziCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 laizicard = 2;
  if (has_laizicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->laizicard(), target);
  }

  // optional int32 laizipicard = 3;
  if (has_laizipicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->laizipicard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLaiziCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 laizicard = 2;
    if (has_laizicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizicard());
    }

    // optional int32 laizipicard = 3;
    if (has_laizipicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizipicard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLaiziCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLaiziCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLaiziCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLaiziCard::MergeFrom(const AckLaiziCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_laizicard()) {
      set_laizicard(from.laizicard());
    }
    if (from.has_laizipicard()) {
      set_laizipicard(from.laizipicard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLaiziCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLaiziCard::CopyFrom(const AckLaiziCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLaiziCard::IsInitialized() const {

  return true;
}

void AckLaiziCard::Swap(AckLaiziCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(laizicard_, other->laizicard_);
    std::swap(laizipicard_, other->laizipicard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLaiziCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLaiziCard_descriptor_;
  metadata.reflection = AckLaiziCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserDianShuInfo::kTypeFieldNumber;
const int tagUserDianShuInfo::kDoublenumFieldNumber;
const int tagUserDianShuInfo::kCountFieldNumber;
#endif  // !_MSC_VER

tagUserDianShuInfo::tagUserDianShuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagUserDianShuInfo::InitAsDefaultInstance() {
}

tagUserDianShuInfo::tagUserDianShuInfo(const tagUserDianShuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagUserDianShuInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  doublenum_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserDianShuInfo::~tagUserDianShuInfo() {
  SharedDtor();
}

void tagUserDianShuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserDianShuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserDianShuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserDianShuInfo_descriptor_;
}

const tagUserDianShuInfo& tagUserDianShuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagUserDianShuInfo* tagUserDianShuInfo::default_instance_ = NULL;

tagUserDianShuInfo* tagUserDianShuInfo::New() const {
  return new tagUserDianShuInfo;
}

void tagUserDianShuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    doublenum_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserDianShuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Doublenum;
        break;
      }

      // optional int32 Doublenum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Doublenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublenum_)));
          set_has_doublenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagUserDianShuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Doublenum = 2;
  if (has_doublenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doublenum(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagUserDianShuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Doublenum = 2;
  if (has_doublenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doublenum(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagUserDianShuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Doublenum = 2;
    if (has_doublenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublenum());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserDianShuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserDianShuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserDianShuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserDianShuInfo::MergeFrom(const tagUserDianShuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_doublenum()) {
      set_doublenum(from.doublenum());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserDianShuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserDianShuInfo::CopyFrom(const tagUserDianShuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserDianShuInfo::IsInitialized() const {

  return true;
}

void tagUserDianShuInfo::Swap(tagUserDianShuInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(doublenum_, other->doublenum_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserDianShuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserDianShuInfo_descriptor_;
  metadata.reflection = tagUserDianShuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndInfo::kStDianshuInfoFieldNumber;
#endif  // !_MSC_VER

tagEndInfo::tagEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagEndInfo::InitAsDefaultInstance() {
}

tagEndInfo::tagEndInfo(const tagEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagEndInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndInfo::~tagEndInfo() {
  SharedDtor();
}

void tagEndInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndInfo_descriptor_;
}

const tagEndInfo& tagEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagEndInfo* tagEndInfo::default_instance_ = NULL;

tagEndInfo* tagEndInfo::New() const {
  return new tagEndInfo;
}

void tagEndInfo::Clear() {
  stdianshuinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hubeimj.tagUserDianShuInfo stDianshuInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stDianshuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stdianshuinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stDianshuInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hubeimj.tagUserDianShuInfo stDianshuInfo = 1;
  for (int i = 0; i < this->stdianshuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stdianshuinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hubeimj.tagUserDianShuInfo stDianshuInfo = 1;
  for (int i = 0; i < this->stdianshuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stdianshuinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagEndInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.hubeimj.tagUserDianShuInfo stDianshuInfo = 1;
  total_size += 1 * this->stdianshuinfo_size();
  for (int i = 0; i < this->stdianshuinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stdianshuinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndInfo::MergeFrom(const tagEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stdianshuinfo_.MergeFrom(from.stdianshuinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndInfo::CopyFrom(const tagEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndInfo::IsInitialized() const {

  return true;
}

void tagEndInfo::Swap(tagEndInfo* other) {
  if (other != this) {
    stdianshuinfo_.Swap(&other->stdianshuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndInfo_descriptor_;
  metadata.reflection = tagEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHufanInfo::kIsDahuFieldNumber;
const int tagHufanInfo::kBasecoreFieldNumber;
#endif  // !_MSC_VER

tagHufanInfo::tagHufanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHufanInfo::InitAsDefaultInstance() {
}

tagHufanInfo::tagHufanInfo(const tagHufanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHufanInfo::SharedCtor() {
  _cached_size_ = 0;
  isdahu_ = 0;
  basecore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHufanInfo::~tagHufanInfo() {
  SharedDtor();
}

void tagHufanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHufanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHufanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHufanInfo_descriptor_;
}

const tagHufanInfo& tagHufanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagHufanInfo* tagHufanInfo::default_instance_ = NULL;

tagHufanInfo* tagHufanInfo::New() const {
  return new tagHufanInfo;
}

void tagHufanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isdahu_ = 0;
    basecore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHufanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isDahu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdahu_)));
          set_has_isdahu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_basecore;
        break;
      }

      // optional int32 basecore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basecore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basecore_)));
          set_has_basecore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHufanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isDahu = 1;
  if (has_isdahu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isdahu(), output);
  }

  // optional int32 basecore = 2;
  if (has_basecore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->basecore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHufanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isDahu = 1;
  if (has_isdahu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isdahu(), target);
  }

  // optional int32 basecore = 2;
  if (has_basecore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->basecore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHufanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isDahu = 1;
    if (has_isdahu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdahu());
    }

    // optional int32 basecore = 2;
    if (has_basecore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basecore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHufanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHufanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHufanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHufanInfo::MergeFrom(const tagHufanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isdahu()) {
      set_isdahu(from.isdahu());
    }
    if (from.has_basecore()) {
      set_basecore(from.basecore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHufanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHufanInfo::CopyFrom(const tagHufanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHufanInfo::IsInitialized() const {

  return true;
}

void tagHufanInfo::Swap(tagHufanInfo* other) {
  if (other != this) {
    std::swap(isdahu_, other->isdahu_);
    std::swap(basecore_, other->basecore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHufanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHufanInfo_descriptor_;
  metadata.reflection = tagHufanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagLaizigangInfo::kLaizigangCountFieldNumber;
const int tagLaizigangInfo::kLaizigangIndexFieldNumber;
#endif  // !_MSC_VER

tagLaizigangInfo::tagLaizigangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagLaizigangInfo::InitAsDefaultInstance() {
}

tagLaizigangInfo::tagLaizigangInfo(const tagLaizigangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagLaizigangInfo::SharedCtor() {
  _cached_size_ = 0;
  laizigangcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagLaizigangInfo::~tagLaizigangInfo() {
  SharedDtor();
}

void tagLaizigangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagLaizigangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagLaizigangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagLaizigangInfo_descriptor_;
}

const tagLaizigangInfo& tagLaizigangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagLaizigangInfo* tagLaizigangInfo::default_instance_ = NULL;

tagLaizigangInfo* tagLaizigangInfo::New() const {
  return new tagLaizigangInfo;
}

void tagLaizigangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    laizigangcount_ = 0;
  }
  laizigangindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagLaizigangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LaizigangCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizigangcount_)));
          set_has_laizigangcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LaizigangIndex;
        break;
      }

      // repeated int32 LaizigangIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LaizigangIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_laizigangindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizigangindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LaizigangIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagLaizigangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LaizigangCount = 1;
  if (has_laizigangcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laizigangcount(), output);
  }

  // repeated int32 LaizigangIndex = 2;
  for (int i = 0; i < this->laizigangindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->laizigangindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagLaizigangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LaizigangCount = 1;
  if (has_laizigangcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laizigangcount(), target);
  }

  // repeated int32 LaizigangIndex = 2;
  for (int i = 0; i < this->laizigangindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->laizigangindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagLaizigangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LaizigangCount = 1;
    if (has_laizigangcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizigangcount());
    }

  }
  // repeated int32 LaizigangIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizigangindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizigangindex(i));
    }
    total_size += 1 * this->laizigangindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagLaizigangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagLaizigangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagLaizigangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagLaizigangInfo::MergeFrom(const tagLaizigangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  laizigangindex_.MergeFrom(from.laizigangindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laizigangcount()) {
      set_laizigangcount(from.laizigangcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagLaizigangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagLaizigangInfo::CopyFrom(const tagLaizigangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagLaizigangInfo::IsInitialized() const {

  return true;
}

void tagLaizigangInfo::Swap(tagLaizigangInfo* other) {
  if (other != this) {
    std::swap(laizigangcount_, other->laizigangcount_);
    laizigangindex_.Swap(&other->laizigangindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagLaizigangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagLaizigangInfo_descriptor_;
  metadata.reflection = tagLaizigangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckhubeiGameEnd::kScoreFieldNumber;
const int AckhubeiGameEnd::kStEndinfoFieldNumber;
const int AckhubeiGameEnd::kIsFengdingFieldNumber;
const int AckhubeiGameEnd::kHuTypeFieldNumber;
const int AckhubeiGameEnd::kStHuFanFieldNumber;
const int AckhubeiGameEnd::kBHuCardFieldNumber;
const int AckhubeiGameEnd::kHuFanTypeFieldNumber;
const int AckhubeiGameEnd::kIsChengbaoFieldNumber;
const int AckhubeiGameEnd::kBasescoreFieldNumber;
const int AckhubeiGameEnd::kHuscoreHuanghuangFieldNumber;
const int AckhubeiGameEnd::kGangscoreHuanghuangFieldNumber;
const int AckhubeiGameEnd::kPiaoLaiziScoreHuanghuangFieldNumber;
const int AckhubeiGameEnd::kStLaizigangFieldNumber;
#endif  // !_MSC_VER

AckhubeiGameEnd::AckhubeiGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckhubeiGameEnd::InitAsDefaultInstance() {
}

AckhubeiGameEnd::AckhubeiGameEnd(const AckhubeiGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckhubeiGameEnd::SharedCtor() {
  _cached_size_ = 0;
  bhucard_ = 0;
  hufantype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckhubeiGameEnd::~AckhubeiGameEnd() {
  SharedDtor();
}

void AckhubeiGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckhubeiGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckhubeiGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckhubeiGameEnd_descriptor_;
}

const AckhubeiGameEnd& AckhubeiGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckhubeiGameEnd* AckhubeiGameEnd::default_instance_ = NULL;

AckhubeiGameEnd* AckhubeiGameEnd::New() const {
  return new AckhubeiGameEnd;
}

void AckhubeiGameEnd::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    bhucard_ = 0;
    hufantype_ = 0;
  }
  score_.Clear();
  stendinfo_.Clear();
  isfengding_.Clear();
  hutype_.Clear();
  sthufan_.Clear();
  ischengbao_.Clear();
  basescore_.Clear();
  huscore_huanghuang_.Clear();
  gangscore_huanghuang_.Clear();
  piaolaiziscore_huanghuang_.Clear();
  stlaizigang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckhubeiGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_score;
        if (input->ExpectTag(18)) goto parse_stEndinfo;
        break;
      }

      // repeated .proto.game.hubeimj.tagEndInfo stEndinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stEndinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stEndinfo;
        if (input->ExpectTag(24)) goto parse_isFengding;
        break;
      }

      // repeated int32 isFengding = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFengding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_isfengding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isfengding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFengding;
        if (input->ExpectTag(32)) goto parse_HuType;
        break;
      }

      // repeated int32 HuType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_hutype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hutype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HuType;
        if (input->ExpectTag(42)) goto parse_stHuFan;
        break;
      }

      // repeated .proto.game.hubeimj.tagHufanInfo stHuFan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stHuFan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthufan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stHuFan;
        if (input->ExpectTag(48)) goto parse_bHuCard;
        break;
      }

      // optional int32 bHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhucard_)));
          set_has_bhucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HuFanType;
        break;
      }

      // optional int32 HuFanType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuFanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufantype_)));
          set_has_hufantype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isChengbao;
        break;
      }

      // repeated int32 isChengbao = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChengbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_ischengbao())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ischengbao())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isChengbao;
        if (input->ExpectTag(72)) goto parse_Basescore;
        break;
      }

      // repeated int32 Basescore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_basescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_basescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Basescore;
        if (input->ExpectTag(80)) goto parse_Huscore_Huanghuang;
        break;
      }

      // repeated int32 Huscore_Huanghuang = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Huscore_Huanghuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_huscore_huanghuang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_huscore_huanghuang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Huscore_Huanghuang;
        if (input->ExpectTag(88)) goto parse_Gangscore_Huanghuang;
        break;
      }

      // repeated int32 Gangscore_Huanghuang = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gangscore_Huanghuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_gangscore_huanghuang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gangscore_huanghuang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Gangscore_Huanghuang;
        if (input->ExpectTag(96)) goto parse_PiaoLaiziScore_Huanghuang;
        break;
      }

      // repeated int32 PiaoLaiziScore_Huanghuang = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PiaoLaiziScore_Huanghuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_piaolaiziscore_huanghuang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaolaiziscore_huanghuang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PiaoLaiziScore_Huanghuang;
        if (input->ExpectTag(106)) goto parse_stLaizigang;
        break;
      }

      // repeated .proto.game.hubeimj.tagLaizigangInfo stLaizigang = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLaizigang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stlaizigang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_stLaizigang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckhubeiGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  // repeated .proto.game.hubeimj.tagEndInfo stEndinfo = 2;
  for (int i = 0; i < this->stendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stendinfo(i), output);
  }

  // repeated int32 isFengding = 3;
  for (int i = 0; i < this->isfengding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->isfengding(i), output);
  }

  // repeated int32 HuType = 4;
  for (int i = 0; i < this->hutype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->hutype(i), output);
  }

  // repeated .proto.game.hubeimj.tagHufanInfo stHuFan = 5;
  for (int i = 0; i < this->sthufan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sthufan(i), output);
  }

  // optional int32 bHuCard = 6;
  if (has_bhucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bhucard(), output);
  }

  // optional int32 HuFanType = 7;
  if (has_hufantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hufantype(), output);
  }

  // repeated int32 isChengbao = 8;
  for (int i = 0; i < this->ischengbao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->ischengbao(i), output);
  }

  // repeated int32 Basescore = 9;
  for (int i = 0; i < this->basescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->basescore(i), output);
  }

  // repeated int32 Huscore_Huanghuang = 10;
  for (int i = 0; i < this->huscore_huanghuang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->huscore_huanghuang(i), output);
  }

  // repeated int32 Gangscore_Huanghuang = 11;
  for (int i = 0; i < this->gangscore_huanghuang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->gangscore_huanghuang(i), output);
  }

  // repeated int32 PiaoLaiziScore_Huanghuang = 12;
  for (int i = 0; i < this->piaolaiziscore_huanghuang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->piaolaiziscore_huanghuang(i), output);
  }

  // repeated .proto.game.hubeimj.tagLaizigangInfo stLaizigang = 13;
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stlaizigang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckhubeiGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  // repeated .proto.game.hubeimj.tagEndInfo stEndinfo = 2;
  for (int i = 0; i < this->stendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stendinfo(i), target);
  }

  // repeated int32 isFengding = 3;
  for (int i = 0; i < this->isfengding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->isfengding(i), target);
  }

  // repeated int32 HuType = 4;
  for (int i = 0; i < this->hutype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->hutype(i), target);
  }

  // repeated .proto.game.hubeimj.tagHufanInfo stHuFan = 5;
  for (int i = 0; i < this->sthufan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sthufan(i), target);
  }

  // optional int32 bHuCard = 6;
  if (has_bhucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bhucard(), target);
  }

  // optional int32 HuFanType = 7;
  if (has_hufantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hufantype(), target);
  }

  // repeated int32 isChengbao = 8;
  for (int i = 0; i < this->ischengbao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->ischengbao(i), target);
  }

  // repeated int32 Basescore = 9;
  for (int i = 0; i < this->basescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->basescore(i), target);
  }

  // repeated int32 Huscore_Huanghuang = 10;
  for (int i = 0; i < this->huscore_huanghuang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->huscore_huanghuang(i), target);
  }

  // repeated int32 Gangscore_Huanghuang = 11;
  for (int i = 0; i < this->gangscore_huanghuang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->gangscore_huanghuang(i), target);
  }

  // repeated int32 PiaoLaiziScore_Huanghuang = 12;
  for (int i = 0; i < this->piaolaiziscore_huanghuang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->piaolaiziscore_huanghuang(i), target);
  }

  // repeated .proto.game.hubeimj.tagLaizigangInfo stLaizigang = 13;
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stlaizigang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckhubeiGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 bHuCard = 6;
    if (has_bhucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhucard());
    }

    // optional int32 HuFanType = 7;
    if (has_hufantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufantype());
    }

  }
  // repeated int32 score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated .proto.game.hubeimj.tagEndInfo stEndinfo = 2;
  total_size += 1 * this->stendinfo_size();
  for (int i = 0; i < this->stendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stendinfo(i));
  }

  // repeated int32 isFengding = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->isfengding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isfengding(i));
    }
    total_size += 1 * this->isfengding_size() + data_size;
  }

  // repeated int32 HuType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hutype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hutype(i));
    }
    total_size += 1 * this->hutype_size() + data_size;
  }

  // repeated .proto.game.hubeimj.tagHufanInfo stHuFan = 5;
  total_size += 1 * this->sthufan_size();
  for (int i = 0; i < this->sthufan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthufan(i));
  }

  // repeated int32 isChengbao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ischengbao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ischengbao(i));
    }
    total_size += 1 * this->ischengbao_size() + data_size;
  }

  // repeated int32 Basescore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->basescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->basescore(i));
    }
    total_size += 1 * this->basescore_size() + data_size;
  }

  // repeated int32 Huscore_Huanghuang = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->huscore_huanghuang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->huscore_huanghuang(i));
    }
    total_size += 1 * this->huscore_huanghuang_size() + data_size;
  }

  // repeated int32 Gangscore_Huanghuang = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangscore_huanghuang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gangscore_huanghuang(i));
    }
    total_size += 1 * this->gangscore_huanghuang_size() + data_size;
  }

  // repeated int32 PiaoLaiziScore_Huanghuang = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaolaiziscore_huanghuang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaolaiziscore_huanghuang(i));
    }
    total_size += 1 * this->piaolaiziscore_huanghuang_size() + data_size;
  }

  // repeated .proto.game.hubeimj.tagLaizigangInfo stLaizigang = 13;
  total_size += 1 * this->stlaizigang_size();
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stlaizigang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckhubeiGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckhubeiGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckhubeiGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckhubeiGameEnd::MergeFrom(const AckhubeiGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  stendinfo_.MergeFrom(from.stendinfo_);
  isfengding_.MergeFrom(from.isfengding_);
  hutype_.MergeFrom(from.hutype_);
  sthufan_.MergeFrom(from.sthufan_);
  ischengbao_.MergeFrom(from.ischengbao_);
  basescore_.MergeFrom(from.basescore_);
  huscore_huanghuang_.MergeFrom(from.huscore_huanghuang_);
  gangscore_huanghuang_.MergeFrom(from.gangscore_huanghuang_);
  piaolaiziscore_huanghuang_.MergeFrom(from.piaolaiziscore_huanghuang_);
  stlaizigang_.MergeFrom(from.stlaizigang_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_bhucard()) {
      set_bhucard(from.bhucard());
    }
    if (from.has_hufantype()) {
      set_hufantype(from.hufantype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckhubeiGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckhubeiGameEnd::CopyFrom(const AckhubeiGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckhubeiGameEnd::IsInitialized() const {

  return true;
}

void AckhubeiGameEnd::Swap(AckhubeiGameEnd* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    stendinfo_.Swap(&other->stendinfo_);
    isfengding_.Swap(&other->isfengding_);
    hutype_.Swap(&other->hutype_);
    sthufan_.Swap(&other->sthufan_);
    std::swap(bhucard_, other->bhucard_);
    std::swap(hufantype_, other->hufantype_);
    ischengbao_.Swap(&other->ischengbao_);
    basescore_.Swap(&other->basescore_);
    huscore_huanghuang_.Swap(&other->huscore_huanghuang_);
    gangscore_huanghuang_.Swap(&other->gangscore_huanghuang_);
    piaolaiziscore_huanghuang_.Swap(&other->piaolaiziscore_huanghuang_);
    stlaizigang_.Swap(&other->stlaizigang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckhubeiGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckhubeiGameEnd_descriptor_;
  metadata.reflection = AckhubeiGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadcastLaizipi::kLaizipiCardFieldNumber;
const int AckBroadcastLaizipi::kLeftCardNumFieldNumber;
#endif  // !_MSC_VER

AckBroadcastLaizipi::AckBroadcastLaizipi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBroadcastLaizipi::InitAsDefaultInstance() {
}

AckBroadcastLaizipi::AckBroadcastLaizipi(const AckBroadcastLaizipi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBroadcastLaizipi::SharedCtor() {
  _cached_size_ = 0;
  laizipicard_ = 0;
  leftcardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadcastLaizipi::~AckBroadcastLaizipi() {
  SharedDtor();
}

void AckBroadcastLaizipi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadcastLaizipi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadcastLaizipi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadcastLaizipi_descriptor_;
}

const AckBroadcastLaizipi& AckBroadcastLaizipi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckBroadcastLaizipi* AckBroadcastLaizipi::default_instance_ = NULL;

AckBroadcastLaizipi* AckBroadcastLaizipi::New() const {
  return new AckBroadcastLaizipi;
}

void AckBroadcastLaizipi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    laizipicard_ = 0;
    leftcardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadcastLaizipi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LaizipiCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizipicard_)));
          set_has_laizipicard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBroadcastLaizipi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LaizipiCard = 1;
  if (has_laizipicard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laizipicard(), output);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBroadcastLaizipi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LaizipiCard = 1;
  if (has_laizipicard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laizipicard(), target);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBroadcastLaizipi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LaizipiCard = 1;
    if (has_laizipicard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizipicard());
    }

    // optional int32 LeftCardNum = 2;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadcastLaizipi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadcastLaizipi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadcastLaizipi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadcastLaizipi::MergeFrom(const AckBroadcastLaizipi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laizipicard()) {
      set_laizipicard(from.laizipicard());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadcastLaizipi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadcastLaizipi::CopyFrom(const AckBroadcastLaizipi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadcastLaizipi::IsInitialized() const {

  return true;
}

void AckBroadcastLaizipi::Swap(AckBroadcastLaizipi* other) {
  if (other != this) {
    std::swap(laizipicard_, other->laizipicard_);
    std::swap(leftcardnum_, other->leftcardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadcastLaizipi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadcastLaizipi_descriptor_;
  metadata.reflection = AckBroadcastLaizipi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kBankerNumFieldNumber;
const int ReordInfo::kHuNumFieldNumber;
const int ReordInfo::kPiaolaiziNumFieldNumber;
const int ReordInfo::kOuttimeNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  banker_num_ = 0;
  hu_num_ = 0;
  piaolaizi_num_ = 0;
  outtime_num_ = 0;
  totalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_num_ = 0;
    hu_num_ = 0;
    piaolaizi_num_ = 0;
    outtime_num_ = 0;
    totalscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_)));
          set_has_banker_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hu_num;
        break;
      }

      // optional int32 hu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_num_)));
          set_has_hu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaolaizi_num;
        break;
      }

      // optional int32 piaolaizi_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaolaizi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaolaizi_num_)));
          set_has_piaolaizi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outtime_num;
        break;
      }

      // optional int32 outtime_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_num_)));
          set_has_outtime_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num(), output);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hu_num(), output);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaolaizi_num(), output);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outtime_num(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num(), target);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hu_num(), target);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaolaizi_num(), target);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outtime_num(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_num = 1;
    if (has_banker_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_num());
    }

    // optional int32 hu_num = 2;
    if (has_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_num());
    }

    // optional int32 piaolaizi_num = 3;
    if (has_piaolaizi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaolaizi_num());
    }

    // optional int32 outtime_num = 4;
    if (has_outtime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime_num());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_num()) {
      set_banker_num(from.banker_num());
    }
    if (from.has_hu_num()) {
      set_hu_num(from.hu_num());
    }
    if (from.has_piaolaizi_num()) {
      set_piaolaizi_num(from.piaolaizi_num());
    }
    if (from.has_outtime_num()) {
      set_outtime_num(from.outtime_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(banker_num_, other->banker_num_);
    std::swap(hu_num_, other->hu_num_);
    std::swap(piaolaizi_num_, other->piaolaizi_num_);
    std::swap(outtime_num_, other->outtime_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    datatime_ = 0;
  }
  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hubeimj.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hubeimj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hubeimj.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

  }
  // repeated .proto.game.hubeimj.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckZimoHu_Huanghuang::kChairIDFieldNumber;
const int AckZimoHu_Huanghuang::kOpTypeFieldNumber;
#endif  // !_MSC_VER

AckZimoHu_Huanghuang::AckZimoHu_Huanghuang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckZimoHu_Huanghuang::InitAsDefaultInstance() {
}

AckZimoHu_Huanghuang::AckZimoHu_Huanghuang(const AckZimoHu_Huanghuang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckZimoHu_Huanghuang::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckZimoHu_Huanghuang::~AckZimoHu_Huanghuang() {
  SharedDtor();
}

void AckZimoHu_Huanghuang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckZimoHu_Huanghuang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckZimoHu_Huanghuang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckZimoHu_Huanghuang_descriptor_;
}

const AckZimoHu_Huanghuang& AckZimoHu_Huanghuang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckZimoHu_Huanghuang* AckZimoHu_Huanghuang::default_instance_ = NULL;

AckZimoHu_Huanghuang* AckZimoHu_Huanghuang::New() const {
  return new AckZimoHu_Huanghuang;
}

void AckZimoHu_Huanghuang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    optype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckZimoHu_Huanghuang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckZimoHu_Huanghuang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckZimoHu_Huanghuang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckZimoHu_Huanghuang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckZimoHu_Huanghuang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckZimoHu_Huanghuang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckZimoHu_Huanghuang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckZimoHu_Huanghuang::MergeFrom(const AckZimoHu_Huanghuang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckZimoHu_Huanghuang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckZimoHu_Huanghuang::CopyFrom(const AckZimoHu_Huanghuang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckZimoHu_Huanghuang::IsInitialized() const {

  return true;
}

void AckZimoHu_Huanghuang::Swap(AckZimoHu_Huanghuang* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckZimoHu_Huanghuang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckZimoHu_Huanghuang_descriptor_;
  metadata.reflection = AckZimoHu_Huanghuang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLaiziDouble::kStLaizigangFieldNumber;
#endif  // !_MSC_VER

AckLaiziDouble::AckLaiziDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLaiziDouble::InitAsDefaultInstance() {
}

AckLaiziDouble::AckLaiziDouble(const AckLaiziDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLaiziDouble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLaiziDouble::~AckLaiziDouble() {
  SharedDtor();
}

void AckLaiziDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLaiziDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLaiziDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLaiziDouble_descriptor_;
}

const AckLaiziDouble& AckLaiziDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckLaiziDouble* AckLaiziDouble::default_instance_ = NULL;

AckLaiziDouble* AckLaiziDouble::New() const {
  return new AckLaiziDouble;
}

void AckLaiziDouble::Clear() {
  stlaizigang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLaiziDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hubeimj.tagTypeDouble stLaizigang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLaizigang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stlaizigang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stLaizigang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLaiziDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hubeimj.tagTypeDouble stLaizigang = 1;
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stlaizigang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLaiziDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hubeimj.tagTypeDouble stLaizigang = 1;
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stlaizigang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLaiziDouble::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.hubeimj.tagTypeDouble stLaizigang = 1;
  total_size += 1 * this->stlaizigang_size();
  for (int i = 0; i < this->stlaizigang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stlaizigang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLaiziDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLaiziDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLaiziDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLaiziDouble::MergeFrom(const AckLaiziDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  stlaizigang_.MergeFrom(from.stlaizigang_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLaiziDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLaiziDouble::CopyFrom(const AckLaiziDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLaiziDouble::IsInitialized() const {

  return true;
}

void AckLaiziDouble::Swap(AckLaiziDouble* other) {
  if (other != this) {
    stlaizigang_.Swap(&other->stlaizigang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLaiziDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLaiziDouble_descriptor_;
  metadata.reflection = AckLaiziDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagTypeDouble::kTypeFieldNumber;
const int tagTypeDouble::kCountFieldNumber;
const int tagTypeDouble::kDoublenumFieldNumber;
#endif  // !_MSC_VER

tagTypeDouble::tagTypeDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagTypeDouble::InitAsDefaultInstance() {
}

tagTypeDouble::tagTypeDouble(const tagTypeDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagTypeDouble::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  doublenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagTypeDouble::~tagTypeDouble() {
  SharedDtor();
}

void tagTypeDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagTypeDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagTypeDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagTypeDouble_descriptor_;
}

const tagTypeDouble& tagTypeDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagTypeDouble* tagTypeDouble::default_instance_ = NULL;

tagTypeDouble* tagTypeDouble::New() const {
  return new tagTypeDouble;
}

void tagTypeDouble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
    doublenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagTypeDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Doublenum;
        break;
      }

      // optional int32 Doublenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Doublenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublenum_)));
          set_has_doublenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagTypeDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 Doublenum = 3;
  if (has_doublenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->doublenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagTypeDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 Doublenum = 3;
  if (has_doublenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->doublenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagTypeDouble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 Doublenum = 3;
    if (has_doublenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagTypeDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagTypeDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagTypeDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagTypeDouble::MergeFrom(const tagTypeDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_doublenum()) {
      set_doublenum(from.doublenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagTypeDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagTypeDouble::CopyFrom(const tagTypeDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagTypeDouble::IsInitialized() const {

  return true;
}

void tagTypeDouble::Swap(tagTypeDouble* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(doublenum_, other->doublenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagTypeDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagTypeDouble_descriptor_;
  metadata.reflection = tagTypeDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagFourCardInfo::kChairIDFieldNumber;
const int tagFourCardInfo::kCardFieldNumber;
#endif  // !_MSC_VER

tagFourCardInfo::tagFourCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagFourCardInfo::InitAsDefaultInstance() {
}

tagFourCardInfo::tagFourCardInfo(const tagFourCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagFourCardInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFourCardInfo::~tagFourCardInfo() {
  SharedDtor();
}

void tagFourCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagFourCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagFourCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagFourCardInfo_descriptor_;
}

const tagFourCardInfo& tagFourCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

tagFourCardInfo* tagFourCardInfo::default_instance_ = NULL;

tagFourCardInfo* tagFourCardInfo::New() const {
  return new tagFourCardInfo;
}

void tagFourCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagFourCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFourCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagFourCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagFourCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFourCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagFourCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagFourCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagFourCardInfo::MergeFrom(const tagFourCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagFourCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagFourCardInfo::CopyFrom(const tagFourCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFourCardInfo::IsInitialized() const {

  return true;
}

void tagFourCardInfo::Swap(tagFourCardInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagFourCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagFourCardInfo_descriptor_;
  metadata.reflection = tagFourCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLastFourCard::kStLastFourCardFieldNumber;
#endif  // !_MSC_VER

AckLastFourCard::AckLastFourCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLastFourCard::InitAsDefaultInstance() {
}

AckLastFourCard::AckLastFourCard(const AckLastFourCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLastFourCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLastFourCard::~AckLastFourCard() {
  SharedDtor();
}

void AckLastFourCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLastFourCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLastFourCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLastFourCard_descriptor_;
}

const AckLastFourCard& AckLastFourCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hubeigameproto_2eproto();
  return *default_instance_;
}

AckLastFourCard* AckLastFourCard::default_instance_ = NULL;

AckLastFourCard* AckLastFourCard::New() const {
  return new AckLastFourCard;
}

void AckLastFourCard::Clear() {
  stlastfourcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLastFourCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.hubeimj.tagFourCardInfo stLastFourCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLastFourCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stlastfourcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stLastFourCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLastFourCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.hubeimj.tagFourCardInfo stLastFourCard = 1;
  for (int i = 0; i < this->stlastfourcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stlastfourcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLastFourCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.hubeimj.tagFourCardInfo stLastFourCard = 1;
  for (int i = 0; i < this->stlastfourcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stlastfourcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLastFourCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.hubeimj.tagFourCardInfo stLastFourCard = 1;
  total_size += 1 * this->stlastfourcard_size();
  for (int i = 0; i < this->stlastfourcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stlastfourcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLastFourCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLastFourCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLastFourCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLastFourCard::MergeFrom(const AckLastFourCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  stlastfourcard_.MergeFrom(from.stlastfourcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLastFourCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLastFourCard::CopyFrom(const AckLastFourCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLastFourCard::IsInitialized() const {

  return true;
}

void AckLastFourCard::Swap(AckLastFourCard* other) {
  if (other != this) {
    stlastfourcard_.Swap(&other->stlastfourcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLastFourCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLastFourCard_descriptor_;
  metadata.reflection = AckLastFourCard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hubeimj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
