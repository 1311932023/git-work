// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanpingmahjonggame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nanpingmahjonggame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace nanpingmahjonggame {

namespace {

const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* JinZhongGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JinZhongGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhongSum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhongSum_reflection_ = NULL;
const ::google::protobuf::Descriptor* NanPingGameSence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NanPingGameSence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nanpingmahjonggame_2eproto() {
  protobuf_AddDesc_nanpingmahjonggame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nanpingmahjonggame.proto");
  GOOGLE_CHECK(file != NULL);
  Info_descriptor_ = file->message_type(0);
  static const int Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, card_num_),
  };
  Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info));
  JinZhongGangInfo_descriptor_ = file->message_type(1);
  static const int JinZhongGangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinZhongGangInfo, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinZhongGangInfo, info_),
  };
  JinZhongGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JinZhongGangInfo_descriptor_,
      JinZhongGangInfo::default_instance_,
      JinZhongGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinZhongGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JinZhongGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JinZhongGangInfo));
  GameEnd_descriptor_ = file->message_type(2);
  static const int GameEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnd, jinzhonggang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnd, jzh_times_),
  };
  GameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEnd_descriptor_,
      GameEnd::default_instance_,
      GameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEnd));
  ZhongSum_descriptor_ = file->message_type(3);
  static const int ZhongSum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhongSum, zhong_sum_),
  };
  ZhongSum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhongSum_descriptor_,
      ZhongSum::default_instance_,
      ZhongSum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhongSum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhongSum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhongSum));
  NanPingGameSence_descriptor_ = file->message_type(4);
  static const int NanPingGameSence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanPingGameSence, zhong_sum_),
  };
  NanPingGameSence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NanPingGameSence_descriptor_,
      NanPingGameSence::default_instance_,
      NanPingGameSence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanPingGameSence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NanPingGameSence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NanPingGameSence));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nanpingmahjonggame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JinZhongGangInfo_descriptor_, &JinZhongGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEnd_descriptor_, &GameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhongSum_descriptor_, &ZhongSum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NanPingGameSence_descriptor_, &NanPingGameSence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nanpingmahjonggame_2eproto() {
  delete Info::default_instance_;
  delete Info_reflection_;
  delete JinZhongGangInfo::default_instance_;
  delete JinZhongGangInfo_reflection_;
  delete GameEnd::default_instance_;
  delete GameEnd_reflection_;
  delete ZhongSum::default_instance_;
  delete ZhongSum_reflection_;
  delete NanPingGameSence::default_instance_;
  delete NanPingGameSence_reflection_;
}

void protobuf_AddDesc_nanpingmahjonggame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030nanpingmahjonggame.proto\022\035proto.game.n"
    "anpingmahjonggame\"&\n\004Info\022\014\n\004card\030\002 \003(\005\022"
    "\020\n\010card_num\030\003 \003(\005\"R\n\020JinZhongGangInfo\022\013\n"
    "\003sum\030\001 \002(\005\0221\n\004info\030\002 \003(\0132#.proto.game.na"
    "npingmahjonggame.Info\"c\n\007GameEnd\022E\n\014jinz"
    "honggang\030\001 \003(\0132/.proto.game.nanpingmahjo"
    "nggame.JinZhongGangInfo\022\021\n\tjzh_times\030\002 \002"
    "(\005\"\035\n\010ZhongSum\022\021\n\tzhong_sum\030\001 \003(\005\"N\n\020Nan"
    "PingGameSence\022:\n\tzhong_sum\030\001 \002(\0132\'.proto"
    ".game.nanpingmahjonggame.ZhongSum", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nanpingmahjonggame.proto", &protobuf_RegisterTypes);
  Info::default_instance_ = new Info();
  JinZhongGangInfo::default_instance_ = new JinZhongGangInfo();
  GameEnd::default_instance_ = new GameEnd();
  ZhongSum::default_instance_ = new ZhongSum();
  NanPingGameSence::default_instance_ = new NanPingGameSence();
  Info::default_instance_->InitAsDefaultInstance();
  JinZhongGangInfo::default_instance_->InitAsDefaultInstance();
  GameEnd::default_instance_->InitAsDefaultInstance();
  ZhongSum::default_instance_->InitAsDefaultInstance();
  NanPingGameSence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nanpingmahjonggame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nanpingmahjonggame_2eproto {
  StaticDescriptorInitializer_nanpingmahjonggame_2eproto() {
    protobuf_AddDesc_nanpingmahjonggame_2eproto();
  }
} static_descriptor_initializer_nanpingmahjonggame_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Info::kCardFieldNumber;
const int Info::kCardNumFieldNumber;
#endif  // !_MSC_VER

Info::Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Info::InitAsDefaultInstance() {
}

Info::Info(const Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info::~Info() {
  SharedDtor();
}

void Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanpingmahjonggame_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New() const {
  return new Info;
}

void Info::Clear() {
  card_.Clear();
  card_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card;
        if (input->ExpectTag(24)) goto parse_card_num;
        break;
      }

      // repeated int32 card_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_card_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  // repeated int32 card_num = 3;
  for (int i = 0; i < this->card_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->card_num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  // repeated int32 card_num = 3;
  for (int i = 0; i < this->card_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->card_num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated int32 card_num = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_num(i));
    }
    total_size += 1 * this->card_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  card_num_.MergeFrom(from.card_num_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    card_num_.Swap(&other->card_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JinZhongGangInfo::kSumFieldNumber;
const int JinZhongGangInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

JinZhongGangInfo::JinZhongGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JinZhongGangInfo::InitAsDefaultInstance() {
}

JinZhongGangInfo::JinZhongGangInfo(const JinZhongGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JinZhongGangInfo::SharedCtor() {
  _cached_size_ = 0;
  sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinZhongGangInfo::~JinZhongGangInfo() {
  SharedDtor();
}

void JinZhongGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JinZhongGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JinZhongGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JinZhongGangInfo_descriptor_;
}

const JinZhongGangInfo& JinZhongGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanpingmahjonggame_2eproto();
  return *default_instance_;
}

JinZhongGangInfo* JinZhongGangInfo::default_instance_ = NULL;

JinZhongGangInfo* JinZhongGangInfo::New() const {
  return new JinZhongGangInfo;
}

void JinZhongGangInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JinZhongGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto.game.nanpingmahjonggame.Info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinZhongGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sum(), output);
  }

  // repeated .proto.game.nanpingmahjonggame.Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JinZhongGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sum(), target);
  }

  // repeated .proto.game.nanpingmahjonggame.Info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JinZhongGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sum());
    }

  }
  // repeated .proto.game.nanpingmahjonggame.Info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinZhongGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JinZhongGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JinZhongGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JinZhongGangInfo::MergeFrom(const JinZhongGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JinZhongGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JinZhongGangInfo::CopyFrom(const JinZhongGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinZhongGangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JinZhongGangInfo::Swap(JinZhongGangInfo* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JinZhongGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JinZhongGangInfo_descriptor_;
  metadata.reflection = JinZhongGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEnd::kJinzhonggangFieldNumber;
const int GameEnd::kJzhTimesFieldNumber;
#endif  // !_MSC_VER

GameEnd::GameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEnd::InitAsDefaultInstance() {
}

GameEnd::GameEnd(const GameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEnd::SharedCtor() {
  _cached_size_ = 0;
  jzh_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEnd::~GameEnd() {
  SharedDtor();
}

void GameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEnd_descriptor_;
}

const GameEnd& GameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanpingmahjonggame_2eproto();
  return *default_instance_;
}

GameEnd* GameEnd::default_instance_ = NULL;

GameEnd* GameEnd::New() const {
  return new GameEnd;
}

void GameEnd::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    jzh_times_ = 0;
  }
  jinzhonggang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.nanpingmahjonggame.JinZhongGangInfo jinzhonggang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jinzhonggang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jinzhonggang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_jinzhonggang;
        if (input->ExpectTag(16)) goto parse_jzh_times;
        break;
      }

      // required int32 jzh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jzh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jzh_times_)));
          set_has_jzh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.nanpingmahjonggame.JinZhongGangInfo jinzhonggang = 1;
  for (int i = 0; i < this->jinzhonggang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jinzhonggang(i), output);
  }

  // required int32 jzh_times = 2;
  if (has_jzh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jzh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.nanpingmahjonggame.JinZhongGangInfo jinzhonggang = 1;
  for (int i = 0; i < this->jinzhonggang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jinzhonggang(i), target);
  }

  // required int32 jzh_times = 2;
  if (has_jzh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jzh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 jzh_times = 2;
    if (has_jzh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jzh_times());
    }

  }
  // repeated .proto.game.nanpingmahjonggame.JinZhongGangInfo jinzhonggang = 1;
  total_size += 1 * this->jinzhonggang_size();
  for (int i = 0; i < this->jinzhonggang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jinzhonggang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEnd::MergeFrom(const GameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  jinzhonggang_.MergeFrom(from.jinzhonggang_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_jzh_times()) {
      set_jzh_times(from.jzh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEnd::CopyFrom(const GameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < jinzhonggang_size(); i++) {
    if (!this->jinzhonggang(i).IsInitialized()) return false;
  }
  return true;
}

void GameEnd::Swap(GameEnd* other) {
  if (other != this) {
    jinzhonggang_.Swap(&other->jinzhonggang_);
    std::swap(jzh_times_, other->jzh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEnd_descriptor_;
  metadata.reflection = GameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhongSum::kZhongSumFieldNumber;
#endif  // !_MSC_VER

ZhongSum::ZhongSum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhongSum::InitAsDefaultInstance() {
}

ZhongSum::ZhongSum(const ZhongSum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhongSum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhongSum::~ZhongSum() {
  SharedDtor();
}

void ZhongSum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhongSum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhongSum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhongSum_descriptor_;
}

const ZhongSum& ZhongSum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanpingmahjonggame_2eproto();
  return *default_instance_;
}

ZhongSum* ZhongSum::default_instance_ = NULL;

ZhongSum* ZhongSum::New() const {
  return new ZhongSum;
}

void ZhongSum::Clear() {
  zhong_sum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhongSum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 zhong_sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhong_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_zhong_sum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhong_sum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_zhong_sum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhongSum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 zhong_sum = 1;
  for (int i = 0; i < this->zhong_sum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->zhong_sum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhongSum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 zhong_sum = 1;
  for (int i = 0; i < this->zhong_sum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->zhong_sum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhongSum::ByteSize() const {
  int total_size = 0;

  // repeated int32 zhong_sum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhong_sum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhong_sum(i));
    }
    total_size += 1 * this->zhong_sum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhongSum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhongSum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhongSum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhongSum::MergeFrom(const ZhongSum& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhong_sum_.MergeFrom(from.zhong_sum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhongSum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhongSum::CopyFrom(const ZhongSum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhongSum::IsInitialized() const {

  return true;
}

void ZhongSum::Swap(ZhongSum* other) {
  if (other != this) {
    zhong_sum_.Swap(&other->zhong_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhongSum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhongSum_descriptor_;
  metadata.reflection = ZhongSum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NanPingGameSence::kZhongSumFieldNumber;
#endif  // !_MSC_VER

NanPingGameSence::NanPingGameSence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NanPingGameSence::InitAsDefaultInstance() {
  zhong_sum_ = const_cast< ::proto::game::nanpingmahjonggame::ZhongSum*>(&::proto::game::nanpingmahjonggame::ZhongSum::default_instance());
}

NanPingGameSence::NanPingGameSence(const NanPingGameSence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NanPingGameSence::SharedCtor() {
  _cached_size_ = 0;
  zhong_sum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NanPingGameSence::~NanPingGameSence() {
  SharedDtor();
}

void NanPingGameSence::SharedDtor() {
  if (this != default_instance_) {
    delete zhong_sum_;
  }
}

void NanPingGameSence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NanPingGameSence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NanPingGameSence_descriptor_;
}

const NanPingGameSence& NanPingGameSence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nanpingmahjonggame_2eproto();
  return *default_instance_;
}

NanPingGameSence* NanPingGameSence::default_instance_ = NULL;

NanPingGameSence* NanPingGameSence::New() const {
  return new NanPingGameSence;
}

void NanPingGameSence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_zhong_sum()) {
      if (zhong_sum_ != NULL) zhong_sum_->::proto::game::nanpingmahjonggame::ZhongSum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NanPingGameSence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.game.nanpingmahjonggame.ZhongSum zhong_sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhong_sum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NanPingGameSence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.game.nanpingmahjonggame.ZhongSum zhong_sum = 1;
  if (has_zhong_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zhong_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NanPingGameSence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.game.nanpingmahjonggame.ZhongSum zhong_sum = 1;
  if (has_zhong_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zhong_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NanPingGameSence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.game.nanpingmahjonggame.ZhongSum zhong_sum = 1;
    if (has_zhong_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhong_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NanPingGameSence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NanPingGameSence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NanPingGameSence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NanPingGameSence::MergeFrom(const NanPingGameSence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zhong_sum()) {
      mutable_zhong_sum()->::proto::game::nanpingmahjonggame::ZhongSum::MergeFrom(from.zhong_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NanPingGameSence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NanPingGameSence::CopyFrom(const NanPingGameSence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanPingGameSence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NanPingGameSence::Swap(NanPingGameSence* other) {
  if (other != this) {
    std::swap(zhong_sum_, other->zhong_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NanPingGameSence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NanPingGameSence_descriptor_;
  metadata.reflection = NanPingGameSence_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nanpingmahjonggame
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
